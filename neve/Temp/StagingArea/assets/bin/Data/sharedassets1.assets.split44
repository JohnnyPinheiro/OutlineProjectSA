ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
highp uint tu0;
bool tb0;
highp vec4 t1;
mediump vec4 t16_1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec3 t4;
mediump float t16_5;
mediump vec3 t16_6;
highp vec3 t7;
highp vec2 t8;
highp float t9;
highp uint tu9;
highp float t14;
highp vec2 t16;
highp float t21;
highp float t22;
bool tb22;
void main()
{
    //Instruction 61218
    //LT
    tb0 = 0.0<_InstanceData.x;
    //Instruction 61219
    //MOVC
    t0 = (bool(tb0)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 61220
    //ADD
    t1.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 61221
    //ADD
    t2.x = t0.w + t1.x;
    //Instruction 61222
    //MAD
    t2.y = t0.w * 0.800000 + t1.y;
    //Instruction 61223
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 61224
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 61225
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 61226
    //MUL
    t16.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 61227
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 61228
    //MAD
    t2.xy = t16.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 61229
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 61230
    //MAD
    t21 = t2.y * t2.y + t2.x;
    //Instruction 61231
    //DIV
    t22 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 61232
    //MAD
    t21 = _ST_WindGlobal.y * t21 + t22;
    //Instruction 61233
    //DIV
    t22 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 61234
    //ADD
    t2.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 61235
    //MUL
    t9 = in_COLOR0.w * 255.000000;
    //Instruction 61236
    //FTOU
    tu9 = uint(t9);
    //Instruction 61237
    //MUL
    t2.x = t2.x * _TreeSize[int(tu9) + 0].x;
    //Instruction 61238
    //MUL
    t0.x = t0.x * t2.x;
    //Instruction 61239
    //MUL
    t3.xyz = t0.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 61240
    //MAD
    t0.x = in_TEXCOORD0.y * _TreeSize[int(tu9) + 0].y + _TreeSize[int(tu9) + 0].z;
    //Instruction 61241
    //MAD
    t3.w = t0.x * t0.y + t3.y;
    //Instruction 61242
    //ADD
    t0.x = t0.z + _CameraXZAngle;
    //Instruction 61243
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu9) + 0].y + 0.500000;
    //Instruction 61244
    //ROUND_NI
    t0.x = floor(t0.x);
    //Instruction 61245
    //DIV
    t0.x = t0.x / _TreeInfo[int(tu9) + 0].x;
    //Instruction 61246
    //MAD
    t7.x = (-t22) * 0.250000 + t3.w;
    //Instruction 61247
    //MAX
    t7.x = max(t7.x, 0.0);
    //Instruction 61248
    //MUL
    t7.x = t7.x * _ST_WindGlobal.z;
    //Instruction 61249
    //LOG
    t14 = log2(t7.x);
    //Instruction 61250
    //MUL
    t14 = t14 * _ST_WindGlobal.w;
    //Instruction 61251
    //EXP
    t14 = exp2(t14);
    //Instruction 61252
    //NE
    tb22 = t7.x!=0.0;
    //Instruction 61253
    //MOVC
    t7.x = (tb22) ? t14 : t7.x;
    //Instruction 61254
    //MUL
    t7.x = t7.x * t21;
    //Instruction 61255
    //MAD
    t4.xz = _ST_WindVector.xz * t7.xx + t3.xz;
    //Instruction 61256
    //MOV
    t4.y = t3.w;
    //Instruction 61257
    //DP3
    t7.x = dot(t4.xyz, t4.xyz);
    //Instruction 61258
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 61259
    //MUL
    t7.xyz = t7.xxx * t4.xyz;
    //Instruction 61260
    //DP3
    t22 = dot(t3.xzw, t3.xzw);
    //Instruction 61261
    //SQRT
    t22 = sqrt(t22);
    //Instruction 61262
    //MUL
    t7.xyz = t7.xyz * vec3(t22);
    //Instruction 61263
    //MUL
    t16_5 = _WindEnabled * _WindQuality;
    //Instruction 61264
    //LT
    tb22 = 0.0<t16_5;
    //Instruction 61265
    //MOVC
    t7.xyz = (bool(tb22)) ? t7.xyz : t3.xwz;
    //Instruction 61266
    //ADD
    t7.xyz = t7.xyz + in_POSITION0.xyz;
    //Instruction 61267
    //MUL
    t3 = t7.yyyy * glstate_matrix_mvp[1];
    //Instruction 61268
    //MAD
    t3 = glstate_matrix_mvp[0] * t7.xxxx + t3;
    //Instruction 61269
    //MAD
    t3 = glstate_matrix_mvp[2] * t7.zzzz + t3;
    //Instruction 61270
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 61271
    //MUL
    t3.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 61272
    //MUL
    t3.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 61273
    //MUL
    t3.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 61274
    //MUL
    t4.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 61275
    //MUL
    t4.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 61276
    //MUL
    t4.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 61277
    //ADD
    t2.xzw = t3.xyz + t4.xyz;
    //Instruction 61278
    //MUL
    t3.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 61279
    //MUL
    t3.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 61280
    //MUL
    t3.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 61281
    //ADD
    t2.xzw = t2.xzw + t3.xyz;
    //Instruction 61282
    //DP3
    t22 = dot(t2.xzw, t2.xzw);
    //Instruction 61283
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 61284
    //MUL
    t2.xzw = vec3(t22) * t2.xzw;
    //Instruction 61285
    //MOV
    vs_TEXCOORD0.xyz = t2.xzw;
    //Instruction 61286
    //MUL
    t3.xyz = t7.yyy * _Object2World[1].xyz;
    //Instruction 61287
    //MAD
    t3.xyz = _Object2World[0].xyz * t7.xxx + t3.xyz;
    //Instruction 61288
    //MAD
    t3.xyz = _Object2World[2].xyz * t7.zzz + t3.xyz;
    //Instruction 61289
    //ADD
    vs_TEXCOORD1.xyz = t3.xyz + _Object2World[3].xyz;
    //Instruction 61290
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 61291
    //ADD
    t1.x = t1.y + t1.x;
    //Instruction 61292
    //ADD
    t1.x = t1.z + t1.x;
    //Instruction 61293
    //FRC
    t1.x = fract(t1.x);
    //Instruction 61294
    //MUL
    t1.x = t1.x * _HueVariation.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 61295
    //MOV
    vs_TEXCOORD3.z = t1.x;
    //Instruction 61296
    //GE
    tb1 = t0.x>=(-t0.x);
    //Instruction 61297
    //FRC
    t0.x = fract(abs(t0.x));
    //Instruction 61298
    //MOVC
    t0.x = (tb1) ? t0.x : (-t0.x);
    //Instruction 61299
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu9) + 0].x + _TreeInfo[int(tu9) + 0].z;
    //Instruction 61300
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 61301
    //LT
    tb1 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 61302
    //MAD
    t8.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 61303
    //MAD
    t3.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 61304
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb1)) ? t8.xy : t3.xy;
    //Instruction 61305
    //MUL
    t1.xyz = t7.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 61306
    //MAD
    t1.xyz = glstate_matrix_mvp[0].xyw * t7.xxx + t1.xyz;
    //Instruction 61307
    //MAD
    t1.xyz = glstate_matrix_mvp[2].xyw * t7.zzz + t1.xyz;
    //Instruction 61308
    //ADD
    t1.xyz = t1.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 61309
    //MUL
    t0.x = t1.y * _ProjectionParams.x;
    //Instruction 61310
    //MUL
    t3.w = t0.x * 0.500000;
    //Instruction 61311
    //MUL
    t3.xz = t1.xz * vec2(0.500000, 0.500000);
    //Instruction 61312
    //ADD
    t3.xy = t3.zz + t3.xw;
    //Instruction 61313
    //MUL
    t3.xy = t3.xy * _ScreenParams.xy;
    //Instruction 61314
    //MUL
    t1.xy = t3.xy * vec2(0.250000, 0.250000);
    //Instruction 61315
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 61316
    //MUL
    t16_5 = t2.z * t2.z;
    //Instruction 61317
    //MAD
    t16_5 = t2.x * t2.x + (-t16_5);
    //Instruction 61318
    //MUL
    t16_1 = t2.zwwx * t2.xzww;
    //Instruction 61319
    //DP4
    t16_6.x = dot(unity_SHBr, t16_1);
    //Instruction 61320
    //DP4
    t16_6.y = dot(unity_SHBg, t16_1);
    //Instruction 61321
    //DP4
    t16_6.z = dot(unity_SHBb, t16_1);
    //Instruction 61322
    //MAD
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(t16_5) + t16_6.xyz;
    //Instruction 61323
    //MUL
    t1 = t7.yyyy * _Object2World[1];
    //Instruction 61324
    //MAD
    t1 = _Object2World[0] * t7.xxxx + t1;
    //Instruction 61325
    //MAD
    t0 = _Object2World[2] * t7.zzzz + t1;
    //Instruction 61326
    //ADD
    t0 = t0 + _Object2World[3];
    //Instruction 61327
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 61328
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 61329
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 61330
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 61331
    //MOV
    vs_TEXCOORD6 = t0;
    //Instruction 61332
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump float t16_6;
mediump vec3 t16_9;
mediump float t16_21;
void main()
{
    //Instruction 61178
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 61179
    //FRC
    t16_6 = fract(t16_0.y);
    //Instruction 61180
    //MOV
    t1.x = t16_0.x;
    //Instruction 61181
    //MAD
    t1.y = t16_6 * 0.062500 + unity_LODFade.y;
    //Instruction 61182
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 61183
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 61184
    //LT
    tb1 = t16_1<0.0;
    //Instruction 61185
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 61186
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 61187
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 61188
    //LT
    tb1 = t10_2<0.0;
    //Instruction 61189
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 61190
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 61191
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 61192
    //ADD
    t16_9.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 61193
    //MAD
    t16_9.xyz = vs_TEXCOORD3.zzz * t16_9.xyz + t10_0.xyz;
    //Instruction 61194
    //MAX
    t16_4.x = max(t16_9.z, t16_9.y);
    //Instruction 61195
    //MAX
    t16_4.x = max(t16_9.x, t16_4.x);
    //Instruction 61196
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 61197
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 61198
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_9.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 61199
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD2.xyz;
    //Instruction 61200
    //SAMPLE_C_LZ
    vec3 txVec55 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_21 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec55, 0.0);
    //Instruction 61201
    //ADD
    t16_4.x = (-_LightShadowData.x) + 1.0;
    //Instruction 61202
    //MAD
    t16_21 = t16_21 * t16_4.x + _LightShadowData.x;
    //Instruction 61203
    //MUL
    t16_4.xyz = vec3(t16_21) * _LightColor0.xyz;
    //Instruction 61204
    //MUL
    t16_4.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 61205
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 61206
    //MOV
    t16_0.w = 1.0;
    //Instruction 61207
    //DP4
    t16_5.x = dot(unity_SHAr, t16_0);
    //Instruction 61208
    //DP4
    t16_5.y = dot(unity_SHAg, t16_0);
    //Instruction 61209
    //DP4
    t16_5.z = dot(unity_SHAb, t16_0);
    //Instruction 61210
    //ADD
    t16_5.xyz = t16_5.xyz + vs_TEXCOORD5.xyz;
    //Instruction 61211
    //MUL
    t16_3.xyz = t16_3.xyz * t16_5.xyz;
    //Instruction 61212
    //DP3
    t16_21 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 61213
    //MAX
    t16_21 = max(t16_21, 0.0);
    //Instruction 61214
    //MAD
    t16_3.xyz = t16_4.xyz * vec3(t16_21) + t16_3.xyz;
    //Instruction 61215
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 61216
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 61217
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesVertex;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float angle_10;
  highp float tmpvar_11;
  tmpvar_11 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeInfo[int(tmpvar_11)];
  highp vec4 tmpvar_13;
  tmpvar_13 = _TreeSize[int(tmpvar_11)];
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (_glesVertex.xyz + tmpvar_14);
  angle_10 = _CameraXZAngle;
  highp vec4 tmpvar_16;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_16 = _InstanceData;
  } else {
    tmpvar_16 = tmpvar_1;
  };
  highp vec3 tmpvar_17;
  tmpvar_17 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_13.x) * tmpvar_16.x) * _BillboardTangent);
  billboardPos_9.xz = tmpvar_17.xz;
  billboardPos_9.y = (tmpvar_17.y + ((
    (_glesMultiTexCoord0.y * tmpvar_13.y)
   + tmpvar_13.z) * tmpvar_16.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_18;
    vPos_18 = billboardPos_9;
    highp float fMoveAmount_19;
    highp float fAdjust_20;
    highp float fLength_21;
    fLength_21 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_22;
    tmpvar_22 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_20 = tmpvar_22;
    if ((tmpvar_22 != 0.0)) {
      fAdjust_20 = pow (tmpvar_22, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_23;
    tmpvar_23.zw = vec2(0.0, 0.0);
    tmpvar_23.x = (tmpvar_15.x + tmpvar_16.w);
    tmpvar_23.y = (tmpvar_15.y + (tmpvar_16.w * 0.8));
    highp vec4 tmpvar_24;
    highp vec4 tmpvar_25;
    tmpvar_25 = abs(((
      fract((tmpvar_23 + 0.5))
     * 2.0) - 1.0));
    tmpvar_24 = (((
      (tmpvar_25 * tmpvar_25)
     * 
      (3.0 - (2.0 * tmpvar_25))
    ) - 0.5) * 2.0);
    fMoveAmount_19 = ((_ST_WindGlobal.y * (tmpvar_24.x + 
      (tmpvar_24.y * tmpvar_24.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_19 = (fMoveAmount_19 * fAdjust_20);
    vPos_18.xz = (tmpvar_17.xz + (_ST_WindVector.xz * fMoveAmount_19));
    vPos_18 = (normalize(vPos_18) * fLength_21);
    billboardPos_9 = vPos_18;
  };
  tmpvar_7.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_7.w = 1.0;
  angle_10 = (_CameraXZAngle + tmpvar_16.z);
  highp float tmpvar_26;
  tmpvar_26 = (floor((
    (angle_10 * tmpvar_12.y)
   + 0.5)) / tmpvar_12.x);
  highp float tmpvar_27;
  tmpvar_27 = (fract(abs(tmpvar_26)) * tmpvar_12.x);
  highp float tmpvar_28;
  if ((tmpvar_26 >= 0.0)) {
    tmpvar_28 = tmpvar_27;
  } else {
    tmpvar_28 = -(tmpvar_27);
  };
  highp vec4 tmpvar_29;
  tmpvar_29 = _ImageTexCoords[int((tmpvar_12.z + tmpvar_28))];
  if ((tmpvar_29.w < 0.0)) {
    tmpvar_8.xy = (tmpvar_29.xy - (tmpvar_29.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_8.xy = (tmpvar_29.xy + (tmpvar_29.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_30;
  tmpvar_30 = clamp ((fract(
    ((tmpvar_15.x + tmpvar_15.y) + tmpvar_15.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_30;
  highp vec4 hPos_31;
  hPos_31 = (glstate_matrix_mvp * tmpvar_7);
  mediump vec3 screenPos_32;
  highp vec4 o_33;
  highp vec4 tmpvar_34;
  tmpvar_34 = (hPos_31 * 0.5);
  highp vec2 tmpvar_35;
  tmpvar_35.x = tmpvar_34.x;
  tmpvar_35.y = (tmpvar_34.y * _ProjectionParams.x);
  o_33.xy = (tmpvar_35 + tmpvar_34.w);
  o_33.zw = hPos_31.zw;
  highp vec3 tmpvar_36;
  tmpvar_36 = o_33.xyw;
  screenPos_32 = tmpvar_36;
  screenPos_32.xy = (screenPos_32.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = _Color;
  highp vec3 tmpvar_37;
  tmpvar_37 = (_Object2World * tmpvar_7).xyz;
  highp vec4 v_38;
  v_38.x = _World2Object[0].x;
  v_38.y = _World2Object[1].x;
  v_38.z = _World2Object[2].x;
  v_38.w = _World2Object[3].x;
  highp vec4 v_39;
  v_39.x = _World2Object[0].y;
  v_39.y = _World2Object[1].y;
  v_39.z = _World2Object[2].y;
  v_39.w = _World2Object[3].y;
  highp vec4 v_40;
  v_40.x = _World2Object[0].z;
  v_40.y = _World2Object[1].z;
  v_40.z = _World2Object[2].z;
  v_40.w = _World2Object[3].z;
  highp vec3 tmpvar_41;
  tmpvar_41 = normalize(((
    (v_38.xyz * _BillboardNormal.x)
   + 
    (v_39.xyz * _BillboardNormal.y)
  ) + (v_40.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_41;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_42;
  tmpvar_42.w = 1.0;
  tmpvar_42.xyz = worldNormal_2;
  mediump vec4 normal_43;
  normal_43 = tmpvar_42;
  mediump vec3 x2_44;
  mediump vec4 tmpvar_45;
  tmpvar_45 = (normal_43.xyzz * normal_43.yzzx);
  x2_44.x = dot (unity_SHBr, tmpvar_45);
  x2_44.y = dot (unity_SHBg, tmpvar_45);
  x2_44.z = dot (unity_SHBb, tmpvar_45);
  highp vec3 lightColor0_46;
  lightColor0_46 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_47;
  lightColor1_47 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_48;
  lightColor2_48 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_49;
  lightColor3_49 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_50;
  lightAttenSq_50 = unity_4LightAtten0;
  highp vec3 normal_51;
  normal_51 = worldNormal_2;
  highp vec3 col_52;
  highp vec4 ndotl_53;
  highp vec4 lengthSq_54;
  highp vec4 tmpvar_55;
  tmpvar_55 = (unity_4LightPosX0 - tmpvar_37.x);
  highp vec4 tmpvar_56;
  tmpvar_56 = (unity_4LightPosY0 - tmpvar_37.y);
  highp vec4 tmpvar_57;
  tmpvar_57 = (unity_4LightPosZ0 - tmpvar_37.z);
  lengthSq_54 = (tmpvar_55 * tmpvar_55);
  lengthSq_54 = (lengthSq_54 + (tmpvar_56 * tmpvar_56));
  lengthSq_54 = (lengthSq_54 + (tmpvar_57 * tmpvar_57));
  ndotl_53 = (tmpvar_55 * normal_51.x);
  ndotl_53 = (ndotl_53 + (tmpvar_56 * normal_51.y));
  ndotl_53 = (ndotl_53 + (tmpvar_57 * normal_51.z));
  highp vec4 tmpvar_58;
  tmpvar_58 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_53 * inversesqrt(lengthSq_54)));
  ndotl_53 = tmpvar_58;
  highp vec4 tmpvar_59;
  tmpvar_59 = (tmpvar_58 * (1.0/((1.0 + 
    (lengthSq_54 * lightAttenSq_50)
  ))));
  col_52 = (lightColor0_46 * tmpvar_59.x);
  col_52 = (col_52 + (lightColor1_47 * tmpvar_59.y));
  col_52 = (col_52 + (lightColor2_48 * tmpvar_59.z));
  col_52 = (col_52 + (lightColor3_49 * tmpvar_59.w));
  tmpvar_5 = ((x2_44 + (unity_SHC.xyz * 
    ((normal_43.x * normal_43.x) - (normal_43.y * normal_43.y))
  )) + col_52);
  tmpvar_6 = (unity_World2Shadow[0] * (_Object2World * tmpvar_7));
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_37;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = screenPos_32;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_TEXCOORD6 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_13.x = tmpvar_14.x;
  projUV_13.y = ((fract(tmpvar_14.y) * 0.0625) + unity_LODFade.y);
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_16;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_17;
  x_17 = (tmpvar_10 - _Cutoff);
  if ((x_17 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_18;
  tmpvar_18 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_18.x, max (tmpvar_18.y, tmpvar_18.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_18 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp float shadow_19;
  shadow_19 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_19;
  mediump vec3 normalWorld_20;
  normalWorld_20 = tmpvar_5;
  mediump vec3 tmpvar_21;
  mediump vec3 tmpvar_22;
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = normalWorld_20;
  mediump vec3 x1_24;
  x1_24.x = dot (unity_SHAr, tmpvar_23);
  x1_24.y = dot (unity_SHAg, tmpvar_23);
  x1_24.z = dot (unity_SHAb, tmpvar_23);
  tmpvar_22 = (xlv_TEXCOORD5 + x1_24);
  tmpvar_21 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_21;
  lowp vec4 c_25;
  lowp vec4 c_26;
  lowp float diff_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_27 = tmpvar_28;
  c_26.xyz = ((tmpvar_9 * tmpvar_21) * diff_27);
  c_26.w = tmpvar_10;
  c_25.w = c_26.w;
  c_25.xyz = (c_26.xyz + (tmpvar_9 * tmpvar_22));
  c_4.xyz = c_25.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
highp uint tu0;
bool tb0;
highp vec4 t1;
bool tb1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec4 t3;
highp vec4 t4;
highp vec4 t5;
mediump float t16_5;
mediump vec3 t16_6;
mediump vec3 t16_7;
highp vec3 t8;
highp vec2 t9;
highp float t10;
highp uint tu10;
highp float t16;
highp vec2 t18;
highp float t24;
highp float t25;
bool tb25;
void main()
{
    //Instruction 62495
    //LT
    tb0 = 0.0<_InstanceData.x;
    //Instruction 62496
    //MOVC
    t0 = (bool(tb0)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 62497
    //ADD
    t1.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 62498
    //ADD
    t2.x = t0.w + t1.x;
    //Instruction 62499
    //MAD
    t2.y = t0.w * 0.800000 + t1.y;
    //Instruction 62500
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 62501
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 62502
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 62503
    //MUL
    t18.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 62504
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 62505
    //MAD
    t2.xy = t18.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 62506
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 62507
    //MAD
    t24 = t2.y * t2.y + t2.x;
    //Instruction 62508
    //DIV
    t25 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 62509
    //MAD
    t24 = _ST_WindGlobal.y * t24 + t25;
    //Instruction 62510
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 62511
    //ADD
    t2.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 62512
    //MUL
    t10 = in_COLOR0.w * 255.000000;
    //Instruction 62513
    //FTOU
    tu10 = uint(t10);
    //Instruction 62514
    //MUL
    t2.x = t2.x * _TreeSize[int(tu10) + 0].x;
    //Instruction 62515
    //MUL
    t0.x = t0.x * t2.x;
    //Instruction 62516
    //MUL
    t3.xyz = t0.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 62517
    //MAD
    t0.x = in_TEXCOORD0.y * _TreeSize[int(tu10) + 0].y + _TreeSize[int(tu10) + 0].z;
    //Instruction 62518
    //MAD
    t3.w = t0.x * t0.y + t3.y;
    //Instruction 62519
    //ADD
    t0.x = t0.z + _CameraXZAngle;
    //Instruction 62520
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu10) + 0].y + 0.500000;
    //Instruction 62521
    //ROUND_NI
    t0.x = floor(t0.x);
    //Instruction 62522
    //DIV
    t0.x = t0.x / _TreeInfo[int(tu10) + 0].x;
    //Instruction 62523
    //MAD
    t8.x = (-t25) * 0.250000 + t3.w;
    //Instruction 62524
    //MAX
    t8.x = max(t8.x, 0.0);
    //Instruction 62525
    //MUL
    t8.x = t8.x * _ST_WindGlobal.z;
    //Instruction 62526
    //LOG
    t16 = log2(t8.x);
    //Instruction 62527
    //MUL
    t16 = t16 * _ST_WindGlobal.w;
    //Instruction 62528
    //EXP
    t16 = exp2(t16);
    //Instruction 62529
    //NE
    tb25 = t8.x!=0.0;
    //Instruction 62530
    //MOVC
    t8.x = (tb25) ? t16 : t8.x;
    //Instruction 62531
    //MUL
    t8.x = t8.x * t24;
    //Instruction 62532
    //MAD
    t4.xz = _ST_WindVector.xz * t8.xx + t3.xz;
    //Instruction 62533
    //MOV
    t4.y = t3.w;
    //Instruction 62534
    //DP3
    t8.x = dot(t4.xyz, t4.xyz);
    //Instruction 62535
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 62536
    //MUL
    t8.xyz = t8.xxx * t4.xyz;
    //Instruction 62537
    //DP3
    t25 = dot(t3.xzw, t3.xzw);
    //Instruction 62538
    //SQRT
    t25 = sqrt(t25);
    //Instruction 62539
    //MUL
    t8.xyz = t8.xyz * vec3(t25);
    //Instruction 62540
    //MUL
    t16_5 = _WindEnabled * _WindQuality;
    //Instruction 62541
    //LT
    tb25 = 0.0<t16_5;
    //Instruction 62542
    //MOVC
    t8.xyz = (bool(tb25)) ? t8.xyz : t3.xwz;
    //Instruction 62543
    //ADD
    t8.xyz = t8.xyz + in_POSITION0.xyz;
    //Instruction 62544
    //MUL
    t3 = t8.yyyy * glstate_matrix_mvp[1];
    //Instruction 62545
    //MAD
    t3 = glstate_matrix_mvp[0] * t8.xxxx + t3;
    //Instruction 62546
    //MAD
    t3 = glstate_matrix_mvp[2] * t8.zzzz + t3;
    //Instruction 62547
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 62548
    //MUL
    t3.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 62549
    //MUL
    t3.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 62550
    //MUL
    t3.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 62551
    //MUL
    t4.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 62552
    //MUL
    t4.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 62553
    //MUL
    t4.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 62554
    //ADD
    t2.xzw = t3.xyz + t4.xyz;
    //Instruction 62555
    //MUL
    t3.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 62556
    //MUL
    t3.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 62557
    //MUL
    t3.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 62558
    //ADD
    t2.xzw = t2.xzw + t3.xyz;
    //Instruction 62559
    //DP3
    t25 = dot(t2.xzw, t2.xzw);
    //Instruction 62560
    //RSQ
    t25 = inversesqrt(t25);
    //Instruction 62561
    //MUL
    t2.xzw = vec3(t25) * t2.xzw;
    //Instruction 62562
    //MOV
    vs_TEXCOORD0.xyz = t2.xzw;
    //Instruction 62563
    //MUL
    t3.xyz = t8.yyy * _Object2World[1].xyz;
    //Instruction 62564
    //MAD
    t3.xyz = _Object2World[0].xyz * t8.xxx + t3.xyz;
    //Instruction 62565
    //MAD
    t3.xyz = _Object2World[2].xyz * t8.zzz + t3.xyz;
    //Instruction 62566
    //ADD
    t3.xyz = t3.xyz + _Object2World[3].xyz;
    //Instruction 62567
    //MOV
    vs_TEXCOORD1.xyz = t3.xyz;
    //Instruction 62568
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 62569
    //ADD
    t1.x = t1.y + t1.x;
    //Instruction 62570
    //ADD
    t1.x = t1.z + t1.x;
    //Instruction 62571
    //FRC
    t1.x = fract(t1.x);
    //Instruction 62572
    //MUL
    t1.x = t1.x * _HueVariation.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 62573
    //MOV
    vs_TEXCOORD3.z = t1.x;
    //Instruction 62574
    //GE
    tb1 = t0.x>=(-t0.x);
    //Instruction 62575
    //FRC
    t0.x = fract(abs(t0.x));
    //Instruction 62576
    //MOVC
    t0.x = (tb1) ? t0.x : (-t0.x);
    //Instruction 62577
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu10) + 0].x + _TreeInfo[int(tu10) + 0].z;
    //Instruction 62578
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 62579
    //LT
    tb1 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 62580
    //MAD
    t9.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 62581
    //MAD
    t4.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 62582
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb1)) ? t9.xy : t4.xy;
    //Instruction 62583
    //MUL
    t1.xyz = t8.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 62584
    //MAD
    t1.xyz = glstate_matrix_mvp[0].xyw * t8.xxx + t1.xyz;
    //Instruction 62585
    //MAD
    t1.xyz = glstate_matrix_mvp[2].xyw * t8.zzz + t1.xyz;
    //Instruction 62586
    //ADD
    t1.xyz = t1.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 62587
    //MUL
    t0.x = t1.y * _ProjectionParams.x;
    //Instruction 62588
    //MUL
    t4.w = t0.x * 0.500000;
    //Instruction 62589
    //MUL
    t4.xz = t1.xz * vec2(0.500000, 0.500000);
    //Instruction 62590
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 62591
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 62592
    //MUL
    t1.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 62593
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 62594
    //ADD
    t1 = (-t3.xxxx) + unity_4LightPosX0;
    //Instruction 62595
    //ADD
    t4 = (-t3.yyyy) + unity_4LightPosY0;
    //Instruction 62596
    //ADD
    t3 = (-t3.zzzz) + unity_4LightPosZ0;
    //Instruction 62597
    //MUL
    t5 = t2.zzzz * t4;
    //Instruction 62598
    //MUL
    t4 = t4 * t4;
    //Instruction 62599
    //MAD
    t4 = t1 * t1 + t4;
    //Instruction 62600
    //MAD
    t1 = t1 * t2.xxxx + t5;
    //Instruction 62601
    //MAD
    t1 = t3 * t2.wwww + t1;
    //Instruction 62602
    //MAD
    t3 = t3 * t3 + t4;
    //Instruction 62603
    //RSQ
    t4 = inversesqrt(t3);
    //Instruction 62604
    //MAD
    t3 = t3 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 62605
    //DIV
    t3 = vec4(1.0, 1.0, 1.0, 1.0) / t3;
    //Instruction 62606
    //MUL
    t1 = t1 * t4;
    //Instruction 62607
    //MAX
    t1 = max(t1, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 62608
    //MUL
    t1 = t3 * t1;
    //Instruction 62609
    //MUL
    t3.xyz = t1.yyy * unity_LightColor[1].xyz;
    //Instruction 62610
    //MAD
    t3.xyz = unity_LightColor[0].xyz * t1.xxx + t3.xyz;
    //Instruction 62611
    //MAD
    t1.xyz = unity_LightColor[2].xyz * t1.zzz + t3.xyz;
    //Instruction 62612
    //MAD
    t1.xyz = unity_LightColor[3].xyz * t1.www + t1.xyz;
    //Instruction 62613
    //MUL
    t16_6.x = t2.z * t2.z;
    //Instruction 62614
    //MAD
    t16_6.x = t2.x * t2.x + (-t16_6.x);
    //Instruction 62615
    //MUL
    t16_2 = t2.zwwx * t2.xzww;
    //Instruction 62616
    //DP4
    t16_7.x = dot(unity_SHBr, t16_2);
    //Instruction 62617
    //DP4
    t16_7.y = dot(unity_SHBg, t16_2);
    //Instruction 62618
    //DP4
    t16_7.z = dot(unity_SHBb, t16_2);
    //Instruction 62619
    //MAD
    t16_6.xyz = unity_SHC.xyz * t16_6.xxx + t16_7.xyz;
    //Instruction 62620
    //ADD
    t1.xyz = t1.xyz + t16_6.xyz;
    //Instruction 62621
    //MOV
    vs_TEXCOORD5.xyz = t1.xyz;
    //Instruction 62622
    //MUL
    t1 = t8.yyyy * _Object2World[1];
    //Instruction 62623
    //MAD
    t1 = _Object2World[0] * t8.xxxx + t1;
    //Instruction 62624
    //MAD
    t0 = _Object2World[2] * t8.zzzz + t1;
    //Instruction 62625
    //ADD
    t0 = t0 + _Object2World[3];
    //Instruction 62626
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 62627
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 62628
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 62629
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 62630
    //MOV
    vs_TEXCOORD6 = t0;
    //Instruction 62631
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump float t16_6;
mediump vec3 t16_9;
mediump float t16_21;
void main()
{
    //Instruction 62455
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 62456
    //FRC
    t16_6 = fract(t16_0.y);
    //Instruction 62457
    //MOV
    t1.x = t16_0.x;
    //Instruction 62458
    //MAD
    t1.y = t16_6 * 0.062500 + unity_LODFade.y;
    //Instruction 62459
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 62460
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 62461
    //LT
    tb1 = t16_1<0.0;
    //Instruction 62462
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 62463
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 62464
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 62465
    //LT
    tb1 = t10_2<0.0;
    //Instruction 62466
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 62467
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 62468
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 62469
    //ADD
    t16_9.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 62470
    //MAD
    t16_9.xyz = vs_TEXCOORD3.zzz * t16_9.xyz + t10_0.xyz;
    //Instruction 62471
    //MAX
    t16_4.x = max(t16_9.z, t16_9.y);
    //Instruction 62472
    //MAX
    t16_4.x = max(t16_9.x, t16_4.x);
    //Instruction 62473
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 62474
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 62475
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_9.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 62476
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD2.xyz;
    //Instruction 62477
    //SAMPLE_C_LZ
    vec3 txVec68 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_21 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec68, 0.0);
    //Instruction 62478
    //ADD
    t16_4.x = (-_LightShadowData.x) + 1.0;
    //Instruction 62479
    //MAD
    t16_21 = t16_21 * t16_4.x + _LightShadowData.x;
    //Instruction 62480
    //MUL
    t16_4.xyz = vec3(t16_21) * _LightColor0.xyz;
    //Instruction 62481
    //MUL
    t16_4.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 62482
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 62483
    //MOV
    t16_0.w = 1.0;
    //Instruction 62484
    //DP4
    t16_5.x = dot(unity_SHAr, t16_0);
    //Instruction 62485
    //DP4
    t16_5.y = dot(unity_SHAg, t16_0);
    //Instruction 62486
    //DP4
    t16_5.z = dot(unity_SHAb, t16_0);
    //Instruction 62487
    //ADD
    t16_5.xyz = t16_5.xyz + vs_TEXCOORD5.xyz;
    //Instruction 62488
    //MUL
    t16_3.xyz = t16_3.xyz * t16_5.xyz;
    //Instruction 62489
    //DP3
    t16_21 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 62490
    //MAX
    t16_21 = max(t16_21, 0.0);
    //Instruction 62491
    //MAD
    t16_3.xyz = t16_4.xyz * vec3(t16_21) + t16_3.xyz;
    //Instruction 62492
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 62493
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 62494
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  angle_9 = _CameraXZAngle;
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_16.xz;
  billboardPos_8.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_8;
    highp float fMoveAmount_18;
    highp float fAdjust_19;
    highp float fLength_20;
    fLength_20 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_21;
    tmpvar_21 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_19 = tmpvar_21;
    if ((tmpvar_21 != 0.0)) {
      fAdjust_19 = pow (tmpvar_21, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_22;
    tmpvar_22.zw = vec2(0.0, 0.0);
    tmpvar_22.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_22.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_23;
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    tmpvar_23 = (((
      (tmpvar_24 * tmpvar_24)
     * 
      (3.0 - (2.0 * tmpvar_24))
    ) - 0.5) * 2.0);
    fMoveAmount_18 = ((_ST_WindGlobal.y * (tmpvar_23.x + 
      (tmpvar_23.y * tmpvar_23.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_18 = (fMoveAmount_18 * fAdjust_19);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * fMoveAmount_18));
    vPos_17 = (normalize(vPos_17) * fLength_20);
    billboardPos_8 = vPos_17;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (_CameraXZAngle + tmpvar_15.z);
  highp float tmpvar_25;
  tmpvar_25 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_26;
  tmpvar_26 = (fract(abs(tmpvar_25)) * tmpvar_11.x);
  highp float tmpvar_27;
  if ((tmpvar_25 >= 0.0)) {
    tmpvar_27 = tmpvar_26;
  } else {
    tmpvar_27 = -(tmpvar_26);
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_27))];
  if ((tmpvar_28.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_28.xy - (tmpvar_28.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_28.xy + (tmpvar_28.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_29;
  hPos_29 = (glstate_matrix_mvp * tmpvar_6);
  mediump vec3 screenPos_30;
  highp vec4 o_31;
  highp vec4 tmpvar_32;
  tmpvar_32 = (hPos_29 * 0.5);
  highp vec2 tmpvar_33;
  tmpvar_33.x = tmpvar_32.x;
  tmpvar_33.y = (tmpvar_32.y * _ProjectionParams.x);
  o_31.xy = (tmpvar_33 + tmpvar_32.w);
  o_31.zw = hPos_29.zw;
  highp vec3 tmpvar_34;
  tmpvar_34 = o_31.xyw;
  screenPos_30 = tmpvar_34;
  screenPos_30.xy = (screenPos_30.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = _Color;
  highp vec3 tmpvar_35;
  tmpvar_35 = (_Object2World * tmpvar_6).xyz;
  highp vec4 v_36;
  v_36.x = _World2Object[0].x;
  v_36.y = _World2Object[1].x;
  v_36.z = _World2Object[2].x;
  v_36.w = _World2Object[3].x;
  highp vec4 v_37;
  v_37.x = _World2Object[0].y;
  v_37.y = _World2Object[1].y;
  v_37.z = _World2Object[2].y;
  v_37.w = _World2Object[3].y;
  highp vec4 v_38;
  v_38.x = _World2Object[0].z;
  v_38.y = _World2Object[1].z;
  v_38.z = _World2Object[2].z;
  v_38.w = _World2Object[3].z;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize(((
    (v_36.xyz * _BillboardNormal.x)
   + 
    (v_37.xyz * _BillboardNormal.y)
  ) + (v_38.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_39;
  highp mat3 tmpvar_40;
  tmpvar_40[0] = _Object2World[0].xyz;
  tmpvar_40[1] = _Object2World[1].xyz;
  tmpvar_40[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_41;
  tmpvar_41 = normalize((tmpvar_40 * _BillboardTangent));
  worldTangent_3 = tmpvar_41;
  lowp vec3 tmpvar_42;
  tmpvar_42 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_43;
  tmpvar_43 = -(tmpvar_42);
  worldBinormal_2 = tmpvar_43;
  highp vec4 tmpvar_44;
  tmpvar_44.x = worldTangent_3.x;
  tmpvar_44.y = worldBinormal_2.x;
  tmpvar_44.z = worldNormal_4.x;
  tmpvar_44.w = tmpvar_35.x;
  highp vec4 tmpvar_45;
  tmpvar_45.x = worldTangent_3.y;
  tmpvar_45.y = worldBinormal_2.y;
  tmpvar_45.z = worldNormal_4.y;
  tmpvar_45.w = tmpvar_35.y;
  highp vec4 tmpvar_46;
  tmpvar_46.x = worldTangent_3.z;
  tmpvar_46.y = worldBinormal_2.z;
  tmpvar_46.z = worldNormal_4.z;
  tmpvar_46.w = tmpvar_35.z;
  lowp vec4 tmpvar_47;
  tmpvar_47.w = 1.0;
  tmpvar_47.xyz = worldNormal_4;
  mediump vec4 normal_48;
  normal_48 = tmpvar_47;
  mediump vec3 x2_49;
  mediump vec4 tmpvar_50;
  tmpvar_50 = (normal_48.xyzz * normal_48.yzzx);
  x2_49.x = dot (unity_SHBr, tmpvar_50);
  x2_49.y = dot (unity_SHBg, tmpvar_50);
  x2_49.z = dot (unity_SHBb, tmpvar_50);
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_44;
  xlv_TEXCOORD1 = tmpvar_45;
  xlv_TEXCOORD2 = tmpvar_46;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = screenPos_30;
  xlv_TEXCOORD6 = (x2_49 + (unity_SHC.xyz * (
    (normal_48.x * normal_48.x)
   - 
    (normal_48.y * normal_48.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_11.x = tmpvar_12.x;
  projUV_11.y = ((fract(tmpvar_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_10 = tmpvar_14;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_15;
  x_15 = (tmpvar_9 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_16;
  tmpvar_16 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD0.xyz, tmpvar_16);
  worldN_3.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD1.xyz, tmpvar_16);
  worldN_3.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD2.xyz, tmpvar_16);
  worldN_3.z = tmpvar_19;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_20;
  normalWorld_20 = worldN_3;
  mediump vec3 tmpvar_21;
  mediump vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = normalWorld_20;
  mediump vec3 x1_23;
  x1_23.x = dot (unity_SHAr, tmpvar_22);
  x1_23.y = dot (unity_SHAg, tmpvar_22);
  x1_23.z = dot (unity_SHAb, tmpvar_22);
  tmpvar_21 = (xlv_TEXCOORD6 + x1_23);
  lowp vec4 c_24;
  lowp vec4 c_25;
  lowp float diff_26;
  mediump float tmpvar_27;
  tmpvar_27 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_26 = tmpvar_27;
  c_25.xyz = ((tmpvar_8 * tmpvar_1) * diff_26);
  c_25.w = tmpvar_9;
  c_24.w = c_25.w;
  c_24.xyz = (c_25.xyz + (tmpvar_8 * tmpvar_21));
  c_4.xyz = c_24.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec3 t0;
mediump vec4 t16_0;
highp uint tu0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
highp vec4 t3;
mediump float t16_3;
highp vec4 t4;
lowp vec3 t10_5;
mediump float t16_6;
mediump vec3 t16_7;
highp float t8;
bool tb8;
bool tb9;
highp vec2 t16;
bool tb16;
highp float t24;
highp uint tu24;
void main()
{
    //Instruction 62663
    //ADD
    t0.xy = in_POSITION0.xy + _Object2World[3].xy;
    //Instruction 62664
    //LT
    tb16 = 0.0<_InstanceData.x;
    //Instruction 62665
    //MOVC
    t1 = (bool(tb16)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 62666
    //ADD
    t2.x = t0.x + t1.w;
    //Instruction 62667
    //MAD
    t2.y = t1.w * 0.800000 + t0.y;
    //Instruction 62668
    //ADD
    t0.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 62669
    //FRC
    t0.xy = fract(t0.xy);
    //Instruction 62670
    //MAD
    t0.xy = t0.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 62671
    //MUL
    t16.xy = abs(t0.xy) * abs(t0.xy);
    //Instruction 62672
    //MAD
    t0.xy = -abs(t0.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 62673
    //MAD
    t0.xy = t16.xy * t0.xy + vec2(-0.500000, -0.500000);
    //Instruction 62674
    //ADD
    t0.xy = t0.xy + t0.xy;
    //Instruction 62675
    //MAD
    t0.x = t0.y * t0.y + t0.x;
    //Instruction 62676
    //DIV
    t8 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 62677
    //MAD
    t0.x = _ST_WindGlobal.y * t0.x + t8;
    //Instruction 62678
    //DIV
    t8 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 62679
    //ADD
    t16.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 62680
    //MUL
    t24 = in_COLOR0.w * 255.000000;
    //Instruction 62681
    //FTOU
    tu24 = uint(t24);
    //Instruction 62682
    //MUL
    t16.x = t16.x * _TreeSize[int(tu24) + 0].x;
    //Instruction 62683
    //MUL
    t16.x = t1.x * t16.x;
    //Instruction 62684
    //MUL
    t2.xyz = t16.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 62685
    //MAD
    t16.x = in_TEXCOORD0.y * _TreeSize[int(tu24) + 0].y + _TreeSize[int(tu24) + 0].z;
    //Instruction 62686
    //MAD
    t2.w = t16.x * t1.y + t2.y;
    //Instruction 62687
    //ADD
    t16.x = t1.z + _CameraXZAngle;
    //Instruction 62688
    //MAD
    t16.x = t16.x * _TreeInfo[int(tu24) + 0].y + 0.500000;
    //Instruction 62689
    //ROUND_NI
    t16.x = floor(t16.x);
    //Instruction 62690
    //DIV
    t16.x = t16.x / _TreeInfo[int(tu24) + 0].x;
    //Instruction 62691
    //MAD
    t8 = (-t8) * 0.250000 + t2.w;
    //Instruction 62692
    //MAX
    t8 = max(t8, 0.0);
    //Instruction 62693
    //MUL
    t8 = t8 * _ST_WindGlobal.z;
    //Instruction 62694
    //LOG
    t1.x = log2(t8);
    //Instruction 62695
    //MUL
    t1.x = t1.x * _ST_WindGlobal.w;
    //Instruction 62696
    //EXP
    t1.x = exp2(t1.x);
    //Instruction 62697
    //NE
    tb9 = t8!=0.0;
    //Instruction 62698
    //MOVC
    t8 = (tb9) ? t1.x : t8;
    //Instruction 62699
    //MUL
    t0.x = t8 * t0.x;
    //Instruction 62700
    //MAD
    t1.xz = _ST_WindVector.xz * t0.xx + t2.xz;
    //Instruction 62701
    //MOV
    t1.y = t2.w;
    //Instruction 62702
    //DP3
    t0.x = dot(t1.xyz, t1.xyz);
    //Instruction 62703
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 62704
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 62705
    //DP3
    t0.x = dot(t2.xzw, t2.xzw);
    //Instruction 62706
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 62707
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 62708
    //MUL
    t16_3 = _WindEnabled * _WindQuality;
    //Instruction 62709
    //LT
    tb0 = 0.0<t16_3;
    //Instruction 62710
    //MOVC
    t1.xyz = (bool(tb0)) ? t1.xyz : t2.xwz;
    //Instruction 62711
    //ADD
    t1.xyz = t1.xyz + in_POSITION0.xyz;
    //Instruction 62712
    //MUL
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 62713
    //MAD
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    //Instruction 62714
    //MAD
    t2 = glstate_matrix_mvp[2] * t1.zzzz + t2;
    //Instruction 62715
    //ADD
    gl_Position = t2 + glstate_matrix_mvp[3];
    //Instruction 62716
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 62717
    //MAD
    t2.xyz = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 62718
    //MAD
    t2.xyz = _Object2World[2].xyz * t1.zzz + t2.xyz;
    //Instruction 62719
    //ADD
    t2.xyz = t2.xyz + _Object2World[3].xyz;
    //Instruction 62720
    //MOV
    vs_TEXCOORD0.w = t2.x;
    //Instruction 62721
    //MUL
    t3.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 62722
    //MUL
    t3.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 62723
    //MUL
    t3.zw = _World2Object[2].xx * _BillboardNormal.xyzx.xx;
    //Instruction 62724
    //MUL
    t4.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 62725
    //MUL
    t4.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 62726
    //MUL
    t4.zw = _World2Object[2].yy * _BillboardNormal.xyzx.yy;
    //Instruction 62727
    //ADD
    t3 = t3 + t4;
    //Instruction 62728
    //MUL
    t4.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 62729
    //MUL
    t4.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 62730
    //MUL
    t4.zw = _World2Object[2].zz * _BillboardNormal.xyzx.zz;
    //Instruction 62731
    //ADD
    t3 = t3 + t4;
    //Instruction 62732
    //DP3
    t0.x = dot(t3.xyw, t3.xyw);
    //Instruction 62733
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 62734
    //MUL
    t3 = t0.xxxx * t3;
    //Instruction 62735
    //MUL
    t4.xyz = _Object2World[1].yzx * _BillboardTangent.xyzx.yyy;
    //Instruction 62736
    //MAD
    t4.xyz = _Object2World[0].yzx * _BillboardTangent.xyzx.xxx + t4.xyz;
    //Instruction 62737
    //MAD
    t4.xyz = _Object2World[2].yzx * _BillboardTangent.xyzx.zzz + t4.xyz;
    //Instruction 62738
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 62739
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 62740
    //MUL
    t4.xyz = t0.xxx * t4.xyz;
    //Instruction 62741
    //MUL
    t10_5.xyz = t3.wxy * t4.xyz;
    //Instruction 62742
    //MAD
    t10_5.xyz = t3.ywx * t4.yzx + (-t10_5.xyz);
    //Instruction 62743
    //MOV
    vs_TEXCOORD0.y = (-t10_5.x);
    //Instruction 62744
    //MOV
    vs_TEXCOORD0.z = t3.x;
    //Instruction 62745
    //MOV
    vs_TEXCOORD0.x = t4.z;
    //Instruction 62746
    //MOV
    vs_TEXCOORD1.w = t2.y;
    //Instruction 62747
    //MOV
    vs_TEXCOORD2.w = t2.z;
    //Instruction 62748
    //MOV
    vs_TEXCOORD1.x = t4.x;
    //Instruction 62749
    //MOV
    vs_TEXCOORD2.x = t4.y;
    //Instruction 62750
    //MOV
    vs_TEXCOORD1.z = t3.y;
    //Instruction 62751
    //MOV
    vs_TEXCOORD1.y = (-t10_5.y);
    //Instruction 62752
    //MOV
    vs_TEXCOORD2.y = (-t10_5.z);
    //Instruction 62753
    //MOV
    vs_TEXCOORD2.z = t3.w;
    //Instruction 62754
    //MOV
    vs_TEXCOORD3 = _Color;
    //Instruction 62755
    //GE
    tb0 = t16.x>=(-t16.x);
    //Instruction 62756
    //FRC
    t8 = fract(abs(t16.x));
    //Instruction 62757
    //MOVC
    t0.x = (tb0) ? t8 : (-t8);
    //Instruction 62758
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu24) + 0].x + _TreeInfo[int(tu24) + 0].z;
    //Instruction 62759
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 62760
    //LT
    tb8 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 62761
    //MAD
    t16.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 62762
    //MAD
    t2.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 62763
    //MOVC
    vs_TEXCOORD4.xy = (bool(tb8)) ? t16.xy : t2.xy;
    //Instruction 62764
    //MOV
    vs_TEXCOORD4.z = 0.0;
    //Instruction 62765
    //MUL
    t0.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 62766
    //MAD
    t0.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t0.xyz;
    //Instruction 62767
    //MAD
    t0.xyz = glstate_matrix_mvp[2].xyw * t1.zzz + t0.xyz;
    //Instruction 62768
    //ADD
    t0.xyz = t0.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 62769
    //MUL
    t1.xz = t0.xz * vec2(0.500000, 0.500000);
    //Instruction 62770
    //MUL
    t24 = t0.y * _ProjectionParams.x;
    //Instruction 62771
    //MUL
    t1.w = t24 * 0.500000;
    //Instruction 62772
    //ADD
    t1.xy = t1.zz + t1.xw;
    //Instruction 62773
    //MUL
    t1.xy = t1.xy * _ScreenParams.xy;
    //Instruction 62774
    //MUL
    t0.xy = t1.xy * vec2(0.250000, 0.250000);
    //Instruction 62775
    //MOV
    vs_TEXCOORD5.xyz = t0.xyz;
    //Instruction 62776
    //MUL
    t16_6 = t3.y * t3.y;
    //Instruction 62777
    //MAD
    t16_6 = t3.x * t3.x + (-t16_6);
    //Instruction 62778
    //MUL
    t16_0 = t3.ywzx * t3;
    //Instruction 62779
    //DP4
    t16_7.x = dot(unity_SHBr, t16_0);
    //Instruction 62780
    //DP4
    t16_7.y = dot(unity_SHBg, t16_0);
    //Instruction 62781
    //DP4
    t16_7.z = dot(unity_SHBb, t16_0);
    //Instruction 62782
    //MAD
    vs_TEXCOORD6.xyz = unity_SHC.xyz * vec3(t16_6) + t16_7.xyz;
    //Instruction 62783
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump float t16_6;
mediump float t16_21;
void main()
{
    //Instruction 62632
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    //Instruction 62633
    //FRC
    t16_6 = fract(t16_0.y);
    //Instruction 62634
    //MOV
    t1.x = t16_0.x;
    //Instruction 62635
    //MAD
    t1.y = t16_6 * 0.062500 + unity_LODFade.y;
    //Instruction 62636
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 62637
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 62638
    //LT
    tb1 = t16_1<0.0;
    //Instruction 62639
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 62640
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    //Instruction 62641
    //MAD
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 62642
    //MUL
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD3.xyz;
    //Instruction 62643
    //LT
    tb1 = t10_2.x<0.0;
    //Instruction 62644
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 62645
    //MUL
    t16_4.xyz = t16_3.xyz * _LightColor0.xyz;
    //Instruction 62646
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 62647
    //MAD
    t10_2.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 62648
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    //Instruction 62649
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    //Instruction 62650
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    //Instruction 62651
    //MOV
    t0.w = 1.0;
    //Instruction 62652
    //DP4
    t16_5.x = dot(unity_SHAr, t0);
    //Instruction 62653
    //DP4
    t16_5.y = dot(unity_SHAg, t0);
    //Instruction 62654
    //DP4
    t16_5.z = dot(unity_SHAb, t0);
    //Instruction 62655
    //DP3
    t16_21 = dot(t0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 62656
    //MAX
    t16_21 = max(t16_21, 0.0);
    //Instruction 62657
    //ADD
    t16_5.xyz = t16_5.xyz + vs_TEXCOORD6.xyz;
    //Instruction 62658
    //MUL
    t16_3.xyz = t16_3.xyz * t16_5.xyz;
    //Instruction 62659
    //MAD
    t16_3.xyz = t16_4.xyz * vec3(t16_21) + t16_3.xyz;
    //Instruction 62660
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 62661
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 62662
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesVertex;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float angle_10;
  highp float tmpvar_11;
  tmpvar_11 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeInfo[int(tmpvar_11)];
  highp vec4 tmpvar_13;
  tmpvar_13 = _TreeSize[int(tmpvar_11)];
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (_glesVertex.xyz + tmpvar_14);
  angle_10 = _CameraXZAngle;
  highp vec4 tmpvar_16;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_16 = _InstanceData;
  } else {
    tmpvar_16 = tmpvar_1;
  };
  highp vec3 tmpvar_17;
  tmpvar_17 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_13.x) * tmpvar_16.x) * _BillboardTangent);
  billboardPos_9.xz = tmpvar_17.xz;
  billboardPos_9.y = (tmpvar_17.y + ((
    (_glesMultiTexCoord0.y * tmpvar_13.y)
   + tmpvar_13.z) * tmpvar_16.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_18;
    vPos_18 = billboardPos_9;
    highp float fMoveAmount_19;
    highp float fAdjust_20;
    highp float fLength_21;
    fLength_21 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_22;
    tmpvar_22 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_20 = tmpvar_22;
    if ((tmpvar_22 != 0.0)) {
      fAdjust_20 = pow (tmpvar_22, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_23;
    tmpvar_23.zw = vec2(0.0, 0.0);
    tmpvar_23.x = (tmpvar_15.x + tmpvar_16.w);
    tmpvar_23.y = (tmpvar_15.y + (tmpvar_16.w * 0.8));
    highp vec4 tmpvar_24;
    highp vec4 tmpvar_25;
    tmpvar_25 = abs(((
      fract((tmpvar_23 + 0.5))
     * 2.0) - 1.0));
    tmpvar_24 = (((
      (tmpvar_25 * tmpvar_25)
     * 
      (3.0 - (2.0 * tmpvar_25))
    ) - 0.5) * 2.0);
    fMoveAmount_19 = ((_ST_WindGlobal.y * (tmpvar_24.x + 
      (tmpvar_24.y * tmpvar_24.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_19 = (fMoveAmount_19 * fAdjust_20);
    vPos_18.xz = (tmpvar_17.xz + (_ST_WindVector.xz * fMoveAmount_19));
    vPos_18 = (normalize(vPos_18) * fLength_21);
    billboardPos_9 = vPos_18;
  };
  tmpvar_7.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_7.w = 1.0;
  angle_10 = (_CameraXZAngle + tmpvar_16.z);
  highp float tmpvar_26;
  tmpvar_26 = (floor((
    (angle_10 * tmpvar_12.y)
   + 0.5)) / tmpvar_12.x);
  highp float tmpvar_27;
  tmpvar_27 = (fract(abs(tmpvar_26)) * tmpvar_12.x);
  highp float tmpvar_28;
  if ((tmpvar_26 >= 0.0)) {
    tmpvar_28 = tmpvar_27;
  } else {
    tmpvar_28 = -(tmpvar_27);
  };
  highp vec4 tmpvar_29;
  tmpvar_29 = _ImageTexCoords[int((tmpvar_12.z + tmpvar_28))];
  if ((tmpvar_29.w < 0.0)) {
    tmpvar_8.xy = (tmpvar_29.xy - (tmpvar_29.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_8.xy = (tmpvar_29.xy + (tmpvar_29.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_30;
  hPos_30 = (glstate_matrix_mvp * tmpvar_7);
  mediump vec3 screenPos_31;
  highp vec4 o_32;
  highp vec4 tmpvar_33;
  tmpvar_33 = (hPos_30 * 0.5);
  highp vec2 tmpvar_34;
  tmpvar_34.x = tmpvar_33.x;
  tmpvar_34.y = (tmpvar_33.y * _ProjectionParams.x);
  o_32.xy = (tmpvar_34 + tmpvar_33.w);
  o_32.zw = hPos_30.zw;
  highp vec3 tmpvar_35;
  tmpvar_35 = o_32.xyw;
  screenPos_31 = tmpvar_35;
  screenPos_31.xy = (screenPos_31.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = _Color;
  highp vec3 tmpvar_36;
  tmpvar_36 = (_Object2World * tmpvar_7).xyz;
  highp vec4 v_37;
  v_37.x = _World2Object[0].x;
  v_37.y = _World2Object[1].x;
  v_37.z = _World2Object[2].x;
  v_37.w = _World2Object[3].x;
  highp vec4 v_38;
  v_38.x = _World2Object[0].y;
  v_38.y = _World2Object[1].y;
  v_38.z = _World2Object[2].y;
  v_38.w = _World2Object[3].y;
  highp vec4 v_39;
  v_39.x = _World2Object[0].z;
  v_39.y = _World2Object[1].z;
  v_39.z = _World2Object[2].z;
  v_39.w = _World2Object[3].z;
  highp vec3 tmpvar_40;
  tmpvar_40 = normalize(((
    (v_37.xyz * _BillboardNormal.x)
   + 
    (v_38.xyz * _BillboardNormal.y)
  ) + (v_39.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_40;
  highp mat3 tmpvar_41;
  tmpvar_41[0] = _Object2World[0].xyz;
  tmpvar_41[1] = _Object2World[1].xyz;
  tmpvar_41[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_42;
  tmpvar_42 = normalize((tmpvar_41 * _BillboardTangent));
  worldTangent_3 = tmpvar_42;
  lowp vec3 tmpvar_43;
  tmpvar_43 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_44;
  tmpvar_44 = -(tmpvar_43);
  worldBinormal_2 = tmpvar_44;
  highp vec4 tmpvar_45;
  tmpvar_45.x = worldTangent_3.x;
  tmpvar_45.y = worldBinormal_2.x;
  tmpvar_45.z = worldNormal_4.x;
  tmpvar_45.w = tmpvar_36.x;
  highp vec4 tmpvar_46;
  tmpvar_46.x = worldTangent_3.y;
  tmpvar_46.y = worldBinormal_2.y;
  tmpvar_46.z = worldNormal_4.y;
  tmpvar_46.w = tmpvar_36.y;
  highp vec4 tmpvar_47;
  tmpvar_47.x = worldTangent_3.z;
  tmpvar_47.y = worldBinormal_2.z;
  tmpvar_47.z = worldNormal_4.z;
  tmpvar_47.w = tmpvar_36.z;
  lowp vec4 tmpvar_48;
  tmpvar_48.w = 1.0;
  tmpvar_48.xyz = worldNormal_4;
  mediump vec4 normal_49;
  normal_49 = tmpvar_48;
  mediump vec3 x2_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = (normal_49.xyzz * normal_49.yzzx);
  x2_50.x = dot (unity_SHBr, tmpvar_51);
  x2_50.y = dot (unity_SHBg, tmpvar_51);
  x2_50.z = dot (unity_SHBb, tmpvar_51);
  tmpvar_6 = (unity_World2Shadow[0] * (_Object2World * tmpvar_7));
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_TEXCOORD0 = tmpvar_45;
  xlv_TEXCOORD1 = tmpvar_46;
  xlv_TEXCOORD2 = tmpvar_47;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = screenPos_31;
  xlv_TEXCOORD6 = (x2_50 + (unity_SHC.xyz * (
    (normal_49.x * normal_49.x)
   - 
    (normal_49.y * normal_49.y)
  )));
  xlv_TEXCOORD7 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_16;
  x_16 = (tmpvar_10 - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7).x > 
    (xlv_TEXCOORD7.z / xlv_TEXCOORD7.w)
  )), _LightShadowData.x);
  tmpvar_18 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD0.xyz, tmpvar_17);
  worldN_4.x = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (xlv_TEXCOORD1.xyz, tmpvar_17);
  worldN_4.y = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (xlv_TEXCOORD2.xyz, tmpvar_17);
  worldN_4.z = tmpvar_22;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_18;
  mediump vec3 normalWorld_23;
  normalWorld_23 = worldN_4;
  mediump vec3 tmpvar_24;
  mediump vec3 tmpvar_25;
  mediump vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = normalWorld_23;
  mediump vec3 x1_27;
  x1_27.x = dot (unity_SHAr, tmpvar_26);
  x1_27.y = dot (unity_SHAg, tmpvar_26);
  x1_27.z = dot (unity_SHAb, tmpvar_26);
  tmpvar_25 = (xlv_TEXCOORD6 + x1_27);
  tmpvar_24 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_24;
  lowp vec4 c_28;
  lowp vec4 c_29;
  lowp float diff_30;
  mediump float tmpvar_31;
  tmpvar_31 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_30 = tmpvar_31;
  c_29.xyz = ((tmpvar_9 * tmpvar_24) * diff_30);
  c_29.w = tmpvar_10;
  c_28.w = c_29.w;
  c_28.xyz = (c_29.xyz + (tmpvar_9 * tmpvar_25));
  c_5.xyz = c_28.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesVertex;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float angle_10;
  highp float tmpvar_11;
  tmpvar_11 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeInfo[int(tmpvar_11)];
  highp vec4 tmpvar_13;
  tmpvar_13 = _TreeSize[int(tmpvar_11)];
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (_glesVertex.xyz + tmpvar_14);
  angle_10 = _CameraXZAngle;
  highp vec4 tmpvar_16;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_16 = _InstanceData;
  } else {
    tmpvar_16 = tmpvar_1;
  };
  highp vec3 tmpvar_17;
  tmpvar_17 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_13.x) * tmpvar_16.x) * _BillboardTangent);
  billboardPos_9.xz = tmpvar_17.xz;
  billboardPos_9.y = (tmpvar_17.y + ((
    (_glesMultiTexCoord0.y * tmpvar_13.y)
   + tmpvar_13.z) * tmpvar_16.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_18;
    vPos_18 = billboardPos_9;
    highp float fMoveAmount_19;
    highp float fAdjust_20;
    highp float fLength_21;
    fLength_21 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_22;
    tmpvar_22 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_20 = tmpvar_22;
    if ((tmpvar_22 != 0.0)) {
      fAdjust_20 = pow (tmpvar_22, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_23;
    tmpvar_23.zw = vec2(0.0, 0.0);
    tmpvar_23.x = (tmpvar_15.x + tmpvar_16.w);
    tmpvar_23.y = (tmpvar_15.y + (tmpvar_16.w * 0.8));
    highp vec4 tmpvar_24;
    highp vec4 tmpvar_25;
    tmpvar_25 = abs(((
      fract((tmpvar_23 + 0.5))
     * 2.0) - 1.0));
    tmpvar_24 = (((
      (tmpvar_25 * tmpvar_25)
     * 
      (3.0 - (2.0 * tmpvar_25))
    ) - 0.5) * 2.0);
    fMoveAmount_19 = ((_ST_WindGlobal.y * (tmpvar_24.x + 
      (tmpvar_24.y * tmpvar_24.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_19 = (fMoveAmount_19 * fAdjust_20);
    vPos_18.xz = (tmpvar_17.xz + (_ST_WindVector.xz * fMoveAmount_19));
    vPos_18 = (normalize(vPos_18) * fLength_21);
    billboardPos_9 = vPos_18;
  };
  tmpvar_7.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_7.w = 1.0;
  angle_10 = (_CameraXZAngle + tmpvar_16.z);
  highp float tmpvar_26;
  tmpvar_26 = (floor((
    (angle_10 * tmpvar_12.y)
   + 0.5)) / tmpvar_12.x);
  highp float tmpvar_27;
  tmpvar_27 = (fract(abs(tmpvar_26)) * tmpvar_12.x);
  highp float tmpvar_28;
  if ((tmpvar_26 >= 0.0)) {
    tmpvar_28 = tmpvar_27;
  } else {
    tmpvar_28 = -(tmpvar_27);
  };
  highp vec4 tmpvar_29;
  tmpvar_29 = _ImageTexCoords[int((tmpvar_12.z + tmpvar_28))];
  if ((tmpvar_29.w < 0.0)) {
    tmpvar_8.xy = (tmpvar_29.xy - (tmpvar_29.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_8.xy = (tmpvar_29.xy + (tmpvar_29.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_30;
  hPos_30 = (glstate_matrix_mvp * tmpvar_7);
  mediump vec3 screenPos_31;
  highp vec4 o_32;
  highp vec4 tmpvar_33;
  tmpvar_33 = (hPos_30 * 0.5);
  highp vec2 tmpvar_34;
  tmpvar_34.x = tmpvar_33.x;
  tmpvar_34.y = (tmpvar_33.y * _ProjectionParams.x);
  o_32.xy = (tmpvar_34 + tmpvar_33.w);
  o_32.zw = hPos_30.zw;
  highp vec3 tmpvar_35;
  tmpvar_35 = o_32.xyw;
  screenPos_31 = tmpvar_35;
  screenPos_31.xy = (screenPos_31.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = _Color;
  highp vec3 tmpvar_36;
  tmpvar_36 = (_Object2World * tmpvar_7).xyz;
  highp vec4 v_37;
  v_37.x = _World2Object[0].x;
  v_37.y = _World2Object[1].x;
  v_37.z = _World2Object[2].x;
  v_37.w = _World2Object[3].x;
  highp vec4 v_38;
  v_38.x = _World2Object[0].y;
  v_38.y = _World2Object[1].y;
  v_38.z = _World2Object[2].y;
  v_38.w = _World2Object[3].y;
  highp vec4 v_39;
  v_39.x = _World2Object[0].z;
  v_39.y = _World2Object[1].z;
  v_39.z = _World2Object[2].z;
  v_39.w = _World2Object[3].z;
  highp vec3 tmpvar_40;
  tmpvar_40 = normalize(((
    (v_37.xyz * _BillboardNormal.x)
   + 
    (v_38.xyz * _BillboardNormal.y)
  ) + (v_39.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_40;
  highp mat3 tmpvar_41;
  tmpvar_41[0] = _Object2World[0].xyz;
  tmpvar_41[1] = _Object2World[1].xyz;
  tmpvar_41[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_42;
  tmpvar_42 = normalize((tmpvar_41 * _BillboardTangent));
  worldTangent_3 = tmpvar_42;
  lowp vec3 tmpvar_43;
  tmpvar_43 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_44;
  tmpvar_44 = -(tmpvar_43);
  worldBinormal_2 = tmpvar_44;
  highp vec4 tmpvar_45;
  tmpvar_45.x = worldTangent_3.x;
  tmpvar_45.y = worldBinormal_2.x;
  tmpvar_45.z = worldNormal_4.x;
  tmpvar_45.w = tmpvar_36.x;
  highp vec4 tmpvar_46;
  tmpvar_46.x = worldTangent_3.y;
  tmpvar_46.y = worldBinormal_2.y;
  tmpvar_46.z = worldNormal_4.y;
  tmpvar_46.w = tmpvar_36.y;
  highp vec4 tmpvar_47;
  tmpvar_47.x = worldTangent_3.z;
  tmpvar_47.y = worldBinormal_2.z;
  tmpvar_47.z = worldNormal_4.z;
  tmpvar_47.w = tmpvar_36.z;
  lowp vec4 tmpvar_48;
  tmpvar_48.w = 1.0;
  tmpvar_48.xyz = worldNormal_4;
  mediump vec4 normal_49;
  normal_49 = tmpvar_48;
  mediump vec3 x2_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = (normal_49.xyzz * normal_49.yzzx);
  x2_50.x = dot (unity_SHBr, tmpvar_51);
  x2_50.y = dot (unity_SHBg, tmpvar_51);
  x2_50.z = dot (unity_SHBb, tmpvar_51);
  highp vec3 lightColor0_52;
  lightColor0_52 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_53;
  lightColor1_53 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_54;
  lightColor2_54 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_55;
  lightColor3_55 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_56;
  lightAttenSq_56 = unity_4LightAtten0;
  highp vec3 normal_57;
  normal_57 = worldNormal_4;
  highp vec3 col_58;
  highp vec4 ndotl_59;
  highp vec4 lengthSq_60;
  highp vec4 tmpvar_61;
  tmpvar_61 = (unity_4LightPosX0 - tmpvar_36.x);
  highp vec4 tmpvar_62;
  tmpvar_62 = (unity_4LightPosY0 - tmpvar_36.y);
  highp vec4 tmpvar_63;
  tmpvar_63 = (unity_4LightPosZ0 - tmpvar_36.z);
  lengthSq_60 = (tmpvar_61 * tmpvar_61);
  lengthSq_60 = (lengthSq_60 + (tmpvar_62 * tmpvar_62));
  lengthSq_60 = (lengthSq_60 + (tmpvar_63 * tmpvar_63));
  ndotl_59 = (tmpvar_61 * normal_57.x);
  ndotl_59 = (ndotl_59 + (tmpvar_62 * normal_57.y));
  ndotl_59 = (ndotl_59 + (tmpvar_63 * normal_57.z));
  highp vec4 tmpvar_64;
  tmpvar_64 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_59 * inversesqrt(lengthSq_60)));
  ndotl_59 = tmpvar_64;
  highp vec4 tmpvar_65;
  tmpvar_65 = (tmpvar_64 * (1.0/((1.0 + 
    (lengthSq_60 * lightAttenSq_56)
  ))));
  col_58 = (lightColor0_52 * tmpvar_65.x);
  col_58 = (col_58 + (lightColor1_53 * tmpvar_65.y));
  col_58 = (col_58 + (lightColor2_54 * tmpvar_65.z));
  col_58 = (col_58 + (lightColor3_55 * tmpvar_65.w));
  tmpvar_6 = ((x2_50 + (unity_SHC.xyz * 
    ((normal_49.x * normal_49.x) - (normal_49.y * normal_49.y))
  )) + col_58);
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_TEXCOORD0 = tmpvar_45;
  xlv_TEXCOORD1 = tmpvar_46;
  xlv_TEXCOORD2 = tmpvar_47;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = screenPos_31;
  xlv_TEXCOORD6 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_11.x = tmpvar_12.x;
  projUV_11.y = ((fract(tmpvar_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_10 = tmpvar_14;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_15;
  x_15 = (tmpvar_9 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_16;
  tmpvar_16 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD0.xyz, tmpvar_16);
  worldN_3.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD1.xyz, tmpvar_16);
  worldN_3.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD2.xyz, tmpvar_16);
  worldN_3.z = tmpvar_19;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_20;
  normalWorld_20 = worldN_3;
  mediump vec3 tmpvar_21;
  mediump vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = normalWorld_20;
  mediump vec3 x1_23;
  x1_23.x = dot (unity_SHAr, tmpvar_22);
  x1_23.y = dot (unity_SHAg, tmpvar_22);
  x1_23.z = dot (unity_SHAb, tmpvar_22);
  tmpvar_21 = (xlv_TEXCOORD6 + x1_23);
  lowp vec4 c_24;
  lowp vec4 c_25;
  lowp float diff_26;
  mediump float tmpvar_27;
  tmpvar_27 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_26 = tmpvar_27;
  c_25.xyz = ((tmpvar_8 * tmpvar_1) * diff_26);
  c_25.w = tmpvar_9;
  c_24.w = c_25.w;
  c_24.xyz = (c_25.xyz + (tmpvar_8 * tmpvar_21));
  c_4.xyz = c_24.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
highp uint tu0;
bool tb0;
highp vec4 t1;
mediump vec4 t16_1;
highp vec4 t2;
highp vec4 t3;
mediump float t16_3;
highp vec4 t4;
highp vec4 t5;
lowp vec3 t10_6;
mediump vec3 t16_7;
mediump vec3 t16_8;
highp float t9;
bool tb9;
bool tb10;
highp vec2 t18;
bool tb18;
highp float t27;
highp uint tu27;
void main()
{
    //Instruction 62815
    //ADD
    t0.xy = in_POSITION0.xy + _Object2World[3].xy;
    //Instruction 62816
    //LT
    tb18 = 0.0<_InstanceData.x;
    //Instruction 62817
    //MOVC
    t1 = (bool(tb18)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 62818
    //ADD
    t2.x = t0.x + t1.w;
    //Instruction 62819
    //MAD
    t2.y = t1.w * 0.800000 + t0.y;
    //Instruction 62820
    //ADD
    t0.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 62821
    //FRC
    t0.xy = fract(t0.xy);
    //Instruction 62822
    //MAD
    t0.xy = t0.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 62823
    //MUL
    t18.xy = abs(t0.xy) * abs(t0.xy);
    //Instruction 62824
    //MAD
    t0.xy = -abs(t0.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 62825
    //MAD
    t0.xy = t18.xy * t0.xy + vec2(-0.500000, -0.500000);
    //Instruction 62826
    //ADD
    t0.xy = t0.xy + t0.xy;
    //Instruction 62827
    //MAD
    t0.x = t0.y * t0.y + t0.x;
    //Instruction 62828
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 62829
    //MAD
    t0.x = _ST_WindGlobal.y * t0.x + t9;
    //Instruction 62830
    //DIV
    t9 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 62831
    //ADD
    t18.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 62832
    //MUL
    t27 = in_COLOR0.w * 255.000000;
    //Instruction 62833
    //FTOU
    tu27 = uint(t27);
    //Instruction 62834
    //MUL
    t18.x = t18.x * _TreeSize[int(tu27) + 0].x;
    //Instruction 62835
    //MUL
    t18.x = t1.x * t18.x;
    //Instruction 62836
    //MUL
    t2.xyz = t18.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 62837
    //MAD
    t18.x = in_TEXCOORD0.y * _TreeSize[int(tu27) + 0].y + _TreeSize[int(tu27) + 0].z;
    //Instruction 62838
    //MAD
    t2.w = t18.x * t1.y + t2.y;
    //Instruction 62839
    //ADD
    t18.x = t1.z + _CameraXZAngle;
    //Instruction 62840
    //MAD
    t18.x = t18.x * _TreeInfo[int(tu27) + 0].y + 0.500000;
    //Instruction 62841
    //ROUND_NI
    t18.x = floor(t18.x);
    //Instruction 62842
    //DIV
    t18.x = t18.x / _TreeInfo[int(tu27) + 0].x;
    //Instruction 62843
    //MAD
    t9 = (-t9) * 0.250000 + t2.w;
    //Instruction 62844
    //MAX
    t9 = max(t9, 0.0);
    //Instruction 62845
    //MUL
    t9 = t9 * _ST_WindGlobal.z;
    //Instruction 62846
    //LOG
    t1.x = log2(t9);
    //Instruction 62847
    //MUL
    t1.x = t1.x * _ST_WindGlobal.w;
    //Instruction 62848
    //EXP
    t1.x = exp2(t1.x);
    //Instruction 62849
    //NE
    tb10 = t9!=0.0;
    //Instruction 62850
    //MOVC
    t9 = (tb10) ? t1.x : t9;
    //Instruction 62851
    //MUL
    t0.x = t9 * t0.x;
    //Instruction 62852
    //MAD
    t1.xz = _ST_WindVector.xz * t0.xx + t2.xz;
    //Instruction 62853
    //MOV
    t1.y = t2.w;
    //Instruction 62854
    //DP3
    t0.x = dot(t1.xyz, t1.xyz);
    //Instruction 62855
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 62856
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 62857
    //DP3
    t0.x = dot(t2.xzw, t2.xzw);
    //Instruction 62858
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 62859
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 62860
    //MUL
    t16_3 = _WindEnabled * _WindQuality;
    //Instruction 62861
    //LT
    tb0 = 0.0<t16_3;
    //Instruction 62862
    //MOVC
    t1.xyz = (bool(tb0)) ? t1.xyz : t2.xwz;
    //Instruction 62863
    //ADD
    t1.xyz = t1.xyz + in_POSITION0.xyz;
    //Instruction 62864
    //MUL
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 62865
    //MAD
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    //Instruction 62866
    //MAD
    t2 = glstate_matrix_mvp[2] * t1.zzzz + t2;
    //Instruction 62867
    //ADD
    gl_Position = t2 + glstate_matrix_mvp[3];
    //Instruction 62868
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 62869
    //MAD
    t2.xyz = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 62870
    //MAD
    t2.xyz = _Object2World[2].xyz * t1.zzz + t2.xyz;
    //Instruction 62871
    //ADD
    t2.xyz = t2.xyz + _Object2World[3].xyz;
    //Instruction 62872
    //MOV
    vs_TEXCOORD0.w = t2.x;
    //Instruction 62873
    //MUL
    t4.xyz = _Object2World[1].yzx * _BillboardTangent.xyzx.yyy;
    //Instruction 62874
    //MAD
    t4.xyz = _Object2World[0].yzx * _BillboardTangent.xyzx.xxx + t4.xyz;
    //Instruction 62875
    //MAD
    t4.xyz = _Object2World[2].yzx * _BillboardTangent.xyzx.zzz + t4.xyz;
    //Instruction 62876
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 62877
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 62878
    //MUL
    t4.xyz = t0.xxx * t4.xyz;
    //Instruction 62879
    //MOV
    vs_TEXCOORD0.x = t4.z;
    //Instruction 62880
    //MUL
    t3.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 62881
    //MUL
    t3.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 62882
    //MUL
    t3.zw = _World2Object[2].xx * _BillboardNormal.xyzx.xx;
    //Instruction 62883
    //MUL
    t5.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 62884
    //MUL
    t5.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 62885
    //MUL
    t5.zw = _World2Object[2].yy * _BillboardNormal.xyzx.yy;
    //Instruction 62886
    //ADD
    t3 = t3 + t5;
    //Instruction 62887
    //MUL
    t5.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 62888
    //MUL
    t5.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 62889
    //MUL
    t5.zw = _World2Object[2].zz * _BillboardNormal.xyzx.zz;
    //Instruction 62890
    //ADD
    t3 = t3 + t5;
    //Instruction 62891
    //DP3
    t0.x = dot(t3.xyw, t3.xyw);
    //Instruction 62892
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 62893
    //MUL
    t3 = t0.xxxx * t3;
    //Instruction 62894
    //MUL
    t10_6.xyz = t4.xyz * t3.wxy;
    //Instruction 62895
    //MAD
    t10_6.xyz = t3.ywx * t4.yzx + (-t10_6.xyz);
    //Instruction 62896
    //MOV
    vs_TEXCOORD0.y = (-t10_6.x);
    //Instruction 62897
    //MOV
    vs_TEXCOORD0.z = t3.x;
    //Instruction 62898
    //MOV
    vs_TEXCOORD1.x = t4.x;
    //Instruction 62899
    //MOV
    vs_TEXCOORD2.x = t4.y;
    //Instruction 62900
    //MOV
    vs_TEXCOORD1.w = t2.y;
    //Instruction 62901
    //MOV
    vs_TEXCOORD1.z = t3.y;
    //Instruction 62902
    //MOV
    vs_TEXCOORD1.y = (-t10_6.y);
    //Instruction 62903
    //MOV
    vs_TEXCOORD2.y = (-t10_6.z);
    //Instruction 62904
    //MOV
    vs_TEXCOORD2.w = t2.z;
    //Instruction 62905
    //MOV
    vs_TEXCOORD2.z = t3.w;
    //Instruction 62906
    //MOV
    vs_TEXCOORD3 = _Color;
    //Instruction 62907
    //GE
    tb0 = t18.x>=(-t18.x);
    //Instruction 62908
    //FRC
    t9 = fract(abs(t18.x));
    //Instruction 62909
    //MOVC
    t0.x = (tb0) ? t9 : (-t9);
    //Instruction 62910
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu27) + 0].x + _TreeInfo[int(tu27) + 0].z;
    //Instruction 62911
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 62912
    //LT
    tb9 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 62913
    //MAD
    t18.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 62914
    //MAD
    t4.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 62915
    //MOVC
    vs_TEXCOORD4.xy = (bool(tb9)) ? t18.xy : t4.xy;
    //Instruction 62916
    //MOV
    vs_TEXCOORD4.z = 0.0;
    //Instruction 62917
    //MUL
    t0.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 62918
    //MAD
    t0.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t0.xyz;
    //Instruction 62919
    //MAD
    t0.xyz = glstate_matrix_mvp[2].xyw * t1.zzz + t0.xyz;
    //Instruction 62920
    //ADD
    t0.xyz = t0.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 62921
    //MUL
    t1.xz = t0.xz * vec2(0.500000, 0.500000);
    //Instruction 62922
    //MUL
    t27 = t0.y * _ProjectionParams.x;
    //Instruction 62923
    //MUL
    t1.w = t27 * 0.500000;
    //Instruction 62924
    //ADD
    t1.xy = t1.zz + t1.xw;
    //Instruction 62925
    //MUL
    t1.xy = t1.xy * _ScreenParams.xy;
    //Instruction 62926
    //MUL
    t0.xy = t1.xy * vec2(0.250000, 0.250000);
    //Instruction 62927
    //MOV
    vs_TEXCOORD5.xyz = t0.xyz;
    //Instruction 62928
    //ADD
    t0 = (-t2.zzzz) + unity_4LightPosZ0;
    //Instruction 62929
    //ADD
    t1 = (-t2.xxxx) + unity_4LightPosX0;
    //Instruction 62930
    //ADD
    t2 = (-t2.yyyy) + unity_4LightPosY0;
    //Instruction 62931
    //MUL
    t4 = t3.yyyy * t2;
    //Instruction 62932
    //MUL
    t2 = t2 * t2;
    //Instruction 62933
    //MAD
    t2 = t1 * t1 + t2;
    //Instruction 62934
    //MAD
    t1 = t1 * t3.xxxx + t4;
    //Instruction 62935
    //MAD
    t1 = t0 * t3.wwww + t1;
    //Instruction 62936
    //MAD
    t0 = t0 * t0 + t2;
    //Instruction 62937
    //RSQ
    t2 = inversesqrt(t0);
    //Instruction 62938
    //MAD
    t0 = t0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 62939
    //DIV
    t0 = vec4(1.0, 1.0, 1.0, 1.0) / t0;
    //Instruction 62940
    //MUL
    t1 = t1 * t2;
    //Instruction 62941
    //MAX
    t1 = max(t1, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 62942
    //MUL
    t0 = t0 * t1;
    //Instruction 62943
    //MUL
    t1.xyz = t0.yyy * unity_LightColor[1].xyz;
    //Instruction 62944
    //MAD
    t1.xyz = unity_LightColor[0].xyz * t0.xxx + t1.xyz;
    //Instruction 62945
    //MAD
    t0.xyz = unity_LightColor[2].xyz * t0.zzz + t1.xyz;
    //Instruction 62946
    //MAD
    t0.xyz = unity_LightColor[3].xyz * t0.www + t0.xyz;
    //Instruction 62947
    //MUL
    t16_7.x = t3.y * t3.y;
    //Instruction 62948
    //MAD
    t16_7.x = t3.x * t3.x + (-t16_7.x);
    //Instruction 62949
    //MUL
    t16_1 = t3.ywzx * t3;
    //Instruction 62950
    //DP4
    t16_8.x = dot(unity_SHBr, t16_1);
    //Instruction 62951
    //DP4
    t16_8.y = dot(unity_SHBg, t16_1);
    //Instruction 62952
    //DP4
    t16_8.z = dot(unity_SHBb, t16_1);
    //Instruction 62953
    //MAD
    t16_7.xyz = unity_SHC.xyz * t16_7.xxx + t16_8.xyz;
    //Instruction 62954
    //ADD
    t0.xyz = t0.xyz + t16_7.xyz;
    //Instruction 62955
    //MOV
    vs_TEXCOORD6.xyz = t0.xyz;
    //Instruction 62956
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump float t16_6;
mediump float t16_21;
void main()
{
    //Instruction 62784
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    //Instruction 62785
    //FRC
    t16_6 = fract(t16_0.y);
    //Instruction 62786
    //MOV
    t1.x = t16_0.x;
    //Instruction 62787
    //MAD
    t1.y = t16_6 * 0.062500 + unity_LODFade.y;
    //Instruction 62788
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 62789
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 62790
    //LT
    tb1 = t16_1<0.0;
    //Instruction 62791
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 62792
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    //Instruction 62793
    //MAD
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 62794
    //MUL
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD3.xyz;
    //Instruction 62795
    //LT
    tb1 = t10_2.x<0.0;
    //Instruction 62796
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 62797
    //MUL
    t16_4.xyz = t16_3.xyz * _LightColor0.xyz;
    //Instruction 62798
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 62799
    //MAD
    t10_2.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 62800
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    //Instruction 62801
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    //Instruction 62802
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    //Instruction 62803
    //MOV
    t0.w = 1.0;
    //Instruction 62804
    //DP4
    t16_5.x = dot(unity_SHAr, t0);
    //Instruction 62805
    //DP4
    t16_5.y = dot(unity_SHAg, t0);
    //Instruction 62806
    //DP4
    t16_5.z = dot(unity_SHAb, t0);
    //Instruction 62807
    //DP3
    t16_21 = dot(t0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 62808
    //MAX
    t16_21 = max(t16_21, 0.0);
    //Instruction 62809
    //ADD
    t16_5.xyz = t16_5.xyz + vs_TEXCOORD6.xyz;
    //Instruction 62810
    //MUL
    t16_3.xyz = t16_3.xyz * t16_5.xyz;
    //Instruction 62811
    //MAD
    t16_3.xyz = t16_4.xyz * vec3(t16_21) + t16_3.xyz;
    //Instruction 62812
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 62813
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 62814
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = _glesVertex;
  mediump vec3 tmpvar_9;
  highp vec3 billboardPos_10;
  highp float angle_11;
  highp float tmpvar_12;
  tmpvar_12 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_13;
  tmpvar_13 = _TreeInfo[int(tmpvar_12)];
  highp vec4 tmpvar_14;
  tmpvar_14 = _TreeSize[int(tmpvar_12)];
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  highp vec3 tmpvar_16;
  tmpvar_16 = (_glesVertex.xyz + tmpvar_15);
  angle_11 = _CameraXZAngle;
  highp vec4 tmpvar_17;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_17 = _InstanceData;
  } else {
    tmpvar_17 = tmpvar_1;
  };
  highp vec3 tmpvar_18;
  tmpvar_18 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_14.x) * tmpvar_17.x) * _BillboardTangent);
  billboardPos_10.xz = tmpvar_18.xz;
  billboardPos_10.y = (tmpvar_18.y + ((
    (_glesMultiTexCoord0.y * tmpvar_14.y)
   + tmpvar_14.z) * tmpvar_17.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_19;
    vPos_19 = billboardPos_10;
    highp float fMoveAmount_20;
    highp float fAdjust_21;
    highp float fLength_22;
    fLength_22 = sqrt(dot (billboardPos_10, billboardPos_10));
    highp float tmpvar_23;
    tmpvar_23 = (max ((billboardPos_10.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_21 = tmpvar_23;
    if ((tmpvar_23 != 0.0)) {
      fAdjust_21 = pow (tmpvar_23, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_24;
    tmpvar_24.zw = vec2(0.0, 0.0);
    tmpvar_24.x = (tmpvar_16.x + tmpvar_17.w);
    tmpvar_24.y = (tmpvar_16.y + (tmpvar_17.w * 0.8));
    highp vec4 tmpvar_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = abs(((
      fract((tmpvar_24 + 0.5))
     * 2.0) - 1.0));
    tmpvar_25 = (((
      (tmpvar_26 * tmpvar_26)
     * 
      (3.0 - (2.0 * tmpvar_26))
    ) - 0.5) * 2.0);
    fMoveAmount_20 = ((_ST_WindGlobal.y * (tmpvar_25.x + 
      (tmpvar_25.y * tmpvar_25.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_20 = (fMoveAmount_20 * fAdjust_21);
    vPos_19.xz = (tmpvar_18.xz + (_ST_WindVector.xz * fMoveAmount_20));
    vPos_19 = (normalize(vPos_19) * fLength_22);
    billboardPos_10 = vPos_19;
  };
  tmpvar_8.xyz = (_glesVertex.xyz + billboardPos_10);
  tmpvar_8.w = 1.0;
  angle_11 = (_CameraXZAngle + tmpvar_17.z);
  highp float tmpvar_27;
  tmpvar_27 = (floor((
    (angle_11 * tmpvar_13.y)
   + 0.5)) / tmpvar_13.x);
  highp float tmpvar_28;
  tmpvar_28 = (fract(abs(tmpvar_27)) * tmpvar_13.x);
  highp float tmpvar_29;
  if ((tmpvar_27 >= 0.0)) {
    tmpvar_29 = tmpvar_28;
  } else {
    tmpvar_29 = -(tmpvar_28);
  };
  highp vec4 tmpvar_30;
  tmpvar_30 = _ImageTexCoords[int((tmpvar_13.z + tmpvar_29))];
  if ((tmpvar_30.w < 0.0)) {
    tmpvar_9.xy = (tmpvar_30.xy - (tmpvar_30.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_9.xy = (tmpvar_30.xy + (tmpvar_30.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_31;
  hPos_31 = (glstate_matrix_mvp * tmpvar_8);
  mediump vec3 screenPos_32;
  highp vec4 o_33;
  highp vec4 tmpvar_34;
  tmpvar_34 = (hPos_31 * 0.5);
  highp vec2 tmpvar_35;
  tmpvar_35.x = tmpvar_34.x;
  tmpvar_35.y = (tmpvar_34.y * _ProjectionParams.x);
  o_33.xy = (tmpvar_35 + tmpvar_34.w);
  o_33.zw = hPos_31.zw;
  highp vec3 tmpvar_36;
  tmpvar_36 = o_33.xyw;
  screenPos_32 = tmpvar_36;
  screenPos_32.xy = (screenPos_32.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = _Color;
  highp vec3 tmpvar_37;
  tmpvar_37 = (_Object2World * tmpvar_8).xyz;
  highp vec4 v_38;
  v_38.x = _World2Object[0].x;
  v_38.y = _World2Object[1].x;
  v_38.z = _World2Object[2].x;
  v_38.w = _World2Object[3].x;
  highp vec4 v_39;
  v_39.x = _World2Object[0].y;
  v_39.y = _World2Object[1].y;
  v_39.z = _World2Object[2].y;
  v_39.w = _World2Object[3].y;
  highp vec4 v_40;
  v_40.x = _World2Object[0].z;
  v_40.y = _World2Object[1].z;
  v_40.z = _World2Object[2].z;
  v_40.w = _World2Object[3].z;
  highp vec3 tmpvar_41;
  tmpvar_41 = normalize(((
    (v_38.xyz * _BillboardNormal.x)
   + 
    (v_39.xyz * _BillboardNormal.y)
  ) + (v_40.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_41;
  highp mat3 tmpvar_42;
  tmpvar_42[0] = _Object2World[0].xyz;
  tmpvar_42[1] = _Object2World[1].xyz;
  tmpvar_42[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_43;
  tmpvar_43 = normalize((tmpvar_42 * _BillboardTangent));
  worldTangent_3 = tmpvar_43;
  lowp vec3 tmpvar_44;
  tmpvar_44 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_45;
  tmpvar_45 = -(tmpvar_44);
  worldBinormal_2 = tmpvar_45;
  highp vec4 tmpvar_46;
  tmpvar_46.x = worldTangent_3.x;
  tmpvar_46.y = worldBinormal_2.x;
  tmpvar_46.z = worldNormal_4.x;
  tmpvar_46.w = tmpvar_37.x;
  highp vec4 tmpvar_47;
  tmpvar_47.x = worldTangent_3.y;
  tmpvar_47.y = worldBinormal_2.y;
  tmpvar_47.z = worldNormal_4.y;
  tmpvar_47.w = tmpvar_37.y;
  highp vec4 tmpvar_48;
  tmpvar_48.x = worldTangent_3.z;
  tmpvar_48.y = worldBinormal_2.z;
  tmpvar_48.z = worldNormal_4.z;
  tmpvar_48.w = tmpvar_37.z;
  lowp vec4 tmpvar_49;
  tmpvar_49.w = 1.0;
  tmpvar_49.xyz = worldNormal_4;
  mediump vec4 normal_50;
  normal_50 = tmpvar_49;
  mediump vec3 x2_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = (normal_50.xyzz * normal_50.yzzx);
  x2_51.x = dot (unity_SHBr, tmpvar_52);
  x2_51.y = dot (unity_SHBg, tmpvar_52);
  x2_51.z = dot (unity_SHBb, tmpvar_52);
  highp vec3 lightColor0_53;
  lightColor0_53 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_54;
  lightColor1_54 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_55;
  lightColor2_55 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_56;
  lightColor3_56 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_57;
  lightAttenSq_57 = unity_4LightAtten0;
  highp vec3 normal_58;
  normal_58 = worldNormal_4;
  highp vec3 col_59;
  highp vec4 ndotl_60;
  highp vec4 lengthSq_61;
  highp vec4 tmpvar_62;
  tmpvar_62 = (unity_4LightPosX0 - tmpvar_37.x);
  highp vec4 tmpvar_63;
  tmpvar_63 = (unity_4LightPosY0 - tmpvar_37.y);
  highp vec4 tmpvar_64;
  tmpvar_64 = (unity_4LightPosZ0 - tmpvar_37.z);
  lengthSq_61 = (tmpvar_62 * tmpvar_62);
  lengthSq_61 = (lengthSq_61 + (tmpvar_63 * tmpvar_63));
  lengthSq_61 = (lengthSq_61 + (tmpvar_64 * tmpvar_64));
  ndotl_60 = (tmpvar_62 * normal_58.x);
  ndotl_60 = (ndotl_60 + (tmpvar_63 * normal_58.y));
  ndotl_60 = (ndotl_60 + (tmpvar_64 * normal_58.z));
  highp vec4 tmpvar_65;
  tmpvar_65 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_60 * inversesqrt(lengthSq_61)));
  ndotl_60 = tmpvar_65;
  highp vec4 tmpvar_66;
  tmpvar_66 = (tmpvar_65 * (1.0/((1.0 + 
    (lengthSq_61 * lightAttenSq_57)
  ))));
  col_59 = (lightColor0_53 * tmpvar_66.x);
  col_59 = (col_59 + (lightColor1_54 * tmpvar_66.y));
  col_59 = (col_59 + (lightColor2_55 * tmpvar_66.z));
  col_59 = (col_59 + (lightColor3_56 * tmpvar_66.w));
  tmpvar_6 = ((x2_51 + (unity_SHC.xyz * 
    ((normal_50.x * normal_50.x) - (normal_50.y * normal_50.y))
  )) + col_59);
  tmpvar_7 = (unity_World2Shadow[0] * (_Object2World * tmpvar_8));
  gl_Position = (glstate_matrix_mvp * tmpvar_8);
  xlv_TEXCOORD0 = tmpvar_46;
  xlv_TEXCOORD1 = tmpvar_47;
  xlv_TEXCOORD2 = tmpvar_48;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = screenPos_32;
  xlv_TEXCOORD6 = tmpvar_6;
  xlv_TEXCOORD7 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_16;
  x_16 = (tmpvar_10 - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7).x > 
    (xlv_TEXCOORD7.z / xlv_TEXCOORD7.w)
  )), _LightShadowData.x);
  tmpvar_18 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD0.xyz, tmpvar_17);
  worldN_4.x = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (xlv_TEXCOORD1.xyz, tmpvar_17);
  worldN_4.y = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (xlv_TEXCOORD2.xyz, tmpvar_17);
  worldN_4.z = tmpvar_22;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_18;
  mediump vec3 normalWorld_23;
  normalWorld_23 = worldN_4;
  mediump vec3 tmpvar_24;
  mediump vec3 tmpvar_25;
  mediump vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = normalWorld_23;
  mediump vec3 x1_27;
  x1_27.x = dot (unity_SHAr, tmpvar_26);
  x1_27.y = dot (unity_SHAg, tmpvar_26);
  x1_27.z = dot (unity_SHAb, tmpvar_26);
  tmpvar_25 = (xlv_TEXCOORD6 + x1_27);
  tmpvar_24 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_24;
  lowp vec4 c_28;
  lowp vec4 c_29;
  lowp float diff_30;
  mediump float tmpvar_31;
  tmpvar_31 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_30 = tmpvar_31;
  c_29.xyz = ((tmpvar_9 * tmpvar_24) * diff_30);
  c_29.w = tmpvar_10;
  c_28.w = c_29.w;
  c_28.xyz = (c_29.xyz + (tmpvar_9 * tmpvar_25));
  c_5.xyz = c_28.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesVertex;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float angle_10;
  highp float tmpvar_11;
  tmpvar_11 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeInfo[int(tmpvar_11)];
  highp vec4 tmpvar_13;
  tmpvar_13 = _TreeSize[int(tmpvar_11)];
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (_glesVertex.xyz + tmpvar_14);
  angle_10 = _CameraXZAngle;
  highp vec4 tmpvar_16;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_16 = _InstanceData;
  } else {
    tmpvar_16 = tmpvar_1;
  };
  highp vec3 tmpvar_17;
  tmpvar_17 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_13.x) * tmpvar_16.x) * _BillboardTangent);
  billboardPos_9.xz = tmpvar_17.xz;
  billboardPos_9.y = (tmpvar_17.y + ((
    (_glesMultiTexCoord0.y * tmpvar_13.y)
   + tmpvar_13.z) * tmpvar_16.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_18;
    vPos_18 = billboardPos_9;
    highp float fMoveAmount_19;
    highp float fAdjust_20;
    highp float fLength_21;
    fLength_21 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_22;
    tmpvar_22 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_20 = tmpvar_22;
    if ((tmpvar_22 != 0.0)) {
      fAdjust_20 = pow (tmpvar_22, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_23;
    tmpvar_23.zw = vec2(0.0, 0.0);
    tmpvar_23.x = (tmpvar_15.x + tmpvar_16.w);
    tmpvar_23.y = (tmpvar_15.y + (tmpvar_16.w * 0.8));
    highp vec4 tmpvar_24;
    highp vec4 tmpvar_25;
    tmpvar_25 = abs(((
      fract((tmpvar_23 + 0.5))
     * 2.0) - 1.0));
    tmpvar_24 = (((
      (tmpvar_25 * tmpvar_25)
     * 
      (3.0 - (2.0 * tmpvar_25))
    ) - 0.5) * 2.0);
    fMoveAmount_19 = ((_ST_WindGlobal.y * (tmpvar_24.x + 
      (tmpvar_24.y * tmpvar_24.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_19 = (fMoveAmount_19 * fAdjust_20);
    vPos_18.xz = (tmpvar_17.xz + (_ST_WindVector.xz * fMoveAmount_19));
    vPos_18 = (normalize(vPos_18) * fLength_21);
    billboardPos_9 = vPos_18;
  };
  tmpvar_7.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_7.w = 1.0;
  angle_10 = (_CameraXZAngle + tmpvar_16.z);
  highp float tmpvar_26;
  tmpvar_26 = (floor((
    (angle_10 * tmpvar_12.y)
   + 0.5)) / tmpvar_12.x);
  highp float tmpvar_27;
  tmpvar_27 = (fract(abs(tmpvar_26)) * tmpvar_12.x);
  highp float tmpvar_28;
  if ((tmpvar_26 >= 0.0)) {
    tmpvar_28 = tmpvar_27;
  } else {
    tmpvar_28 = -(tmpvar_27);
  };
  highp vec4 tmpvar_29;
  tmpvar_29 = _ImageTexCoords[int((tmpvar_12.z + tmpvar_28))];
  if ((tmpvar_29.w < 0.0)) {
    tmpvar_8.xy = (tmpvar_29.xy - (tmpvar_29.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_8.xy = (tmpvar_29.xy + (tmpvar_29.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_30;
  hPos_30 = (glstate_matrix_mvp * tmpvar_7);
  mediump vec3 screenPos_31;
  highp vec4 o_32;
  highp vec4 tmpvar_33;
  tmpvar_33 = (hPos_30 * 0.5);
  highp vec2 tmpvar_34;
  tmpvar_34.x = tmpvar_33.x;
  tmpvar_34.y = (tmpvar_33.y * _ProjectionParams.x);
  o_32.xy = (tmpvar_34 + tmpvar_33.w);
  o_32.zw = hPos_30.zw;
  highp vec3 tmpvar_35;
  tmpvar_35 = o_32.xyw;
  screenPos_31 = tmpvar_35;
  screenPos_31.xy = (screenPos_31.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = _Color;
  highp vec3 tmpvar_36;
  tmpvar_36 = (_Object2World * tmpvar_7).xyz;
  highp vec4 v_37;
  v_37.x = _World2Object[0].x;
  v_37.y = _World2Object[1].x;
  v_37.z = _World2Object[2].x;
  v_37.w = _World2Object[3].x;
  highp vec4 v_38;
  v_38.x = _World2Object[0].y;
  v_38.y = _World2Object[1].y;
  v_38.z = _World2Object[2].y;
  v_38.w = _World2Object[3].y;
  highp vec4 v_39;
  v_39.x = _World2Object[0].z;
  v_39.y = _World2Object[1].z;
  v_39.z = _World2Object[2].z;
  v_39.w = _World2Object[3].z;
  highp vec3 tmpvar_40;
  tmpvar_40 = normalize(((
    (v_37.xyz * _BillboardNormal.x)
   + 
    (v_38.xyz * _BillboardNormal.y)
  ) + (v_39.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_40;
  highp mat3 tmpvar_41;
  tmpvar_41[0] = _Object2World[0].xyz;
  tmpvar_41[1] = _Object2World[1].xyz;
  tmpvar_41[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_42;
  tmpvar_42 = normalize((tmpvar_41 * _BillboardTangent));
  worldTangent_3 = tmpvar_42;
  lowp vec3 tmpvar_43;
  tmpvar_43 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_44;
  tmpvar_44 = -(tmpvar_43);
  worldBinormal_2 = tmpvar_44;
  highp vec4 tmpvar_45;
  tmpvar_45.x = worldTangent_3.x;
  tmpvar_45.y = worldBinormal_2.x;
  tmpvar_45.z = worldNormal_4.x;
  tmpvar_45.w = tmpvar_36.x;
  highp vec4 tmpvar_46;
  tmpvar_46.x = worldTangent_3.y;
  tmpvar_46.y = worldBinormal_2.y;
  tmpvar_46.z = worldNormal_4.y;
  tmpvar_46.w = tmpvar_36.y;
  highp vec4 tmpvar_47;
  tmpvar_47.x = worldTangent_3.z;
  tmpvar_47.y = worldBinormal_2.z;
  tmpvar_47.z = worldNormal_4.z;
  tmpvar_47.w = tmpvar_36.z;
  lowp vec4 tmpvar_48;
  tmpvar_48.w = 1.0;
  tmpvar_48.xyz = worldNormal_4;
  mediump vec4 normal_49;
  normal_49 = tmpvar_48;
  mediump vec3 x2_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = (normal_49.xyzz * normal_49.yzzx);
  x2_50.x = dot (unity_SHBr, tmpvar_51);
  x2_50.y = dot (unity_SHBg, tmpvar_51);
  x2_50.z = dot (unity_SHBb, tmpvar_51);
  tmpvar_6 = (unity_World2Shadow[0] * (_Object2World * tmpvar_7));
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_TEXCOORD0 = tmpvar_45;
  xlv_TEXCOORD1 = tmpvar_46;
  xlv_TEXCOORD2 = tmpvar_47;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = screenPos_31;
  xlv_TEXCOORD6 = (x2_50 + (unity_SHC.xyz * (
    (normal_49.x * normal_49.x)
   - 
    (normal_49.y * normal_49.y)
  )));
  xlv_TEXCOORD7 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_16;
  x_16 = (tmpvar_10 - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float shadow_18;
  shadow_18 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD7.xyz) * (1.0 - _LightShadowData.x)));
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD0.xyz, tmpvar_17);
  worldN_4.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD1.xyz, tmpvar_17);
  worldN_4.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (xlv_TEXCOORD2.xyz, tmpvar_17);
  worldN_4.z = tmpvar_21;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_18;
  mediump vec3 normalWorld_22;
  normalWorld_22 = worldN_4;
  mediump vec3 tmpvar_23;
  mediump vec3 tmpvar_24;
  mediump vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = normalWorld_22;
  mediump vec3 x1_26;
  x1_26.x = dot (unity_SHAr, tmpvar_25);
  x1_26.y = dot (unity_SHAg, tmpvar_25);
  x1_26.z = dot (unity_SHAb, tmpvar_25);
  tmpvar_24 = (xlv_TEXCOORD6 + x1_26);
  tmpvar_23 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_23;
  lowp vec4 c_27;
  lowp vec4 c_28;
  lowp float diff_29;
  mediump float tmpvar_30;
  tmpvar_30 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_29 = tmpvar_30;
  c_28.xyz = ((tmpvar_9 * tmpvar_23) * diff_29);
  c_28.w = tmpvar_10;
  c_27.w = c_28.w;
  c_27.xyz = (c_28.xyz + (tmpvar_9 * tmpvar_24));
  c_5.xyz = c_27.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec4 vs_TEXCOORD7;
highp vec4 t0;
mediump vec4 t16_0;
highp uint tu0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
highp vec4 t3;
mediump float t16_3;
highp vec4 t4;
lowp vec3 t10_5;
mediump float t16_6;
mediump vec3 t16_7;
highp float t8;
bool tb8;
bool tb9;
highp vec2 t16;
bool tb16;
highp float t24;
highp uint tu24;
void main()
{
    //Instruction 62992
    //ADD
    t0.xy = in_POSITION0.xy + _Object2World[3].xy;
    //Instruction 62993
    //LT
    tb16 = 0.0<_InstanceData.x;
    //Instruction 62994
    //MOVC
    t1 = (bool(tb16)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 62995
    //ADD
    t2.x = t0.x + t1.w;
    //Instruction 62996
    //MAD
    t2.y = t1.w * 0.800000 + t0.y;
    //Instruction 62997
    //ADD
    t0.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 62998
    //FRC
    t0.xy = fract(t0.xy);
    //Instruction 62999
    //MAD
    t0.xy = t0.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 63000
    //MUL
    t16.xy = abs(t0.xy) * abs(t0.xy);
    //Instruction 63001
    //MAD
    t0.xy = -abs(t0.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 63002
    //MAD
    t0.xy = t16.xy * t0.xy + vec2(-0.500000, -0.500000);
    //Instruction 63003
    //ADD
    t0.xy = t0.xy + t0.xy;
    //Instruction 63004
    //MAD
    t0.x = t0.y * t0.y + t0.x;
    //Instruction 63005
    //DIV
    t8 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 63006
    //MAD
    t0.x = _ST_WindGlobal.y * t0.x + t8;
    //Instruction 63007
    //DIV
    t8 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 63008
    //ADD
    t16.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 63009
    //MUL
    t24 = in_COLOR0.w * 255.000000;
    //Instruction 63010
    //FTOU
    tu24 = uint(t24);
    //Instruction 63011
    //MUL
    t16.x = t16.x * _TreeSize[int(tu24) + 0].x;
    //Instruction 63012
    //MUL
    t16.x = t1.x * t16.x;
    //Instruction 63013
    //MUL
    t2.xyz = t16.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 63014
    //MAD
    t16.x = in_TEXCOORD0.y * _TreeSize[int(tu24) + 0].y + _TreeSize[int(tu24) + 0].z;
    //Instruction 63015
    //MAD
    t2.w = t16.x * t1.y + t2.y;
    //Instruction 63016
    //ADD
    t16.x = t1.z + _CameraXZAngle;
    //Instruction 63017
    //MAD
    t16.x = t16.x * _TreeInfo[int(tu24) + 0].y + 0.500000;
    //Instruction 63018
    //ROUND_NI
    t16.x = floor(t16.x);
    //Instruction 63019
    //DIV
    t16.x = t16.x / _TreeInfo[int(tu24) + 0].x;
    //Instruction 63020
    //MAD
    t8 = (-t8) * 0.250000 + t2.w;
    //Instruction 63021
    //MAX
    t8 = max(t8, 0.0);
    //Instruction 63022
    //MUL
    t8 = t8 * _ST_WindGlobal.z;
    //Instruction 63023
    //LOG
    t1.x = log2(t8);
    //Instruction 63024
    //MUL
    t1.x = t1.x * _ST_WindGlobal.w;
    //Instruction 63025
    //EXP
    t1.x = exp2(t1.x);
    //Instruction 63026
    //NE
    tb9 = t8!=0.0;
    //Instruction 63027
    //MOVC
    t8 = (tb9) ? t1.x : t8;
    //Instruction 63028
    //MUL
    t0.x = t8 * t0.x;
    //Instruction 63029
    //MAD
    t1.xz = _ST_WindVector.xz * t0.xx + t2.xz;
    //Instruction 63030
    //MOV
    t1.y = t2.w;
    //Instruction 63031
    //DP3
    t0.x = dot(t1.xyz, t1.xyz);
    //Instruction 63032
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 63033
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 63034
    //DP3
    t0.x = dot(t2.xzw, t2.xzw);
    //Instruction 63035
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 63036
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 63037
    //MUL
    t16_3 = _WindEnabled * _WindQuality;
    //Instruction 63038
    //LT
    tb0 = 0.0<t16_3;
    //Instruction 63039
    //MOVC
    t1.xyz = (bool(tb0)) ? t1.xyz : t2.xwz;
    //Instruction 63040
    //ADD
    t1.xyz = t1.xyz + in_POSITION0.xyz;
    //Instruction 63041
    //MUL
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 63042
    //MAD
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    //Instruction 63043
    //MAD
    t2 = glstate_matrix_mvp[2] * t1.zzzz + t2;
    //Instruction 63044
    //ADD
    gl_Position = t2 + glstate_matrix_mvp[3];
    //Instruction 63045
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 63046
    //MAD
    t2.xyz = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 63047
    //MAD
    t2.xyz = _Object2World[2].xyz * t1.zzz + t2.xyz;
    //Instruction 63048
    //ADD
    t2.xyz = t2.xyz + _Object2World[3].xyz;
    //Instruction 63049
    //MOV
    vs_TEXCOORD0.w = t2.x;
    //Instruction 63050
    //MUL
    t3.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 63051
    //MUL
    t3.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 63052
    //MUL
    t3.zw = _World2Object[2].xx * _BillboardNormal.xyzx.xx;
    //Instruction 63053
    //MUL
    t4.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 63054
    //MUL
    t4.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 63055
    //MUL
    t4.zw = _World2Object[2].yy * _BillboardNormal.xyzx.yy;
    //Instruction 63056
    //ADD
    t3 = t3 + t4;
    //Instruction 63057
    //MUL
    t4.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 63058
    //MUL
    t4.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 63059
    //MUL
    t4.zw = _World2Object[2].zz * _BillboardNormal.xyzx.zz;
    //Instruction 63060
    //ADD
    t3 = t3 + t4;
    //Instruction 63061
    //DP3
    t0.x = dot(t3.xyw, t3.xyw);
    //Instruction 63062
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 63063
    //MUL
    t3 = t0.xxxx * t3;
    //Instruction 63064
    //MUL
    t4.xyz = _Object2World[1].yzx * _BillboardTangent.xyzx.yyy;
    //Instruction 63065
    //MAD
    t4.xyz = _Object2World[0].yzx * _BillboardTangent.xyzx.xxx + t4.xyz;
    //Instruction 63066
    //MAD
    t4.xyz = _Object2World[2].yzx * _BillboardTangent.xyzx.zzz + t4.xyz;
    //Instruction 63067
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 63068
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 63069
    //MUL
    t4.xyz = t0.xxx * t4.xyz;
    //Instruction 63070
    //MUL
    t10_5.xyz = t3.wxy * t4.xyz;
    //Instruction 63071
    //MAD
    t10_5.xyz = t3.ywx * t4.yzx + (-t10_5.xyz);
    //Instruction 63072
    //MOV
    vs_TEXCOORD0.y = (-t10_5.x);
    //Instruction 63073
    //MOV
    vs_TEXCOORD0.z = t3.x;
    //Instruction 63074
    //MOV
    vs_TEXCOORD0.x = t4.z;
    //Instruction 63075
    //MOV
    vs_TEXCOORD1.x = t4.x;
    //Instruction 63076
    //MOV
    vs_TEXCOORD2.x = t4.y;
    //Instruction 63077
    //MOV
    vs_TEXCOORD1.w = t2.y;
    //Instruction 63078
    //MOV
    vs_TEXCOORD2.w = t2.z;
    //Instruction 63079
    //MOV
    vs_TEXCOORD1.z = t3.y;
    //Instruction 63080
    //MOV
    vs_TEXCOORD1.y = (-t10_5.y);
    //Instruction 63081
    //MOV
    vs_TEXCOORD2.y = (-t10_5.z);
    //Instruction 63082
    //MOV
    vs_TEXCOORD2.z = t3.w;
    //Instruction 63083
    //MOV
    vs_TEXCOORD3 = _Color;
    //Instruction 63084
    //GE
    tb0 = t16.x>=(-t16.x);
    //Instruction 63085
    //FRC
    t8 = fract(abs(t16.x));
    //Instruction 63086
    //MOVC
    t0.x = (tb0) ? t8 : (-t8);
    //Instruction 63087
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu24) + 0].x + _TreeInfo[int(tu24) + 0].z;
    //Instruction 63088
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 63089
    //LT
    tb8 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 63090
    //MAD
    t16.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 63091
    //MAD
    t2.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 63092
    //MOVC
    vs_TEXCOORD4.xy = (bool(tb8)) ? t16.xy : t2.xy;
    //Instruction 63093
    //MOV
    vs_TEXCOORD4.z = 0.0;
    //Instruction 63094
    //MUL
    t0.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 63095
    //MAD
    t0.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t0.xyz;
    //Instruction 63096
    //MAD
    t0.xyz = glstate_matrix_mvp[2].xyw * t1.zzz + t0.xyz;
    //Instruction 63097
    //ADD
    t0.xyz = t0.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 63098
    //MUL
    t0.w = t0.y * _ProjectionParams.x;
    //Instruction 63099
    //MUL
    t2.xzw = t0.xzw * vec3(0.500000, 0.500000, 0.500000);
    //Instruction 63100
    //ADD
    t2.xy = t2.zz + t2.xw;
    //Instruction 63101
    //MUL
    t2.xy = t2.xy * _ScreenParams.xy;
    //Instruction 63102
    //MUL
    t0.xy = t2.xy * vec2(0.250000, 0.250000);
    //Instruction 63103
    //MOV
    vs_TEXCOORD5.xyz = t0.xyz;
    //Instruction 63104
    //MUL
    t16_6 = t3.y * t3.y;
    //Instruction 63105
    //MAD
    t16_6 = t3.x * t3.x + (-t16_6);
    //Instruction 63106
    //MUL
    t16_0 = t3.ywzx * t3;
    //Instruction 63107
    //DP4
    t16_7.x = dot(unity_SHBr, t16_0);
    //Instruction 63108
    //DP4
    t16_7.y = dot(unity_SHBg, t16_0);
    //Instruction 63109
    //DP4
    t16_7.z = dot(unity_SHBb, t16_0);
    //Instruction 63110
    //MAD
    vs_TEXCOORD6.xyz = unity_SHC.xyz * vec3(t16_6) + t16_7.xyz;
    //Instruction 63111
    //MUL
    t0 = t1.yyyy * _Object2World[1];
    //Instruction 63112
    //MAD
    t0 = _Object2World[0] * t1.xxxx + t0;
    //Instruction 63113
    //MAD
    t0 = _Object2World[2] * t1.zzzz + t0;
    //Instruction 63114
    //ADD
    t0 = t0 + _Object2World[3];
    //Instruction 63115
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 63116
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 63117
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 63118
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 63119
    //MOV
    vs_TEXCOORD7 = t0;
    //Instruction 63120
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec4 vs_TEXCOORD7;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump float t16_6;
mediump float t16_21;
void main()
{
    //Instruction 62957
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    //Instruction 62958
    //FRC
    t16_6 = fract(t16_0.y);
    //Instruction 62959
    //MOV
    t1.x = t16_0.x;
    //Instruction 62960
    //MAD
    t1.y = t16_6 * 0.062500 + unity_LODFade.y;
    //Instruction 62961
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 62962
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 62963
    //LT
    tb1 = t16_1<0.0;
    //Instruction 62964
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 62965
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    //Instruction 62966
    //MAD
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 62967
    //MUL
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD3.xyz;
    //Instruction 62968
    //LT
    tb1 = t10_2.x<0.0;
    //Instruction 62969
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 62970
    //SAMPLE_C_LZ
    vec3 txVec69 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
    t16_21 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec69, 0.0);
    //Instruction 62971
    //ADD
    t16_4.x = (-_LightShadowData.x) + 1.0;
    //Instruction 62972
    //MAD
    t16_21 = t16_21 * t16_4.x + _LightShadowData.x;
    //Instruction 62973
    //MUL
    t16_4.xyz = vec3(t16_21) * _LightColor0.xyz;
    //Instruction 62974
    //MUL
    t16_4.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 62975
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 62976
    //MAD
    t10_2.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 62977
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    //Instruction 62978
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    //Instruction 62979
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    //Instruction 62980
    //MOV
    t0.w = 1.0;
    //Instruction 62981
    //DP4
    t16_5.x = dot(unity_SHAr, t0);
    //Instruction 62982
    //DP4
    t16_5.y = dot(unity_SHAg, t0);
    //Instruction 62983
    //DP4
    t16_5.z = dot(unity_SHAb, t0);
    //Instruction 62984
    //DP3
    t16_21 = dot(t0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 62985
    //MAX
    t16_21 = max(t16_21, 0.0);
    //Instruction 62986
    //ADD
    t16_5.xyz = t16_5.xyz + vs_TEXCOORD6.xyz;
    //Instruction 62987
    //MUL
    t16_3.xyz = t16_3.xyz * t16_5.xyz;
    //Instruction 62988
    //MAD
    t16_3.xyz = t16_4.xyz * vec3(t16_21) + t16_3.xyz;
    //Instruction 62989
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 62990
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 62991
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = _glesVertex;
  mediump vec3 tmpvar_9;
  highp vec3 billboardPos_10;
  highp float angle_11;
  highp float tmpvar_12;
  tmpvar_12 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_13;
  tmpvar_13 = _TreeInfo[int(tmpvar_12)];
  highp vec4 tmpvar_14;
  tmpvar_14 = _TreeSize[int(tmpvar_12)];
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  highp vec3 tmpvar_16;
  tmpvar_16 = (_glesVertex.xyz + tmpvar_15);
  angle_11 = _CameraXZAngle;
  highp vec4 tmpvar_17;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_17 = _InstanceData;
  } else {
    tmpvar_17 = tmpvar_1;
  };
  highp vec3 tmpvar_18;
  tmpvar_18 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_14.x) * tmpvar_17.x) * _BillboardTangent);
  billboardPos_10.xz = tmpvar_18.xz;
  billboardPos_10.y = (tmpvar_18.y + ((
    (_glesMultiTexCoord0.y * tmpvar_14.y)
   + tmpvar_14.z) * tmpvar_17.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_19;
    vPos_19 = billboardPos_10;
    highp float fMoveAmount_20;
    highp float fAdjust_21;
    highp float fLength_22;
    fLength_22 = sqrt(dot (billboardPos_10, billboardPos_10));
    highp float tmpvar_23;
    tmpvar_23 = (max ((billboardPos_10.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_21 = tmpvar_23;
    if ((tmpvar_23 != 0.0)) {
      fAdjust_21 = pow (tmpvar_23, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_24;
    tmpvar_24.zw = vec2(0.0, 0.0);
    tmpvar_24.x = (tmpvar_16.x + tmpvar_17.w);
    tmpvar_24.y = (tmpvar_16.y + (tmpvar_17.w * 0.8));
    highp vec4 tmpvar_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = abs(((
      fract((tmpvar_24 + 0.5))
     * 2.0) - 1.0));
    tmpvar_25 = (((
      (tmpvar_26 * tmpvar_26)
     * 
      (3.0 - (2.0 * tmpvar_26))
    ) - 0.5) * 2.0);
    fMoveAmount_20 = ((_ST_WindGlobal.y * (tmpvar_25.x + 
      (tmpvar_25.y * tmpvar_25.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_20 = (fMoveAmount_20 * fAdjust_21);
    vPos_19.xz = (tmpvar_18.xz + (_ST_WindVector.xz * fMoveAmount_20));
    vPos_19 = (normalize(vPos_19) * fLength_22);
    billboardPos_10 = vPos_19;
  };
  tmpvar_8.xyz = (_glesVertex.xyz + billboardPos_10);
  tmpvar_8.w = 1.0;
  angle_11 = (_CameraXZAngle + tmpvar_17.z);
  highp float tmpvar_27;
  tmpvar_27 = (floor((
    (angle_11 * tmpvar_13.y)
   + 0.5)) / tmpvar_13.x);
  highp float tmpvar_28;
  tmpvar_28 = (fract(abs(tmpvar_27)) * tmpvar_13.x);
  highp float tmpvar_29;
  if ((tmpvar_27 >= 0.0)) {
    tmpvar_29 = tmpvar_28;
  } else {
    tmpvar_29 = -(tmpvar_28);
  };
  highp vec4 tmpvar_30;
  tmpvar_30 = _ImageTexCoords[int((tmpvar_13.z + tmpvar_29))];
  if ((tmpvar_30.w < 0.0)) {
    tmpvar_9.xy = (tmpvar_30.xy - (tmpvar_30.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_9.xy = (tmpvar_30.xy + (tmpvar_30.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_31;
  hPos_31 = (glstate_matrix_mvp * tmpvar_8);
  mediump vec3 screenPos_32;
  highp vec4 o_33;
  highp vec4 tmpvar_34;
  tmpvar_34 = (hPos_31 * 0.5);
  highp vec2 tmpvar_35;
  tmpvar_35.x = tmpvar_34.x;
  tmpvar_35.y = (tmpvar_34.y * _ProjectionParams.x);
  o_33.xy = (tmpvar_35 + tmpvar_34.w);
  o_33.zw = hPos_31.zw;
  highp vec3 tmpvar_36;
  tmpvar_36 = o_33.xyw;
  screenPos_32 = tmpvar_36;
  screenPos_32.xy = (screenPos_32.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = _Color;
  highp vec3 tmpvar_37;
  tmpvar_37 = (_Object2World * tmpvar_8).xyz;
  highp vec4 v_38;
  v_38.x = _World2Object[0].x;
  v_38.y = _World2Object[1].x;
  v_38.z = _World2Object[2].x;
  v_38.w = _World2Object[3].x;
  highp vec4 v_39;
  v_39.x = _World2Object[0].y;
  v_39.y = _World2Object[1].y;
  v_39.z = _World2Object[2].y;
  v_39.w = _World2Object[3].y;
  highp vec4 v_40;
  v_40.x = _World2Object[0].z;
  v_40.y = _World2Object[1].z;
  v_40.z = _World2Object[2].z;
  v_40.w = _World2Object[3].z;
  highp vec3 tmpvar_41;
  tmpvar_41 = normalize(((
    (v_38.xyz * _BillboardNormal.x)
   + 
    (v_39.xyz * _BillboardNormal.y)
  ) + (v_40.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_41;
  highp mat3 tmpvar_42;
  tmpvar_42[0] = _Object2World[0].xyz;
  tmpvar_42[1] = _Object2World[1].xyz;
  tmpvar_42[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_43;
  tmpvar_43 = normalize((tmpvar_42 * _BillboardTangent));
  worldTangent_3 = tmpvar_43;
  lowp vec3 tmpvar_44;
  tmpvar_44 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_45;
  tmpvar_45 = -(tmpvar_44);
  worldBinormal_2 = tmpvar_45;
  highp vec4 tmpvar_46;
  tmpvar_46.x = worldTangent_3.x;
  tmpvar_46.y = worldBinormal_2.x;
  tmpvar_46.z = worldNormal_4.x;
  tmpvar_46.w = tmpvar_37.x;
  highp vec4 tmpvar_47;
  tmpvar_47.x = worldTangent_3.y;
  tmpvar_47.y = worldBinormal_2.y;
  tmpvar_47.z = worldNormal_4.y;
  tmpvar_47.w = tmpvar_37.y;
  highp vec4 tmpvar_48;
  tmpvar_48.x = worldTangent_3.z;
  tmpvar_48.y = worldBinormal_2.z;
  tmpvar_48.z = worldNormal_4.z;
  tmpvar_48.w = tmpvar_37.z;
  lowp vec4 tmpvar_49;
  tmpvar_49.w = 1.0;
  tmpvar_49.xyz = worldNormal_4;
  mediump vec4 normal_50;
  normal_50 = tmpvar_49;
  mediump vec3 x2_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = (normal_50.xyzz * normal_50.yzzx);
  x2_51.x = dot (unity_SHBr, tmpvar_52);
  x2_51.y = dot (unity_SHBg, tmpvar_52);
  x2_51.z = dot (unity_SHBb, tmpvar_52);
  highp vec3 lightColor0_53;
  lightColor0_53 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_54;
  lightColor1_54 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_55;
  lightColor2_55 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_56;
  lightColor3_56 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_57;
  lightAttenSq_57 = unity_4LightAtten0;
  highp vec3 normal_58;
  normal_58 = worldNormal_4;
  highp vec3 col_59;
  highp vec4 ndotl_60;
  highp vec4 lengthSq_61;
  highp vec4 tmpvar_62;
  tmpvar_62 = (unity_4LightPosX0 - tmpvar_37.x);
  highp vec4 tmpvar_63;
  tmpvar_63 = (unity_4LightPosY0 - tmpvar_37.y);
  highp vec4 tmpvar_64;
  tmpvar_64 = (unity_4LightPosZ0 - tmpvar_37.z);
  lengthSq_61 = (tmpvar_62 * tmpvar_62);
  lengthSq_61 = (lengthSq_61 + (tmpvar_63 * tmpvar_63));
  lengthSq_61 = (lengthSq_61 + (tmpvar_64 * tmpvar_64));
  ndotl_60 = (tmpvar_62 * normal_58.x);
  ndotl_60 = (ndotl_60 + (tmpvar_63 * normal_58.y));
  ndotl_60 = (ndotl_60 + (tmpvar_64 * normal_58.z));
  highp vec4 tmpvar_65;
  tmpvar_65 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_60 * inversesqrt(lengthSq_61)));
  ndotl_60 = tmpvar_65;
  highp vec4 tmpvar_66;
  tmpvar_66 = (tmpvar_65 * (1.0/((1.0 + 
    (lengthSq_61 * lightAttenSq_57)
  ))));
  col_59 = (lightColor0_53 * tmpvar_66.x);
  col_59 = (col_59 + (lightColor1_54 * tmpvar_66.y));
  col_59 = (col_59 + (lightColor2_55 * tmpvar_66.z));
  col_59 = (col_59 + (lightColor3_56 * tmpvar_66.w));
  tmpvar_6 = ((x2_51 + (unity_SHC.xyz * 
    ((normal_50.x * normal_50.x) - (normal_50.y * normal_50.y))
  )) + col_59);
  tmpvar_7 = (unity_World2Shadow[0] * (_Object2World * tmpvar_8));
  gl_Position = (glstate_matrix_mvp * tmpvar_8);
  xlv_TEXCOORD0 = tmpvar_46;
  xlv_TEXCOORD1 = tmpvar_47;
  xlv_TEXCOORD2 = tmpvar_48;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = screenPos_32;
  xlv_TEXCOORD6 = tmpvar_6;
  xlv_TEXCOORD7 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_16;
  x_16 = (tmpvar_10 - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float shadow_18;
  shadow_18 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD7.xyz) * (1.0 - _LightShadowData.x)));
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD0.xyz, tmpvar_17);
  worldN_4.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD1.xyz, tmpvar_17);
  worldN_4.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (xlv_TEXCOORD2.xyz, tmpvar_17);
  worldN_4.z = tmpvar_21;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_18;
  mediump vec3 normalWorld_22;
  normalWorld_22 = worldN_4;
  mediump vec3 tmpvar_23;
  mediump vec3 tmpvar_24;
  mediump vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = normalWorld_22;
  mediump vec3 x1_26;
  x1_26.x = dot (unity_SHAr, tmpvar_25);
  x1_26.y = dot (unity_SHAg, tmpvar_25);
  x1_26.z = dot (unity_SHAb, tmpvar_25);
  tmpvar_24 = (xlv_TEXCOORD6 + x1_26);
  tmpvar_23 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_23;
  lowp vec4 c_27;
  lowp vec4 c_28;
  lowp float diff_29;
  mediump float tmpvar_30;
  tmpvar_30 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_29 = tmpvar_30;
  c_28.xyz = ((tmpvar_9 * tmpvar_23) * diff_29);
  c_28.w = tmpvar_10;
  c_27.w = c_28.w;
  c_27.xyz = (c_28.xyz + (tmpvar_9 * tmpvar_24));
  c_5.xyz = c_27.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec4 vs_TEXCOORD7;
highp vec4 t0;
highp uint tu0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec4 t3;
mediump float t16_3;
highp vec4 t4;
highp vec4 t5;
lowp vec3 t10_6;
mediump vec3 t16_7;
mediump vec3 t16_8;
highp float t9;
bool tb9;
bool tb10;
highp vec2 t18;
bool tb18;
highp float t27;
highp uint tu27;
void main()
{
    //Instruction 63156
    //ADD
    t0.xy = in_POSITION0.xy + _Object2World[3].xy;
    //Instruction 63157
    //LT
    tb18 = 0.0<_InstanceData.x;
    //Instruction 63158
    //MOVC
    t1 = (bool(tb18)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 63159
    //ADD
    t2.x = t0.x + t1.w;
    //Instruction 63160
    //MAD
    t2.y = t1.w * 0.800000 + t0.y;
    //Instruction 63161
    //ADD
    t0.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 63162
    //FRC
    t0.xy = fract(t0.xy);
    //Instruction 63163
    //MAD
    t0.xy = t0.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 63164
    //MUL
    t18.xy = abs(t0.xy) * abs(t0.xy);
    //Instruction 63165
    //MAD
    t0.xy = -abs(t0.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 63166
    //MAD
    t0.xy = t18.xy * t0.xy + vec2(-0.500000, -0.500000);
    //Instruction 63167
    //ADD
    t0.xy = t0.xy + t0.xy;
    //Instruction 63168
    //MAD
    t0.x = t0.y * t0.y + t0.x;
    //Instruction 63169
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 63170
    //MAD
    t0.x = _ST_WindGlobal.y * t0.x + t9;
    //Instruction 63171
    //DIV
    t9 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 63172
    //ADD
    t18.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 63173
    //MUL
    t27 = in_COLOR0.w * 255.000000;
    //Instruction 63174
    //FTOU
    tu27 = uint(t27);
    //Instruction 63175
    //MUL
    t18.x = t18.x * _TreeSize[int(tu27) + 0].x;
    //Instruction 63176
    //MUL
    t18.x = t1.x * t18.x;
    //Instruction 63177
    //MUL
    t2.xyz = t18.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 63178
    //MAD
    t18.x = in_TEXCOORD0.y * _TreeSize[int(tu27) + 0].y + _TreeSize[int(tu27) + 0].z;
    //Instruction 63179
    //MAD
    t2.w = t18.x * t1.y + t2.y;
    //Instruction 63180
    //ADD
    t18.x = t1.z + _CameraXZAngle;
    //Instruction 63181
    //MAD
    t18.x = t18.x * _TreeInfo[int(tu27) + 0].y + 0.500000;
    //Instruction 63182
    //ROUND_NI
    t18.x = floor(t18.x);
    //Instruction 63183
    //DIV
    t18.x = t18.x / _TreeInfo[int(tu27) + 0].x;
    //Instruction 63184
    //MAD
    t9 = (-t9) * 0.250000 + t2.w;
    //Instruction 63185
    //MAX
    t9 = max(t9, 0.0);
    //Instruction 63186
    //MUL
    t9 = t9 * _ST_WindGlobal.z;
    //Instruction 63187
    //LOG
    t1.x = log2(t9);
    //Instruction 63188
    //MUL
    t1.x = t1.x * _ST_WindGlobal.w;
    //Instruction 63189
    //EXP
    t1.x = exp2(t1.x);
    //Instruction 63190
    //NE
    tb10 = t9!=0.0;
    //Instruction 63191
    //MOVC
    t9 = (tb10) ? t1.x : t9;
    //Instruction 63192
    //MUL
    t0.x = t9 * t0.x;
    //Instruction 63193
    //MAD
    t1.xz = _ST_WindVector.xz * t0.xx + t2.xz;
    //Instruction 63194
    //MOV
    t1.y = t2.w;
    //Instruction 63195
    //DP3
    t0.x = dot(t1.xyz, t1.xyz);
    //Instruction 63196
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 63197
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 63198
    //DP3
    t0.x = dot(t2.xzw, t2.xzw);
    //Instruction 63199
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 63200
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 63201
    //MUL
    t16_3 = _WindEnabled * _WindQuality;
    //Instruction 63202
    //LT
    tb0 = 0.0<t16_3;
    //Instruction 63203
    //MOVC
    t1.xyz = (bool(tb0)) ? t1.xyz : t2.xwz;
    //Instruction 63204
    //ADD
    t1.xyz = t1.xyz + in_POSITION0.xyz;
    //Instruction 63205
    //MUL
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 63206
    //MAD
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    //Instruction 63207
    //MAD
    t2 = glstate_matrix_mvp[2] * t1.zzzz + t2;
    //Instruction 63208
    //ADD
    gl_Position = t2 + glstate_matrix_mvp[3];
    //Instruction 63209
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 63210
    //MAD
    t2.xyz = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 63211
    //MAD
    t2.xyz = _Object2World[2].xyz * t1.zzz + t2.xyz;
    //Instruction 63212
    //ADD
    t2.xyz = t2.xyz + _Object2World[3].xyz;
    //Instruction 63213
    //MOV
    vs_TEXCOORD0.w = t2.x;
    //Instruction 63214
    //MUL
    t4.xyz = _Object2World[1].yzx * _BillboardTangent.xyzx.yyy;
    //Instruction 63215
    //MAD
    t4.xyz = _Object2World[0].yzx * _BillboardTangent.xyzx.xxx + t4.xyz;
    //Instruction 63216
    //MAD
    t4.xyz = _Object2World[2].yzx * _BillboardTangent.xyzx.zzz + t4.xyz;
    //Instruction 63217
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 63218
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 63219
    //MUL
    t4.xyz = t0.xxx * t4.xyz;
    //Instruction 63220
    //MOV
    vs_TEXCOORD0.x = t4.z;
    //Instruction 63221
    //MUL
    t3.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 63222
    //MUL
    t3.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 63223
    //MUL
    t3.zw = _World2Object[2].xx * _BillboardNormal.xyzx.xx;
    //Instruction 63224
    //MUL
    t5.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 63225
    //MUL
    t5.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 63226
    //MUL
    t5.zw = _World2Object[2].yy * _BillboardNormal.xyzx.yy;
    //Instruction 63227
    //ADD
    t3 = t3 + t5;
    //Instruction 63228
    //MUL
    t5.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 63229
    //MUL
    t5.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 63230
    //MUL
    t5.zw = _World2Object[2].zz * _BillboardNormal.xyzx.zz;
    //Instruction 63231
    //ADD
    t3 = t3 + t5;
    //Instruction 63232
    //DP3
    t0.x = dot(t3.xyw, t3.xyw);
    //Instruction 63233
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 63234
    //MUL
    t3 = t0.xxxx * t3;
    //Instruction 63235
    //MUL
    t10_6.xyz = t4.xyz * t3.wxy;
    //Instruction 63236
    //MAD
    t10_6.xyz = t3.ywx * t4.yzx + (-t10_6.xyz);
    //Instruction 63237
    //MOV
    vs_TEXCOORD0.y = (-t10_6.x);
    //Instruction 63238
    //MOV
    vs_TEXCOORD0.z = t3.x;
    //Instruction 63239
    //MOV
    vs_TEXCOORD1.x = t4.x;
    //Instruction 63240
    //MOV
    vs_TEXCOORD2.x = t4.y;
    //Instruction 63241
    //MOV
    vs_TEXCOORD1.w = t2.y;
    //Instruction 63242
    //MOV
    vs_TEXCOORD1.z = t3.y;
    //Instruction 63243
    //MOV
    vs_TEXCOORD1.y = (-t10_6.y);
    //Instruction 63244
    //MOV
    vs_TEXCOORD2.y = (-t10_6.z);
    //Instruction 63245
    //MOV
    vs_TEXCOORD2.w = t2.z;
    //Instruction 63246
    //MOV
    vs_TEXCOORD2.z = t3.w;
    //Instruction 63247
    //MOV
    vs_TEXCOORD3 = _Color;
    //Instruction 63248
    //GE
    tb0 = t18.x>=(-t18.x);
    //Instruction 63249
    //FRC
    t9 = fract(abs(t18.x));
    //Instruction 63250
    //MOVC
    t0.x = (tb0) ? t9 : (-t9);
    //Instruction 63251
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu27) + 0].x + _TreeInfo[int(tu27) + 0].z;
    //Instruction 63252
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 63253
    //LT
    tb9 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 63254
    //MAD
    t18.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 63255
    //MAD
    t4.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 63256
    //MOVC
    vs_TEXCOORD4.xy = (bool(tb9)) ? t18.xy : t4.xy;
    //Instruction 63257
    //MOV
    vs_TEXCOORD4.z = 0.0;
    //Instruction 63258
    //MUL
    t0.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 63259
    //MAD
    t0.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t0.xyz;
    //Instruction 63260
    //MAD
    t0.xyz = glstate_matrix_mvp[2].xyw * t1.zzz + t0.xyz;
    //Instruction 63261
    //ADD
    t0.xyz = t0.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 63262
    //MUL
    t0.w = t0.y * _ProjectionParams.x;
    //Instruction 63263
    //MUL
    t4.xzw = t0.xzw * vec3(0.500000, 0.500000, 0.500000);
    //Instruction 63264
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 63265
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 63266
    //MUL
    t0.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 63267
    //MOV
    vs_TEXCOORD5.xyz = t0.xyz;
    //Instruction 63268
    //ADD
    t0 = (-t2.xxxx) + unity_4LightPosX0;
    //Instruction 63269
    //ADD
    t4 = (-t2.yyyy) + unity_4LightPosY0;
    //Instruction 63270
    //ADD
    t2 = (-t2.zzzz) + unity_4LightPosZ0;
    //Instruction 63271
    //MUL
    t5 = t3.yyyy * t4;
    //Instruction 63272
    //MUL
    t4 = t4 * t4;
    //Instruction 63273
    //MAD
    t4 = t0 * t0 + t4;
    //Instruction 63274
    //MAD
    t0 = t0 * t3.xxxx + t5;
    //Instruction 63275
    //MAD
    t0 = t2 * t3.wwww + t0;
    //Instruction 63276
    //MAD
    t2 = t2 * t2 + t4;
    //Instruction 63277
    //RSQ
    t4 = inversesqrt(t2);
    //Instruction 63278
    //MAD
    t2 = t2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 63279
    //DIV
    t2 = vec4(1.0, 1.0, 1.0, 1.0) / t2;
    //Instruction 63280
    //MUL
    t0 = t0 * t4;
    //Instruction 63281
    //MAX
    t0 = max(t0, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 63282
    //MUL
    t0 = t2 * t0;
    //Instruction 63283
    //MUL
    t2.xyz = t0.yyy * unity_LightColor[1].xyz;
    //Instruction 63284
    //MAD
    t2.xyz = unity_LightColor[0].xyz * t0.xxx + t2.xyz;
    //Instruction 63285
    //MAD
    t0.xyz = unity_LightColor[2].xyz * t0.zzz + t2.xyz;
    //Instruction 63286
    //MAD
    t0.xyz = unity_LightColor[3].xyz * t0.www + t0.xyz;
    //Instruction 63287
    //MUL
    t16_7.x = t3.y * t3.y;
    //Instruction 63288
    //MAD
    t16_7.x = t3.x * t3.x + (-t16_7.x);
    //Instruction 63289
    //MUL
    t16_2 = t3.ywzx * t3;
    //Instruction 63290
    //DP4
    t16_8.x = dot(unity_SHBr, t16_2);
    //Instruction 63291
    //DP4
    t16_8.y = dot(unity_SHBg, t16_2);
    //Instruction 63292
    //DP4
    t16_8.z = dot(unity_SHBb, t16_2);
    //Instruction 63293
    //MAD
    t16_7.xyz = unity_SHC.xyz * t16_7.xxx + t16_8.xyz;
    //Instruction 63294
    //ADD
    t0.xyz = t0.xyz + t16_7.xyz;
    //Instruction 63295
    //MOV
    vs_TEXCOORD6.xyz = t0.xyz;
    //Instruction 63296
    //MUL
    t0 = t1.yyyy * _Object2World[1];
    //Instruction 63297
    //MAD
    t0 = _Object2World[0] * t1.xxxx + t0;
    //Instruction 63298
    //MAD
    t0 = _Object2World[2] * t1.zzzz + t0;
    //Instruction 63299
    //ADD
    t0 = t0 + _Object2World[3];
    //Instruction 63300
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 63301
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 63302
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 63303
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 63304
    //MOV
    vs_TEXCOORD7 = t0;
    //Instruction 63305
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec4 vs_TEXCOORD7;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump float t16_6;
mediump float t16_21;
void main()
{
    //Instruction 63121
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    //Instruction 63122
    //FRC
    t16_6 = fract(t16_0.y);
    //Instruction 63123
    //MOV
    t1.x = t16_0.x;
    //Instruction 63124
    //MAD
    t1.y = t16_6 * 0.062500 + unity_LODFade.y;
    //Instruction 63125
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 63126
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 63127
    //LT
    tb1 = t16_1<0.0;
    //Instruction 63128
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 63129
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    //Instruction 63130
    //MAD
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 63131
    //MUL
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD3.xyz;
    //Instruction 63132
    //LT
    tb1 = t10_2.x<0.0;
    //Instruction 63133
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 63134
    //SAMPLE_C_LZ
    vec3 txVec70 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
    t16_21 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec70, 0.0);
    //Instruction 63135
    //ADD
    t16_4.x = (-_LightShadowData.x) + 1.0;
    //Instruction 63136
    //MAD
    t16_21 = t16_21 * t16_4.x + _LightShadowData.x;
    //Instruction 63137
    //MUL
    t16_4.xyz = vec3(t16_21) * _LightColor0.xyz;
    //Instruction 63138
    //MUL
    t16_4.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 63139
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 63140
    //MAD
    t10_2.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 63141
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    //Instruction 63142
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    //Instruction 63143
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    //Instruction 63144
    //MOV
    t0.w = 1.0;
    //Instruction 63145
    //DP4
    t16_5.x = dot(unity_SHAr, t0);
    //Instruction 63146
    //DP4
    t16_5.y = dot(unity_SHAg, t0);
    //Instruction 63147
    //DP4
    t16_5.z = dot(unity_SHAb, t0);
    //Instruction 63148
    //DP3
    t16_21 = dot(t0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 63149
    //MAX
    t16_21 = max(t16_21, 0.0);
    //Instruction 63150
    //ADD
    t16_5.xyz = t16_5.xyz + vs_TEXCOORD6.xyz;
    //Instruction 63151
    //MUL
    t16_3.xyz = t16_3.xyz * t16_5.xyz;
    //Instruction 63152
    //MAD
    t16_3.xyz = t16_4.xyz * vec3(t16_21) + t16_3.xyz;
    //Instruction 63153
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 63154
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 63155
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  angle_9 = _CameraXZAngle;
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_16.xz;
  billboardPos_8.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_8;
    highp float fMoveAmount_18;
    highp float fAdjust_19;
    highp float fLength_20;
    fLength_20 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_21;
    tmpvar_21 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_19 = tmpvar_21;
    if ((tmpvar_21 != 0.0)) {
      fAdjust_19 = pow (tmpvar_21, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_22;
    tmpvar_22.zw = vec2(0.0, 0.0);
    tmpvar_22.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_22.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_23;
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    tmpvar_23 = (((
      (tmpvar_24 * tmpvar_24)
     * 
      (3.0 - (2.0 * tmpvar_24))
    ) - 0.5) * 2.0);
    fMoveAmount_18 = ((_ST_WindGlobal.y * (tmpvar_23.x + 
      (tmpvar_23.y * tmpvar_23.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_18 = (fMoveAmount_18 * fAdjust_19);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * fMoveAmount_18));
    vPos_17 = (normalize(vPos_17) * fLength_20);
    billboardPos_8 = vPos_17;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (_CameraXZAngle + tmpvar_15.z);
  highp float tmpvar_25;
  tmpvar_25 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_26;
  tmpvar_26 = (fract(abs(tmpvar_25)) * tmpvar_11.x);
  highp float tmpvar_27;
  if ((tmpvar_25 >= 0.0)) {
    tmpvar_27 = tmpvar_26;
  } else {
    tmpvar_27 = -(tmpvar_26);
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_27))];
  if ((tmpvar_28.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_28.xy - (tmpvar_28.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_28.xy + (tmpvar_28.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_29;
  tmpvar_29 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_29;
  highp vec4 hPos_30;
  hPos_30 = (glstate_matrix_mvp * tmpvar_6);
  mediump vec3 screenPos_31;
  highp vec4 o_32;
  highp vec4 tmpvar_33;
  tmpvar_33 = (hPos_30 * 0.5);
  highp vec2 tmpvar_34;
  tmpvar_34.x = tmpvar_33.x;
  tmpvar_34.y = (tmpvar_33.y * _ProjectionParams.x);
  o_32.xy = (tmpvar_34 + tmpvar_33.w);
  o_32.zw = hPos_30.zw;
  highp vec3 tmpvar_35;
  tmpvar_35 = o_32.xyw;
  screenPos_31 = tmpvar_35;
  screenPos_31.xy = (screenPos_31.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = _Color;
  highp vec3 tmpvar_36;
  tmpvar_36 = (_Object2World * tmpvar_6).xyz;
  highp vec4 v_37;
  v_37.x = _World2Object[0].x;
  v_37.y = _World2Object[1].x;
  v_37.z = _World2Object[2].x;
  v_37.w = _World2Object[3].x;
  highp vec4 v_38;
  v_38.x = _World2Object[0].y;
  v_38.y = _World2Object[1].y;
  v_38.z = _World2Object[2].y;
  v_38.w = _World2Object[3].y;
  highp vec4 v_39;
  v_39.x = _World2Object[0].z;
  v_39.y = _World2Object[1].z;
  v_39.z = _World2Object[2].z;
  v_39.w = _World2Object[3].z;
  highp vec3 tmpvar_40;
  tmpvar_40 = normalize(((
    (v_37.xyz * _BillboardNormal.x)
   + 
    (v_38.xyz * _BillboardNormal.y)
  ) + (v_39.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_40;
  highp mat3 tmpvar_41;
  tmpvar_41[0] = _Object2World[0].xyz;
  tmpvar_41[1] = _Object2World[1].xyz;
  tmpvar_41[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_42;
  tmpvar_42 = normalize((tmpvar_41 * _BillboardTangent));
  worldTangent_3 = tmpvar_42;
  lowp vec3 tmpvar_43;
  tmpvar_43 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_44;
  tmpvar_44 = -(tmpvar_43);
  worldBinormal_2 = tmpvar_44;
  highp vec4 tmpvar_45;
  tmpvar_45.x = worldTangent_3.x;
  tmpvar_45.y = worldBinormal_2.x;
  tmpvar_45.z = worldNormal_4.x;
  tmpvar_45.w = tmpvar_36.x;
  highp vec4 tmpvar_46;
  tmpvar_46.x = worldTangent_3.y;
  tmpvar_46.y = worldBinormal_2.y;
  tmpvar_46.z = worldNormal_4.y;
  tmpvar_46.w = tmpvar_36.y;
  highp vec4 tmpvar_47;
  tmpvar_47.x = worldTangent_3.z;
  tmpvar_47.y = worldBinormal_2.z;
  tmpvar_47.z = worldNormal_4.z;
  tmpvar_47.w = tmpvar_36.z;
  lowp vec4 tmpvar_48;
  tmpvar_48.w = 1.0;
  tmpvar_48.xyz = worldNormal_4;
  mediump vec4 normal_49;
  normal_49 = tmpvar_48;
  mediump vec3 x2_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = (normal_49.xyzz * normal_49.yzzx);
  x2_50.x = dot (unity_SHBr, tmpvar_51);
  x2_50.y = dot (unity_SHBg, tmpvar_51);
  x2_50.z = dot (unity_SHBb, tmpvar_51);
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_45;
  xlv_TEXCOORD1 = tmpvar_46;
  xlv_TEXCOORD2 = tmpvar_47;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = screenPos_31;
  xlv_TEXCOORD6 = (x2_50 + (unity_SHC.xyz * (
    (normal_49.x * normal_49.x)
   - 
    (normal_49.y * normal_49.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_16;
  x_16 = (tmpvar_9 - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_17.x, max (tmpvar_17.y, tmpvar_17.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_17 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_18;
  tmpvar_18 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD0.xyz, tmpvar_18);
  worldN_3.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD1.xyz, tmpvar_18);
  worldN_3.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (xlv_TEXCOORD2.xyz, tmpvar_18);
  worldN_3.z = tmpvar_21;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_22;
  normalWorld_22 = worldN_3;
  mediump vec3 tmpvar_23;
  mediump vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = normalWorld_22;
  mediump vec3 x1_25;
  x1_25.x = dot (unity_SHAr, tmpvar_24);
  x1_25.y = dot (unity_SHAg, tmpvar_24);
  x1_25.z = dot (unity_SHAb, tmpvar_24);
  tmpvar_23 = (xlv_TEXCOORD6 + x1_25);
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_28 = tmpvar_29;
  c_27.xyz = ((tmpvar_8 * tmpvar_1) * diff_28);
  c_27.w = tmpvar_9;
  c_26.w = c_27.w;
  c_26.xyz = (c_27.xyz + (tmpvar_8 * tmpvar_23));
  c_4.xyz = c_26.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
highp uint tu0;
bool tb0;
highp vec4 t1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
mediump float t16_5;
lowp vec3 t10_6;
mediump vec3 t16_7;
highp vec3 t8;
highp vec2 t9;
highp float t10;
highp uint tu10;
highp float t16;
highp vec2 t18;
highp float t24;
highp float t25;
bool tb25;
void main()
{
    //Instruction 63346
    //LT
    tb0 = 0.0<_InstanceData.x;
    //Instruction 63347
    //MOVC
    t0 = (bool(tb0)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 63348
    //ADD
    t1.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 63349
    //ADD
    t2.x = t0.w + t1.x;
    //Instruction 63350
    //MAD
    t2.y = t0.w * 0.800000 + t1.y;
    //Instruction 63351
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 63352
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 63353
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 63354
    //MUL
    t18.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 63355
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 63356
    //MAD
    t2.xy = t18.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 63357
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 63358
    //MAD
    t24 = t2.y * t2.y + t2.x;
    //Instruction 63359
    //DIV
    t25 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 63360
    //MAD
    t24 = _ST_WindGlobal.y * t24 + t25;
    //Instruction 63361
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 63362
    //ADD
    t2.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 63363
    //MUL
    t10 = in_COLOR0.w * 255.000000;
    //Instruction 63364
    //FTOU
    tu10 = uint(t10);
    //Instruction 63365
    //MUL
    t2.x = t2.x * _TreeSize[int(tu10) + 0].x;
    //Instruction 63366
    //MUL
    t0.x = t0.x * t2.x;
    //Instruction 63367
    //MUL
    t3.xyz = t0.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 63368
    //MAD
    t0.x = in_TEXCOORD0.y * _TreeSize[int(tu10) + 0].y + _TreeSize[int(tu10) + 0].z;
    //Instruction 63369
    //MAD
    t3.w = t0.x * t0.y + t3.y;
    //Instruction 63370
    //ADD
    t0.x = t0.z + _CameraXZAngle;
    //Instruction 63371
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu10) + 0].y + 0.500000;
    //Instruction 63372
    //ROUND_NI
    t0.x = floor(t0.x);
    //Instruction 63373
    //DIV
    t0.x = t0.x / _TreeInfo[int(tu10) + 0].x;
    //Instruction 63374
    //MAD
    t8.x = (-t25) * 0.250000 + t3.w;
    //Instruction 63375
    //MAX
    t8.x = max(t8.x, 0.0);
    //Instruction 63376
    //MUL
    t8.x = t8.x * _ST_WindGlobal.z;
    //Instruction 63377
    //LOG
    t16 = log2(t8.x);
    //Instruction 63378
    //MUL
    t16 = t16 * _ST_WindGlobal.w;
    //Instruction 63379
    //EXP
    t16 = exp2(t16);
    //Instruction 63380
    //NE
    tb25 = t8.x!=0.0;
    //Instruction 63381
    //MOVC
    t8.x = (tb25) ? t16 : t8.x;
    //Instruction 63382
    //MUL
    t8.x = t8.x * t24;
    //Instruction 63383
    //MAD
    t4.xz = _ST_WindVector.xz * t8.xx + t3.xz;
    //Instruction 63384
    //MOV
    t4.y = t3.w;
    //Instruction 63385
    //DP3
    t8.x = dot(t4.xyz, t4.xyz);
    //Instruction 63386
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 63387
    //MUL
    t8.xyz = t8.xxx * t4.xyz;
    //Instruction 63388
    //DP3
    t25 = dot(t3.xzw, t3.xzw);
    //Instruction 63389
    //SQRT
    t25 = sqrt(t25);
    //Instruction 63390
    //MUL
    t8.xyz = t8.xyz * vec3(t25);
    //Instruction 63391
    //MUL
    t16_5 = _WindEnabled * _WindQuality;
    //Instruction 63392
    //LT
    tb25 = 0.0<t16_5;
    //Instruction 63393
    //MOVC
    t8.xyz = (bool(tb25)) ? t8.xyz : t3.xwz;
    //Instruction 63394
    //ADD
    t8.xyz = t8.xyz + in_POSITION0.xyz;
    //Instruction 63395
    //MUL
    t3 = t8.yyyy * glstate_matrix_mvp[1];
    //Instruction 63396
    //MAD
    t3 = glstate_matrix_mvp[0] * t8.xxxx + t3;
    //Instruction 63397
    //MAD
    t3 = glstate_matrix_mvp[2] * t8.zzzz + t3;
    //Instruction 63398
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 63399
    //MUL
    t2.xzw = t8.yyy * _Object2World[1].xyz;
    //Instruction 63400
    //MAD
    t2.xzw = _Object2World[0].xyz * t8.xxx + t2.xzw;
    //Instruction 63401
    //MAD
    t2.xzw = _Object2World[2].xyz * t8.zzz + t2.xzw;
    //Instruction 63402
    //ADD
    t2.xzw = t2.xzw + _Object2World[3].xyz;
    //Instruction 63403
    //MOV
    vs_TEXCOORD0.w = t2.x;
    //Instruction 63404
    //MUL
    t3.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 63405
    //MUL
    t3.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 63406
    //MUL
    t3.zw = _World2Object[2].xx * _BillboardNormal.xyzx.xx;
    //Instruction 63407
    //MUL
    t4.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 63408
    //MUL
    t4.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 63409
    //MUL
    t4.zw = _World2Object[2].yy * _BillboardNormal.xyzx.yy;
    //Instruction 63410
    //ADD
    t3 = t3 + t4;
    //Instruction 63411
    //MUL
    t4.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 63412
    //MUL
    t4.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 63413
    //MUL
    t4.zw = _World2Object[2].zz * _BillboardNormal.xyzx.zz;
    //Instruction 63414
    //ADD
    t3 = t3 + t4;
    //Instruction 63415
    //DP3
    t25 = dot(t3.xyw, t3.xyw);
    //Instruction 63416
    //RSQ
    t25 = inversesqrt(t25);
    //Instruction 63417
    //MUL
    t3 = vec4(t25) * t3;
    //Instruction 63418
    //MUL
    t4.xyz = _Object2World[1].yzx * _BillboardTangent.xyzx.yyy;
    //Instruction 63419
    //MAD
    t4.xyz = _Object2World[0].yzx * _BillboardTangent.xyzx.xxx + t4.xyz;
    //Instruction 63420
    //MAD
    t4.xyz = _Object2World[2].yzx * _BillboardTangent.xyzx.zzz + t4.xyz;
    //Instruction 63421
    //DP3
    t25 = dot(t4.xyz, t4.xyz);
    //Instruction 63422
    //RSQ
    t25 = inversesqrt(t25);
    //Instruction 63423
    //MUL
    t4.xyz = vec3(t25) * t4.xyz;
    //Instruction 63424
    //MUL
    t10_6.xyz = t3.wxy * t4.xyz;
    //Instruction 63425
    //MAD
    t10_6.xyz = t3.ywx * t4.yzx + (-t10_6.xyz);
    //Instruction 63426
    //MOV
    vs_TEXCOORD0.y = (-t10_6.x);
    //Instruction 63427
    //MOV
    vs_TEXCOORD0.z = t3.x;
    //Instruction 63428
    //MOV
    vs_TEXCOORD0.x = t4.z;
    //Instruction 63429
    //MOV
    vs_TEXCOORD1.x = t4.x;
    //Instruction 63430
    //MOV
    vs_TEXCOORD2.x = t4.y;
    //Instruction 63431
    //MOV
    vs_TEXCOORD1.w = t2.z;
    //Instruction 63432
    //MOV
    vs_TEXCOORD2.w = t2.w;
    //Instruction 63433
    //MOV
    vs_TEXCOORD1.z = t3.y;
    //Instruction 63434
    //MOV
    vs_TEXCOORD1.y = (-t10_6.y);
    //Instruction 63435
    //MOV
    vs_TEXCOORD2.y = (-t10_6.z);
    //Instruction 63436
    //MOV
    vs_TEXCOORD2.z = t3.w;
    //Instruction 63437
    //MOV
    vs_TEXCOORD3 = _Color;
    //Instruction 63438
    //ADD
    t1.x = t1.y + t1.x;
    //Instruction 63439
    //ADD
    t1.x = t1.z + t1.x;
    //Instruction 63440
    //FRC
    t1.x = fract(t1.x);
    //Instruction 63441
    //MUL
    t1.x = t1.x * _HueVariation.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 63442
    //MOV
    vs_TEXCOORD4.z = t1.x;
    //Instruction 63443
    //GE
    tb1 = t0.x>=(-t0.x);
    //Instruction 63444
    //FRC
    t0.x = fract(abs(t0.x));
    //Instruction 63445
    //MOVC
    t0.x = (tb1) ? t0.x : (-t0.x);
    //Instruction 63446
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu10) + 0].x + _TreeInfo[int(tu10) + 0].z;
    //Instruction 63447
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 63448
    //LT
    tb1 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 63449
    //MAD
    t9.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 63450
    //MAD
    t2.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 63451
    //MOVC
    vs_TEXCOORD4.xy = (bool(tb1)) ? t9.xy : t2.xy;
    //Instruction 63452
    //MUL
    t1.xyz = t8.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 63453
    //MAD
    t0.xyz = glstate_matrix_mvp[0].xyw * t8.xxx + t1.xyz;
    //Instruction 63454
    //MAD
    t0.xyz = glstate_matrix_mvp[2].xyw * t8.zzz + t0.xyz;
    //Instruction 63455
    //ADD
    t0.xyz = t0.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 63456
    //MUL
    t1.xz = t0.xz * vec2(0.500000, 0.500000);
    //Instruction 63457
    //MUL
    t24 = t0.y * _ProjectionParams.x;
    //Instruction 63458
    //MUL
    t1.w = t24 * 0.500000;
    //Instruction 63459
    //ADD
    t1.xy = t1.zz + t1.xw;
    //Instruction 63460
    //MUL
    t1.xy = t1.xy * _ScreenParams.xy;
    //Instruction 63461
    //MUL
    t0.xy = t1.xy * vec2(0.250000, 0.250000);
    //Instruction 63462
    //MOV
    vs_TEXCOORD5.xyz = t0.xyz;
    //Instruction 63463
    //MUL
    t16_5 = t3.y * t3.y;
    //Instruction 63464
    //MAD
    t16_5 = t3.x * t3.x + (-t16_5);
    //Instruction 63465
    //MUL
    t16_0 = t3.ywzx * t3;
    //Instruction 63466
    //DP4
    t16_7.x = dot(unity_SHBr, t16_0);
    //Instruction 63467
    //DP4
    t16_7.y = dot(unity_SHBg, t16_0);
    //Instruction 63468
    //DP4
    t16_7.z = dot(unity_SHBb, t16_0);
    //Instruction 63469
    //MAD
    vs_TEXCOORD6.xyz = unity_SHC.xyz * vec3(t16_5) + t16_7.xyz;
    //Instruction 63470
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump float t16_6;
mediump vec3 t16_9;
mediump float t16_21;
void main()
{
    //Instruction 63306
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    //Instruction 63307
    //FRC
    t16_6 = fract(t16_0.y);
    //Instruction 63308
    //MOV
    t1.x = t16_0.x;
    //Instruction 63309
    //MAD
    t1.y = t16_6 * 0.062500 + unity_LODFade.y;
    //Instruction 63310
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 63311
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 63312
    //LT
    tb1 = t16_1<0.0;
    //Instruction 63313
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 63314
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    //Instruction 63315
    //MAD
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 63316
    //LT
    tb1 = t10_2.x<0.0;
    //Instruction 63317
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 63318
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 63319
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 63320
    //ADD
    t16_9.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 63321
    //MAD
    t16_9.xyz = vs_TEXCOORD4.zzz * t16_9.xyz + t10_0.xyz;
    //Instruction 63322
    //MAX
    t16_4.x = max(t16_9.z, t16_9.y);
    //Instruction 63323
    //MAX
    t16_4.x = max(t16_9.x, t16_4.x);
    //Instruction 63324
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 63325
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 63326
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_9.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 63327
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD3.xyz;
    //Instruction 63328
    //MUL
    t16_4.xyz = t16_3.xyz * _LightColor0.xyz;
    //Instruction 63329
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 63330
    //MAD
    t10_2.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 63331
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    //Instruction 63332
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    //Instruction 63333
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    //Instruction 63334
    //MOV
    t0.w = 1.0;
    //Instruction 63335
    //DP4
    t16_5.x = dot(unity_SHAr, t0);
    //Instruction 63336
    //DP4
    t16_5.y = dot(unity_SHAg, t0);
    //Instruction 63337
    //DP4
    t16_5.z = dot(unity_SHAb, t0);
    //Instruction 63338
    //DP3
    t16_21 = dot(t0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 63339
    //MAX
    t16_21 = max(t16_21, 0.0);
    //Instruction 63340
    //ADD
    t16_5.xyz = t16_5.xyz + vs_TEXCOORD6.xyz;
    //Instruction 63341
    //MUL
    t16_3.xyz = t16_3.xyz * t16_5.xyz;
    //Instruction 63342
    //MAD
    t16_3.xyz = t16_4.xyz * vec3(t16_21) + t16_3.xyz;
    //Instruction 63343
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 63344
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 63345
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesVertex;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float angle_10;
  highp float tmpvar_11;
  tmpvar_11 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeInfo[int(tmpvar_11)];
  highp vec4 tmpvar_13;
  tmpvar_13 = _TreeSize[int(tmpvar_11)];
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (_glesVertex.xyz + tmpvar_14);
  angle_10 = _CameraXZAngle;
  highp vec4 tmpvar_16;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_16 = _InstanceData;
  } else {
    tmpvar_16 = tmpvar_1;
  };
  highp vec3 tmpvar_17;
  tmpvar_17 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_13.x) * tmpvar_16.x) * _BillboardTangent);
  billboardPos_9.xz = tmpvar_17.xz;
  billboardPos_9.y = (tmpvar_17.y + ((
    (_glesMultiTexCoord0.y * tmpvar_13.y)
   + tmpvar_13.z) * tmpvar_16.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_18;
    vPos_18 = billboardPos_9;
    highp float fMoveAmount_19;
    highp float fAdjust_20;
    highp float fLength_21;
    fLength_21 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_22;
    tmpvar_22 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_20 = tmpvar_22;
    if ((tmpvar_22 != 0.0)) {
      fAdjust_20 = pow (tmpvar_22, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_23;
    tmpvar_23.zw = vec2(0.0, 0.0);
    tmpvar_23.x = (tmpvar_15.x + tmpvar_16.w);
    tmpvar_23.y = (tmpvar_15.y + (tmpvar_16.w * 0.8));
    highp vec4 tmpvar_24;
    highp vec4 tmpvar_25;
    tmpvar_25 = abs(((
      fract((tmpvar_23 + 0.5))
     * 2.0) - 1.0));
    tmpvar_24 = (((
      (tmpvar_25 * tmpvar_25)
     * 
      (3.0 - (2.0 * tmpvar_25))
    ) - 0.5) * 2.0);
    fMoveAmount_19 = ((_ST_WindGlobal.y * (tmpvar_24.x + 
      (tmpvar_24.y * tmpvar_24.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_19 = (fMoveAmount_19 * fAdjust_20);
    vPos_18.xz = (tmpvar_17.xz + (_ST_WindVector.xz * fMoveAmount_19));
    vPos_18 = (normalize(vPos_18) * fLength_21);
    billboardPos_9 = vPos_18;
  };
  tmpvar_7.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_7.w = 1.0;
  angle_10 = (_CameraXZAngle + tmpvar_16.z);
  highp float tmpvar_26;
  tmpvar_26 = (floor((
    (angle_10 * tmpvar_12.y)
   + 0.5)) / tmpvar_12.x);
  highp float tmpvar_27;
  tmpvar_27 = (fract(abs(tmpvar_26)) * tmpvar_12.x);
  highp float tmpvar_28;
  if ((tmpvar_26 >= 0.0)) {
    tmpvar_28 = tmpvar_27;
  } else {
    tmpvar_28 = -(tmpvar_27);
  };
  highp vec4 tmpvar_29;
  tmpvar_29 = _ImageTexCoords[int((tmpvar_12.z + tmpvar_28))];
  if ((tmpvar_29.w < 0.0)) {
    tmpvar_8.xy = (tmpvar_29.xy - (tmpvar_29.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_8.xy = (tmpvar_29.xy + (tmpvar_29.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_30;
  tmpvar_30 = clamp ((fract(
    ((tmpvar_15.x + tmpvar_15.y) + tmpvar_15.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_30;
  highp vec4 hPos_31;
  hPos_31 = (glstate_matrix_mvp * tmpvar_7);
  mediump vec3 screenPos_32;
  highp vec4 o_33;
  highp vec4 tmpvar_34;
  tmpvar_34 = (hPos_31 * 0.5);
  highp vec2 tmpvar_35;
  tmpvar_35.x = tmpvar_34.x;
  tmpvar_35.y = (tmpvar_34.y * _ProjectionParams.x);
  o_33.xy = (tmpvar_35 + tmpvar_34.w);
  o_33.zw = hPos_31.zw;
  highp vec3 tmpvar_36;
  tmpvar_36 = o_33.xyw;
  screenPos_32 = tmpvar_36;
  screenPos_32.xy = (screenPos_32.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = _Color;
  highp vec3 tmpvar_37;
  tmpvar_37 = (_Object2World * tmpvar_7).xyz;
  highp vec4 v_38;
  v_38.x = _World2Object[0].x;
  v_38.y = _World2Object[1].x;
  v_38.z = _World2Object[2].x;
  v_38.w = _World2Object[3].x;
  highp vec4 v_39;
  v_39.x = _World2Object[0].y;
  v_39.y = _World2Object[1].y;
  v_39.z = _World2Object[2].y;
  v_39.w = _World2Object[3].y;
  highp vec4 v_40;
  v_40.x = _World2Object[0].z;
  v_40.y = _World2Object[1].z;
  v_40.z = _World2Object[2].z;
  v_40.w = _World2Object[3].z;
  highp vec3 tmpvar_41;
  tmpvar_41 = normalize(((
    (v_38.xyz * _BillboardNormal.x)
   + 
    (v_39.xyz * _BillboardNormal.y)
  ) + (v_40.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_41;
  highp mat3 tmpvar_42;
  tmpvar_42[0] = _Object2World[0].xyz;
  tmpvar_42[1] = _Object2World[1].xyz;
  tmpvar_42[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_43;
  tmpvar_43 = normalize((tmpvar_42 * _BillboardTangent));
  worldTangent_3 = tmpvar_43;
  lowp vec3 tmpvar_44;
  tmpvar_44 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_45;
  tmpvar_45 = -(tmpvar_44);
  worldBinormal_2 = tmpvar_45;
  highp vec4 tmpvar_46;
  tmpvar_46.x = worldTangent_3.x;
  tmpvar_46.y = worldBinormal_2.x;
  tmpvar_46.z = worldNormal_4.x;
  tmpvar_46.w = tmpvar_37.x;
  highp vec4 tmpvar_47;
  tmpvar_47.x = worldTangent_3.y;
  tmpvar_47.y = worldBinormal_2.y;
  tmpvar_47.z = worldNormal_4.y;
  tmpvar_47.w = tmpvar_37.y;
  highp vec4 tmpvar_48;
  tmpvar_48.x = worldTangent_3.z;
  tmpvar_48.y = worldBinormal_2.z;
  tmpvar_48.z = worldNormal_4.z;
  tmpvar_48.w = tmpvar_37.z;
  lowp vec4 tmpvar_49;
  tmpvar_49.w = 1.0;
  tmpvar_49.xyz = worldNormal_4;
  mediump vec4 normal_50;
  normal_50 = tmpvar_49;
  mediump vec3 x2_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = (normal_50.xyzz * normal_50.yzzx);
  x2_51.x = dot (unity_SHBr, tmpvar_52);
  x2_51.y = dot (unity_SHBg, tmpvar_52);
  x2_51.z = dot (unity_SHBb, tmpvar_52);
  tmpvar_6 = (unity_World2Shadow[0] * (_Object2World * tmpvar_7));
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_TEXCOORD0 = tmpvar_46;
  xlv_TEXCOORD1 = tmpvar_47;
  xlv_TEXCOORD2 = tmpvar_48;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = screenPos_32;
  xlv_TEXCOORD6 = (x2_51 + (unity_SHC.xyz * (
    (normal_50.x * normal_50.x)
   - 
    (normal_50.y * normal_50.y)
  )));
  xlv_TEXCOORD7 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_13.x = tmpvar_14.x;
  projUV_13.y = ((fract(tmpvar_14.y) * 0.0625) + unity_LODFade.y);
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_12 = tmpvar_16;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_17;
  x_17 = (tmpvar_10 - _Cutoff);
  if ((x_17 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_18;
  tmpvar_18 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_18.x, max (tmpvar_18.y, tmpvar_18.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_18 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_19;
  tmpvar_19 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7).x > 
    (xlv_TEXCOORD7.z / xlv_TEXCOORD7.w)
  )), _LightShadowData.x);
  tmpvar_20 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (xlv_TEXCOORD0.xyz, tmpvar_19);
  worldN_4.x = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = dot (xlv_TEXCOORD1.xyz, tmpvar_19);
  worldN_4.y = tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = dot (xlv_TEXCOORD2.xyz, tmpvar_19);
  worldN_4.z = tmpvar_24;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_20;
  mediump vec3 normalWorld_25;
  normalWorld_25 = worldN_4;
  mediump vec3 tmpvar_26;
  mediump vec3 tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = normalWorld_25;
  mediump vec3 x1_29;
  x1_29.x = dot (unity_SHAr, tmpvar_28);
  x1_29.y = dot (unity_SHAg, tmpvar_28);
  x1_29.z = dot (unity_SHAb, tmpvar_28);
  tmpvar_27 = (xlv_TEXCOORD6 + x1_29);
  tmpvar_26 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_26;
  lowp vec4 c_30;
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_32 = tmpvar_33;
  c_31.xyz = ((tmpvar_9 * tmpvar_26) * diff_32);
  c_31.w = tmpvar_10;
  c_30.w = c_31.w;
  c_30.xyz = (c_31.xyz + (tmpvar_9 * tmpvar_27));
  c_5.xyz = c_30.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesVertex;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float angle_10;
  highp float tmpvar_11;
  tmpvar_11 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeInfo[int(tmpvar_11)];
  highp vec4 tmpvar_13;
  tmpvar_13 = _TreeSize[int(tmpvar_11)];
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (_glesVertex.xyz + tmpvar_14);
  angle_10 = _CameraXZAngle;
  highp vec4 tmpvar_16;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_16 = _InstanceData;
  } else {
    tmpvar_16 = tmpvar_1;
  };
  highp vec3 tmpvar_17;
  tmpvar_17 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_13.x) * tmpvar_16.x) * _BillboardTangent);
  billboardPos_9.xz = tmpvar_17.xz;
  billboardPos_9.y = (tmpvar_17.y + ((
    (_glesMultiTexCoord0.y * tmpvar_13.y)
   + tmpvar_13.z) * tmpvar_16.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_18;
    vPos_18 = billboardPos_9;
    highp float fMoveAmount_19;
    highp float fAdjust_20;
    highp float fLength_21;
    fLength_21 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_22;
    tmpvar_22 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_20 = tmpvar_22;
    if ((tmpvar_22 != 0.0)) {
      fAdjust_20 = pow (tmpvar_22, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_23;
    tmpvar_23.zw = vec2(0.0, 0.0);
    tmpvar_23.x = (tmpvar_15.x + tmpvar_16.w);
    tmpvar_23.y = (tmpvar_15.y + (tmpvar_16.w * 0.8));
    highp vec4 tmpvar_24;
    highp vec4 tmpvar_25;
    tmpvar_25 = abs(((
      fract((tmpvar_23 + 0.5))
     * 2.0) - 1.0));
    tmpvar_24 = (((
      (tmpvar_25 * tmpvar_25)
     * 
      (3.0 - (2.0 * tmpvar_25))
    ) - 0.5) * 2.0);
    fMoveAmount_19 = ((_ST_WindGlobal.y * (tmpvar_24.x + 
      (tmpvar_24.y * tmpvar_24.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_19 = (fMoveAmount_19 * fAdjust_20);
    vPos_18.xz = (tmpvar_17.xz + (_ST_WindVector.xz * fMoveAmount_19));
    vPos_18 = (normalize(vPos_18) * fLength_21);
    billboardPos_9 = vPos_18;
  };
  tmpvar_7.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_7.w = 1.0;
  angle_10 = (_CameraXZAngle + tmpvar_16.z);
  highp float tmpvar_26;
  tmpvar_26 = (floor((
    (angle_10 * tmpvar_12.y)
   + 0.5)) / tmpvar_12.x);
  highp float tmpvar_27;
  tmpvar_27 = (fract(abs(tmpvar_26)) * tmpvar_12.x);
  highp float tmpvar_28;
  if ((tmpvar_26 >= 0.0)) {
    tmpvar_28 = tmpvar_27;
  } else {
    tmpvar_28 = -(tmpvar_27);
  };
  highp vec4 tmpvar_29;
  tmpvar_29 = _ImageTexCoords[int((tmpvar_12.z + tmpvar_28))];
  if ((tmpvar_29.w < 0.0)) {
    tmpvar_8.xy = (tmpvar_29.xy - (tmpvar_29.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_8.xy = (tmpvar_29.xy + (tmpvar_29.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_30;
  tmpvar_30 = clamp ((fract(
    ((tmpvar_15.x + tmpvar_15.y) + tmpvar_15.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_30;
  highp vec4 hPos_31;
  hPos_31 = (glstate_matrix_mvp * tmpvar_7);
  mediump vec3 screenPos_32;
  highp vec4 o_33;
  highp vec4 tmpvar_34;
  tmpvar_34 = (hPos_31 * 0.5);
  highp vec2 tmpvar_35;
  tmpvar_35.x = tmpvar_34.x;
  tmpvar_35.y = (tmpvar_34.y * _ProjectionParams.x);
  o_33.xy = (tmpvar_35 + tmpvar_34.w);
  o_33.zw = hPos_31.zw;
  highp vec3 tmpvar_36;
  tmpvar_36 = o_33.xyw;
  screenPos_32 = tmpvar_36;
  screenPos_32.xy = (screenPos_32.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = _Color;
  highp vec3 tmpvar_37;
  tmpvar_37 = (_Object2World * tmpvar_7).xyz;
  highp vec4 v_38;
  v_38.x = _World2Object[0].x;
  v_38.y = _World2Object[1].x;
  v_38.z = _World2Object[2].x;
  v_38.w = _World2Object[3].x;
  highp vec4 v_39;
  v_39.x = _World2Object[0].y;
  v_39.y = _World2Object[1].y;
  v_39.z = _World2Object[2].y;
  v_39.w = _World2Object[3].y;
  highp vec4 v_40;
  v_40.x = _World2Object[0].z;
  v_40.y = _World2Object[1].z;
  v_40.z = _World2Object[2].z;
  v_40.w = _World2Object[3].z;
  highp vec3 tmpvar_41;
  tmpvar_41 = normalize(((
    (v_38.xyz * _BillboardNormal.x)
   + 
    (v_39.xyz * _BillboardNormal.y)
  ) + (v_40.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_41;
  highp mat3 tmpvar_42;
  tmpvar_42[0] = _Object2World[0].xyz;
  tmpvar_42[1] = _Object2World[1].xyz;
  tmpvar_42[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_43;
  tmpvar_43 = normalize((tmpvar_42 * _BillboardTangent));
  worldTangent_3 = tmpvar_43;
  lowp vec3 tmpvar_44;
  tmpvar_44 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_45;
  tmpvar_45 = -(tmpvar_44);
  worldBinormal_2 = tmpvar_45;
  highp vec4 tmpvar_46;
  tmpvar_46.x = worldTangent_3.x;
  tmpvar_46.y = worldBinormal_2.x;
  tmpvar_46.z = worldNormal_4.x;
  tmpvar_46.w = tmpvar_37.x;
  highp vec4 tmpvar_47;
  tmpvar_47.x = worldTangent_3.y;
  tmpvar_47.y = worldBinormal_2.y;
  tmpvar_47.z = worldNormal_4.y;
  tmpvar_47.w = tmpvar_37.y;
  highp vec4 tmpvar_48;
  tmpvar_48.x = worldTangent_3.z;
  tmpvar_48.y = worldBinormal_2.z;
  tmpvar_48.z = worldNormal_4.z;
  tmpvar_48.w = tmpvar_37.z;
  lowp vec4 tmpvar_49;
  tmpvar_49.w = 1.0;
  tmpvar_49.xyz = worldNormal_4;
  mediump vec4 normal_50;
  normal_50 = tmpvar_49;
  mediump vec3 x2_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = (normal_50.xyzz * normal_50.yzzx);
  x2_51.x = dot (unity_SHBr, tmpvar_52);
  x2_51.y = dot (unity_SHBg, tmpvar_52);
  x2_51.z = dot (unity_SHBb, tmpvar_52);
  highp vec3 lightColor0_53;
  lightColor0_53 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_54;
  lightColor1_54 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_55;
  lightColor2_55 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_56;
  lightColor3_56 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_57;
  lightAttenSq_57 = unity_4LightAtten0;
  highp vec3 normal_58;
  normal_58 = worldNormal_4;
  highp vec3 col_59;
  highp vec4 ndotl_60;
  highp vec4 lengthSq_61;
  highp vec4 tmpvar_62;
  tmpvar_62 = (unity_4LightPosX0 - tmpvar_37.x);
  highp vec4 tmpvar_63;
  tmpvar_63 = (unity_4LightPosY0 - tmpvar_37.y);
  highp vec4 tmpvar_64;
  tmpvar_64 = (unity_4LightPosZ0 - tmpvar_37.z);
  lengthSq_61 = (tmpvar_62 * tmpvar_62);
  lengthSq_61 = (lengthSq_61 + (tmpvar_63 * tmpvar_63));
  lengthSq_61 = (lengthSq_61 + (tmpvar_64 * tmpvar_64));
  ndotl_60 = (tmpvar_62 * normal_58.x);
  ndotl_60 = (ndotl_60 + (tmpvar_63 * normal_58.y));
  ndotl_60 = (ndotl_60 + (tmpvar_64 * normal_58.z));
  highp vec4 tmpvar_65;
  tmpvar_65 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_60 * inversesqrt(lengthSq_61)));
  ndotl_60 = tmpvar_65;
  highp vec4 tmpvar_66;
  tmpvar_66 = (tmpvar_65 * (1.0/((1.0 + 
    (lengthSq_61 * lightAttenSq_57)
  ))));
  col_59 = (lightColor0_53 * tmpvar_66.x);
  col_59 = (col_59 + (lightColor1_54 * tmpvar_66.y));
  col_59 = (col_59 + (lightColor2_55 * tmpvar_66.z));
  col_59 = (col_59 + (lightColor3_56 * tmpvar_66.w));
  tmpvar_6 = ((x2_51 + (unity_SHC.xyz * 
    ((normal_50.x * normal_50.x) - (normal_50.y * normal_50.y))
  )) + col_59);
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_TEXCOORD0 = tmpvar_46;
  xlv_TEXCOORD1 = tmpvar_47;
  xlv_TEXCOORD2 = tmpvar_48;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = screenPos_32;
  xlv_TEXCOORD6 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_16;
  x_16 = (tmpvar_9 - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_17.x, max (tmpvar_17.y, tmpvar_17.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_17 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_18;
  tmpvar_18 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD0.xyz, tmpvar_18);
  worldN_3.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD1.xyz, tmpvar_18);
  worldN_3.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (xlv_TEXCOORD2.xyz, tmpvar_18);
  worldN_3.z = tmpvar_21;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_22;
  normalWorld_22 = worldN_3;
  mediump vec3 tmpvar_23;
  mediump vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = normalWorld_22;
  mediump vec3 x1_25;
  x1_25.x = dot (unity_SHAr, tmpvar_24);
  x1_25.y = dot (unity_SHAg, tmpvar_24);
  x1_25.z = dot (unity_SHAb, tmpvar_24);
  tmpvar_23 = (xlv_TEXCOORD6 + x1_25);
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_28 = tmpvar_29;
  c_27.xyz = ((tmpvar_8 * tmpvar_1) * diff_28);
  c_27.w = tmpvar_9;
  c_26.w = c_27.w;
  c_26.xyz = (c_27.xyz + (tmpvar_8 * tmpvar_23));
  c_4.xyz = c_26.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
highp uint tu0;
bool tb0;
highp vec4 t1;
mediump vec4 t16_1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
highp vec4 t5;
mediump float t16_5;
lowp vec3 t10_6;
mediump vec3 t16_7;
mediump vec3 t16_8;
highp vec3 t9;
highp vec2 t10;
highp float t11;
highp uint tu11;
highp float t18;
highp vec2 t20;
highp float t27;
highp float t28;
bool tb28;
void main()
{
    //Instruction 63511
    //LT
    tb0 = 0.0<_InstanceData.x;
    //Instruction 63512
    //MOVC
    t0 = (bool(tb0)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 63513
    //ADD
    t1.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 63514
    //ADD
    t2.x = t0.w + t1.x;
    //Instruction 63515
    //MAD
    t2.y = t0.w * 0.800000 + t1.y;
    //Instruction 63516
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 63517
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 63518
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 63519
    //MUL
    t20.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 63520
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 63521
    //MAD
    t2.xy = t20.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 63522
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 63523
    //MAD
    t27 = t2.y * t2.y + t2.x;
    //Instruction 63524
    //DIV
    t28 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 63525
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t28;
    //Instruction 63526
    //DIV
    t28 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 63527
    //ADD
    t2.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 63528
    //MUL
    t11 = in_COLOR0.w * 255.000000;
    //Instruction 63529
    //FTOU
    tu11 = uint(t11);
    //Instruction 63530
    //MUL
    t2.x = t2.x * _TreeSize[int(tu11) + 0].x;
    //Instruction 63531
    //MUL
    t0.x = t0.x * t2.x;
    //Instruction 63532
    //MUL
    t3.xyz = t0.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 63533
    //MAD
    t0.x = in_TEXCOORD0.y * _TreeSize[int(tu11) + 0].y + _TreeSize[int(tu11) + 0].z;
    //Instruction 63534
    //MAD
    t3.w = t0.x * t0.y + t3.y;
    //Instruction 63535
    //ADD
    t0.x = t0.z + _CameraXZAngle;
    //Instruction 63536
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu11) + 0].y + 0.500000;
    //Instruction 63537
    //ROUND_NI
    t0.x = floor(t0.x);
    //Instruction 63538
    //DIV
    t0.x = t0.x / _TreeInfo[int(tu11) + 0].x;
    //Instruction 63539
    //MAD
    t9.x = (-t28) * 0.250000 + t3.w;
    //Instruction 63540
    //MAX
    t9.x = max(t9.x, 0.0);
    //Instruction 63541
    //MUL
    t9.x = t9.x * _ST_WindGlobal.z;
    //Instruction 63542
    //LOG
    t18 = log2(t9.x);
    //Instruction 63543
    //MUL
    t18 = t18 * _ST_WindGlobal.w;
    //Instruction 63544
    //EXP
    t18 = exp2(t18);
    //Instruction 63545
    //NE
    tb28 = t9.x!=0.0;
    //Instruction 63546
    //MOVC
    t9.x = (tb28) ? t18 : t9.x;
    //Instruction 63547
    //MUL
    t9.x = t9.x * t27;
    //Instruction 63548
    //MAD
    t4.xz = _ST_WindVector.xz * t9.xx + t3.xz;
    //Instruction 63549
    //MOV
    t4.y = t3.w;
    //Instruction 63550
    //DP3
    t9.x = dot(t4.xyz, t4.xyz);
    //Instruction 63551
    //RSQ
    t9.x = inversesqrt(t9.x);
    //Instruction 63552
    //MUL
    t9.xyz = t9.xxx * t4.xyz;
    //Instruction 63553
    //DP3
    t28 = dot(t3.xzw, t3.xzw);
    //Instruction 63554
    //SQRT
    t28 = sqrt(t28);
    //Instruction 63555
    //MUL
    t9.xyz = t9.xyz * vec3(t28);
    //Instruction 63556
    //MUL
    t16_5 = _WindEnabled * _WindQuality;
    //Instruction 63557
    //LT
    tb28 = 0.0<t16_5;
    //Instruction 63558
    //MOVC
    t9.xyz = (bool(tb28)) ? t9.xyz : t3.xwz;
    //Instruction 63559
    //ADD
    t9.xyz = t9.xyz + in_POSITION0.xyz;
    //Instruction 63560
    //MUL
    t3 = t9.yyyy * glstate_matrix_mvp[1];
    //Instruction 63561
    //MAD
    t3 = glstate_matrix_mvp[0] * t9.xxxx + t3;
    //Instruction 63562
    //MAD
    t3 = glstate_matrix_mvp[2] * t9.zzzz + t3;
    //Instruction 63563
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 63564
    //MUL
    t2.xzw = t9.yyy * _Object2World[1].xyz;
    //Instruction 63565
    //MAD
    t2.xzw = _Object2World[0].xyz * t9.xxx + t2.xzw;
    //Instruction 63566
    //MAD
    t2.xzw = _Object2World[2].xyz * t9.zzz + t2.xzw;
    //Instruction 63567
    //ADD
    t2.xzw = t2.xzw + _Object2World[3].xyz;
    //Instruction 63568
    //MOV
    vs_TEXCOORD0.w = t2.x;
    //Instruction 63569
    //MUL
    t3.xyz = _Object2World[1].yzx * _BillboardTangent.xyzx.yyy;
    //Instruction 63570
    //MAD
    t3.xyz = _Object2World[0].yzx * _BillboardTangent.xyzx.xxx + t3.xyz;
    //Instruction 63571
    //MAD
    t3.xyz = _Object2World[2].yzx * _BillboardTangent.xyzx.zzz + t3.xyz;
    //Instruction 63572
    //DP3
    t28 = dot(t3.xyz, t3.xyz);
    //Instruction 63573
    //RSQ
    t28 = inversesqrt(t28);
    //Instruction 63574
    //MUL
    t3.xyz = vec3(t28) * t3.xyz;
    //Instruction 63575
    //MOV
    vs_TEXCOORD0.x = t3.z;
    //Instruction 63576
    //MUL
    t4.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 63577
    //MUL
    t4.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 63578
    //MUL
    t4.zw = _World2Object[2].xx * _BillboardNormal.xyzx.xx;
    //Instruction 63579
    //MUL
    t5.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 63580
    //MUL
    t5.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 63581
    //MUL
    t5.zw = _World2Object[2].yy * _BillboardNormal.xyzx.yy;
    //Instruction 63582
    //ADD
    t4 = t4 + t5;
    //Instruction 63583
    //MUL
    t5.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 63584
    //MUL
    t5.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 63585
    //MUL
    t5.zw = _World2Object[2].zz * _BillboardNormal.xyzx.zz;
    //Instruction 63586
    //ADD
    t4 = t4 + t5;
    //Instruction 63587
    //DP3
    t28 = dot(t4.xyw, t4.xyw);
    //Instruction 63588
    //RSQ
    t28 = inversesqrt(t28);
    //Instruction 63589
    //MUL
    t4 = vec4(t28) * t4;
    //Instruction 63590
    //MUL
    t10_6.xyz = t3.xyz * t4.wxy;
    //Instruction 63591
    //MAD
    t10_6.xyz = t4.ywx * t3.yzx + (-t10_6.xyz);
    //Instruction 63592
    //MOV
    vs_TEXCOORD0.y = (-t10_6.x);
    //Instruction 63593
    //MOV
    vs_TEXCOORD0.z = t4.x;
    //Instruction 63594
    //MOV
    vs_TEXCOORD1.x = t3.x;
    //Instruction 63595
    //MOV
    vs_TEXCOORD2.x = t3.y;
    //Instruction 63596
    //MOV
    vs_TEXCOORD1.w = t2.z;
    //Instruction 63597
    //MOV
    vs_TEXCOORD1.z = t4.y;
    //Instruction 63598
    //MOV
    vs_TEXCOORD1.y = (-t10_6.y);
    //Instruction 63599
    //MOV
    vs_TEXCOORD2.y = (-t10_6.z);
    //Instruction 63600
    //MOV
    vs_TEXCOORD2.w = t2.w;
    //Instruction 63601
    //MOV
    vs_TEXCOORD2.z = t4.w;
    //Instruction 63602
    //MOV
    vs_TEXCOORD3 = _Color;
    //Instruction 63603
    //ADD
    t1.x = t1.y + t1.x;
    //Instruction 63604
    //ADD
    t1.x = t1.z + t1.x;
    //Instruction 63605
    //FRC
    t1.x = fract(t1.x);
    //Instruction 63606
    //MUL
    t1.x = t1.x * _HueVariation.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 63607
    //MOV
    vs_TEXCOORD4.z = t1.x;
    //Instruction 63608
    //GE
    tb1 = t0.x>=(-t0.x);
    //Instruction 63609
    //FRC
    t0.x = fract(abs(t0.x));
    //Instruction 63610
    //MOVC
    t0.x = (tb1) ? t0.x : (-t0.x);
    //Instruction 63611
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu11) + 0].x + _TreeInfo[int(tu11) + 0].z;
    //Instruction 63612
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 63613
    //LT
    tb1 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 63614
    //MAD
    t10.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 63615
    //MAD
    t3.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 63616
    //MOVC
    vs_TEXCOORD4.xy = (bool(tb1)) ? t10.xy : t3.xy;
    //Instruction 63617
    //MUL
    t1.xyz = t9.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 63618
    //MAD
    t0.xyz = glstate_matrix_mvp[0].xyw * t9.xxx + t1.xyz;
    //Instruction 63619
    //MAD
    t0.xyz = glstate_matrix_mvp[2].xyw * t9.zzz + t0.xyz;
    //Instruction 63620
    //ADD
    t0.xyz = t0.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 63621
    //MUL
    t1.xz = t0.xz * vec2(0.500000, 0.500000);
    //Instruction 63622
    //MUL
    t27 = t0.y * _ProjectionParams.x;
    //Instruction 63623
    //MUL
    t1.w = t27 * 0.500000;
    //Instruction 63624
    //ADD
    t1.xy = t1.zz + t1.xw;
    //Instruction 63625
    //MUL
    t1.xy = t1.xy * _ScreenParams.xy;
    //Instruction 63626
    //MUL
    t0.xy = t1.xy * vec2(0.250000, 0.250000);
    //Instruction 63627
    //MOV
    vs_TEXCOORD5.xyz = t0.xyz;
    //Instruction 63628
    //ADD
    t0 = (-t2.wwww) + unity_4LightPosZ0;
    //Instruction 63629
    //ADD
    t1 = (-t2.xxxx) + unity_4LightPosX0;
    //Instruction 63630
    //ADD
    t2 = (-t2.zzzz) + unity_4LightPosY0;
    //Instruction 63631
    //MUL
    t3 = t4.yyyy * t2;
    //Instruction 63632
    //MUL
    t2 = t2 * t2;
    //Instruction 63633
    //MAD
    t2 = t1 * t1 + t2;
    //Instruction 63634
    //MAD
    t1 = t1 * t4.xxxx + t3;
    //Instruction 63635
    //MAD
    t1 = t0 * t4.wwww + t1;
    //Instruction 63636
    //MAD
    t0 = t0 * t0 + t2;
    //Instruction 63637
    //RSQ
    t2 = inversesqrt(t0);
    //Instruction 63638
    //MAD
    t0 = t0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 63639
    //DIV
    t0 = vec4(1.0, 1.0, 1.0, 1.0) / t0;
    //Instruction 63640
    //MUL
    t1 = t1 * t2;
    //Instruction 63641
    //MAX
    t1 = max(t1, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 63642
    //MUL
    t0 = t0 * t1;
    //Instruction 63643
    //MUL
    t1.xyz = t0.yyy * unity_LightColor[1].xyz;
    //Instruction 63644
    //MAD
    t1.xyz = unity_LightColor[0].xyz * t0.xxx + t1.xyz;
    //Instruction 63645
    //MAD
    t0.xyz = unity_LightColor[2].xyz * t0.zzz + t1.xyz;
    //Instruction 63646
    //MAD
    t0.xyz = unity_LightColor[3].xyz * t0.www + t0.xyz;
    //Instruction 63647
    //MUL
    t16_7.x = t4.y * t4.y;
    //Instruction 63648
    //MAD
    t16_7.x = t4.x * t4.x + (-t16_7.x);
    //Instruction 63649
    //MUL
    t16_1 = t4.ywzx * t4;
    //Instruction 63650
    //DP4
    t16_8.x = dot(unity_SHBr, t16_1);
    //Instruction 63651
    //DP4
    t16_8.y = dot(unity_SHBg, t16_1);
    //Instruction 63652
    //DP4
    t16_8.z = dot(unity_SHBb, t16_1);
    //Instruction 63653
    //MAD
    t16_7.xyz = unity_SHC.xyz * t16_7.xxx + t16_8.xyz;
    //Instruction 63654
    //ADD
    t0.xyz = t0.xyz + t16_7.xyz;
    //Instruction 63655
    //MOV
    vs_TEXCOORD6.xyz = t0.xyz;
    //Instruction 63656
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump float t16_6;
mediump vec3 t16_9;
mediump float t16_21;
void main()
{
    //Instruction 63471
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    //Instruction 63472
    //FRC
    t16_6 = fract(t16_0.y);
    //Instruction 63473
    //MOV
    t1.x = t16_0.x;
    //Instruction 63474
    //MAD
    t1.y = t16_6 * 0.062500 + unity_LODFade.y;
    //Instruction 63475
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 63476
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 63477
    //LT
    tb1 = t16_1<0.0;
    //Instruction 63478
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 63479
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    //Instruction 63480
    //MAD
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 63481
    //LT
    tb1 = t10_2.x<0.0;
    //Instruction 63482
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 63483
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 63484
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 63485
    //ADD
    t16_9.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 63486
    //MAD
    t16_9.xyz = vs_TEXCOORD4.zzz * t16_9.xyz + t10_0.xyz;
    //Instruction 63487
    //MAX
    t16_4.x = max(t16_9.z, t16_9.y);
    //Instruction 63488
    //MAX
    t16_4.x = max(t16_9.x, t16_4.x);
    //Instruction 63489
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 63490
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 63491
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_9.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 63492
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD3.xyz;
    //Instruction 63493
    //MUL
    t16_4.xyz = t16_3.xyz * _LightColor0.xyz;
    //Instruction 63494
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 63495
    //MAD
    t10_2.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 63496
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    //Instruction 63497
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    //Instruction 63498
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    //Instruction 63499
    //MOV
    t0.w = 1.0;
    //Instruction 63500
    //DP4
    t16_5.x = dot(unity_SHAr, t0);
    //Instruction 63501
    //DP4
    t16_5.y = dot(unity_SHAg, t0);
    //Instruction 63502
    //DP4
    t16_5.z = dot(unity_SHAb, t0);
    //Instruction 63503
    //DP3
    t16_21 = dot(t0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 63504
    //MAX
    t16_21 = max(t16_21, 0.0);
    //Instruction 63505
    //ADD
    t16_5.xyz = t16_5.xyz + vs_TEXCOORD6.xyz;
    //Instruction 63506
    //MUL
    t16_3.xyz = t16_3.xyz * t16_5.xyz;
    //Instruction 63507
    //MAD
    t16_3.xyz = t16_4.xyz * vec3(t16_21) + t16_3.xyz;
    //Instruction 63508
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 63509
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 63510
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = _glesVertex;
  mediump vec3 tmpvar_9;
  highp vec3 billboardPos_10;
  highp float angle_11;
  highp float tmpvar_12;
  tmpvar_12 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_13;
  tmpvar_13 = _TreeInfo[int(tmpvar_12)];
  highp vec4 tmpvar_14;
  tmpvar_14 = _TreeSize[int(tmpvar_12)];
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  highp vec3 tmpvar_16;
  tmpvar_16 = (_glesVertex.xyz + tmpvar_15);
  angle_11 = _CameraXZAngle;
  highp vec4 tmpvar_17;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_17 = _InstanceData;
  } else {
    tmpvar_17 = tmpvar_1;
  };
  highp vec3 tmpvar_18;
  tmpvar_18 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_14.x) * tmpvar_17.x) * _BillboardTangent);
  billboardPos_10.xz = tmpvar_18.xz;
  billboardPos_10.y = (tmpvar_18.y + ((
    (_glesMultiTexCoord0.y * tmpvar_14.y)
   + tmpvar_14.z) * tmpvar_17.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_19;
    vPos_19 = billboardPos_10;
    highp float fMoveAmount_20;
    highp float fAdjust_21;
    highp float fLength_22;
    fLength_22 = sqrt(dot (billboardPos_10, billboardPos_10));
    highp float tmpvar_23;
    tmpvar_23 = (max ((billboardPos_10.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_21 = tmpvar_23;
    if ((tmpvar_23 != 0.0)) {
      fAdjust_21 = pow (tmpvar_23, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_24;
    tmpvar_24.zw = vec2(0.0, 0.0);
    tmpvar_24.x = (tmpvar_16.x + tmpvar_17.w);
    tmpvar_24.y = (tmpvar_16.y + (tmpvar_17.w * 0.8));
    highp vec4 tmpvar_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = abs(((
      fract((tmpvar_24 + 0.5))
     * 2.0) - 1.0));
    tmpvar_25 = (((
      (tmpvar_26 * tmpvar_26)
     * 
      (3.0 - (2.0 * tmpvar_26))
    ) - 0.5) * 2.0);
    fMoveAmount_20 = ((_ST_WindGlobal.y * (tmpvar_25.x + 
      (tmpvar_25.y * tmpvar_25.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_20 = (fMoveAmount_20 * fAdjust_21);
    vPos_19.xz = (tmpvar_18.xz + (_ST_WindVector.xz * fMoveAmount_20));
    vPos_19 = (normalize(vPos_19) * fLength_22);
    billboardPos_10 = vPos_19;
  };
  tmpvar_8.xyz = (_glesVertex.xyz + billboardPos_10);
  tmpvar_8.w = 1.0;
  angle_11 = (_CameraXZAngle + tmpvar_17.z);
  highp float tmpvar_27;
  tmpvar_27 = (floor((
    (angle_11 * tmpvar_13.y)
   + 0.5)) / tmpvar_13.x);
  highp float tmpvar_28;
  tmpvar_28 = (fract(abs(tmpvar_27)) * tmpvar_13.x);
  highp float tmpvar_29;
  if ((tmpvar_27 >= 0.0)) {
    tmpvar_29 = tmpvar_28;
  } else {
    tmpvar_29 = -(tmpvar_28);
  };
  highp vec4 tmpvar_30;
  tmpvar_30 = _ImageTexCoords[int((tmpvar_13.z + tmpvar_29))];
  if ((tmpvar_30.w < 0.0)) {
    tmpvar_9.xy = (tmpvar_30.xy - (tmpvar_30.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_9.xy = (tmpvar_30.xy + (tmpvar_30.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_31;
  tmpvar_31 = clamp ((fract(
    ((tmpvar_16.x + tmpvar_16.y) + tmpvar_16.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_31;
  highp vec4 hPos_32;
  hPos_32 = (glstate_matrix_mvp * tmpvar_8);
  mediump vec3 screenPos_33;
  highp vec4 o_34;
  highp vec4 tmpvar_35;
  tmpvar_35 = (hPos_32 * 0.5);
  highp vec2 tmpvar_36;
  tmpvar_36.x = tmpvar_35.x;
  tmpvar_36.y = (tmpvar_35.y * _ProjectionParams.x);
  o_34.xy = (tmpvar_36 + tmpvar_35.w);
  o_34.zw = hPos_32.zw;
  highp vec3 tmpvar_37;
  tmpvar_37 = o_34.xyw;
  screenPos_33 = tmpvar_37;
  screenPos_33.xy = (screenPos_33.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = _Color;
  highp vec3 tmpvar_38;
  tmpvar_38 = (_Object2World * tmpvar_8).xyz;
  highp vec4 v_39;
  v_39.x = _World2Object[0].x;
  v_39.y = _World2Object[1].x;
  v_39.z = _World2Object[2].x;
  v_39.w = _World2Object[3].x;
  highp vec4 v_40;
  v_40.x = _World2Object[0].y;
  v_40.y = _World2Object[1].y;
  v_40.z = _World2Object[2].y;
  v_40.w = _World2Object[3].y;
  highp vec4 v_41;
  v_41.x = _World2Object[0].z;
  v_41.y = _World2Object[1].z;
  v_41.z = _World2Object[2].z;
  v_41.w = _World2Object[3].z;
  highp vec3 tmpvar_42;
  tmpvar_42 = normalize(((
    (v_39.xyz * _BillboardNormal.x)
   + 
    (v_40.xyz * _BillboardNormal.y)
  ) + (v_41.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_42;
  highp mat3 tmpvar_43;
  tmpvar_43[0] = _Object2World[0].xyz;
  tmpvar_43[1] = _Object2World[1].xyz;
  tmpvar_43[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize((tmpvar_43 * _BillboardTangent));
  worldTangent_3 = tmpvar_44;
  lowp vec3 tmpvar_45;
  tmpvar_45 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_46;
  tmpvar_46 = -(tmpvar_45);
  worldBinormal_2 = tmpvar_46;
  highp vec4 tmpvar_47;
  tmpvar_47.x = worldTangent_3.x;
  tmpvar_47.y = worldBinormal_2.x;
  tmpvar_47.z = worldNormal_4.x;
  tmpvar_47.w = tmpvar_38.x;
  highp vec4 tmpvar_48;
  tmpvar_48.x = worldTangent_3.y;
  tmpvar_48.y = worldBinormal_2.y;
  tmpvar_48.z = worldNormal_4.y;
  tmpvar_48.w = tmpvar_38.y;
  highp vec4 tmpvar_49;
  tmpvar_49.x = worldTangent_3.z;
  tmpvar_49.y = worldBinormal_2.z;
  tmpvar_49.z = worldNormal_4.z;
  tmpvar_49.w = tmpvar_38.z;
  lowp vec4 tmpvar_50;
  tmpvar_50.w = 1.0;
  tmpvar_50.xyz = worldNormal_4;
  mediump vec4 normal_51;
  normal_51 = tmpvar_50;
  mediump vec3 x2_52;
  mediump vec4 tmpvar_53;
  tmpvar_53 = (normal_51.xyzz * normal_51.yzzx);
  x2_52.x = dot (unity_SHBr, tmpvar_53);
  x2_52.y = dot (unity_SHBg, tmpvar_53);
  x2_52.z = dot (unity_SHBb, tmpvar_53);
  highp vec3 lightColor0_54;
  lightColor0_54 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_55;
  lightColor1_55 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_56;
  lightColor2_56 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_57;
  lightColor3_57 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_58;
  lightAttenSq_58 = unity_4LightAtten0;
  highp vec3 normal_59;
  normal_59 = worldNormal_4;
  highp vec3 col_60;
  highp vec4 ndotl_61;
  highp vec4 lengthSq_62;
  highp vec4 tmpvar_63;
  tmpvar_63 = (unity_4LightPosX0 - tmpvar_38.x);
  highp vec4 tmpvar_64;
  tmpvar_64 = (unity_4LightPosY0 - tmpvar_38.y);
  highp vec4 tmpvar_65;
  tmpvar_65 = (unity_4LightPosZ0 - tmpvar_38.z);
  lengthSq_62 = (tmpvar_63 * tmpvar_63);
  lengthSq_62 = (lengthSq_62 + (tmpvar_64 * tmpvar_64));
  lengthSq_62 = (lengthSq_62 + (tmpvar_65 * tmpvar_65));
  ndotl_61 = (tmpvar_63 * normal_59.x);
  ndotl_61 = (ndotl_61 + (tmpvar_64 * normal_59.y));
  ndotl_61 = (ndotl_61 + (tmpvar_65 * normal_59.z));
  highp vec4 tmpvar_66;
  tmpvar_66 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_61 * inversesqrt(lengthSq_62)));
  ndotl_61 = tmpvar_66;
  highp vec4 tmpvar_67;
  tmpvar_67 = (tmpvar_66 * (1.0/((1.0 + 
    (lengthSq_62 * lightAttenSq_58)
  ))));
  col_60 = (lightColor0_54 * tmpvar_67.x);
  col_60 = (col_60 + (lightColor1_55 * tmpvar_67.y));
  col_60 = (col_60 + (lightColor2_56 * tmpvar_67.z));
  col_60 = (col_60 + (lightColor3_57 * tmpvar_67.w));
  tmpvar_6 = ((x2_52 + (unity_SHC.xyz * 
    ((normal_51.x * normal_51.x) - (normal_51.y * normal_51.y))
  )) + col_60);
  tmpvar_7 = (unity_World2Shadow[0] * (_Object2World * tmpvar_8));
  gl_Position = (glstate_matrix_mvp * tmpvar_8);
  xlv_TEXCOORD0 = tmpvar_47;
  xlv_TEXCOORD1 = tmpvar_48;
  xlv_TEXCOORD2 = tmpvar_49;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = screenPos_33;
  xlv_TEXCOORD6 = tmpvar_6;
  xlv_TEXCOORD7 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_13.x = tmpvar_14.x;
  projUV_13.y = ((fract(tmpvar_14.y) * 0.0625) + unity_LODFade.y);
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_12 = tmpvar_16;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_17;
  x_17 = (tmpvar_10 - _Cutoff);
  if ((x_17 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_18;
  tmpvar_18 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_18.x, max (tmpvar_18.y, tmpvar_18.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_18 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_19;
  tmpvar_19 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7).x > 
    (xlv_TEXCOORD7.z / xlv_TEXCOORD7.w)
  )), _LightShadowData.x);
  tmpvar_20 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (xlv_TEXCOORD0.xyz, tmpvar_19);
  worldN_4.x = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = dot (xlv_TEXCOORD1.xyz, tmpvar_19);
  worldN_4.y = tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = dot (xlv_TEXCOORD2.xyz, tmpvar_19);
  worldN_4.z = tmpvar_24;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_20;
  mediump vec3 normalWorld_25;
  normalWorld_25 = worldN_4;
  mediump vec3 tmpvar_26;
  mediump vec3 tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = normalWorld_25;
  mediump vec3 x1_29;
  x1_29.x = dot (unity_SHAr, tmpvar_28);
  x1_29.y = dot (unity_SHAg, tmpvar_28);
  x1_29.z = dot (unity_SHAb, tmpvar_28);
  tmpvar_27 = (xlv_TEXCOORD6 + x1_29);
  tmpvar_26 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_26;
  lowp vec4 c_30;
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_32 = tmpvar_33;
  c_31.xyz = ((tmpvar_9 * tmpvar_26) * diff_32);
  c_31.w = tmpvar_10;
  c_30.w = c_31.w;
  c_30.xyz = (c_31.xyz + (tmpvar_9 * tmpvar_27));
  c_5.xyz = c_30.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesVertex;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float angle_10;
  highp float tmpvar_11;
  tmpvar_11 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeInfo[int(tmpvar_11)];
  highp vec4 tmpvar_13;
  tmpvar_13 = _TreeSize[int(tmpvar_11)];
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (_glesVertex.xyz + tmpvar_14);
  angle_10 = _CameraXZAngle;
  highp vec4 tmpvar_16;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_16 = _InstanceData;
  } else {
    tmpvar_16 = tmpvar_1;
  };
  highp vec3 tmpvar_17;
  tmpvar_17 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_13.x) * tmpvar_16.x) * _BillboardTangent);
  billboardPos_9.xz = tmpvar_17.xz;
  billboardPos_9.y = (tmpvar_17.y + ((
    (_glesMultiTexCoord0.y * tmpvar_13.y)
   + tmpvar_13.z) * tmpvar_16.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_18;
    vPos_18 = billboardPos_9;
    highp float fMoveAmount_19;
    highp float fAdjust_20;
    highp float fLength_21;
    fLength_21 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_22;
    tmpvar_22 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_20 = tmpvar_22;
    if ((tmpvar_22 != 0.0)) {
      fAdjust_20 = pow (tmpvar_22, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_23;
    tmpvar_23.zw = vec2(0.0, 0.0);
    tmpvar_23.x = (tmpvar_15.x + tmpvar_16.w);
    tmpvar_23.y = (tmpvar_15.y + (tmpvar_16.w * 0.8));
    highp vec4 tmpvar_24;
    highp vec4 tmpvar_25;
    tmpvar_25 = abs(((
      fract((tmpvar_23 + 0.5))
     * 2.0) - 1.0));
    tmpvar_24 = (((
      (tmpvar_25 * tmpvar_25)
     * 
      (3.0 - (2.0 * tmpvar_25))
    ) - 0.5) * 2.0);
    fMoveAmount_19 = ((_ST_WindGlobal.y * (tmpvar_24.x + 
      (tmpvar_24.y * tmpvar_24.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_19 = (fMoveAmount_19 * fAdjust_20);
    vPos_18.xz = (tmpvar_17.xz + (_ST_WindVector.xz * fMoveAmount_19));
    vPos_18 = (normalize(vPos_18) * fLength_21);
    billboardPos_9 = vPos_18;
  };
  tmpvar_7.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_7.w = 1.0;
  angle_10 = (_CameraXZAngle + tmpvar_16.z);
  highp float tmpvar_26;
  tmpvar_26 = (floor((
    (angle_10 * tmpvar_12.y)
   + 0.5)) / tmpvar_12.x);
  highp float tmpvar_27;
  tmpvar_27 = (fract(abs(tmpvar_26)) * tmpvar_12.x);
  highp float tmpvar_28;
  if ((tmpvar_26 >= 0.0)) {
    tmpvar_28 = tmpvar_27;
  } else {
    tmpvar_28 = -(tmpvar_27);
  };
  highp vec4 tmpvar_29;
  tmpvar_29 = _ImageTexCoords[int((tmpvar_12.z + tmpvar_28))];
  if ((tmpvar_29.w < 0.0)) {
    tmpvar_8.xy = (tmpvar_29.xy - (tmpvar_29.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_8.xy = (tmpvar_29.xy + (tmpvar_29.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_30;
  tmpvar_30 = clamp ((fract(
    ((tmpvar_15.x + tmpvar_15.y) + tmpvar_15.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_30;
  highp vec4 hPos_31;
  hPos_31 = (glstate_matrix_mvp * tmpvar_7);
  mediump vec3 screenPos_32;
  highp vec4 o_33;
  highp vec4 tmpvar_34;
  tmpvar_34 = (hPos_31 * 0.5);
  highp vec2 tmpvar_35;
  tmpvar_35.x = tmpvar_34.x;
  tmpvar_35.y = (tmpvar_34.y * _ProjectionParams.x);
  o_33.xy = (tmpvar_35 + tmpvar_34.w);
  o_33.zw = hPos_31.zw;
  highp vec3 tmpvar_36;
  tmpvar_36 = o_33.xyw;
  screenPos_32 = tmpvar_36;
  screenPos_32.xy = (screenPos_32.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = _Color;
  highp vec3 tmpvar_37;
  tmpvar_37 = (_Object2World * tmpvar_7).xyz;
  highp vec4 v_38;
  v_38.x = _World2Object[0].x;
  v_38.y = _World2Object[1].x;
  v_38.z = _World2Object[2].x;
  v_38.w = _World2Object[3].x;
  highp vec4 v_39;
  v_39.x = _World2Object[0].y;
  v_39.y = _World2Object[1].y;
  v_39.z = _World2Object[2].y;
  v_39.w = _World2Object[3].y;
  highp vec4 v_40;
  v_40.x = _World2Object[0].z;
  v_40.y = _World2Object[1].z;
  v_40.z = _World2Object[2].z;
  v_40.w = _World2Object[3].z;
  highp vec3 tmpvar_41;
  tmpvar_41 = normalize(((
    (v_38.xyz * _BillboardNormal.x)
   + 
    (v_39.xyz * _BillboardNormal.y)
  ) + (v_40.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_41;
  highp mat3 tmpvar_42;
  tmpvar_42[0] = _Object2World[0].xyz;
  tmpvar_42[1] = _Object2World[1].xyz;
  tmpvar_42[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_43;
  tmpvar_43 = normalize((tmpvar_42 * _BillboardTangent));
  worldTangent_3 = tmpvar_43;
  lowp vec3 tmpvar_44;
  tmpvar_44 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_45;
  tmpvar_45 = -(tmpvar_44);
  worldBinormal_2 = tmpvar_45;
  highp vec4 tmpvar_46;
  tmpvar_46.x = worldTangent_3.x;
  tmpvar_46.y = worldBinormal_2.x;
  tmpvar_46.z = worldNormal_4.x;
  tmpvar_46.w = tmpvar_37.x;
  highp vec4 tmpvar_47;
  tmpvar_47.x = worldTangent_3.y;
  tmpvar_47.y = worldBinormal_2.y;
  tmpvar_47.z = worldNormal_4.y;
  tmpvar_47.w = tmpvar_37.y;
  highp vec4 tmpvar_48;
  tmpvar_48.x = worldTangent_3.z;
  tmpvar_48.y = worldBinormal_2.z;
  tmpvar_48.z = worldNormal_4.z;
  tmpvar_48.w = tmpvar_37.z;
  lowp vec4 tmpvar_49;
  tmpvar_49.w = 1.0;
  tmpvar_49.xyz = worldNormal_4;
  mediump vec4 normal_50;
  normal_50 = tmpvar_49;
  mediump vec3 x2_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = (normal_50.xyzz * normal_50.yzzx);
  x2_51.x = dot (unity_SHBr, tmpvar_52);
  x2_51.y = dot (unity_SHBg, tmpvar_52);
  x2_51.z = dot (unity_SHBb, tmpvar_52);
  tmpvar_6 = (unity_World2Shadow[0] * (_Object2World * tmpvar_7));
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_TEXCOORD0 = tmpvar_46;
  xlv_TEXCOORD1 = tmpvar_47;
  xlv_TEXCOORD2 = tmpvar_48;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = screenPos_32;
  xlv_TEXCOORD6 = (x2_51 + (unity_SHC.xyz * (
    (normal_50.x * normal_50.x)
   - 
    (normal_50.y * normal_50.y)
  )));
  xlv_TEXCOORD7 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_13.x = tmpvar_14.x;
  projUV_13.y = ((fract(tmpvar_14.y) * 0.0625) + unity_LODFade.y);
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_12 = tmpvar_16;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_17;
  x_17 = (tmpvar_10 - _Cutoff);
  if ((x_17 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_18;
  tmpvar_18 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_18.x, max (tmpvar_18.y, tmpvar_18.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_18 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_19;
  tmpvar_19 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float shadow_20;
  shadow_20 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD7.xyz) * (1.0 - _LightShadowData.x)));
  highp float tmpvar_21;
  tmpvar_21 = dot (xlv_TEXCOORD0.xyz, tmpvar_19);
  worldN_4.x = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (xlv_TEXCOORD1.xyz, tmpvar_19);
  worldN_4.y = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = dot (xlv_TEXCOORD2.xyz, tmpvar_19);
  worldN_4.z = tmpvar_23;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_20;
  mediump vec3 normalWorld_24;
  normalWorld_24 = worldN_4;
  mediump vec3 tmpvar_25;
  mediump vec3 tmpvar_26;
  mediump vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = normalWorld_24;
  mediump vec3 x1_28;
  x1_28.x = dot (unity_SHAr, tmpvar_27);
  x1_28.y = dot (unity_SHAg, tmpvar_27);
  x1_28.z = dot (unity_SHAb, tmpvar_27);
  tmpvar_26 = (xlv_TEXCOORD6 + x1_28);
  tmpvar_25 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_25;
  lowp vec4 c_29;
  lowp vec4 c_30;
  lowp float diff_31;
  mediump float tmpvar_32;
  tmpvar_32 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_31 = tmpvar_32;
  c_30.xyz = ((tmpvar_9 * tmpvar_25) * diff_31);
  c_30.w = tmpvar_10;
  c_29.w = c_30.w;
  c_29.xyz = (c_30.xyz + (tmpvar_9 * tmpvar_26));
  c_5.xyz = c_29.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec4 vs_TEXCOORD7;
highp vec4 t0;
highp uint tu0;
bool tb0;
highp vec4 t1;
mediump vec4 t16_1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
mediump float t16_5;
lowp vec3 t10_6;
mediump vec3 t16_7;
highp vec3 t8;
highp vec2 t9;
highp float t10;
highp uint tu10;
highp float t16;
highp vec2 t18;
highp float t24;
highp float t25;
bool tb25;
void main()
{
    //Instruction 63701
    //LT
    tb0 = 0.0<_InstanceData.x;
    //Instruction 63702
    //MOVC
    t0 = (bool(tb0)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 63703
    //ADD
    t1.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 63704
    //ADD
    t2.x = t0.w + t1.x;
    //Instruction 63705
    //MAD
    t2.y = t0.w * 0.800000 + t1.y;
    //Instruction 63706
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 63707
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 63708
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 63709
    //MUL
    t18.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 63710
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 63711
    //MAD
    t2.xy = t18.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 63712
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 63713
    //MAD
    t24 = t2.y * t2.y + t2.x;
    //Instruction 63714
    //DIV
    t25 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 63715
    //MAD
    t24 = _ST_WindGlobal.y * t24 + t25;
    //Instruction 63716
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 63717
    //ADD
    t2.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 63718
    //MUL
    t10 = in_COLOR0.w * 255.000000;
    //Instruction 63719
    //FTOU
    tu10 = uint(t10);
    //Instruction 63720
    //MUL
    t2.x = t2.x * _TreeSize[int(tu10) + 0].x;
    //Instruction 63721
    //MUL
    t0.x = t0.x * t2.x;
    //Instruction 63722
    //MUL
    t3.xyz = t0.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 63723
    //MAD
    t0.x = in_TEXCOORD0.y * _TreeSize[int(tu10) + 0].y + _TreeSize[int(tu10) + 0].z;
    //Instruction 63724
    //MAD
    t3.w = t0.x * t0.y + t3.y;
    //Instruction 63725
    //ADD
    t0.x = t0.z + _CameraXZAngle;
    //Instruction 63726
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu10) + 0].y + 0.500000;
    //Instruction 63727
    //ROUND_NI
    t0.x = floor(t0.x);
    //Instruction 63728
    //DIV
    t0.x = t0.x / _TreeInfo[int(tu10) + 0].x;
    //Instruction 63729
    //MAD
    t8.x = (-t25) * 0.250000 + t3.w;
    //Instruction 63730
    //MAX
    t8.x = max(t8.x, 0.0);
    //Instruction 63731
    //MUL
    t8.x = t8.x * _ST_WindGlobal.z;
    //Instruction 63732
    //LOG
    t16 = log2(t8.x);
    //Instruction 63733
    //MUL
    t16 = t16 * _ST_WindGlobal.w;
    //Instruction 63734
    //EXP
    t16 = exp2(t16);
    //Instruction 63735
    //NE
    tb25 = t8.x!=0.0;
    //Instruction 63736
    //MOVC
    t8.x = (tb25) ? t16 : t8.x;
    //Instruction 63737
    //MUL
    t8.x = t8.x * t24;
    //Instruction 63738
    //MAD
    t4.xz = _ST_WindVector.xz * t8.xx + t3.xz;
    //Instruction 63739
    //MOV
    t4.y = t3.w;
    //Instruction 63740
    //DP3
    t8.x = dot(t4.xyz, t4.xyz);
    //Instruction 63741
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 63742
    //MUL
    t8.xyz = t8.xxx * t4.xyz;
    //Instruction 63743
    //DP3
    t25 = dot(t3.xzw, t3.xzw);
    //Instruction 63744
    //SQRT
    t25 = sqrt(t25);
    //Instruction 63745
    //MUL
    t8.xyz = t8.xyz * vec3(t25);
    //Instruction 63746
    //MUL
    t16_5 = _WindEnabled * _WindQuality;
    //Instruction 63747
    //LT
    tb25 = 0.0<t16_5;
    //Instruction 63748
    //MOVC
    t8.xyz = (bool(tb25)) ? t8.xyz : t3.xwz;
    //Instruction 63749
    //ADD
    t8.xyz = t8.xyz + in_POSITION0.xyz;
    //Instruction 63750
    //MUL
    t3 = t8.yyyy * glstate_matrix_mvp[1];
    //Instruction 63751
    //MAD
    t3 = glstate_matrix_mvp[0] * t8.xxxx + t3;
    //Instruction 63752
    //MAD
    t3 = glstate_matrix_mvp[2] * t8.zzzz + t3;
    //Instruction 63753
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 63754
    //MUL
    t2.xzw = t8.yyy * _Object2World[1].xyz;
    //Instruction 63755
    //MAD
    t2.xzw = _Object2World[0].xyz * t8.xxx + t2.xzw;
    //Instruction 63756
    //MAD
    t2.xzw = _Object2World[2].xyz * t8.zzz + t2.xzw;
    //Instruction 63757
    //ADD
    t2.xzw = t2.xzw + _Object2World[3].xyz;
    //Instruction 63758
    //MOV
    vs_TEXCOORD0.w = t2.x;
    //Instruction 63759
    //MUL
    t3.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 63760
    //MUL
    t3.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 63761
    //MUL
    t3.zw = _World2Object[2].xx * _BillboardNormal.xyzx.xx;
    //Instruction 63762
    //MUL
    t4.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 63763
    //MUL
    t4.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 63764
    //MUL
    t4.zw = _World2Object[2].yy * _BillboardNormal.xyzx.yy;
    //Instruction 63765
    //ADD
    t3 = t3 + t4;
    //Instruction 63766
    //MUL
    t4.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 63767
    //MUL
    t4.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 63768
    //MUL
    t4.zw = _World2Object[2].zz * _BillboardNormal.xyzx.zz;
    //Instruction 63769
    //ADD
    t3 = t3 + t4;
    //Instruction 63770
    //DP3
    t25 = dot(t3.xyw, t3.xyw);
    //Instruction 63771
    //RSQ
    t25 = inversesqrt(t25);
    //Instruction 63772
    //MUL
    t3 = vec4(t25) * t3;
    //Instruction 63773
    //MUL
    t4.xyz = _Object2World[1].yzx * _BillboardTangent.xyzx.yyy;
    //Instruction 63774
    //MAD
    t4.xyz = _Object2World[0].yzx * _BillboardTangent.xyzx.xxx + t4.xyz;
    //Instruction 63775
    //MAD
    t4.xyz = _Object2World[2].yzx * _BillboardTangent.xyzx.zzz + t4.xyz;
    //Instruction 63776
    //DP3
    t25 = dot(t4.xyz, t4.xyz);
    //Instruction 63777
    //RSQ
    t25 = inversesqrt(t25);
    //Instruction 63778
    //MUL
    t4.xyz = vec3(t25) * t4.xyz;
    //Instruction 63779
    //MUL
    t10_6.xyz = t3.wxy * t4.xyz;
    //Instruction 63780
    //MAD
    t10_6.xyz = t3.ywx * t4.yzx + (-t10_6.xyz);
    //Instruction 63781
    //MOV
    vs_TEXCOORD0.y = (-t10_6.x);
    //Instruction 63782
    //MOV
    vs_TEXCOORD0.z = t3.x;
    //Instruction 63783
    //MOV
    vs_TEXCOORD0.x = t4.z;
    //Instruction 63784
    //MOV
    vs_TEXCOORD1.x = t4.x;
    //Instruction 63785
    //MOV
    vs_TEXCOORD2.x = t4.y;
    //Instruction 63786
    //MOV
    vs_TEXCOORD1.w = t2.z;
    //Instruction 63787
    //MOV
    vs_TEXCOORD2.w = t2.w;
    //Instruction 63788
    //MOV
    vs_TEXCOORD1.z = t3.y;
    //Instruction 63789
    //MOV
    vs_TEXCOORD1.y = (-t10_6.y);
    //Instruction 63790
    //MOV
    vs_TEXCOORD2.y = (-t10_6.z);
    //Instruction 63791
    //MOV
    vs_TEXCOORD2.z = t3.w;
    //Instruction 63792
    //MOV
    vs_TEXCOORD3 = _Color;
    //Instruction 63793
    //ADD
    t1.x = t1.y + t1.x;
    //Instruction 63794
    //ADD
    t1.x = t1.z + t1.x;
    //Instruction 63795
    //FRC
    t1.x = fract(t1.x);
    //Instruction 63796
    //MUL
    t1.x = t1.x * _HueVariation.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 63797
    //MOV
    vs_TEXCOORD4.z = t1.x;
    //Instruction 63798
    //GE
    tb1 = t0.x>=(-t0.x);
    //Instruction 63799
    //FRC
    t0.x = fract(abs(t0.x));
    //Instruction 63800
    //MOVC
    t0.x = (tb1) ? t0.x : (-t0.x);
    //Instruction 63801
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu10) + 0].x + _TreeInfo[int(tu10) + 0].z;
    //Instruction 63802
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 63803
    //LT
    tb1 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 63804
    //MAD
    t9.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 63805
    //MAD
    t2.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 63806
    //MOVC
    vs_TEXCOORD4.xy = (bool(tb1)) ? t9.xy : t2.xy;
    //Instruction 63807
    //MUL
    t1.xyz = t8.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 63808
    //MAD
    t1.xyz = glstate_matrix_mvp[0].xyw * t8.xxx + t1.xyz;
    //Instruction 63809
    //MAD
    t1.xyz = glstate_matrix_mvp[2].xyw * t8.zzz + t1.xyz;
    //Instruction 63810
    //ADD
    t1.xyz = t1.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 63811
    //MUL
    t0.x = t1.y * _ProjectionParams.x;
    //Instruction 63812
    //MUL
    t2.w = t0.x * 0.500000;
    //Instruction 63813
    //MUL
    t2.xz = t1.xz * vec2(0.500000, 0.500000);
    //Instruction 63814
    //ADD
    t2.xy = t2.zz + t2.xw;
    //Instruction 63815
    //MUL
    t2.xy = t2.xy * _ScreenParams.xy;
    //Instruction 63816
    //MUL
    t1.xy = t2.xy * vec2(0.250000, 0.250000);
    //Instruction 63817
    //MOV
    vs_TEXCOORD5.xyz = t1.xyz;
    //Instruction 63818
    //MUL
    t16_5 = t3.y * t3.y;
    //Instruction 63819
    //MAD
    t16_5 = t3.x * t3.x + (-t16_5);
    //Instruction 63820
    //MUL
    t16_1 = t3.ywzx * t3;
    //Instruction 63821
    //DP4
    t16_7.x = dot(unity_SHBr, t16_1);
    //Instruction 63822
    //DP4
    t16_7.y = dot(unity_SHBg, t16_1);
    //Instruction 63823
    //DP4
    t16_7.z = dot(unity_SHBb, t16_1);
    //Instruction 63824
    //MAD
    vs_TEXCOORD6.xyz = unity_SHC.xyz * vec3(t16_5) + t16_7.xyz;
    //Instruction 63825
    //MUL
    t1 = t8.yyyy * _Object2World[1];
    //Instruction 63826
    //MAD
    t1 = _Object2World[0] * t8.xxxx + t1;
    //Instruction 63827
    //MAD
    t0 = _Object2World[2] * t8.zzzz + t1;
    //Instruction 63828
    //ADD
    t0 = t0 + _Object2World[3];
    //Instruction 63829
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 63830
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 63831
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 63832
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 63833
    //MOV
    vs_TEXCOORD7 = t0;
    //Instruction 63834
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec4 vs_TEXCOORD7;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump float t16_6;
mediump vec3 t16_9;
mediump float t16_21;
void main()
{
    //Instruction 63657
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    //Instruction 63658
    //FRC
    t16_6 = fract(t16_0.y);
    //Instruction 63659
    //MOV
    t1.x = t16_0.x;
    //Instruction 63660
    //MAD
    t1.y = t16_6 * 0.062500 + unity_LODFade.y;
    //Instruction 63661
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 63662
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 63663
    //LT
    tb1 = t16_1<0.0;
    //Instruction 63664
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 63665
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    //Instruction 63666
    //MAD
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 63667
    //LT
    tb1 = t10_2.x<0.0;
    //Instruction 63668
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 63669
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 63670
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 63671
    //ADD
    t16_9.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 63672
    //MAD
    t16_9.xyz = vs_TEXCOORD4.zzz * t16_9.xyz + t10_0.xyz;
    //Instruction 63673
    //MAX
    t16_4.x = max(t16_9.z, t16_9.y);
    //Instruction 63674
    //MAX
    t16_4.x = max(t16_9.x, t16_4.x);
    //Instruction 63675
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 63676
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 63677
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_9.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 63678
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD3.xyz;
    //Instruction 63679
    //SAMPLE_C_LZ
    vec3 txVec71 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
    t16_21 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec71, 0.0);
    //Instruction 63680
    //ADD
    t16_4.x = (-_LightShadowData.x) + 1.0;
    //Instruction 63681
    //MAD
    t16_21 = t16_21 * t16_4.x + _LightShadowData.x;
    //Instruction 63682
    //MUL
    t16_4.xyz = vec3(t16_21) * _LightColor0.xyz;
    //Instruction 63683
    //MUL
    t16_4.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 63684
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 63685
    //MAD
    t10_2.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 63686
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    //Instruction 63687
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    //Instruction 63688
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    //Instruction 63689
    //MOV
    t0.w = 1.0;
    //Instruction 63690
    //DP4
    t16_5.x = dot(unity_SHAr, t0);
    //Instruction 63691
    //DP4
    t16_5.y = dot(unity_SHAg, t0);
    //Instruction 63692
    //DP4
    t16_5.z = dot(unity_SHAb, t0);
    //Instruction 63693
    //DP3
    t16_21 = dot(t0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 63694
    //MAX
    t16_21 = max(t16_21, 0.0);
    //Instruction 63695
    //ADD
    t16_5.xyz = t16_5.xyz + vs_TEXCOORD6.xyz;
    //Instruction 63696
    //MUL
    t16_3.xyz = t16_3.xyz * t16_5.xyz;
    //Instruction 63697
    //MAD
    t16_3.xyz = t16_4.xyz * vec3(t16_21) + t16_3.xyz;
    //Instruction 63698
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 63699
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 63700
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = _glesVertex;
  mediump vec3 tmpvar_9;
  highp vec3 billboardPos_10;
  highp float angle_11;
  highp float tmpvar_12;
  tmpvar_12 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_13;
  tmpvar_13 = _TreeInfo[int(tmpvar_12)];
  highp vec4 tmpvar_14;
  tmpvar_14 = _TreeSize[int(tmpvar_12)];
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  highp vec3 tmpvar_16;
  tmpvar_16 = (_glesVertex.xyz + tmpvar_15);
  angle_11 = _CameraXZAngle;
  highp vec4 tmpvar_17;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_17 = _InstanceData;
  } else {
    tmpvar_17 = tmpvar_1;
  };
  highp vec3 tmpvar_18;
  tmpvar_18 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_14.x) * tmpvar_17.x) * _BillboardTangent);
  billboardPos_10.xz = tmpvar_18.xz;
  billboardPos_10.y = (tmpvar_18.y + ((
    (_glesMultiTexCoord0.y * tmpvar_14.y)
   + tmpvar_14.z) * tmpvar_17.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_19;
    vPos_19 = billboardPos_10;
    highp float fMoveAmount_20;
    highp float fAdjust_21;
    highp float fLength_22;
    fLength_22 = sqrt(dot (billboardPos_10, billboardPos_10));
    highp float tmpvar_23;
    tmpvar_23 = (max ((billboardPos_10.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_21 = tmpvar_23;
    if ((tmpvar_23 != 0.0)) {
      fAdjust_21 = pow (tmpvar_23, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_24;
    tmpvar_24.zw = vec2(0.0, 0.0);
    tmpvar_24.x = (tmpvar_16.x + tmpvar_17.w);
    tmpvar_24.y = (tmpvar_16.y + (tmpvar_17.w * 0.8));
    highp vec4 tmpvar_25;
    highp vec4 tmpvar_26;
    tmpvar_26 = abs(((
      fract((tmpvar_24 + 0.5))
     * 2.0) - 1.0));
    tmpvar_25 = (((
      (tmpvar_26 * tmpvar_26)
     * 
      (3.0 - (2.0 * tmpvar_26))
    ) - 0.5) * 2.0);
    fMoveAmount_20 = ((_ST_WindGlobal.y * (tmpvar_25.x + 
      (tmpvar_25.y * tmpvar_25.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_20 = (fMoveAmount_20 * fAdjust_21);
    vPos_19.xz = (tmpvar_18.xz + (_ST_WindVector.xz * fMoveAmount_20));
    vPos_19 = (normalize(vPos_19) * fLength_22);
    billboardPos_10 = vPos_19;
  };
  tmpvar_8.xyz = (_glesVertex.xyz + billboardPos_10);
  tmpvar_8.w = 1.0;
  angle_11 = (_CameraXZAngle + tmpvar_17.z);
  highp float tmpvar_27;
  tmpvar_27 = (floor((
    (angle_11 * tmpvar_13.y)
   + 0.5)) / tmpvar_13.x);
  highp float tmpvar_28;
  tmpvar_28 = (fract(abs(tmpvar_27)) * tmpvar_13.x);
  highp float tmpvar_29;
  if ((tmpvar_27 >= 0.0)) {
    tmpvar_29 = tmpvar_28;
  } else {
    tmpvar_29 = -(tmpvar_28);
  };
  highp vec4 tmpvar_30;
  tmpvar_30 = _ImageTexCoords[int((tmpvar_13.z + tmpvar_29))];
  if ((tmpvar_30.w < 0.0)) {
    tmpvar_9.xy = (tmpvar_30.xy - (tmpvar_30.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_9.xy = (tmpvar_30.xy + (tmpvar_30.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_31;
  tmpvar_31 = clamp ((fract(
    ((tmpvar_16.x + tmpvar_16.y) + tmpvar_16.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_31;
  highp vec4 hPos_32;
  hPos_32 = (glstate_matrix_mvp * tmpvar_8);
  mediump vec3 screenPos_33;
  highp vec4 o_34;
  highp vec4 tmpvar_35;
  tmpvar_35 = (hPos_32 * 0.5);
  highp vec2 tmpvar_36;
  tmpvar_36.x = tmpvar_35.x;
  tmpvar_36.y = (tmpvar_35.y * _ProjectionParams.x);
  o_34.xy = (tmpvar_36 + tmpvar_35.w);
  o_34.zw = hPos_32.zw;
  highp vec3 tmpvar_37;
  tmpvar_37 = o_34.xyw;
  screenPos_33 = tmpvar_37;
  screenPos_33.xy = (screenPos_33.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = _Color;
  highp vec3 tmpvar_38;
  tmpvar_38 = (_Object2World * tmpvar_8).xyz;
  highp vec4 v_39;
  v_39.x = _World2Object[0].x;
  v_39.y = _World2Object[1].x;
  v_39.z = _World2Object[2].x;
  v_39.w = _World2Object[3].x;
  highp vec4 v_40;
  v_40.x = _World2Object[0].y;
  v_40.y = _World2Object[1].y;
  v_40.z = _World2Object[2].y;
  v_40.w = _World2Object[3].y;
  highp vec4 v_41;
  v_41.x = _World2Object[0].z;
  v_41.y = _World2Object[1].z;
  v_41.z = _World2Object[2].z;
  v_41.w = _World2Object[3].z;
  highp vec3 tmpvar_42;
  tmpvar_42 = normalize(((
    (v_39.xyz * _BillboardNormal.x)
   + 
    (v_40.xyz * _BillboardNormal.y)
  ) + (v_41.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_42;
  highp mat3 tmpvar_43;
  tmpvar_43[0] = _Object2World[0].xyz;
  tmpvar_43[1] = _Object2World[1].xyz;
  tmpvar_43[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize((tmpvar_43 * _BillboardTangent));
  worldTangent_3 = tmpvar_44;
  lowp vec3 tmpvar_45;
  tmpvar_45 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_46;
  tmpvar_46 = -(tmpvar_45);
  worldBinormal_2 = tmpvar_46;
  highp vec4 tmpvar_47;
  tmpvar_47.x = worldTangent_3.x;
  tmpvar_47.y = worldBinormal_2.x;
  tmpvar_47.z = worldNormal_4.x;
  tmpvar_47.w = tmpvar_38.x;
  highp vec4 tmpvar_48;
  tmpvar_48.x = worldTangent_3.y;
  tmpvar_48.y = worldBinormal_2.y;
  tmpvar_48.z = worldNormal_4.y;
  tmpvar_48.w = tmpvar_38.y;
  highp vec4 tmpvar_49;
  tmpvar_49.x = worldTangent_3.z;
  tmpvar_49.y = worldBinormal_2.z;
  tmpvar_49.z = worldNormal_4.z;
  tmpvar_49.w = tmpvar_38.z;
  lowp vec4 tmpvar_50;
  tmpvar_50.w = 1.0;
  tmpvar_50.xyz = worldNormal_4;
  mediump vec4 normal_51;
  normal_51 = tmpvar_50;
  mediump vec3 x2_52;
  mediump vec4 tmpvar_53;
  tmpvar_53 = (normal_51.xyzz * normal_51.yzzx);
  x2_52.x = dot (unity_SHBr, tmpvar_53);
  x2_52.y = dot (unity_SHBg, tmpvar_53);
  x2_52.z = dot (unity_SHBb, tmpvar_53);
  highp vec3 lightColor0_54;
  lightColor0_54 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_55;
  lightColor1_55 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_56;
  lightColor2_56 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_57;
  lightColor3_57 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_58;
  lightAttenSq_58 = unity_4LightAtten0;
  highp vec3 normal_59;
  normal_59 = worldNormal_4;
  highp vec3 col_60;
  highp vec4 ndotl_61;
  highp vec4 lengthSq_62;
  highp vec4 tmpvar_63;
  tmpvar_63 = (unity_4LightPosX0 - tmpvar_38.x);
  highp vec4 tmpvar_64;
  tmpvar_64 = (unity_4LightPosY0 - tmpvar_38.y);
  highp vec4 tmpvar_65;
  tmpvar_65 = (unity_4LightPosZ0 - tmpvar_38.z);
  lengthSq_62 = (tmpvar_63 * tmpvar_63);
  lengthSq_62 = (lengthSq_62 + (tmpvar_64 * tmpvar_64));
  lengthSq_62 = (lengthSq_62 + (tmpvar_65 * tmpvar_65));
  ndotl_61 = (tmpvar_63 * normal_59.x);
  ndotl_61 = (ndotl_61 + (tmpvar_64 * normal_59.y));
  ndotl_61 = (ndotl_61 + (tmpvar_65 * normal_59.z));
  highp vec4 tmpvar_66;
  tmpvar_66 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_61 * inversesqrt(lengthSq_62)));
  ndotl_61 = tmpvar_66;
  highp vec4 tmpvar_67;
  tmpvar_67 = (tmpvar_66 * (1.0/((1.0 + 
    (lengthSq_62 * lightAttenSq_58)
  ))));
  col_60 = (lightColor0_54 * tmpvar_67.x);
  col_60 = (col_60 + (lightColor1_55 * tmpvar_67.y));
  col_60 = (col_60 + (lightColor2_56 * tmpvar_67.z));
  col_60 = (col_60 + (lightColor3_57 * tmpvar_67.w));
  tmpvar_6 = ((x2_52 + (unity_SHC.xyz * 
    ((normal_51.x * normal_51.x) - (normal_51.y * normal_51.y))
  )) + col_60);
  tmpvar_7 = (unity_World2Shadow[0] * (_Object2World * tmpvar_8));
  gl_Position = (glstate_matrix_mvp * tmpvar_8);
  xlv_TEXCOORD0 = tmpvar_47;
  xlv_TEXCOORD1 = tmpvar_48;
  xlv_TEXCOORD2 = tmpvar_49;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = screenPos_33;
  xlv_TEXCOORD6 = tmpvar_6;
  xlv_TEXCOORD7 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_13.x = tmpvar_14.x;
  projUV_13.y = ((fract(tmpvar_14.y) * 0.0625) + unity_LODFade.y);
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_12 = tmpvar_16;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_17;
  x_17 = (tmpvar_10 - _Cutoff);
  if ((x_17 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_18;
  tmpvar_18 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_18.x, max (tmpvar_18.y, tmpvar_18.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_18 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_19;
  tmpvar_19 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float shadow_20;
  shadow_20 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD7.xyz) * (1.0 - _LightShadowData.x)));
  highp float tmpvar_21;
  tmpvar_21 = dot (xlv_TEXCOORD0.xyz, tmpvar_19);
  worldN_4.x = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (xlv_TEXCOORD1.xyz, tmpvar_19);
  worldN_4.y = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = dot (xlv_TEXCOORD2.xyz, tmpvar_19);
  worldN_4.z = tmpvar_23;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_20;
  mediump vec3 normalWorld_24;
  normalWorld_24 = worldN_4;
  mediump vec3 tmpvar_25;
  mediump vec3 tmpvar_26;
  mediump vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = normalWorld_24;
  mediump vec3 x1_28;
  x1_28.x = dot (unity_SHAr, tmpvar_27);
  x1_28.y = dot (unity_SHAg, tmpvar_27);
  x1_28.z = dot (unity_SHAb, tmpvar_27);
  tmpvar_26 = (xlv_TEXCOORD6 + x1_28);
  tmpvar_25 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_25;
  lowp vec4 c_29;
  lowp vec4 c_30;
  lowp float diff_31;
  mediump float tmpvar_32;
  tmpvar_32 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_31 = tmpvar_32;
  c_30.xyz = ((tmpvar_9 * tmpvar_25) * diff_31);
  c_30.w = tmpvar_10;
  c_29.w = c_30.w;
  c_29.xyz = (c_30.xyz + (tmpvar_9 * tmpvar_26));
  c_5.xyz = c_29.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec4 vs_TEXCOORD7;
highp vec4 t0;
highp uint tu0;
bool tb0;
highp vec4 t1;
bool tb1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec4 t3;
highp vec4 t4;
highp vec4 t5;
mediump float t16_5;
lowp vec3 t10_6;
mediump vec3 t16_7;
mediump vec3 t16_8;
highp vec3 t9;
highp vec2 t10;
highp float t11;
highp uint tu11;
highp float t18;
highp vec2 t20;
highp float t27;
highp float t28;
bool tb28;
void main()
{
    //Instruction 61377
    //LT
    tb0 = 0.0<_InstanceData.x;
    //Instruction 61378
    //MOVC
    t0 = (bool(tb0)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 61379
    //ADD
    t1.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 61380
    //ADD
    t2.x = t0.w + t1.x;
    //Instruction 61381
    //MAD
    t2.y = t0.w * 0.800000 + t1.y;
    //Instruction 61382
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 61383
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 61384
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 61385
    //MUL
    t20.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 61386
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 61387
    //MAD
    t2.xy = t20.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 61388
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 61389
    //MAD
    t27 = t2.y * t2.y + t2.x;
    //Instruction 61390
    //DIV
    t28 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 61391
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t28;
    //Instruction 61392
    //DIV
    t28 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 61393
    //ADD
    t2.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 61394
    //MUL
    t11 = in_COLOR0.w * 255.000000;
    //Instruction 61395
    //FTOU
    tu11 = uint(t11);
    //Instruction 61396
    //MUL
    t2.x = t2.x * _TreeSize[int(tu11) + 0].x;
    //Instruction 61397
    //MUL
    t0.x = t0.x * t2.x;
    //Instruction 61398
    //MUL
    t3.xyz = t0.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 61399
    //MAD
    t0.x = in_TEXCOORD0.y * _TreeSize[int(tu11) + 0].y + _TreeSize[int(tu11) + 0].z;
    //Instruction 61400
    //MAD
    t3.w = t0.x * t0.y + t3.y;
    //Instruction 61401
    //ADD
    t0.x = t0.z + _CameraXZAngle;
    //Instruction 61402
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu11) + 0].y + 0.500000;
    //Instruction 61403
    //ROUND_NI
    t0.x = floor(t0.x);
    //Instruction 61404
    //DIV
    t0.x = t0.x / _TreeInfo[int(tu11) + 0].x;
    //Instruction 61405
    //MAD
    t9.x = (-t28) * 0.250000 + t3.w;
    //Instruction 61406
    //MAX
    t9.x = max(t9.x, 0.0);
    //Instruction 61407
    //MUL
    t9.x = t9.x * _ST_WindGlobal.z;
    //Instruction 61408
    //LOG
    t18 = log2(t9.x);
    //Instruction 61409
    //MUL
    t18 = t18 * _ST_WindGlobal.w;
    //Instruction 61410
    //EXP
    t18 = exp2(t18);
    //Instruction 61411
    //NE
    tb28 = t9.x!=0.0;
    //Instruction 61412
    //MOVC
    t9.x = (tb28) ? t18 : t9.x;
    //Instruction 61413
    //MUL
    t9.x = t9.x * t27;
    //Instruction 61414
    //MAD
    t4.xz = _ST_WindVector.xz * t9.xx + t3.xz;
    //Instruction 61415
    //MOV
    t4.y = t3.w;
    //Instruction 61416
    //DP3
    t9.x = dot(t4.xyz, t4.xyz);
    //Instruction 61417
    //RSQ
    t9.x = inversesqrt(t9.x);
    //Instruction 61418
    //MUL
    t9.xyz = t9.xxx * t4.xyz;
    //Instruction 61419
    //DP3
    t28 = dot(t3.xzw, t3.xzw);
    //Instruction 61420
    //SQRT
    t28 = sqrt(t28);
    //Instruction 61421
    //MUL
    t9.xyz = t9.xyz * vec3(t28);
    //Instruction 61422
    //MUL
    t16_5 = _WindEnabled * _WindQuality;
    //Instruction 61423
    //LT
    tb28 = 0.0<t16_5;
    //Instruction 61424
    //MOVC
    t9.xyz = (bool(tb28)) ? t9.xyz : t3.xwz;
    //Instruction 61425
    //ADD
    t9.xyz = t9.xyz + in_POSITION0.xyz;
    //Instruction 61426
    //MUL
    t3 = t9.yyyy * glstate_matrix_mvp[1];
    //Instruction 61427
    //MAD
    t3 = glstate_matrix_mvp[0] * t9.xxxx + t3;
    //Instruction 61428
    //MAD
    t3 = glstate_matrix_mvp[2] * t9.zzzz + t3;
    //Instruction 61429
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 61430
    //MUL
    t2.xzw = t9.yyy * _Object2World[1].xyz;
    //Instruction 61431
    //MAD
    t2.xzw = _Object2World[0].xyz * t9.xxx + t2.xzw;
    //Instruction 61432
    //MAD
    t2.xzw = _Object2World[2].xyz * t9.zzz + t2.xzw;
    //Instruction 61433
    //ADD
    t2.xzw = t2.xzw + _Object2World[3].xyz;
    //Instruction 61434
    //MOV
    vs_TEXCOORD0.w = t2.x;
    //Instruction 61435
    //MUL
    t3.xyz = _Object2World[1].yzx * _BillboardTangent.xyzx.yyy;
    //Instruction 61436
    //MAD
    t3.xyz = _Object2World[0].yzx * _BillboardTangent.xyzx.xxx + t3.xyz;
    //Instruction 61437
    //MAD
    t3.xyz = _Object2World[2].yzx * _BillboardTangent.xyzx.zzz + t3.xyz;
    //Instruction 61438
    //DP3
    t28 = dot(t3.xyz, t3.xyz);
    //Instruction 61439
    //RSQ
    t28 = inversesqrt(t28);
    //Instruction 61440
    //MUL
    t3.xyz = vec3(t28) * t3.xyz;
    //Instruction 61441
    //MOV
    vs_TEXCOORD0.x = t3.z;
    //Instruction 61442
    //MUL
    t4.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 61443
    //MUL
    t4.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 61444
    //MUL
    t4.zw = _World2Object[2].xx * _BillboardNormal.xyzx.xx;
    //Instruction 61445
    //MUL
    t5.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 61446
    //MUL
    t5.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 61447
    //MUL
    t5.zw = _World2Object[2].yy * _BillboardNormal.xyzx.yy;
    //Instruction 61448
    //ADD
    t4 = t4 + t5;
    //Instruction 61449
    //MUL
    t5.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 61450
    //MUL
    t5.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 61451
    //MUL
    t5.zw = _World2Object[2].zz * _BillboardNormal.xyzx.zz;
    //Instruction 61452
    //ADD
    t4 = t4 + t5;
    //Instruction 61453
    //DP3
    t28 = dot(t4.xyw, t4.xyw);
    //Instruction 61454
    //RSQ
    t28 = inversesqrt(t28);
    //Instruction 61455
    //MUL
    t4 = vec4(t28) * t4;
    //Instruction 61456
    //MUL
    t10_6.xyz = t3.xyz * t4.wxy;
    //Instruction 61457
    //MAD
    t10_6.xyz = t4.ywx * t3.yzx + (-t10_6.xyz);
    //Instruction 61458
    //MOV
    vs_TEXCOORD0.y = (-t10_6.x);
    //Instruction 61459
    //MOV
    vs_TEXCOORD0.z = t4.x;
    //Instruction 61460
    //MOV
    vs_TEXCOORD1.x = t3.x;
    //Instruction 61461
    //MOV
    vs_TEXCOORD2.x = t3.y;
    //Instruction 61462
    //MOV
    vs_TEXCOORD1.w = t2.z;
    //Instruction 61463
    //MOV
    vs_TEXCOORD1.z = t4.y;
    //Instruction 61464
    //MOV
    vs_TEXCOORD1.y = (-t10_6.y);
    //Instruction 61465
    //MOV
    vs_TEXCOORD2.y = (-t10_6.z);
    //Instruction 61466
    //MOV
    vs_TEXCOORD2.w = t2.w;
    //Instruction 61467
    //MOV
    vs_TEXCOORD2.z = t4.w;
    //Instruction 61468
    //MOV
    vs_TEXCOORD3 = _Color;
    //Instruction 61469
    //ADD
    t1.x = t1.y + t1.x;
    //Instruction 61470
    //ADD
    t1.x = t1.z + t1.x;
    //Instruction 61471
    //FRC
    t1.x = fract(t1.x);
    //Instruction 61472
    //MUL
    t1.x = t1.x * _HueVariation.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 61473
    //MOV
    vs_TEXCOORD4.z = t1.x;
    //Instruction 61474
    //GE
    tb1 = t0.x>=(-t0.x);
    //Instruction 61475
    //FRC
    t0.x = fract(abs(t0.x));
    //Instruction 61476
    //MOVC
    t0.x = (tb1) ? t0.x : (-t0.x);
    //Instruction 61477
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu11) + 0].x + _TreeInfo[int(tu11) + 0].z;
    //Instruction 61478
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 61479
    //LT
    tb1 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 61480
    //MAD
    t10.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 61481
    //MAD
    t3.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 61482
    //MOVC
    vs_TEXCOORD4.xy = (bool(tb1)) ? t10.xy : t3.xy;
    //Instruction 61483
    //MUL
    t1.xyz = t9.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 61484
    //MAD
    t1.xyz = glstate_matrix_mvp[0].xyw * t9.xxx + t1.xyz;
    //Instruction 61485
    //MAD
    t1.xyz = glstate_matrix_mvp[2].xyw * t9.zzz + t1.xyz;
    //Instruction 61486
    //ADD
    t1.xyz = t1.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 61487
    //MUL
    t0.x = t1.y * _ProjectionParams.x;
    //Instruction 61488
    //MUL
    t3.w = t0.x * 0.500000;
    //Instruction 61489
    //MUL
    t3.xz = t1.xz * vec2(0.500000, 0.500000);
    //Instruction 61490
    //ADD
    t3.xy = t3.zz + t3.xw;
    //Instruction 61491
    //MUL
    t3.xy = t3.xy * _ScreenParams.xy;
    //Instruction 61492
    //MUL
    t1.xy = t3.xy * vec2(0.250000, 0.250000);
    //Instruction 61493
    //MOV
    vs_TEXCOORD5.xyz = t1.xyz;
    //Instruction 61494
    //ADD
    t1 = (-t2.xxxx) + unity_4LightPosX0;
    //Instruction 61495
    //ADD
    t3 = (-t2.zzzz) + unity_4LightPosY0;
    //Instruction 61496
    //ADD
    t2 = (-t2.wwww) + unity_4LightPosZ0;
    //Instruction 61497
    //MUL
    t5 = t4.yyyy * t3;
    //Instruction 61498
    //MUL
    t3 = t3 * t3;
    //Instruction 61499
    //MAD
    t3 = t1 * t1 + t3;
    //Instruction 61500
    //MAD
    t1 = t1 * t4.xxxx + t5;
    //Instruction 61501
    //MAD
    t1 = t2 * t4.wwww + t1;
    //Instruction 61502
    //MAD
    t2 = t2 * t2 + t3;
    //Instruction 61503
    //RSQ
    t3 = inversesqrt(t2);
    //Instruction 61504
    //MAD
    t2 = t2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 61505
    //DIV
    t2 = vec4(1.0, 1.0, 1.0, 1.0) / t2;
    //Instruction 61506
    //MUL
    t1 = t1 * t3;
    //Instruction 61507
    //MAX
    t1 = max(t1, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 61508
    //MUL
    t1 = t2 * t1;
    //Instruction 61509
    //MUL
    t2.xyz = t1.yyy * unity_LightColor[1].xyz;
    //Instruction 61510
    //MAD
    t2.xyz = unity_LightColor[0].xyz * t1.xxx + t2.xyz;
    //Instruction 61511
    //MAD
    t1.xyz = unity_LightColor[2].xyz * t1.zzz + t2.xyz;
    //Instruction 61512
    //MAD
    t1.xyz = unity_LightColor[3].xyz * t1.www + t1.xyz;
    //Instruction 61513
    //MUL
    t16_7.x = t4.y * t4.y;
    //Instruction 61514
    //MAD
    t16_7.x = t4.x * t4.x + (-t16_7.x);
    //Instruction 61515
    //MUL
    t16_2 = t4.ywzx * t4;
    //Instruction 61516
    //DP4
    t16_8.x = dot(unity_SHBr, t16_2);
    //Instruction 61517
    //DP4
    t16_8.y = dot(unity_SHBg, t16_2);
    //Instruction 61518
    //DP4
    t16_8.z = dot(unity_SHBb, t16_2);
    //Instruction 61519
    //MAD
    t16_7.xyz = unity_SHC.xyz * t16_7.xxx + t16_8.xyz;
    //Instruction 61520
    //ADD
    t1.xyz = t1.xyz + t16_7.xyz;
    //Instruction 61521
    //MOV
    vs_TEXCOORD6.xyz = t1.xyz;
    //Instruction 61522
    //MUL
    t1 = t9.yyyy * _Object2World[1];
    //Instruction 61523
    //MAD
    t1 = _Object2World[0] * t9.xxxx + t1;
    //Instruction 61524
    //MAD
    t0 = _Object2World[2] * t9.zzzz + t1;
    //Instruction 61525
    //ADD
    t0 = t0 + _Object2World[3];
    //Instruction 61526
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 61527
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 61528
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 61529
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 61530
    //MOV
    vs_TEXCOORD7 = t0;
    //Instruction 61531
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec4 vs_TEXCOORD7;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump float t16_6;
mediump vec3 t16_9;
mediump float t16_21;
void main()
{
    //Instruction 61333
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    //Instruction 61334
    //FRC
    t16_6 = fract(t16_0.y);
    //Instruction 61335
    //MOV
    t1.x = t16_0.x;
    //Instruction 61336
    //MAD
    t1.y = t16_6 * 0.062500 + unity_LODFade.y;
    //Instruction 61337
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 61338
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 61339
    //LT
    tb1 = t16_1<0.0;
    //Instruction 61340
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 61341
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    //Instruction 61342
    //MAD
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 61343
    //LT
    tb1 = t10_2.x<0.0;
    //Instruction 61344
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 61345
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 61346
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 61347
    //ADD
    t16_9.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 61348
    //MAD
    t16_9.xyz = vs_TEXCOORD4.zzz * t16_9.xyz + t10_0.xyz;
    //Instruction 61349
    //MAX
    t16_4.x = max(t16_9.z, t16_9.y);
    //Instruction 61350
    //MAX
    t16_4.x = max(t16_9.x, t16_4.x);
    //Instruction 61351
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 61352
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 61353
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_9.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 61354
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD3.xyz;
    //Instruction 61355
    //SAMPLE_C_LZ
    vec3 txVec56 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
    t16_21 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec56, 0.0);
    //Instruction 61356
    //ADD
    t16_4.x = (-_LightShadowData.x) + 1.0;
    //Instruction 61357
    //MAD
    t16_21 = t16_21 * t16_4.x + _LightShadowData.x;
    //Instruction 61358
    //MUL
    t16_4.xyz = vec3(t16_21) * _LightColor0.xyz;
    //Instruction 61359
    //MUL
    t16_4.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 61360
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 61361
    //MAD
    t10_2.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 61362
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    //Instruction 61363
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    //Instruction 61364
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    //Instruction 61365
    //MOV
    t0.w = 1.0;
    //Instruction 61366
    //DP4
    t16_5.x = dot(unity_SHAr, t0);
    //Instruction 61367
    //DP4
    t16_5.y = dot(unity_SHAg, t0);
    //Instruction 61368
    //DP4
    t16_5.z = dot(unity_SHAb, t0);
    //Instruction 61369
    //DP3
    t16_21 = dot(t0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 61370
    //MAX
    t16_21 = max(t16_21, 0.0);
    //Instruction 61371
    //ADD
    t16_5.xyz = t16_5.xyz + vs_TEXCOORD6.xyz;
    //Instruction 61372
    //MUL
    t16_3.xyz = t16_3.xyz * t16_5.xyz;
    //Instruction 61373
    //MAD
    t16_3.xyz = t16_4.xyz * vec3(t16_21) + t16_3.xyz;
    //Instruction 61374
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 61375
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 61376
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp vec3 angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = (min (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0) / max (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0));
  highp float tmpvar_20;
  tmpvar_20 = (tmpvar_19 * tmpvar_19);
  tmpvar_20 = (((
    ((((
      ((((-0.01213232 * tmpvar_20) + 0.05368138) * tmpvar_20) - 0.1173503)
     * tmpvar_20) + 0.1938925) * tmpvar_20) - 0.3326756)
   * tmpvar_20) + 0.9999793) * tmpvar_19);
  tmpvar_20 = (tmpvar_20 + (float(
    (abs((tmpvar_17.z / tmpvar_16.z)) > 1.0)
  ) * (
    (tmpvar_20 * -2.0)
   + 1.570796)));
  tmpvar_18 = (tmpvar_20 * sign((tmpvar_17.z / tmpvar_16.z)));
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  angle_8 = vec3(tmpvar_18);
  bvec3 tmpvar_21;
  tmpvar_21 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_22;
  if (tmpvar_21.x) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_21.y) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_21.z) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  vec3 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = tmpvar_23;
  tmpvar_25.z = tmpvar_24;
  angle_8 = (vec3(tmpvar_18) + tmpvar_25);
  highp vec4 tmpvar_26;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_26 = _InstanceData;
  } else {
    tmpvar_26 = tmpvar_1;
  };
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_26.x) * tmpvar_16);
  billboardPos_7.xz = tmpvar_27.xz;
  billboardPos_7.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_26.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_7;
    highp float fMoveAmount_29;
    highp float fAdjust_30;
    highp float fLength_31;
    fLength_31 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_32;
    tmpvar_32 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_30 = tmpvar_32;
    if ((tmpvar_32 != 0.0)) {
      fAdjust_30 = pow (tmpvar_32, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_33;
    tmpvar_33.zw = vec2(0.0, 0.0);
    tmpvar_33.x = (tmpvar_13.x + tmpvar_26.w);
    tmpvar_33.y = (tmpvar_13.y + (tmpvar_26.w * 0.8));
    highp vec4 tmpvar_34;
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    tmpvar_34 = (((
      (tmpvar_35 * tmpvar_35)
     * 
      (3.0 - (2.0 * tmpvar_35))
    ) - 0.5) * 2.0);
    fMoveAmount_29 = ((_ST_WindGlobal.y * (tmpvar_34.x + 
      (tmpvar_34.y * tmpvar_34.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_29 = (fMoveAmount_29 * fAdjust_30);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * fMoveAmount_29));
    vPos_28 = (normalize(vPos_28) * fLength_31);
    billboardPos_7 = vPos_28;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (angle_8 + tmpvar_26.z);
  highp vec3 tmpvar_36;
  tmpvar_36 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_37;
  tmpvar_37 = (fract(abs(tmpvar_36)) * tmpvar_10.xxx);
  highp float tmpvar_38;
  if ((tmpvar_36.x >= 0.0)) {
    tmpvar_38 = tmpvar_37.x;
  } else {
    tmpvar_38 = -(tmpvar_37.x);
  };
  highp vec4 tmpvar_39;
  tmpvar_39 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_38))];
  if ((tmpvar_39.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_39.xy - (tmpvar_39.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_39.xy + (tmpvar_39.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_40;
  hPos_40 = (glstate_matrix_mvp * tmpvar_5);
  mediump vec3 screenPos_41;
  highp vec4 o_42;
  highp vec4 tmpvar_43;
  tmpvar_43 = (hPos_40 * 0.5);
  highp vec2 tmpvar_44;
  tmpvar_44.x = tmpvar_43.x;
  tmpvar_44.y = (tmpvar_43.y * _ProjectionParams.x);
  o_42.xy = (tmpvar_44 + tmpvar_43.w);
  o_42.zw = hPos_40.zw;
  highp vec3 tmpvar_45;
  tmpvar_45 = o_42.xyw;
  screenPos_41 = tmpvar_45;
  screenPos_41.xy = (screenPos_41.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = _Color;
  highp vec4 v_46;
  v_46.x = _World2Object[0].x;
  v_46.y = _World2Object[1].x;
  v_46.z = _World2Object[2].x;
  v_46.w = _World2Object[3].x;
  highp vec4 v_47;
  v_47.x = _World2Object[0].z;
  v_47.y = _World2Object[1].z;
  v_47.z = _World2Object[2].z;
  v_47.w = _World2Object[3].z;
  highp vec3 tmpvar_48;
  tmpvar_48 = normalize(((v_46.xyz * tmpvar_16.z) + (v_47.xyz * tmpvar_17.z)));
  worldNormal_2 = tmpvar_48;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_49;
  tmpvar_49.w = 1.0;
  tmpvar_49.xyz = worldNormal_2;
  mediump vec4 normal_50;
  normal_50 = tmpvar_49;
  mediump vec3 x2_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = (normal_50.xyzz * normal_50.yzzx);
  x2_51.x = dot (unity_SHBr, tmpvar_52);
  x2_51.y = dot (unity_SHBg, tmpvar_52);
  x2_51.z = dot (unity_SHBb, tmpvar_52);
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = screenPos_41;
  xlv_TEXCOORD5 = (x2_51 + (unity_SHC.xyz * (
    (normal_50.x * normal_50.x)
   - 
    (normal_50.y * normal_50.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_11.x = tmpvar_12.x;
  projUV_11.y = ((fract(tmpvar_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_14;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_15;
  x_15 = (tmpvar_9 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_16;
  normalWorld_16 = tmpvar_4;
  mediump vec3 tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = normalWorld_16;
  mediump vec3 x1_19;
  x1_19.x = dot (unity_SHAr, tmpvar_18);
  x1_19.y = dot (unity_SHAg, tmpvar_18);
  x1_19.z = dot (unity_SHAb, tmpvar_18);
  tmpvar_17 = (xlv_TEXCOORD5 + x1_19);
  lowp vec4 c_20;
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_22 = tmpvar_23;
  c_21.xyz = ((tmpvar_8 * tmpvar_1) * diff_22);
  c_21.w = tmpvar_9;
  c_20.w = c_21.w;
  c_20.xyz = (c_21.xyz + (tmpvar_8 * tmpvar_17));
  c_3.xyz = c_20.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
highp vec3 t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
bool tb2;
highp vec4 t3;
highp vec4 t4;
bool tb4;
mediump float t16_5;
mediump vec3 t16_6;
highp vec3 t8;
highp int ti8;
bool tb8;
highp float t9;
highp vec2 t15;
bool tb15;
highp vec2 t16;
highp uint tu16;
highp float t22;
bool tb22;
highp float t23;
highp float t24;
bool tb24;
void main()
{
    //Instruction 61559
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 61560
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 61561
    //ADD
    t8.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 61562
    //LT
    tb2 = 0.0<_InstanceData.x;
    //Instruction 61563
    //MOVC
    t0 = (bool(tb2)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 61564
    //ADD
    t2.x = t0.w + t8.x;
    //Instruction 61565
    //MAD
    t2.y = t0.w * 0.800000 + t8.y;
    //Instruction 61566
    //ADD
    t8.xyz = (-t8.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 61567
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 61568
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 61569
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 61570
    //MUL
    t16.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 61571
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 61572
    //MAD
    t2.xy = t16.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 61573
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 61574
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 61575
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 61576
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t9;
    //Instruction 61577
    //DIV
    t9 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 61578
    //MUL
    t16.x = in_COLOR0.w * 255.000000;
    //Instruction 61579
    //FTOU
    tu16 = uint(t16.x);
    //Instruction 61580
    //MAD
    t23 = in_TEXCOORD0.y * _TreeSize[int(tu16) + 0].y + _TreeSize[int(tu16) + 0].z;
    //Instruction 61581
    //MUL
    t3.y = t0.y * t23;
    //Instruction 61582
    //MAD
    t9 = (-t9) * 0.250000 + t3.y;
    //Instruction 61583
    //MAX
    t9 = max(t9, 0.0);
    //Instruction 61584
    //MUL
    t9 = t9 * _ST_WindGlobal.z;
    //Instruction 61585
    //LOG
    t23 = log2(t9);
    //Instruction 61586
    //MUL
    t23 = t23 * _ST_WindGlobal.w;
    //Instruction 61587
    //EXP
    t23 = exp2(t23);
    //Instruction 61588
    //NE
    tb24 = t9!=0.0;
    //Instruction 61589
    //MOVC
    t9 = (tb24) ? t23 : t9;
    //Instruction 61590
    //MUL
    t2.x = t9 * t2.x;
    //Instruction 61591
    //ADD
    t9 = in_TEXCOORD0.x + -0.500000;
    //Instruction 61592
    //MUL
    t9 = t9 * _TreeSize[int(tu16) + 0].x;
    //Instruction 61593
    //MUL
    t9 = t0.x * t9;
    //Instruction 61594
    //DP3
    t15.x = dot(t8.xyz, t8.xyz);
    //Instruction 61595
    //RSQ
    t15.x = inversesqrt(t15.x);
    //Instruction 61596
    //MUL
    t4.xy = t15.xx * t8.xz;
    //Instruction 61597
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 61598
    //DP2
    t8.x = dot(t4.xz, t4.xw);
    //Instruction 61599
    //MUL
    t15.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 61600
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 61601
    //MUL
    t8.xy = t8.xx * t15.xy;
    //Instruction 61602
    //MUL
    t3.xz = t8.xy * vec2(t9);
    //Instruction 61603
    //MAD
    t4.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 61604
    //MOV
    t4.y = t3.y;
    //Instruction 61605
    //DP3
    t22 = dot(t4.xyz, t4.xyz);
    //Instruction 61606
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 61607
    //MUL
    t2.xyw = vec3(t22) * t4.xyz;
    //Instruction 61608
    //DP3
    t22 = dot(t3.xyz, t3.xyz);
    //Instruction 61609
    //SQRT
    t22 = sqrt(t22);
    //Instruction 61610
    //MUL
    t2.xyw = vec3(t22) * t2.xyw;
    //Instruction 61611
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 61612
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 61613
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 61614
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 61615
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 61616
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 61617
    //MUL
    t3.x = t8.y * _World2Object[0].x;
    //Instruction 61618
    //MUL
    t3.y = t8.y * _World2Object[1].x;
    //Instruction 61619
    //MUL
    t3.z = t8.y * _World2Object[2].x;
    //Instruction 61620
    //MUL
    t4.x = (-t8.x) * _World2Object[0].z;
    //Instruction 61621
    //MUL
    t4.y = (-t8.x) * _World2Object[1].z;
    //Instruction 61622
    //MUL
    t4.z = (-t8.x) * _World2Object[2].z;
    //Instruction 61623
    //ADD
    t3.xyz = t3.xyz + t4.xyz;
    //Instruction 61624
    //DP3
    t1.x = dot(t3.xyz, t3.xyz);
    //Instruction 61625
    //RSQ
    t1.x = inversesqrt(t1.x);
    //Instruction 61626
    //MUL
    t3.xyz = t1.xxx * t3.xyz;
    //Instruction 61627
    //MOV
    vs_TEXCOORD0.xyz = t3.xyz;
    //Instruction 61628
    //MUL
    t4.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 61629
    //MAD
    t4.xyz = _Object2World[0].xyz * t2.xxx + t4.xyz;
    //Instruction 61630
    //MAD
    t4.xyz = _Object2World[2].xyz * t2.www + t4.xyz;
    //Instruction 61631
    //ADD
    vs_TEXCOORD1.xyz = t4.xyz + _Object2World[3].xyz;
    //Instruction 61632
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 61633
    //MAX
    t1.x = max(abs(t8.y), abs(t8.x));
    //Instruction 61634
    //DIV
    t1.x = float(1.0) / t1.x;
    //Instruction 61635
    //MIN
    t22 = min(abs(t8.y), abs(t8.x));
    //Instruction 61636
    //MUL
    t1.x = t1.x * t22;
    //Instruction 61637
    //MUL
    t22 = t1.x * t1.x;
    //Instruction 61638
    //MAD
    t24 = t22 * 0.020835 + -0.085133;
    //Instruction 61639
    //MAD
    t24 = t22 * t24 + 0.180141;
    //Instruction 61640
    //MAD
    t24 = t22 * t24 + -0.330299;
    //Instruction 61641
    //MAD
    t22 = t22 * t24 + 0.999866;
    //Instruction 61642
    //MUL
    t24 = t22 * t1.x;
    //Instruction 61643
    //MAD
    t24 = t24 * -2.000000 + 1.570796;
    //Instruction 61644
    //LT
    tb4 = abs(t8.y)<abs(t8.x);
    //Instruction 61645
    //AND
    t24 = tb4 ? t24 : float(0.0);
    //Instruction 61646
    //MAD
    t1.x = t1.x * t22 + t24;
    //Instruction 61647
    //LT
    tb22 = t8.y<(-t8.y);
    //Instruction 61648
    //AND
    t22 = tb22 ? -3.141593 : float(0.0);
    //Instruction 61649
    //ADD
    t1.x = t22 + t1.x;
    //Instruction 61650
    //MIN
    t22 = min(t8.y, (-t8.x));
    //Instruction 61651
    //MAX
    t8.x = max(t8.y, (-t8.x));
    //Instruction 61652
    //GE
    tb8 = t8.x>=(-t8.x);
    //Instruction 61653
    //LT
    tb15 = t22<(-t22);
    //Instruction 61654
    //AND
    ti8 = int(uint(tb8) & uint(tb15));
    //Instruction 61655
    //MOVC
    t1.x = (ti8 != 0) ? (-t1.x) : t1.x;
    //Instruction 61656
    //LT
    tb8 = t1.x<0.0;
    //Instruction 61657
    //AND
    t8.x = tb8 ? 6.283185 : float(0.0);
    //Instruction 61658
    //ADD
    t1.x = t8.x + t1.x;
    //Instruction 61659
    //ADD
    t1.x = t0.z + t1.x;
    //Instruction 61660
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu16) + 0].y + 0.500000;
    //Instruction 61661
    //ROUND_NI
    t1.x = floor(t1.x);
    //Instruction 61662
    //DIV
    t1.x = t1.x / _TreeInfo[int(tu16) + 0].x;
    //Instruction 61663
    //GE
    tb8 = t1.x>=(-t1.x);
    //Instruction 61664
    //FRC
    t1.x = fract(abs(t1.x));
    //Instruction 61665
    //MOVC
    t1.x = (tb8) ? t1.x : (-t1.x);
    //Instruction 61666
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu16) + 0].x + _TreeInfo[int(tu16) + 0].z;
    //Instruction 61667
    //FTOU
    tu1 = uint(t1.x);
    //Instruction 61668
    //LT
    tb8 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 61669
    //MAD
    t15.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 61670
    //MAD
    t4.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 61671
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb8)) ? t15.xy : t4.xy;
    //Instruction 61672
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 61673
    //MUL
    t1.xyz = t2.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 61674
    //MAD
    t1.xyz = glstate_matrix_mvp[0].xyw * t2.xxx + t1.xyz;
    //Instruction 61675
    //MAD
    t1.xyz = glstate_matrix_mvp[2].xyw * t2.www + t1.xyz;
    //Instruction 61676
    //ADD
    t1.xyz = t1.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 61677
    //MUL
    t2.xz = t1.xz * vec2(0.500000, 0.500000);
    //Instruction 61678
    //MUL
    t22 = t1.y * _ProjectionParams.x;
    //Instruction 61679
    //MUL
    t2.w = t22 * 0.500000;
    //Instruction 61680
    //ADD
    t2.xy = t2.zz + t2.xw;
    //Instruction 61681
    //MUL
    t2.xy = t2.xy * _ScreenParams.xy;
    //Instruction 61682
    //MUL
    t1.xy = t2.xy * vec2(0.250000, 0.250000);
    //Instruction 61683
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 61684
    //MUL
    t16_5 = t3.y * t3.y;
    //Instruction 61685
    //MAD
    t16_5 = t3.x * t3.x + (-t16_5);
    //Instruction 61686
    //MUL
    t16_0 = t3.yzzx * t3.xyzz;
    //Instruction 61687
    //DP4
    t16_6.x = dot(unity_SHBr, t16_0);
    //Instruction 61688
    //DP4
    t16_6.y = dot(unity_SHBg, t16_0);
    //Instruction 61689
    //DP4
    t16_6.z = dot(unity_SHBb, t16_0);
    //Instruction 61690
    //MAD
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(t16_5) + t16_6.xyz;
    //Instruction 61691
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
mediump float t16_18;
void main()
{
    //Instruction 61532
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 61533
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 61534
    //MOV
    t1.x = t16_0.x;
    //Instruction 61535
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 61536
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 61537
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 61538
    //LT
    tb1 = t16_1<0.0;
    //Instruction 61539
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 61540
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 61541
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 61542
    //MUL
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 61543
    //LT
    tb1 = t10_2<0.0;
    //Instruction 61544
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 61545
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 61546
    //MOV
    t16_0.w = 1.0;
    //Instruction 61547
    //DP4
    t16_4.x = dot(unity_SHAr, t16_0);
    //Instruction 61548
    //DP4
    t16_4.y = dot(unity_SHAg, t16_0);
    //Instruction 61549
    //DP4
    t16_4.z = dot(unity_SHAb, t16_0);
    //Instruction 61550
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD5.xyz;
    //Instruction 61551
    //MUL
    t16_4.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 61552
    //MUL
    t16_3.xyz = t16_3.xyz * _LightColor0.xyz;
    //Instruction 61553
    //DP3
    t16_18 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 61554
    //MAX
    t16_18 = max(t16_18, 0.0);
    //Instruction 61555
    //MAD
    t16_3.xyz = t16_3.xyz * vec3(t16_18) + t16_4.xyz;
    //Instruction 61556
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 61557
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 61558
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp vec3 angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_18.z / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_18.z / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  angle_9 = vec3(tmpvar_19);
  bvec3 tmpvar_22;
  tmpvar_22 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_23;
  if (tmpvar_22.x) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_22.y) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_22.z) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  vec3 tmpvar_26;
  tmpvar_26.x = tmpvar_23;
  tmpvar_26.y = tmpvar_24;
  tmpvar_26.z = tmpvar_25;
  angle_9 = (vec3(tmpvar_19) + tmpvar_26);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_8.xz = tmpvar_28.xz;
  billboardPos_8.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_8;
    highp float fMoveAmount_30;
    highp float fAdjust_31;
    highp float fLength_32;
    fLength_32 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_33;
    tmpvar_33 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_31 = tmpvar_33;
    if ((tmpvar_33 != 0.0)) {
      fAdjust_31 = pow (tmpvar_33, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_34;
    tmpvar_34.zw = vec2(0.0, 0.0);
    tmpvar_34.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_34.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_35;
    highp vec4 tmpvar_36;
    tmpvar_36 = abs(((
      fract((tmpvar_34 + 0.5))
     * 2.0) - 1.0));
    tmpvar_35 = (((
      (tmpvar_36 * tmpvar_36)
     * 
      (3.0 - (2.0 * tmpvar_36))
    ) - 0.5) * 2.0);
    fMoveAmount_30 = ((_ST_WindGlobal.y * (tmpvar_35.x + 
      (tmpvar_35.y * tmpvar_35.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_30 = (fMoveAmount_30 * fAdjust_31);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * fMoveAmount_30));
    vPos_29 = (normalize(vPos_29) * fLength_32);
    billboardPos_8 = vPos_29;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (angle_9 + tmpvar_27.z);
  highp vec3 tmpvar_37;
  tmpvar_37 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_38;
  tmpvar_38 = (fract(abs(tmpvar_37)) * tmpvar_11.xxx);
  highp float tmpvar_39;
  if ((tmpvar_37.x >= 0.0)) {
    tmpvar_39 = tmpvar_38.x;
  } else {
    tmpvar_39 = -(tmpvar_38.x);
  };
  highp vec4 tmpvar_40;
  tmpvar_40 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_39))];
  if ((tmpvar_40.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_40.xy - (tmpvar_40.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_40.xy + (tmpvar_40.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_41;
  hPos_41 = (glstate_matrix_mvp * tmpvar_6);
  mediump vec3 screenPos_42;
  highp vec4 o_43;
  highp vec4 tmpvar_44;
  tmpvar_44 = (hPos_41 * 0.5);
  highp vec2 tmpvar_45;
  tmpvar_45.x = tmpvar_44.x;
  tmpvar_45.y = (tmpvar_44.y * _ProjectionParams.x);
  o_43.xy = (tmpvar_45 + tmpvar_44.w);
  o_43.zw = hPos_41.zw;
  highp vec3 tmpvar_46;
  tmpvar_46 = o_43.xyw;
  screenPos_42 = tmpvar_46;
  screenPos_42.xy = (screenPos_42.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = _Color;
  highp vec4 v_47;
  v_47.x = _World2Object[0].x;
  v_47.y = _World2Object[1].x;
  v_47.z = _World2Object[2].x;
  v_47.w = _World2Object[3].x;
  highp vec4 v_48;
  v_48.x = _World2Object[0].z;
  v_48.y = _World2Object[1].z;
  v_48.z = _World2Object[2].z;
  v_48.w = _World2Object[3].z;
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize(((v_47.xyz * tmpvar_17.z) + (v_48.xyz * tmpvar_18.z)));
  worldNormal_2 = tmpvar_49;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_50;
  tmpvar_50.w = 1.0;
  tmpvar_50.xyz = worldNormal_2;
  mediump vec4 normal_51;
  normal_51 = tmpvar_50;
  mediump vec3 x2_52;
  mediump vec4 tmpvar_53;
  tmpvar_53 = (normal_51.xyzz * normal_51.yzzx);
  x2_52.x = dot (unity_SHBr, tmpvar_53);
  x2_52.y = dot (unity_SHBg, tmpvar_53);
  x2_52.z = dot (unity_SHBb, tmpvar_53);
  tmpvar_5 = (unity_World2Shadow[0] * (_Object2World * tmpvar_6));
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = screenPos_42;
  xlv_TEXCOORD5 = (x2_52 + (unity_SHC.xyz * (
    (normal_51.x * normal_51.x)
   - 
    (normal_51.y * normal_51.y)
  )));
  xlv_TEXCOORD6 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_16;
  x_16 = (tmpvar_10 - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp float tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_17 = tmpvar_18;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_17;
  mediump vec3 normalWorld_19;
  normalWorld_19 = tmpvar_5;
  mediump vec3 tmpvar_20;
  mediump vec3 tmpvar_21;
  mediump vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = normalWorld_19;
  mediump vec3 x1_23;
  x1_23.x = dot (unity_SHAr, tmpvar_22);
  x1_23.y = dot (unity_SHAg, tmpvar_22);
  x1_23.z = dot (unity_SHAb, tmpvar_22);
  tmpvar_21 = (xlv_TEXCOORD5 + x1_23);
  tmpvar_20 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_20;
  lowp vec4 c_24;
  lowp vec4 c_25;
  lowp float diff_26;
  mediump float tmpvar_27;
  tmpvar_27 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_26 = tmpvar_27;
  c_25.xyz = ((tmpvar_9 * tmpvar_20) * diff_26);
  c_25.w = tmpvar_10;
  c_24.w = c_25.w;
  c_24.xyz = (c_25.xyz + (tmpvar_9 * tmpvar_21));
  c_4.xyz = c_24.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp vec3 angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_18.z / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_18.z / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  angle_9 = vec3(tmpvar_19);
  bvec3 tmpvar_22;
  tmpvar_22 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_23;
  if (tmpvar_22.x) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_22.y) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_22.z) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  vec3 tmpvar_26;
  tmpvar_26.x = tmpvar_23;
  tmpvar_26.y = tmpvar_24;
  tmpvar_26.z = tmpvar_25;
  angle_9 = (vec3(tmpvar_19) + tmpvar_26);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_8.xz = tmpvar_28.xz;
  billboardPos_8.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_8;
    highp float fMoveAmount_30;
    highp float fAdjust_31;
    highp float fLength_32;
    fLength_32 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_33;
    tmpvar_33 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_31 = tmpvar_33;
    if ((tmpvar_33 != 0.0)) {
      fAdjust_31 = pow (tmpvar_33, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_34;
    tmpvar_34.zw = vec2(0.0, 0.0);
    tmpvar_34.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_34.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_35;
    highp vec4 tmpvar_36;
    tmpvar_36 = abs(((
      fract((tmpvar_34 + 0.5))
     * 2.0) - 1.0));
    tmpvar_35 = (((
      (tmpvar_36 * tmpvar_36)
     * 
      (3.0 - (2.0 * tmpvar_36))
    ) - 0.5) * 2.0);
    fMoveAmount_30 = ((_ST_WindGlobal.y * (tmpvar_35.x + 
      (tmpvar_35.y * tmpvar_35.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_30 = (fMoveAmount_30 * fAdjust_31);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * fMoveAmount_30));
    vPos_29 = (normalize(vPos_29) * fLength_32);
    billboardPos_8 = vPos_29;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (angle_9 + tmpvar_27.z);
  highp vec3 tmpvar_37;
  tmpvar_37 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_38;
  tmpvar_38 = (fract(abs(tmpvar_37)) * tmpvar_11.xxx);
  highp float tmpvar_39;
  if ((tmpvar_37.x >= 0.0)) {
    tmpvar_39 = tmpvar_38.x;
  } else {
    tmpvar_39 = -(tmpvar_38.x);
  };
  highp vec4 tmpvar_40;
  tmpvar_40 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_39))];
  if ((tmpvar_40.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_40.xy - (tmpvar_40.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_40.xy + (tmpvar_40.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_41;
  hPos_41 = (glstate_matrix_mvp * tmpvar_6);
  mediump vec3 screenPos_42;
  highp vec4 o_43;
  highp vec4 tmpvar_44;
  tmpvar_44 = (hPos_41 * 0.5);
  highp vec2 tmpvar_45;
  tmpvar_45.x = tmpvar_44.x;
  tmpvar_45.y = (tmpvar_44.y * _ProjectionParams.x);
  o_43.xy = (tmpvar_45 + tmpvar_44.w);
  o_43.zw = hPos_41.zw;
  highp vec3 tmpvar_46;
  tmpvar_46 = o_43.xyw;
  screenPos_42 = tmpvar_46;
  screenPos_42.xy = (screenPos_42.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = _Color;
  highp vec3 tmpvar_47;
  tmpvar_47 = (_Object2World * tmpvar_6).xyz;
  highp vec4 v_48;
  v_48.x = _World2Object[0].x;
  v_48.y = _World2Object[1].x;
  v_48.z = _World2Object[2].x;
  v_48.w = _World2Object[3].x;
  highp vec4 v_49;
  v_49.x = _World2Object[0].z;
  v_49.y = _World2Object[1].z;
  v_49.z = _World2Object[2].z;
  v_49.w = _World2Object[3].z;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(((v_48.xyz * tmpvar_17.z) + (v_49.xyz * tmpvar_18.z)));
  worldNormal_2 = tmpvar_50;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_51;
  tmpvar_51.w = 1.0;
  tmpvar_51.xyz = worldNormal_2;
  mediump vec4 normal_52;
  normal_52 = tmpvar_51;
  mediump vec3 x2_53;
  mediump vec4 tmpvar_54;
  tmpvar_54 = (normal_52.xyzz * normal_52.yzzx);
  x2_53.x = dot (unity_SHBr, tmpvar_54);
  x2_53.y = dot (unity_SHBg, tmpvar_54);
  x2_53.z = dot (unity_SHBb, tmpvar_54);
  highp vec3 lightColor0_55;
  lightColor0_55 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_56;
  lightColor1_56 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_57;
  lightColor2_57 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_58;
  lightColor3_58 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_59;
  lightAttenSq_59 = unity_4LightAtten0;
  highp vec3 normal_60;
  normal_60 = worldNormal_2;
  highp vec3 col_61;
  highp vec4 ndotl_62;
  highp vec4 lengthSq_63;
  highp vec4 tmpvar_64;
  tmpvar_64 = (unity_4LightPosX0 - tmpvar_47.x);
  highp vec4 tmpvar_65;
  tmpvar_65 = (unity_4LightPosY0 - tmpvar_47.y);
  highp vec4 tmpvar_66;
  tmpvar_66 = (unity_4LightPosZ0 - tmpvar_47.z);
  lengthSq_63 = (tmpvar_64 * tmpvar_64);
  lengthSq_63 = (lengthSq_63 + (tmpvar_65 * tmpvar_65));
  lengthSq_63 = (lengthSq_63 + (tmpvar_66 * tmpvar_66));
  ndotl_62 = (tmpvar_64 * normal_60.x);
  ndotl_62 = (ndotl_62 + (tmpvar_65 * normal_60.y));
  ndotl_62 = (ndotl_62 + (tmpvar_66 * normal_60.z));
  highp vec4 tmpvar_67;
  tmpvar_67 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_62 * inversesqrt(lengthSq_63)));
  ndotl_62 = tmpvar_67;
  highp vec4 tmpvar_68;
  tmpvar_68 = (tmpvar_67 * (1.0/((1.0 + 
    (lengthSq_63 * lightAttenSq_59)
  ))));
  col_61 = (lightColor0_55 * tmpvar_68.x);
  col_61 = (col_61 + (lightColor1_56 * tmpvar_68.y));
  col_61 = (col_61 + (lightColor2_57 * tmpvar_68.z));
  col_61 = (col_61 + (lightColor3_58 * tmpvar_68.w));
  tmpvar_5 = ((x2_53 + (unity_SHC.xyz * 
    ((normal_52.x * normal_52.x) - (normal_52.y * normal_52.y))
  )) + col_61);
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_47;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = screenPos_42;
  xlv_TEXCOORD5 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_11.x = tmpvar_12.x;
  projUV_11.y = ((fract(tmpvar_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_14;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_15;
  x_15 = (tmpvar_9 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_16;
  normalWorld_16 = tmpvar_4;
  mediump vec3 tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = normalWorld_16;
  mediump vec3 x1_19;
  x1_19.x = dot (unity_SHAr, tmpvar_18);
  x1_19.y = dot (unity_SHAg, tmpvar_18);
  x1_19.z = dot (unity_SHAb, tmpvar_18);
  tmpvar_17 = (xlv_TEXCOORD5 + x1_19);
  lowp vec4 c_20;
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_22 = tmpvar_23;
  c_21.xyz = ((tmpvar_8 * tmpvar_1) * diff_22);
  c_21.w = tmpvar_9;
  c_20.w = c_21.w;
  c_20.xyz = (c_21.xyz + (tmpvar_8 * tmpvar_17));
  c_3.xyz = c_20.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
bool tb2;
highp vec4 t3;
highp vec4 t4;
highp vec2 t5;
mediump vec3 t16_6;
mediump vec3 t16_7;
highp vec3 t9;
highp int ti9;
bool tb9;
highp float t10;
highp vec2 t17;
bool tb17;
highp vec2 t18;
highp uint tu18;
highp float t25;
bool tb25;
highp float t26;
highp float t27;
bool tb27;
bool tb28;
void main()
{
    //Instruction 61719
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 61720
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 61721
    //ADD
    t9.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 61722
    //LT
    tb2 = 0.0<_InstanceData.x;
    //Instruction 61723
    //MOVC
    t0 = (bool(tb2)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 61724
    //ADD
    t2.x = t0.w + t9.x;
    //Instruction 61725
    //MAD
    t2.y = t0.w * 0.800000 + t9.y;
    //Instruction 61726
    //ADD
    t9.xyz = (-t9.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 61727
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 61728
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 61729
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 61730
    //MUL
    t18.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 61731
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 61732
    //MAD
    t2.xy = t18.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 61733
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 61734
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 61735
    //DIV
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 61736
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t10;
    //Instruction 61737
    //DIV
    t10 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 61738
    //MUL
    t18.x = in_COLOR0.w * 255.000000;
    //Instruction 61739
    //FTOU
    tu18 = uint(t18.x);
    //Instruction 61740
    //MAD
    t26 = in_TEXCOORD0.y * _TreeSize[int(tu18) + 0].y + _TreeSize[int(tu18) + 0].z;
    //Instruction 61741
    //MUL
    t3.y = t0.y * t26;
    //Instruction 61742
    //MAD
    t10 = (-t10) * 0.250000 + t3.y;
    //Instruction 61743
    //MAX
    t10 = max(t10, 0.0);
    //Instruction 61744
    //MUL
    t10 = t10 * _ST_WindGlobal.z;
    //Instruction 61745
    //LOG
    t26 = log2(t10);
    //Instruction 61746
    //MUL
    t26 = t26 * _ST_WindGlobal.w;
    //Instruction 61747
    //EXP
    t26 = exp2(t26);
    //Instruction 61748
    //NE
    tb27 = t10!=0.0;
    //Instruction 61749
    //MOVC
    t10 = (tb27) ? t26 : t10;
    //Instruction 61750
    //MUL
    t2.x = t10 * t2.x;
    //Instruction 61751
    //ADD
    t10 = in_TEXCOORD0.x + -0.500000;
    //Instruction 61752
    //MUL
    t10 = t10 * _TreeSize[int(tu18) + 0].x;
    //Instruction 61753
    //MUL
    t10 = t0.x * t10;
    //Instruction 61754
    //DP3
    t17.x = dot(t9.xyz, t9.xyz);
    //Instruction 61755
    //RSQ
    t17.x = inversesqrt(t17.x);
    //Instruction 61756
    //MUL
    t4.xy = t17.xx * t9.xz;
    //Instruction 61757
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 61758
    //DP2
    t9.x = dot(t4.xz, t4.xw);
    //Instruction 61759
    //MUL
    t17.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 61760
    //RSQ
    t9.x = inversesqrt(t9.x);
    //Instruction 61761
    //MUL
    t9.xy = t9.xx * t17.xy;
    //Instruction 61762
    //MUL
    t3.xz = t9.xy * vec2(t10);
    //Instruction 61763
    //MAD
    t4.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 61764
    //MOV
    t4.y = t3.y;
    //Instruction 61765
    //DP3
    t25 = dot(t4.xyz, t4.xyz);
    //Instruction 61766
    //RSQ
    t25 = inversesqrt(t25);
    //Instruction 61767
    //MUL
    t2.xyw = vec3(t25) * t4.xyz;
    //Instruction 61768
    //DP3
    t25 = dot(t3.xyz, t3.xyz);
    //Instruction 61769
    //SQRT
    t25 = sqrt(t25);
    //Instruction 61770
    //MUL
    t2.xyw = vec3(t25) * t2.xyw;
    //Instruction 61771
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 61772
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 61773
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 61774
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 61775
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 61776
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 61777
    //MUL
    t3.x = t9.y * _World2Object[0].x;
    //Instruction 61778
    //MUL
    t3.y = t9.y * _World2Object[1].x;
    //Instruction 61779
    //MUL
    t3.z = t9.y * _World2Object[2].x;
    //Instruction 61780
    //MUL
    t4.x = (-t9.x) * _World2Object[0].z;
    //Instruction 61781
    //MUL
    t4.y = (-t9.x) * _World2Object[1].z;
    //Instruction 61782
    //MUL
    t4.z = (-t9.x) * _World2Object[2].z;
    //Instruction 61783
    //ADD
    t3.xyz = t3.xyz + t4.xyz;
    //Instruction 61784
    //DP3
    t1.x = dot(t3.xyz, t3.xyz);
    //Instruction 61785
    //RSQ
    t1.x = inversesqrt(t1.x);
    //Instruction 61786
    //MUL
    t3.xyz = t1.xxx * t3.xyz;
    //Instruction 61787
    //MOV
    vs_TEXCOORD0.xyz = t3.xyz;
    //Instruction 61788
    //MUL
    t4.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 61789
    //MAD
    t4.xyz = _Object2World[0].xyz * t2.xxx + t4.xyz;
    //Instruction 61790
    //MAD
    t4.xyz = _Object2World[2].xyz * t2.www + t4.xyz;
    //Instruction 61791
    //ADD
    t4.xyz = t4.xyz + _Object2World[3].xyz;
    //Instruction 61792
    //MOV
    vs_TEXCOORD1.xyz = t4.xyz;
    //Instruction 61793
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 61794
    //MAX
    t1.x = max(abs(t9.y), abs(t9.x));
    //Instruction 61795
    //DIV
    t1.x = float(1.0) / t1.x;
    //Instruction 61796
    //MIN
    t25 = min(abs(t9.y), abs(t9.x));
    //Instruction 61797
    //MUL
    t1.x = t1.x * t25;
    //Instruction 61798
    //MUL
    t25 = t1.x * t1.x;
    //Instruction 61799
    //MAD
    t27 = t25 * 0.020835 + -0.085133;
    //Instruction 61800
    //MAD
    t27 = t25 * t27 + 0.180141;
    //Instruction 61801
    //MAD
    t27 = t25 * t27 + -0.330299;
    //Instruction 61802
    //MAD
    t25 = t25 * t27 + 0.999866;
    //Instruction 61803
    //MUL
    t27 = t25 * t1.x;
    //Instruction 61804
    //MAD
    t27 = t27 * -2.000000 + 1.570796;
    //Instruction 61805
    //LT
    tb28 = abs(t9.y)<abs(t9.x);
    //Instruction 61806
    //AND
    t27 = tb28 ? t27 : float(0.0);
    //Instruction 61807
    //MAD
    t1.x = t1.x * t25 + t27;
    //Instruction 61808
    //LT
    tb25 = t9.y<(-t9.y);
    //Instruction 61809
    //AND
    t25 = tb25 ? -3.141593 : float(0.0);
    //Instruction 61810
    //ADD
    t1.x = t25 + t1.x;
    //Instruction 61811
    //MIN
    t25 = min(t9.y, (-t9.x));
    //Instruction 61812
    //MAX
    t9.x = max(t9.y, (-t9.x));
    //Instruction 61813
    //GE
    tb9 = t9.x>=(-t9.x);
    //Instruction 61814
    //LT
    tb17 = t25<(-t25);
    //Instruction 61815
    //AND
    ti9 = int(uint(tb9) & uint(tb17));
    //Instruction 61816
    //MOVC
    t1.x = (ti9 != 0) ? (-t1.x) : t1.x;
    //Instruction 61817
    //LT
    tb9 = t1.x<0.0;
    //Instruction 61818
    //AND
    t9.x = tb9 ? 6.283185 : float(0.0);
    //Instruction 61819
    //ADD
    t1.x = t9.x + t1.x;
    //Instruction 61820
    //ADD
    t1.x = t0.z + t1.x;
    //Instruction 61821
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu18) + 0].y + 0.500000;
    //Instruction 61822
    //ROUND_NI
    t1.x = floor(t1.x);
    //Instruction 61823
    //DIV
    t1.x = t1.x / _TreeInfo[int(tu18) + 0].x;
    //Instruction 61824
    //GE
    tb9 = t1.x>=(-t1.x);
    //Instruction 61825
    //FRC
    t1.x = fract(abs(t1.x));
    //Instruction 61826
    //MOVC
    t1.x = (tb9) ? t1.x : (-t1.x);
    //Instruction 61827
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu18) + 0].x + _TreeInfo[int(tu18) + 0].z;
    //Instruction 61828
    //FTOU
    tu1 = uint(t1.x);
    //Instruction 61829
    //LT
    tb9 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 61830
    //MAD
    t17.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 61831
    //MAD
    t5.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 61832
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb9)) ? t17.xy : t5.xy;
    //Instruction 61833
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 61834
    //MUL
    t1.xyz = t2.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 61835
    //MAD
    t1.xyz = glstate_matrix_mvp[0].xyw * t2.xxx + t1.xyz;
    //Instruction 61836
    //MAD
    t1.xyz = glstate_matrix_mvp[2].xyw * t2.www + t1.xyz;
    //Instruction 61837
    //ADD
    t1.xyz = t1.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 61838
    //MUL
    t2.xz = t1.xz * vec2(0.500000, 0.500000);
    //Instruction 61839
    //MUL
    t25 = t1.y * _ProjectionParams.x;
    //Instruction 61840
    //MUL
    t2.w = t25 * 0.500000;
    //Instruction 61841
    //ADD
    t2.xy = t2.zz + t2.xw;
    //Instruction 61842
    //MUL
    t2.xy = t2.xy * _ScreenParams.xy;
    //Instruction 61843
    //MUL
    t1.xy = t2.xy * vec2(0.250000, 0.250000);
    //Instruction 61844
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 61845
    //ADD
    t0 = (-t4.zzzz) + unity_4LightPosZ0;
    //Instruction 61846
    //ADD
    t1 = (-t4.xxxx) + unity_4LightPosX0;
    //Instruction 61847
    //ADD
    t2 = (-t4.yyyy) + unity_4LightPosY0;
    //Instruction 61848
    //MUL
    t4 = t3.yyyy * t2;
    //Instruction 61849
    //MUL
    t2 = t2 * t2;
    //Instruction 61850
    //MAD
    t2 = t1 * t1 + t2;
    //Instruction 61851
    //MAD
    t1 = t1 * t3.xxxx + t4;
    //Instruction 61852
    //MAD
    t1 = t0 * t3.zzzz + t1;
    //Instruction 61853
    //MAD
    t0 = t0 * t0 + t2;
    //Instruction 61854
    //RSQ
    t2 = inversesqrt(t0);
    //Instruction 61855
    //MAD
    t0 = t0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 61856
    //DIV
    t0 = vec4(1.0, 1.0, 1.0, 1.0) / t0;
    //Instruction 61857
    //MUL
    t1 = t1 * t2;
    //Instruction 61858
    //MAX
    t1 = max(t1, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 61859
    //MUL
    t0 = t0 * t1;
    //Instruction 61860
    //MUL
    t1.xyz = t0.yyy * unity_LightColor[1].xyz;
    //Instruction 61861
    //MAD
    t1.xyz = unity_LightColor[0].xyz * t0.xxx + t1.xyz;
    //Instruction 61862
    //MAD
    t1.xyz = unity_LightColor[2].xyz * t0.zzz + t1.xyz;
    //Instruction 61863
    //MAD
    t1.xyz = unity_LightColor[3].xyz * t0.www + t1.xyz;
    //Instruction 61864
    //MUL
    t16_6.x = t3.y * t3.y;
    //Instruction 61865
    //MAD
    t16_6.x = t3.x * t3.x + (-t16_6.x);
    //Instruction 61866
    //MUL
    t16_0 = t3.yzzx * t3.xyzz;
    //Instruction 61867
    //DP4
    t16_7.x = dot(unity_SHBr, t16_0);
    //Instruction 61868
    //DP4
    t16_7.y = dot(unity_SHBg, t16_0);
    //Instruction 61869
    //DP4
    t16_7.z = dot(unity_SHBb, t16_0);
    //Instruction 61870
    //MAD
    t16_6.xyz = unity_SHC.xyz * t16_6.xxx + t16_7.xyz;
    //Instruction 61871
    //ADD
    t1.xyz = t1.xyz + t16_6.xyz;
    //Instruction 61872
    //MOV
    vs_TEXCOORD5.xyz = t1.xyz;
    //Instruction 61873
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
mediump float t16_18;
void main()
{
    //Instruction 61692
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 61693
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 61694
    //MOV
    t1.x = t16_0.x;
    //Instruction 61695
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 61696
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 61697
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 61698
    //LT
    tb1 = t16_1<0.0;
    //Instruction 61699
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 61700
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 61701
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 61702
    //MUL
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 61703
    //LT
    tb1 = t10_2<0.0;
    //Instruction 61704
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 61705
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 61706
    //MOV
    t16_0.w = 1.0;
    //Instruction 61707
    //DP4
    t16_4.x = dot(unity_SHAr, t16_0);
    //Instruction 61708
    //DP4
    t16_4.y = dot(unity_SHAg, t16_0);
    //Instruction 61709
    //DP4
    t16_4.z = dot(unity_SHAb, t16_0);
    //Instruction 61710
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD5.xyz;
    //Instruction 61711
    //MUL
    t16_4.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 61712
    //MUL
    t16_3.xyz = t16_3.xyz * _LightColor0.xyz;
    //Instruction 61713
    //DP3
    t16_18 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 61714
    //MAX
    t16_18 = max(t16_18, 0.0);
    //Instruction 61715
    //MAD
    t16_3.xyz = t16_3.xyz * vec3(t16_18) + t16_4.xyz;
    //Instruction 61716
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 61717
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 61718
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesVertex;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp vec3 angle_10;
  highp float tmpvar_11;
  tmpvar_11 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeInfo[int(tmpvar_11)];
  highp vec4 tmpvar_13;
  tmpvar_13 = _TreeSize[int(tmpvar_11)];
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (_glesVertex.xyz + tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceCameraPos - tmpvar_15));
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = -(tmpvar_16.z);
  tmpvar_17.z = tmpvar_16.x;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(tmpvar_17);
  highp vec3 tmpvar_19;
  tmpvar_19.y = 0.0;
  tmpvar_19.x = tmpvar_18.z;
  tmpvar_19.z = -(tmpvar_18.x);
  highp float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = (min (abs(
    (tmpvar_19.z / tmpvar_18.z)
  ), 1.0) / max (abs(
    (tmpvar_19.z / tmpvar_18.z)
  ), 1.0));
  highp float tmpvar_22;
  tmpvar_22 = (tmpvar_21 * tmpvar_21);
  tmpvar_22 = (((
    ((((
      ((((-0.01213232 * tmpvar_22) + 0.05368138) * tmpvar_22) - 0.1173503)
     * tmpvar_22) + 0.1938925) * tmpvar_22) - 0.3326756)
   * tmpvar_22) + 0.9999793) * tmpvar_21);
  tmpvar_22 = (tmpvar_22 + (float(
    (abs((tmpvar_19.z / tmpvar_18.z)) > 1.0)
  ) * (
    (tmpvar_22 * -2.0)
   + 1.570796)));
  tmpvar_20 = (tmpvar_22 * sign((tmpvar_19.z / tmpvar_18.z)));
  if ((abs(tmpvar_18.z) > (1e-08 * abs(tmpvar_19.z)))) {
    if ((tmpvar_18.z < 0.0)) {
      if ((tmpvar_19.z >= 0.0)) {
        tmpvar_20 += 3.141593;
      } else {
        tmpvar_20 = (tmpvar_20 - 3.141593);
      };
    };
  } else {
    tmpvar_20 = (sign(tmpvar_19.z) * 1.570796);
  };
  angle_10 = vec3(tmpvar_20);
  bvec3 tmpvar_23;
  tmpvar_23 = lessThan (vec3(tmpvar_20), vec3(0.0, 0.0, 0.0));
  float tmpvar_24;
  if (tmpvar_23.x) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_23.y) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  float tmpvar_26;
  if (tmpvar_23.z) {
    tmpvar_26 = 6.283185;
  } else {
    tmpvar_26 = 0.0;
  };
  vec3 tmpvar_27;
  tmpvar_27.x = tmpvar_24;
  tmpvar_27.y = tmpvar_25;
  tmpvar_27.z = tmpvar_26;
  angle_10 = (vec3(tmpvar_20) + tmpvar_27);
  highp vec4 tmpvar_28;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_28 = _InstanceData;
  } else {
    tmpvar_28 = tmpvar_1;
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_13.x) * tmpvar_28.x) * tmpvar_18);
  billboardPos_9.xz = tmpvar_29.xz;
  billboardPos_9.y = (tmpvar_29.y + ((
    (_glesMultiTexCoord0.y * tmpvar_13.y)
   + tmpvar_13.z) * tmpvar_28.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_30;
    vPos_30 = billboardPos_9;
    highp float fMoveAmount_31;
    highp float fAdjust_32;
    highp float fLength_33;
    fLength_33 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_34;
    tmpvar_34 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_32 = tmpvar_34;
    if ((tmpvar_34 != 0.0)) {
      fAdjust_32 = pow (tmpvar_34, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_35;
    tmpvar_35.zw = vec2(0.0, 0.0);
    tmpvar_35.x = (tmpvar_15.x + tmpvar_28.w);
    tmpvar_35.y = (tmpvar_15.y + (tmpvar_28.w * 0.8));
    highp vec4 tmpvar_36;
    highp vec4 tmpvar_37;
    tmpvar_37 = abs(((
      fract((tmpvar_35 + 0.5))
     * 2.0) - 1.0));
    tmpvar_36 = (((
      (tmpvar_37 * tmpvar_37)
     * 
      (3.0 - (2.0 * tmpvar_37))
    ) - 0.5) * 2.0);
    fMoveAmount_31 = ((_ST_WindGlobal.y * (tmpvar_36.x + 
      (tmpvar_36.y * tmpvar_36.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_31 = (fMoveAmount_31 * fAdjust_32);
    vPos_30.xz = (tmpvar_29.xz + (_ST_WindVector.xz * fMoveAmount_31));
    vPos_30 = (normalize(vPos_30) * fLength_33);
    billboardPos_9 = vPos_30;
  };
  tmpvar_7.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_7.w = 1.0;
  angle_10 = (angle_10 + tmpvar_28.z);
  highp vec3 tmpvar_38;
  tmpvar_38 = (floor((
    (angle_10 * tmpvar_12.y)
   + 0.5)) / tmpvar_12.xxx);
  highp vec3 tmpvar_39;
  tmpvar_39 = (fract(abs(tmpvar_38)) * tmpvar_12.xxx);
  highp float tmpvar_40;
  if ((tmpvar_38.x >= 0.0)) {
    tmpvar_40 = tmpvar_39.x;
  } else {
    tmpvar_40 = -(tmpvar_39.x);
  };
  highp vec4 tmpvar_41;
  tmpvar_41 = _ImageTexCoords[int((tmpvar_12.z + tmpvar_40))];
  if ((tmpvar_41.w < 0.0)) {
    tmpvar_8.xy = (tmpvar_41.xy - (tmpvar_41.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_8.xy = (tmpvar_41.xy + (tmpvar_41.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_42;
  hPos_42 = (glstate_matrix_mvp * tmpvar_7);
  mediump vec3 screenPos_43;
  highp vec4 o_44;
  highp vec4 tmpvar_45;
  tmpvar_45 = (hPos_42 * 0.5);
  highp vec2 tmpvar_46;
  tmpvar_46.x = tmpvar_45.x;
  tmpvar_46.y = (tmpvar_45.y * _ProjectionParams.x);
  o_44.xy = (tmpvar_46 + tmpvar_45.w);
  o_44.zw = hPos_42.zw;
  highp vec3 tmpvar_47;
  tmpvar_47 = o_44.xyw;
  screenPos_43 = tmpvar_47;
  screenPos_43.xy = (screenPos_43.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = _Color;
  highp vec3 tmpvar_48;
  tmpvar_48 = (_Object2World * tmpvar_7).xyz;
  highp vec4 v_49;
  v_49.x = _World2Object[0].x;
  v_49.y = _World2Object[1].x;
  v_49.z = _World2Object[2].x;
  v_49.w = _World2Object[3].x;
  highp vec4 v_50;
  v_50.x = _World2Object[0].z;
  v_50.y = _World2Object[1].z;
  v_50.z = _World2Object[2].z;
  v_50.w = _World2Object[3].z;
  highp vec3 tmpvar_51;
  tmpvar_51 = normalize(((v_49.xyz * tmpvar_18.z) + (v_50.xyz * tmpvar_19.z)));
  worldNormal_2 = tmpvar_51;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_52;
  tmpvar_52.w = 1.0;
  tmpvar_52.xyz = worldNormal_2;
  mediump vec4 normal_53;
  normal_53 = tmpvar_52;
  mediump vec3 x2_54;
  mediump vec4 tmpvar_55;
  tmpvar_55 = (normal_53.xyzz * normal_53.yzzx);
  x2_54.x = dot (unity_SHBr, tmpvar_55);
  x2_54.y = dot (unity_SHBg, tmpvar_55);
  x2_54.z = dot (unity_SHBb, tmpvar_55);
  highp vec3 lightColor0_56;
  lightColor0_56 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_57;
  lightColor1_57 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_58;
  lightColor2_58 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_59;
  lightColor3_59 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_60;
  lightAttenSq_60 = unity_4LightAtten0;
  highp vec3 normal_61;
  normal_61 = worldNormal_2;
  highp vec3 col_62;
  highp vec4 ndotl_63;
  highp vec4 lengthSq_64;
  highp vec4 tmpvar_65;
  tmpvar_65 = (unity_4LightPosX0 - tmpvar_48.x);
  highp vec4 tmpvar_66;
  tmpvar_66 = (unity_4LightPosY0 - tmpvar_48.y);
  highp vec4 tmpvar_67;
  tmpvar_67 = (unity_4LightPosZ0 - tmpvar_48.z);
  lengthSq_64 = (tmpvar_65 * tmpvar_65);
  lengthSq_64 = (lengthSq_64 + (tmpvar_66 * tmpvar_66));
  lengthSq_64 = (lengthSq_64 + (tmpvar_67 * tmpvar_67));
  ndotl_63 = (tmpvar_65 * normal_61.x);
  ndotl_63 = (ndotl_63 + (tmpvar_66 * normal_61.y));
  ndotl_63 = (ndotl_63 + (tmpvar_67 * normal_61.z));
  highp vec4 tmpvar_68;
  tmpvar_68 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_63 * inversesqrt(lengthSq_64)));
  ndotl_63 = tmpvar_68;
  highp vec4 tmpvar_69;
  tmpvar_69 = (tmpvar_68 * (1.0/((1.0 + 
    (lengthSq_64 * lightAttenSq_60)
  ))));
  col_62 = (lightColor0_56 * tmpvar_69.x);
  col_62 = (col_62 + (lightColor1_57 * tmpvar_69.y));
  col_62 = (col_62 + (lightColor2_58 * tmpvar_69.z));
  col_62 = (col_62 + (lightColor3_59 * tmpvar_69.w));
  tmpvar_5 = ((x2_54 + (unity_SHC.xyz * 
    ((normal_53.x * normal_53.x) - (normal_53.y * normal_53.y))
  )) + col_62);
  tmpvar_6 = (unity_World2Shadow[0] * (_Object2World * tmpvar_7));
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_48;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = screenPos_43;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_TEXCOORD6 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_16;
  x_16 = (tmpvar_10 - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp float tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_17 = tmpvar_18;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_17;
  mediump vec3 normalWorld_19;
  normalWorld_19 = tmpvar_5;
  mediump vec3 tmpvar_20;
  mediump vec3 tmpvar_21;
  mediump vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = normalWorld_19;
  mediump vec3 x1_23;
  x1_23.x = dot (unity_SHAr, tmpvar_22);
  x1_23.y = dot (unity_SHAg, tmpvar_22);
  x1_23.z = dot (unity_SHAb, tmpvar_22);
  tmpvar_21 = (xlv_TEXCOORD5 + x1_23);
  tmpvar_20 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_20;
  lowp vec4 c_24;
  lowp vec4 c_25;
  lowp float diff_26;
  mediump float tmpvar_27;
  tmpvar_27 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_26 = tmpvar_27;
  c_25.xyz = ((tmpvar_9 * tmpvar_20) * diff_26);
  c_25.w = tmpvar_10;
  c_24.w = c_25.w;
  c_24.xyz = (c_25.xyz + (tmpvar_9 * tmpvar_21));
  c_4.xyz = c_24.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp vec3 angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_18.z / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_18.z / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  angle_9 = vec3(tmpvar_19);
  bvec3 tmpvar_22;
  tmpvar_22 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_23;
  if (tmpvar_22.x) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_22.y) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_22.z) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  vec3 tmpvar_26;
  tmpvar_26.x = tmpvar_23;
  tmpvar_26.y = tmpvar_24;
  tmpvar_26.z = tmpvar_25;
  angle_9 = (vec3(tmpvar_19) + tmpvar_26);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_8.xz = tmpvar_28.xz;
  billboardPos_8.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_8;
    highp float fMoveAmount_30;
    highp float fAdjust_31;
    highp float fLength_32;
    fLength_32 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_33;
    tmpvar_33 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_31 = tmpvar_33;
    if ((tmpvar_33 != 0.0)) {
      fAdjust_31 = pow (tmpvar_33, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_34;
    tmpvar_34.zw = vec2(0.0, 0.0);
    tmpvar_34.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_34.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_35;
    highp vec4 tmpvar_36;
    tmpvar_36 = abs(((
      fract((tmpvar_34 + 0.5))
     * 2.0) - 1.0));
    tmpvar_35 = (((
      (tmpvar_36 * tmpvar_36)
     * 
      (3.0 - (2.0 * tmpvar_36))
    ) - 0.5) * 2.0);
    fMoveAmount_30 = ((_ST_WindGlobal.y * (tmpvar_35.x + 
      (tmpvar_35.y * tmpvar_35.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_30 = (fMoveAmount_30 * fAdjust_31);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * fMoveAmount_30));
    vPos_29 = (normalize(vPos_29) * fLength_32);
    billboardPos_8 = vPos_29;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (angle_9 + tmpvar_27.z);
  highp vec3 tmpvar_37;
  tmpvar_37 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_38;
  tmpvar_38 = (fract(abs(tmpvar_37)) * tmpvar_11.xxx);
  highp float tmpvar_39;
  if ((tmpvar_37.x >= 0.0)) {
    tmpvar_39 = tmpvar_38.x;
  } else {
    tmpvar_39 = -(tmpvar_38.x);
  };
  highp vec4 tmpvar_40;
  tmpvar_40 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_39))];
  if ((tmpvar_40.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_40.xy - (tmpvar_40.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_40.xy + (tmpvar_40.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_41;
  hPos_41 = (glstate_matrix_mvp * tmpvar_6);
  mediump vec3 screenPos_42;
  highp vec4 o_43;
  highp vec4 tmpvar_44;
  tmpvar_44 = (hPos_41 * 0.5);
  highp vec2 tmpvar_45;
  tmpvar_45.x = tmpvar_44.x;
  tmpvar_45.y = (tmpvar_44.y * _ProjectionParams.x);
  o_43.xy = (tmpvar_45 + tmpvar_44.w);
  o_43.zw = hPos_41.zw;
  highp vec3 tmpvar_46;
  tmpvar_46 = o_43.xyw;
  screenPos_42 = tmpvar_46;
  screenPos_42.xy = (screenPos_42.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = _Color;
  highp vec4 v_47;
  v_47.x = _World2Object[0].x;
  v_47.y = _World2Object[1].x;
  v_47.z = _World2Object[2].x;
  v_47.w = _World2Object[3].x;
  highp vec4 v_48;
  v_48.x = _World2Object[0].z;
  v_48.y = _World2Object[1].z;
  v_48.z = _World2Object[2].z;
  v_48.w = _World2Object[3].z;
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize(((v_47.xyz * tmpvar_17.z) + (v_48.xyz * tmpvar_18.z)));
  worldNormal_2 = tmpvar_49;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_50;
  tmpvar_50.w = 1.0;
  tmpvar_50.xyz = worldNormal_2;
  mediump vec4 normal_51;
  normal_51 = tmpvar_50;
  mediump vec3 x2_52;
  mediump vec4 tmpvar_53;
  tmpvar_53 = (normal_51.xyzz * normal_51.yzzx);
  x2_52.x = dot (unity_SHBr, tmpvar_53);
  x2_52.y = dot (unity_SHBg, tmpvar_53);
  x2_52.z = dot (unity_SHBb, tmpvar_53);
  tmpvar_5 = (unity_World2Shadow[0] * (_Object2World * tmpvar_6));
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = screenPos_42;
  xlv_TEXCOORD5 = (x2_52 + (unity_SHC.xyz * (
    (normal_51.x * normal_51.x)
   - 
    (normal_51.y * normal_51.y)
  )));
  xlv_TEXCOORD6 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_16;
  x_16 = (tmpvar_10 - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp float shadow_17;
  shadow_17 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_17;
  mediump vec3 normalWorld_18;
  normalWorld_18 = tmpvar_5;
  mediump vec3 tmpvar_19;
  mediump vec3 tmpvar_20;
  mediump vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = normalWorld_18;
  mediump vec3 x1_22;
  x1_22.x = dot (unity_SHAr, tmpvar_21);
  x1_22.y = dot (unity_SHAg, tmpvar_21);
  x1_22.z = dot (unity_SHAb, tmpvar_21);
  tmpvar_20 = (xlv_TEXCOORD5 + x1_22);
  tmpvar_19 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_19;
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_9 * tmpvar_19) * diff_25);
  c_24.w = tmpvar_10;
  c_23.w = c_24.w;
  c_23.xyz = (c_24.xyz + (tmpvar_9 * tmpvar_20));
  c_4.xyz = c_23.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
bool tb2;
highp vec4 t3;
highp vec4 t4;
bool tb4;
mediump float t16_5;
mediump vec3 t16_6;
highp vec3 t8;
highp int ti8;
bool tb8;
highp float t9;
highp vec2 t15;
bool tb15;
highp vec2 t16;
highp uint tu16;
highp float t22;
bool tb22;
highp float t23;
highp float t24;
bool tb24;
void main()
{
    //Instruction 61905
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 61906
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 61907
    //ADD
    t8.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 61908
    //LT
    tb2 = 0.0<_InstanceData.x;
    //Instruction 61909
    //MOVC
    t0 = (bool(tb2)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 61910
    //ADD
    t2.x = t0.w + t8.x;
    //Instruction 61911
    //MAD
    t2.y = t0.w * 0.800000 + t8.y;
    //Instruction 61912
    //ADD
    t8.xyz = (-t8.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 61913
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 61914
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 61915
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 61916
    //MUL
    t16.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 61917
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 61918
    //MAD
    t2.xy = t16.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 61919
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 61920
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 61921
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 61922
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t9;
    //Instruction 61923
    //DIV
    t9 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 61924
    //MUL
    t16.x = in_COLOR0.w * 255.000000;
    //Instruction 61925
    //FTOU
    tu16 = uint(t16.x);
    //Instruction 61926
    //MAD
    t23 = in_TEXCOORD0.y * _TreeSize[int(tu16) + 0].y + _TreeSize[int(tu16) + 0].z;
    //Instruction 61927
    //MUL
    t3.y = t0.y * t23;
    //Instruction 61928
    //MAD
    t9 = (-t9) * 0.250000 + t3.y;
    //Instruction 61929
    //MAX
    t9 = max(t9, 0.0);
    //Instruction 61930
    //MUL
    t9 = t9 * _ST_WindGlobal.z;
    //Instruction 61931
    //LOG
    t23 = log2(t9);
    //Instruction 61932
    //MUL
    t23 = t23 * _ST_WindGlobal.w;
    //Instruction 61933
    //EXP
    t23 = exp2(t23);
    //Instruction 61934
    //NE
    tb24 = t9!=0.0;
    //Instruction 61935
    //MOVC
    t9 = (tb24) ? t23 : t9;
    //Instruction 61936
    //MUL
    t2.x = t9 * t2.x;
    //Instruction 61937
    //ADD
    t9 = in_TEXCOORD0.x + -0.500000;
    //Instruction 61938
    //MUL
    t9 = t9 * _TreeSize[int(tu16) + 0].x;
    //Instruction 61939
    //MUL
    t9 = t0.x * t9;
    //Instruction 61940
    //DP3
    t15.x = dot(t8.xyz, t8.xyz);
    //Instruction 61941
    //RSQ
    t15.x = inversesqrt(t15.x);
    //Instruction 61942
    //MUL
    t4.xy = t15.xx * t8.xz;
    //Instruction 61943
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 61944
    //DP2
    t8.x = dot(t4.xz, t4.xw);
    //Instruction 61945
    //MUL
    t15.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 61946
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 61947
    //MUL
    t8.xy = t8.xx * t15.xy;
    //Instruction 61948
    //MUL
    t3.xz = t8.xy * vec2(t9);
    //Instruction 61949
    //MAD
    t4.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 61950
    //MOV
    t4.y = t3.y;
    //Instruction 61951
    //DP3
    t22 = dot(t4.xyz, t4.xyz);
    //Instruction 61952
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 61953
    //MUL
    t2.xyw = vec3(t22) * t4.xyz;
    //Instruction 61954
    //DP3
    t22 = dot(t3.xyz, t3.xyz);
    //Instruction 61955
    //SQRT
    t22 = sqrt(t22);
    //Instruction 61956
    //MUL
    t2.xyw = vec3(t22) * t2.xyw;
    //Instruction 61957
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 61958
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 61959
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 61960
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 61961
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 61962
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 61963
    //MUL
    t3.x = t8.y * _World2Object[0].x;
    //Instruction 61964
    //MUL
    t3.y = t8.y * _World2Object[1].x;
    //Instruction 61965
    //MUL
    t3.z = t8.y * _World2Object[2].x;
    //Instruction 61966
    //MUL
    t4.x = (-t8.x) * _World2Object[0].z;
    //Instruction 61967
    //MUL
    t4.y = (-t8.x) * _World2Object[1].z;
    //Instruction 61968
    //MUL
    t4.z = (-t8.x) * _World2Object[2].z;
    //Instruction 61969
    //ADD
    t3.xyz = t3.xyz + t4.xyz;
    //Instruction 61970
    //DP3
    t1.x = dot(t3.xyz, t3.xyz);
    //Instruction 61971
    //RSQ
    t1.x = inversesqrt(t1.x);
    //Instruction 61972
    //MUL
    t3.xyz = t1.xxx * t3.xyz;
    //Instruction 61973
    //MOV
    vs_TEXCOORD0.xyz = t3.xyz;
    //Instruction 61974
    //MUL
    t4.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 61975
    //MAD
    t4.xyz = _Object2World[0].xyz * t2.xxx + t4.xyz;
    //Instruction 61976
    //MAD
    t4.xyz = _Object2World[2].xyz * t2.www + t4.xyz;
    //Instruction 61977
    //ADD
    vs_TEXCOORD1.xyz = t4.xyz + _Object2World[3].xyz;
    //Instruction 61978
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 61979
    //MAX
    t1.x = max(abs(t8.y), abs(t8.x));
    //Instruction 61980
    //DIV
    t1.x = float(1.0) / t1.x;
    //Instruction 61981
    //MIN
    t22 = min(abs(t8.y), abs(t8.x));
    //Instruction 61982
    //MUL
    t1.x = t1.x * t22;
    //Instruction 61983
    //MUL
    t22 = t1.x * t1.x;
    //Instruction 61984
    //MAD
    t24 = t22 * 0.020835 + -0.085133;
    //Instruction 61985
    //MAD
    t24 = t22 * t24 + 0.180141;
    //Instruction 61986
    //MAD
    t24 = t22 * t24 + -0.330299;
    //Instruction 61987
    //MAD
    t22 = t22 * t24 + 0.999866;
    //Instruction 61988
    //MUL
    t24 = t22 * t1.x;
    //Instruction 61989
    //MAD
    t24 = t24 * -2.000000 + 1.570796;
    //Instruction 61990
    //LT
    tb4 = abs(t8.y)<abs(t8.x);
    //Instruction 61991
    //AND
    t24 = tb4 ? t24 : float(0.0);
    //Instruction 61992
    //MAD
    t1.x = t1.x * t22 + t24;
    //Instruction 61993
    //LT
    tb22 = t8.y<(-t8.y);
    //Instruction 61994
    //AND
    t22 = tb22 ? -3.141593 : float(0.0);
    //Instruction 61995
    //ADD
    t1.x = t22 + t1.x;
    //Instruction 61996
    //MIN
    t22 = min(t8.y, (-t8.x));
    //Instruction 61997
    //MAX
    t8.x = max(t8.y, (-t8.x));
    //Instruction 61998
    //GE
    tb8 = t8.x>=(-t8.x);
    //Instruction 61999
    //LT
    tb15 = t22<(-t22);
    //Instruction 62000
    //AND
    ti8 = int(uint(tb8) & uint(tb15));
    //Instruction 62001
    //MOVC
    t1.x = (ti8 != 0) ? (-t1.x) : t1.x;
    //Instruction 62002
    //LT
    tb8 = t1.x<0.0;
    //Instruction 62003
    //AND
    t8.x = tb8 ? 6.283185 : float(0.0);
    //Instruction 62004
    //ADD
    t1.x = t8.x + t1.x;
    //Instruction 62005
    //ADD
    t1.x = t0.z + t1.x;
    //Instruction 62006
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu16) + 0].y + 0.500000;
    //Instruction 62007
    //ROUND_NI
    t1.x = floor(t1.x);
    //Instruction 62008
    //DIV
    t1.x = t1.x / _TreeInfo[int(tu16) + 0].x;
    //Instruction 62009
    //GE
    tb8 = t1.x>=(-t1.x);
    //Instruction 62010
    //FRC
    t1.x = fract(abs(t1.x));
    //Instruction 62011
    //MOVC
    t1.x = (tb8) ? t1.x : (-t1.x);
    //Instruction 62012
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu16) + 0].x + _TreeInfo[int(tu16) + 0].z;
    //Instruction 62013
    //FTOU
    tu1 = uint(t1.x);
    //Instruction 62014
    //LT
    tb8 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 62015
    //MAD
    t15.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 62016
    //MAD
    t4.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 62017
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb8)) ? t15.xy : t4.xy;
    //Instruction 62018
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 62019
    //MUL
    t1.xyz = t2.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 62020
    //MAD
    t1.xyz = glstate_matrix_mvp[0].xyw * t2.xxx + t1.xyz;
    //Instruction 62021
    //MAD
    t1.xyz = glstate_matrix_mvp[2].xyw * t2.www + t1.xyz;
    //Instruction 62022
    //ADD
    t1.xyz = t1.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 62023
    //MUL
    t1.w = t1.y * _ProjectionParams.x;
    //Instruction 62024
    //MUL
    t4.xzw = t1.xzw * vec3(0.500000, 0.500000, 0.500000);
    //Instruction 62025
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 62026
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 62027
    //MUL
    t1.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 62028
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 62029
    //MUL
    t16_5 = t3.y * t3.y;
    //Instruction 62030
    //MAD
    t16_5 = t3.x * t3.x + (-t16_5);
    //Instruction 62031
    //MUL
    t16_0 = t3.yzzx * t3.xyzz;
    //Instruction 62032
    //DP4
    t16_6.x = dot(unity_SHBr, t16_0);
    //Instruction 62033
    //DP4
    t16_6.y = dot(unity_SHBg, t16_0);
    //Instruction 62034
    //DP4
    t16_6.z = dot(unity_SHBb, t16_0);
    //Instruction 62035
    //MAD
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(t16_5) + t16_6.xyz;
    //Instruction 62036
    //MUL
    t0 = t2.yyyy * _Object2World[1];
    //Instruction 62037
    //MAD
    t0 = _Object2World[0] * t2.xxxx + t0;
    //Instruction 62038
    //MAD
    t0 = _Object2World[2] * t2.wwww + t0;
    //Instruction 62039
    //ADD
    t0 = t0 + _Object2World[3];
    //Instruction 62040
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 62041
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 62042
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 62043
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 62044
    //MOV
    vs_TEXCOORD6 = t0;
    //Instruction 62045
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump float t16_6;
mediump float t16_21;
mediump float t16_22;
void main()
{
    //Instruction 61874
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 61875
    //FRC
    t16_6 = fract(t16_0.y);
    //Instruction 61876
    //MOV
    t1.x = t16_0.x;
    //Instruction 61877
    //MAD
    t1.y = t16_6 * 0.062500 + unity_LODFade.y;
    //Instruction 61878
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 61879
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 61880
    //LT
    tb1 = t16_1<0.0;
    //Instruction 61881
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 61882
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 61883
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 61884
    //MUL
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 61885
    //LT
    tb1 = t10_2<0.0;
    //Instruction 61886
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 61887
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 61888
    //MOV
    t16_0.w = 1.0;
    //Instruction 61889
    //DP4
    t16_4.x = dot(unity_SHAr, t16_0);
    //Instruction 61890
    //DP4
    t16_4.y = dot(unity_SHAg, t16_0);
    //Instruction 61891
    //DP4
    t16_4.z = dot(unity_SHAb, t16_0);
    //Instruction 61892
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD5.xyz;
    //Instruction 61893
    //MUL
    t16_4.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 61894
    //SAMPLE_C_LZ
    vec3 txVec57 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_21 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec57, 0.0);
    //Instruction 61895
    //ADD
    t16_22 = (-_LightShadowData.x) + 1.0;
    //Instruction 61896
    //MAD
    t16_21 = t16_21 * t16_22 + _LightShadowData.x;
    //Instruction 61897
    //MUL
    t16_5.xyz = vec3(t16_21) * _LightColor0.xyz;
    //Instruction 61898
    //MUL
    t16_3.xyz = t16_3.xyz * t16_5.xyz;
    //Instruction 61899
    //DP3
    t16_21 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 61900
    //MAX
    t16_21 = max(t16_21, 0.0);
    //Instruction 61901
    //MAD
    t16_3.xyz = t16_3.xyz * vec3(t16_21) + t16_4.xyz;
    //Instruction 61902
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 61903
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 61904
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesVertex;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp vec3 angle_10;
  highp float tmpvar_11;
  tmpvar_11 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeInfo[int(tmpvar_11)];
  highp vec4 tmpvar_13;
  tmpvar_13 = _TreeSize[int(tmpvar_11)];
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (_glesVertex.xyz + tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceCameraPos - tmpvar_15));
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = -(tmpvar_16.z);
  tmpvar_17.z = tmpvar_16.x;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(tmpvar_17);
  highp vec3 tmpvar_19;
  tmpvar_19.y = 0.0;
  tmpvar_19.x = tmpvar_18.z;
  tmpvar_19.z = -(tmpvar_18.x);
  highp float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = (min (abs(
    (tmpvar_19.z / tmpvar_18.z)
  ), 1.0) / max (abs(
    (tmpvar_19.z / tmpvar_18.z)
  ), 1.0));
  highp float tmpvar_22;
  tmpvar_22 = (tmpvar_21 * tmpvar_21);
  tmpvar_22 = (((
    ((((
      ((((-0.01213232 * tmpvar_22) + 0.05368138) * tmpvar_22) - 0.1173503)
     * tmpvar_22) + 0.1938925) * tmpvar_22) - 0.3326756)
   * tmpvar_22) + 0.9999793) * tmpvar_21);
  tmpvar_22 = (tmpvar_22 + (float(
    (abs((tmpvar_19.z / tmpvar_18.z)) > 1.0)
  ) * (
    (tmpvar_22 * -2.0)
   + 1.570796)));
  tmpvar_20 = (tmpvar_22 * sign((tmpvar_19.z / tmpvar_18.z)));
  if ((abs(tmpvar_18.z) > (1e-08 * abs(tmpvar_19.z)))) {
    if ((tmpvar_18.z < 0.0)) {
      if ((tmpvar_19.z >= 0.0)) {
        tmpvar_20 += 3.141593;
      } else {
        tmpvar_20 = (tmpvar_20 - 3.141593);
      };
    };
  } else {
    tmpvar_20 = (sign(tmpvar_19.z) * 1.570796);
  };
  angle_10 = vec3(tmpvar_20);
  bvec3 tmpvar_23;
  tmpvar_23 = lessThan (vec3(tmpvar_20), vec3(0.0, 0.0, 0.0));
  float tmpvar_24;
  if (tmpvar_23.x) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_23.y) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  float tmpvar_26;
  if (tmpvar_23.z) {
    tmpvar_26 = 6.283185;
  } else {
    tmpvar_26 = 0.0;
  };
  vec3 tmpvar_27;
  tmpvar_27.x = tmpvar_24;
  tmpvar_27.y = tmpvar_25;
  tmpvar_27.z = tmpvar_26;
  angle_10 = (vec3(tmpvar_20) + tmpvar_27);
  highp vec4 tmpvar_28;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_28 = _InstanceData;
  } else {
    tmpvar_28 = tmpvar_1;
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_13.x) * tmpvar_28.x) * tmpvar_18);
  billboardPos_9.xz = tmpvar_29.xz;
  billboardPos_9.y = (tmpvar_29.y + ((
    (_glesMultiTexCoord0.y * tmpvar_13.y)
   + tmpvar_13.z) * tmpvar_28.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_30;
    vPos_30 = billboardPos_9;
    highp float fMoveAmount_31;
    highp float fAdjust_32;
    highp float fLength_33;
    fLength_33 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_34;
    tmpvar_34 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_32 = tmpvar_34;
    if ((tmpvar_34 != 0.0)) {
      fAdjust_32 = pow (tmpvar_34, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_35;
    tmpvar_35.zw = vec2(0.0, 0.0);
    tmpvar_35.x = (tmpvar_15.x + tmpvar_28.w);
    tmpvar_35.y = (tmpvar_15.y + (tmpvar_28.w * 0.8));
    highp vec4 tmpvar_36;
    highp vec4 tmpvar_37;
    tmpvar_37 = abs(((
      fract((tmpvar_35 + 0.5))
     * 2.0) - 1.0));
    tmpvar_36 = (((
      (tmpvar_37 * tmpvar_37)
     * 
      (3.0 - (2.0 * tmpvar_37))
    ) - 0.5) * 2.0);
    fMoveAmount_31 = ((_ST_WindGlobal.y * (tmpvar_36.x + 
      (tmpvar_36.y * tmpvar_36.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_31 = (fMoveAmount_31 * fAdjust_32);
    vPos_30.xz = (tmpvar_29.xz + (_ST_WindVector.xz * fMoveAmount_31));
    vPos_30 = (normalize(vPos_30) * fLength_33);
    billboardPos_9 = vPos_30;
  };
  tmpvar_7.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_7.w = 1.0;
  angle_10 = (angle_10 + tmpvar_28.z);
  highp vec3 tmpvar_38;
  tmpvar_38 = (floor((
    (angle_10 * tmpvar_12.y)
   + 0.5)) / tmpvar_12.xxx);
  highp vec3 tmpvar_39;
  tmpvar_39 = (fract(abs(tmpvar_38)) * tmpvar_12.xxx);
  highp float tmpvar_40;
  if ((tmpvar_38.x >= 0.0)) {
    tmpvar_40 = tmpvar_39.x;
  } else {
    tmpvar_40 = -(tmpvar_39.x);
  };
  highp vec4 tmpvar_41;
  tmpvar_41 = _ImageTexCoords[int((tmpvar_12.z + tmpvar_40))];
  if ((tmpvar_41.w < 0.0)) {
    tmpvar_8.xy = (tmpvar_41.xy - (tmpvar_41.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_8.xy = (tmpvar_41.xy + (tmpvar_41.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_42;
  hPos_42 = (glstate_matrix_mvp * tmpvar_7);
  mediump vec3 screenPos_43;
  highp vec4 o_44;
  highp vec4 tmpvar_45;
  tmpvar_45 = (hPos_42 * 0.5);
  highp vec2 tmpvar_46;
  tmpvar_46.x = tmpvar_45.x;
  tmpvar_46.y = (tmpvar_45.y * _ProjectionParams.x);
  o_44.xy = (tmpvar_46 + tmpvar_45.w);
  o_44.zw = hPos_42.zw;
  highp vec3 tmpvar_47;
  tmpvar_47 = o_44.xyw;
  screenPos_43 = tmpvar_47;
  screenPos_43.xy = (screenPos_43.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = _Color;
  highp vec3 tmpvar_48;
  tmpvar_48 = (_Object2World * tmpvar_7).xyz;
  highp vec4 v_49;
  v_49.x = _World2Object[0].x;
  v_49.y = _World2Object[1].x;
  v_49.z = _World2Object[2].x;
  v_49.w = _World2Object[3].x;
  highp vec4 v_50;
  v_50.x = _World2Object[0].z;
  v_50.y = _World2Object[1].z;
  v_50.z = _World2Object[2].z;
  v_50.w = _World2Object[3].z;
  highp vec3 tmpvar_51;
  tmpvar_51 = normalize(((v_49.xyz * tmpvar_18.z) + (v_50.xyz * tmpvar_19.z)));
  worldNormal_2 = tmpvar_51;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_52;
  tmpvar_52.w = 1.0;
  tmpvar_52.xyz = worldNormal_2;
  mediump vec4 normal_53;
  normal_53 = tmpvar_52;
  mediump vec3 x2_54;
  mediump vec4 tmpvar_55;
  tmpvar_55 = (normal_53.xyzz * normal_53.yzzx);
  x2_54.x = dot (unity_SHBr, tmpvar_55);
  x2_54.y = dot (unity_SHBg, tmpvar_55);
  x2_54.z = dot (unity_SHBb, tmpvar_55);
  highp vec3 lightColor0_56;
  lightColor0_56 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_57;
  lightColor1_57 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_58;
  lightColor2_58 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_59;
  lightColor3_59 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_60;
  lightAttenSq_60 = unity_4LightAtten0;
  highp vec3 normal_61;
  normal_61 = worldNormal_2;
  highp vec3 col_62;
  highp vec4 ndotl_63;
  highp vec4 lengthSq_64;
  highp vec4 tmpvar_65;
  tmpvar_65 = (unity_4LightPosX0 - tmpvar_48.x);
  highp vec4 tmpvar_66;
  tmpvar_66 = (unity_4LightPosY0 - tmpvar_48.y);
  highp vec4 tmpvar_67;
  tmpvar_67 = (unity_4LightPosZ0 - tmpvar_48.z);
  lengthSq_64 = (tmpvar_65 * tmpvar_65);
  lengthSq_64 = (lengthSq_64 + (tmpvar_66 * tmpvar_66));
  lengthSq_64 = (lengthSq_64 + (tmpvar_67 * tmpvar_67));
  ndotl_63 = (tmpvar_65 * normal_61.x);
  ndotl_63 = (ndotl_63 + (tmpvar_66 * normal_61.y));
  ndotl_63 = (ndotl_63 + (tmpvar_67 * normal_61.z));
  highp vec4 tmpvar_68;
  tmpvar_68 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_63 * inversesqrt(lengthSq_64)));
  ndotl_63 = tmpvar_68;
  highp vec4 tmpvar_69;
  tmpvar_69 = (tmpvar_68 * (1.0/((1.0 + 
    (lengthSq_64 * lightAttenSq_60)
  ))));
  col_62 = (lightColor0_56 * tmpvar_69.x);
  col_62 = (col_62 + (lightColor1_57 * tmpvar_69.y));
  col_62 = (col_62 + (lightColor2_58 * tmpvar_69.z));
  col_62 = (col_62 + (lightColor3_59 * tmpvar_69.w));
  tmpvar_5 = ((x2_54 + (unity_SHC.xyz * 
    ((normal_53.x * normal_53.x) - (normal_53.y * normal_53.y))
  )) + col_62);
  tmpvar_6 = (unity_World2Shadow[0] * (_Object2World * tmpvar_7));
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_48;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = screenPos_43;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_TEXCOORD6 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_16;
  x_16 = (tmpvar_10 - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp float shadow_17;
  shadow_17 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_17;
  mediump vec3 normalWorld_18;
  normalWorld_18 = tmpvar_5;
  mediump vec3 tmpvar_19;
  mediump vec3 tmpvar_20;
  mediump vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = normalWorld_18;
  mediump vec3 x1_22;
  x1_22.x = dot (unity_SHAr, tmpvar_21);
  x1_22.y = dot (unity_SHAg, tmpvar_21);
  x1_22.z = dot (unity_SHAb, tmpvar_21);
  tmpvar_20 = (xlv_TEXCOORD5 + x1_22);
  tmpvar_19 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_19;
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_9 * tmpvar_19) * diff_25);
  c_24.w = tmpvar_10;
  c_23.w = c_24.w;
  c_23.xyz = (c_24.xyz + (tmpvar_9 * tmpvar_20));
  c_4.xyz = c_23.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
bool tb2;
highp vec4 t3;
highp vec4 t4;
highp vec4 t5;
mediump vec3 t16_6;
mediump vec3 t16_7;
highp vec3 t9;
highp int ti9;
bool tb9;
highp float t10;
highp vec2 t17;
bool tb17;
highp vec2 t18;
highp uint tu18;
highp float t25;
bool tb25;
highp float t26;
highp float t27;
bool tb27;
bool tb28;
void main()
{
    //Instruction 62077
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 62078
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 62079
    //ADD
    t9.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 62080
    //LT
    tb2 = 0.0<_InstanceData.x;
    //Instruction 62081
    //MOVC
    t0 = (bool(tb2)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 62082
    //ADD
    t2.x = t0.w + t9.x;
    //Instruction 62083
    //MAD
    t2.y = t0.w * 0.800000 + t9.y;
    //Instruction 62084
    //ADD
    t9.xyz = (-t9.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 62085
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 62086
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 62087
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 62088
    //MUL
    t18.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 62089
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 62090
    //MAD
    t2.xy = t18.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 62091
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 62092
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 62093
    //DIV
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 62094
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t10;
    //Instruction 62095
    //DIV
    t10 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 62096
    //MUL
    t18.x = in_COLOR0.w * 255.000000;
    //Instruction 62097
    //FTOU
    tu18 = uint(t18.x);
    //Instruction 62098
    //MAD
    t26 = in_TEXCOORD0.y * _TreeSize[int(tu18) + 0].y + _TreeSize[int(tu18) + 0].z;
    //Instruction 62099
    //MUL
    t3.y = t0.y * t26;
    //Instruction 62100
    //MAD
    t10 = (-t10) * 0.250000 + t3.y;
    //Instruction 62101
    //MAX
    t10 = max(t10, 0.0);
    //Instruction 62102
    //MUL
    t10 = t10 * _ST_WindGlobal.z;
    //Instruction 62103
    //LOG
    t26 = log2(t10);
    //Instruction 62104
    //MUL
    t26 = t26 * _ST_WindGlobal.w;
    //Instruction 62105
    //EXP
    t26 = exp2(t26);
    //Instruction 62106
    //NE
    tb27 = t10!=0.0;
    //Instruction 62107
    //MOVC
    t10 = (tb27) ? t26 : t10;
    //Instruction 62108
    //MUL
    t2.x = t10 * t2.x;
    //Instruction 62109
    //ADD
    t10 = in_TEXCOORD0.x + -0.500000;
    //Instruction 62110
    //MUL
    t10 = t10 * _TreeSize[int(tu18) + 0].x;
    //Instruction 62111
    //MUL
    t10 = t0.x * t10;
    //Instruction 62112
    //DP3
    t17.x = dot(t9.xyz, t9.xyz);
    //Instruction 62113
    //RSQ
    t17.x = inversesqrt(t17.x);
    //Instruction 62114
    //MUL
    t4.xy = t17.xx * t9.xz;
    //Instruction 62115
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 62116
    //DP2
    t9.x = dot(t4.xz, t4.xw);
    //Instruction 62117
    //MUL
    t17.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 62118
    //RSQ
    t9.x = inversesqrt(t9.x);
    //Instruction 62119
    //MUL
    t9.xy = t9.xx * t17.xy;
    //Instruction 62120
    //MUL
    t3.xz = t9.xy * vec2(t10);
    //Instruction 62121
    //MAD
    t4.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 62122
    //MOV
    t4.y = t3.y;
    //Instruction 62123
    //DP3
    t25 = dot(t4.xyz, t4.xyz);
    //Instruction 62124
    //RSQ
    t25 = inversesqrt(t25);
    //Instruction 62125
    //MUL
    t2.xyw = vec3(t25) * t4.xyz;
    //Instruction 62126
    //DP3
    t25 = dot(t3.xyz, t3.xyz);
    //Instruction 62127
    //SQRT
    t25 = sqrt(t25);
    //Instruction 62128
    //MUL
    t2.xyw = vec3(t25) * t2.xyw;
    //Instruction 62129
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 62130
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 62131
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 62132
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 62133
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 62134
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 62135
    //MUL
    t3.x = t9.y * _World2Object[0].x;
    //Instruction 62136
    //MUL
    t3.y = t9.y * _World2Object[1].x;
    //Instruction 62137
    //MUL
    t3.z = t9.y * _World2Object[2].x;
    //Instruction 62138
    //MUL
    t4.x = (-t9.x) * _World2Object[0].z;
    //Instruction 62139
    //MUL
    t4.y = (-t9.x) * _World2Object[1].z;
    //Instruction 62140
    //MUL
    t4.z = (-t9.x) * _World2Object[2].z;
    //Instruction 62141
    //ADD
    t3.xyz = t3.xyz + t4.xyz;
    //Instruction 62142
    //DP3
    t1.x = dot(t3.xyz, t3.xyz);
    //Instruction 62143
    //RSQ
    t1.x = inversesqrt(t1.x);
    //Instruction 62144
    //MUL
    t3.xyz = t1.xxx * t3.xyz;
    //Instruction 62145
    //MOV
    vs_TEXCOORD0.xyz = t3.xyz;
    //Instruction 62146
    //MUL
    t4.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 62147
    //MAD
    t4.xyz = _Object2World[0].xyz * t2.xxx + t4.xyz;
    //Instruction 62148
    //MAD
    t4.xyz = _Object2World[2].xyz * t2.www + t4.xyz;
    //Instruction 62149
    //ADD
    t4.xyz = t4.xyz + _Object2World[3].xyz;
    //Instruction 62150
    //MOV
    vs_TEXCOORD1.xyz = t4.xyz;
    //Instruction 62151
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 62152
    //MAX
    t1.x = max(abs(t9.y), abs(t9.x));
    //Instruction 62153
    //DIV
    t1.x = float(1.0) / t1.x;
    //Instruction 62154
    //MIN
    t25 = min(abs(t9.y), abs(t9.x));
    //Instruction 62155
    //MUL
    t1.x = t1.x * t25;
    //Instruction 62156
    //MUL
    t25 = t1.x * t1.x;
    //Instruction 62157
    //MAD
    t27 = t25 * 0.020835 + -0.085133;
    //Instruction 62158
    //MAD
    t27 = t25 * t27 + 0.180141;
    //Instruction 62159
    //MAD
    t27 = t25 * t27 + -0.330299;
    //Instruction 62160
    //MAD
    t25 = t25 * t27 + 0.999866;
    //Instruction 62161
    //MUL
    t27 = t25 * t1.x;
    //Instruction 62162
    //MAD
    t27 = t27 * -2.000000 + 1.570796;
    //Instruction 62163
    //LT
    tb28 = abs(t9.y)<abs(t9.x);
    //Instruction 62164
    //AND
    t27 = tb28 ? t27 : float(0.0);
    //Instruction 62165
    //MAD
    t1.x = t1.x * t25 + t27;
    //Instruction 62166
    //LT
    tb25 = t9.y<(-t9.y);
    //Instruction 62167
    //AND
    t25 = tb25 ? -3.141593 : float(0.0);
    //Instruction 62168
    //ADD
    t1.x = t25 + t1.x;
    //Instruction 62169
    //MIN
    t25 = min(t9.y, (-t9.x));
    //Instruction 62170
    //MAX
    t9.x = max(t9.y, (-t9.x));
    //Instruction 62171
    //GE
    tb9 = t9.x>=(-t9.x);
    //Instruction 62172
    //LT
    tb17 = t25<(-t25);
    //Instruction 62173
    //AND
    ti9 = int(uint(tb9) & uint(tb17));
    //Instruction 62174
    //MOVC
    t1.x = (ti9 != 0) ? (-t1.x) : t1.x;
    //Instruction 62175
    //LT
    tb9 = t1.x<0.0;
    //Instruction 62176
    //AND
    t9.x = tb9 ? 6.283185 : float(0.0);
    //Instruction 62177
    //ADD
    t1.x = t9.x + t1.x;
    //Instruction 62178
    //ADD
    t1.x = t0.z + t1.x;
    //Instruction 62179
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu18) + 0].y + 0.500000;
    //Instruction 62180
    //ROUND_NI
    t1.x = floor(t1.x);
    //Instruction 62181
    //DIV
    t1.x = t1.x / _TreeInfo[int(tu18) + 0].x;
    //Instruction 62182
    //GE
    tb9 = t1.x>=(-t1.x);
    //Instruction 62183
    //FRC
    t1.x = fract(abs(t1.x));
    //Instruction 62184
    //MOVC
    t1.x = (tb9) ? t1.x : (-t1.x);
    //Instruction 62185
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu18) + 0].x + _TreeInfo[int(tu18) + 0].z;
    //Instruction 62186
    //FTOU
    tu1 = uint(t1.x);
    //Instruction 62187
    //LT
    tb9 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 62188
    //MAD
    t17.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 62189
    //MAD
    t5.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 62190
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb9)) ? t17.xy : t5.xy;
    //Instruction 62191
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 62192
    //MUL
    t1.xyz = t2.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 62193
    //MAD
    t1.xyz = glstate_matrix_mvp[0].xyw * t2.xxx + t1.xyz;
    //Instruction 62194
    //MAD
    t1.xyz = glstate_matrix_mvp[2].xyw * t2.www + t1.xyz;
    //Instruction 62195
    //ADD
    t1.xyz = t1.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 62196
    //MUL
    t1.w = t1.y * _ProjectionParams.x;
    //Instruction 62197
    //MUL
    t5.xzw = t1.xzw * vec3(0.500000, 0.500000, 0.500000);
    //Instruction 62198
    //ADD
    t5.xy = t5.zz + t5.xw;
    //Instruction 62199
    //MUL
    t5.xy = t5.xy * _ScreenParams.xy;
    //Instruction 62200
    //MUL
    t1.xy = t5.xy * vec2(0.250000, 0.250000);
    //Instruction 62201
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 62202
    //ADD
    t0 = (-t4.xxxx) + unity_4LightPosX0;
    //Instruction 62203
    //ADD
    t1 = (-t4.yyyy) + unity_4LightPosY0;
    //Instruction 62204
    //ADD
    t4 = (-t4.zzzz) + unity_4LightPosZ0;
    //Instruction 62205
    //MUL
    t5 = t3.yyyy * t1;
    //Instruction 62206
    //MUL
    t1 = t1 * t1;
    //Instruction 62207
    //MAD
    t1 = t0 * t0 + t1;
    //Instruction 62208
    //MAD
    t0 = t0 * t3.xxxx + t5;
    //Instruction 62209
    //MAD
    t0 = t4 * t3.zzzz + t0;
    //Instruction 62210
    //MAD
    t1 = t4 * t4 + t1;
    //Instruction 62211
    //RSQ
    t4 = inversesqrt(t1);
    //Instruction 62212
    //MAD
    t1 = t1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 62213
    //DIV
    t1 = vec4(1.0, 1.0, 1.0, 1.0) / t1;
    //Instruction 62214
    //MUL
    t0 = t0 * t4;
    //Instruction 62215
    //MAX
    t0 = max(t0, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 62216
    //MUL
    t0 = t1 * t0;
    //Instruction 62217
    //MUL
    t1.xyz = t0.yyy * unity_LightColor[1].xyz;
    //Instruction 62218
    //MAD
    t1.xyz = unity_LightColor[0].xyz * t0.xxx + t1.xyz;
    //Instruction 62219
    //MAD
    t1.xyz = unity_LightColor[2].xyz * t0.zzz + t1.xyz;
    //Instruction 62220
    //MAD
    t1.xyz = unity_LightColor[3].xyz * t0.www + t1.xyz;
    //Instruction 62221
    //MUL
    t16_6.x = t3.y * t3.y;
    //Instruction 62222
    //MAD
    t16_6.x = t3.x * t3.x + (-t16_6.x);
    //Instruction 62223
    //MUL
    t16_0 = t3.yzzx * t3.xyzz;
    //Instruction 62224
    //DP4
    t16_7.x = dot(unity_SHBr, t16_0);
    //Instruction 62225
    //DP4
    t16_7.y = dot(unity_SHBg, t16_0);
    //Instruction 62226
    //DP4
    t16_7.z = dot(unity_SHBb, t16_0);
    //Instruction 62227
    //MAD
    t16_6.xyz = unity_SHC.xyz * t16_6.xxx + t16_7.xyz;
    //Instruction 62228
    //ADD
    t1.xyz = t1.xyz + t16_6.xyz;
    //Instruction 62229
    //MOV
    vs_TEXCOORD5.xyz = t1.xyz;
    //Instruction 62230
    //MUL
    t0 = t2.yyyy * _Object2World[1];
    //Instruction 62231
    //MAD
    t0 = _Object2World[0] * t2.xxxx + t0;
    //Instruction 62232
    //MAD
    t0 = _Object2World[2] * t2.wwww + t0;
    //Instruction 62233
    //ADD
    t0 = t0 + _Object2World[3];
    //Instruction 62234
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 62235
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 62236
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 62237
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 62238
    //MOV
    vs_TEXCOORD6 = t0;
    //Instruction 62239
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump float t16_6;
mediump float t16_21;
mediump float t16_22;
void main()
{
    //Instruction 62046
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 62047
    //FRC
    t16_6 = fract(t16_0.y);
    //Instruction 62048
    //MOV
    t1.x = t16_0.x;
    //Instruction 62049
    //MAD
    t1.y = t16_6 * 0.062500 + unity_LODFade.y;
    //Instruction 62050
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 62051
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 62052
    //LT
    tb1 = t16_1<0.0;
    //Instruction 62053
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 62054
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 62055
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 62056
    //MUL
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 62057
    //LT
    tb1 = t10_2<0.0;
    //Instruction 62058
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 62059
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 62060
    //MOV
    t16_0.w = 1.0;
    //Instruction 62061
    //DP4
    t16_4.x = dot(unity_SHAr, t16_0);
    //Instruction 62062
    //DP4
    t16_4.y = dot(unity_SHAg, t16_0);
    //Instruction 62063
    //DP4
    t16_4.z = dot(unity_SHAb, t16_0);
    //Instruction 62064
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD5.xyz;
    //Instruction 62065
    //MUL
    t16_4.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 62066
    //SAMPLE_C_LZ
    vec3 txVec58 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_21 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec58, 0.0);
    //Instruction 62067
    //ADD
    t16_22 = (-_LightShadowData.x) + 1.0;
    //Instruction 62068
    //MAD
    t16_21 = t16_21 * t16_22 + _LightShadowData.x;
    //Instruction 62069
    //MUL
    t16_5.xyz = vec3(t16_21) * _LightColor0.xyz;
    //Instruction 62070
    //MUL
    t16_3.xyz = t16_3.xyz * t16_5.xyz;
    //Instruction 62071
    //DP3
    t16_21 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 62072
    //MAX
    t16_21 = max(t16_21, 0.0);
    //Instruction 62073
    //MAD
    t16_3.xyz = t16_3.xyz * vec3(t16_21) + t16_4.xyz;
    //Instruction 62074
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 62075
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 62076
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp vec3 angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = (min (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0) / max (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0));
  highp float tmpvar_20;
  tmpvar_20 = (tmpvar_19 * tmpvar_19);
  tmpvar_20 = (((
    ((((
      ((((-0.01213232 * tmpvar_20) + 0.05368138) * tmpvar_20) - 0.1173503)
     * tmpvar_20) + 0.1938925) * tmpvar_20) - 0.3326756)
   * tmpvar_20) + 0.9999793) * tmpvar_19);
  tmpvar_20 = (tmpvar_20 + (float(
    (abs((tmpvar_17.z / tmpvar_16.z)) > 1.0)
  ) * (
    (tmpvar_20 * -2.0)
   + 1.570796)));
  tmpvar_18 = (tmpvar_20 * sign((tmpvar_17.z / tmpvar_16.z)));
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  angle_8 = vec3(tmpvar_18);
  bvec3 tmpvar_21;
  tmpvar_21 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_22;
  if (tmpvar_21.x) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_21.y) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_21.z) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  vec3 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = tmpvar_23;
  tmpvar_25.z = tmpvar_24;
  angle_8 = (vec3(tmpvar_18) + tmpvar_25);
  highp vec4 tmpvar_26;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_26 = _InstanceData;
  } else {
    tmpvar_26 = tmpvar_1;
  };
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_26.x) * tmpvar_16);
  billboardPos_7.xz = tmpvar_27.xz;
  billboardPos_7.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_26.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_7;
    highp float fMoveAmount_29;
    highp float fAdjust_30;
    highp float fLength_31;
    fLength_31 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_32;
    tmpvar_32 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_30 = tmpvar_32;
    if ((tmpvar_32 != 0.0)) {
      fAdjust_30 = pow (tmpvar_32, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_33;
    tmpvar_33.zw = vec2(0.0, 0.0);
    tmpvar_33.x = (tmpvar_13.x + tmpvar_26.w);
    tmpvar_33.y = (tmpvar_13.y + (tmpvar_26.w * 0.8));
    highp vec4 tmpvar_34;
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    tmpvar_34 = (((
      (tmpvar_35 * tmpvar_35)
     * 
      (3.0 - (2.0 * tmpvar_35))
    ) - 0.5) * 2.0);
    fMoveAmount_29 = ((_ST_WindGlobal.y * (tmpvar_34.x + 
      (tmpvar_34.y * tmpvar_34.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_29 = (fMoveAmount_29 * fAdjust_30);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * fMoveAmount_29));
    vPos_28 = (normalize(vPos_28) * fLength_31);
    billboardPos_7 = vPos_28;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (angle_8 + tmpvar_26.z);
  highp vec3 tmpvar_36;
  tmpvar_36 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_37;
  tmpvar_37 = (fract(abs(tmpvar_36)) * tmpvar_10.xxx);
  highp float tmpvar_38;
  if ((tmpvar_36.x >= 0.0)) {
    tmpvar_38 = tmpvar_37.x;
  } else {
    tmpvar_38 = -(tmpvar_37.x);
  };
  highp vec4 tmpvar_39;
  tmpvar_39 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_38))];
  if ((tmpvar_39.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_39.xy - (tmpvar_39.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_39.xy + (tmpvar_39.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_40;
  tmpvar_40 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_40;
  highp vec4 hPos_41;
  hPos_41 = (glstate_matrix_mvp * tmpvar_5);
  mediump vec3 screenPos_42;
  highp vec4 o_43;
  highp vec4 tmpvar_44;
  tmpvar_44 = (hPos_41 * 0.5);
  highp vec2 tmpvar_45;
  tmpvar_45.x = tmpvar_44.x;
  tmpvar_45.y = (tmpvar_44.y * _ProjectionParams.x);
  o_43.xy = (tmpvar_45 + tmpvar_44.w);
  o_43.zw = hPos_41.zw;
  highp vec3 tmpvar_46;
  tmpvar_46 = o_43.xyw;
  screenPos_42 = tmpvar_46;
  screenPos_42.xy = (screenPos_42.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = _Color;
  highp vec4 v_47;
  v_47.x = _World2Object[0].x;
  v_47.y = _World2Object[1].x;
  v_47.z = _World2Object[2].x;
  v_47.w = _World2Object[3].x;
  highp vec4 v_48;
  v_48.x = _World2Object[0].z;
  v_48.y = _World2Object[1].z;
  v_48.z = _World2Object[2].z;
  v_48.w = _World2Object[3].z;
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize(((v_47.xyz * tmpvar_16.z) + (v_48.xyz * tmpvar_17.z)));
  worldNormal_2 = tmpvar_49;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_50;
  tmpvar_50.w = 1.0;
  tmpvar_50.xyz = worldNormal_2;
  mediump vec4 normal_51;
  normal_51 = tmpvar_50;
  mediump vec3 x2_52;
  mediump vec4 tmpvar_53;
  tmpvar_53 = (normal_51.xyzz * normal_51.yzzx);
  x2_52.x = dot (unity_SHBr, tmpvar_53);
  x2_52.y = dot (unity_SHBg, tmpvar_53);
  x2_52.z = dot (unity_SHBb, tmpvar_53);
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = screenPos_42;
  xlv_TEXCOORD5 = (x2_52 + (unity_SHC.xyz * (
    (normal_51.x * normal_51.x)
   - 
    (normal_51.y * normal_51.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_16;
  x_16 = (tmpvar_9 - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_17.x, max (tmpvar_17.y, tmpvar_17.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_17 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_18;
  normalWorld_18 = tmpvar_4;
  mediump vec3 tmpvar_19;
  mediump vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = normalWorld_18;
  mediump vec3 x1_21;
  x1_21.x = dot (unity_SHAr, tmpvar_20);
  x1_21.y = dot (unity_SHAg, tmpvar_20);
  x1_21.z = dot (unity_SHAb, tmpvar_20);
  tmpvar_19 = (xlv_TEXCOORD5 + x1_21);
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_24 = tmpvar_25;
  c_23.xyz = ((tmpvar_8 * tmpvar_1) * diff_24);
  c_23.w = tmpvar_9;
  c_22.w = c_23.w;
  c_22.xyz = (c_23.xyz + (tmpvar_8 * tmpvar_19));
  c_3.xyz = c_22.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
highp vec3 t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
highp vec3 t5;
mediump float t16_6;
mediump vec3 t16_7;
highp vec3 t9;
highp int ti9;
bool tb9;
highp float t10;
highp vec2 t17;
bool tb17;
highp vec2 t18;
highp uint tu18;
highp float t25;
bool tb25;
highp float t26;
highp float t27;
bool tb27;
void main()
{
    //Instruction 62276
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 62277
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 62278
    //LT
    tb9 = 0.0<_InstanceData.x;
    //Instruction 62279
    //MOVC
    t0 = (bool(tb9)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 62280
    //ADD
    t9.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 62281
    //ADD
    t2.x = t0.w + t9.x;
    //Instruction 62282
    //MAD
    t2.y = t0.w * 0.800000 + t9.y;
    //Instruction 62283
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 62284
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 62285
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 62286
    //MUL
    t18.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 62287
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 62288
    //MAD
    t2.xy = t18.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 62289
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 62290
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 62291
    //DIV
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 62292
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t10;
    //Instruction 62293
    //DIV
    t10 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 62294
    //MUL
    t18.x = in_COLOR0.w * 255.000000;
    //Instruction 62295
    //FTOU
    tu18 = uint(t18.x);
    //Instruction 62296
    //MAD
    t26 = in_TEXCOORD0.y * _TreeSize[int(tu18) + 0].y + _TreeSize[int(tu18) + 0].z;
    //Instruction 62297
    //MUL
    t3.y = t0.y * t26;
    //Instruction 62298
    //MAD
    t10 = (-t10) * 0.250000 + t3.y;
    //Instruction 62299
    //MAX
    t10 = max(t10, 0.0);
    //Instruction 62300
    //MUL
    t10 = t10 * _ST_WindGlobal.z;
    //Instruction 62301
    //LOG
    t26 = log2(t10);
    //Instruction 62302
    //MUL
    t26 = t26 * _ST_WindGlobal.w;
    //Instruction 62303
    //EXP
    t26 = exp2(t26);
    //Instruction 62304
    //NE
    tb27 = t10!=0.0;
    //Instruction 62305
    //MOVC
    t10 = (tb27) ? t26 : t10;
    //Instruction 62306
    //MUL
    t2.x = t10 * t2.x;
    //Instruction 62307
    //ADD
    t10 = in_TEXCOORD0.x + -0.500000;
    //Instruction 62308
    //MUL
    t10 = t10 * _TreeSize[int(tu18) + 0].x;
    //Instruction 62309
    //MUL
    t10 = t0.x * t10;
    //Instruction 62310
    //ADD
    t4.xyz = (-t9.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 62311
    //DP3
    t26 = dot(t4.xyz, t4.xyz);
    //Instruction 62312
    //RSQ
    t26 = inversesqrt(t26);
    //Instruction 62313
    //MUL
    t4.xy = vec2(t26) * t4.xz;
    //Instruction 62314
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 62315
    //DP2
    t26 = dot(t4.xz, t4.xw);
    //Instruction 62316
    //MUL
    t4.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 62317
    //RSQ
    t26 = inversesqrt(t26);
    //Instruction 62318
    //MUL
    t4.xy = vec2(t26) * t4.xy;
    //Instruction 62319
    //MUL
    t3.xz = vec2(t10) * t4.xy;
    //Instruction 62320
    //MAD
    t5.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 62321
    //MOV
    t5.y = t3.y;
    //Instruction 62322
    //DP3
    t2.x = dot(t5.xyz, t5.xyz);
    //Instruction 62323
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 62324
    //MUL
    t2.xyw = t2.xxx * t5.xyz;
    //Instruction 62325
    //DP3
    t27 = dot(t3.xyz, t3.xyz);
    //Instruction 62326
    //SQRT
    t27 = sqrt(t27);
    //Instruction 62327
    //MUL
    t2.xyw = t2.xyw * vec3(t27);
    //Instruction 62328
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 62329
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 62330
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 62331
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 62332
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 62333
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 62334
    //MUL
    t3.x = t4.y * _World2Object[0].x;
    //Instruction 62335
    //MUL
    t3.y = t4.y * _World2Object[1].x;
    //Instruction 62336
    //MUL
    t3.z = t4.y * _World2Object[2].x;
    //Instruction 62337
    //MUL
    t5.x = (-t4.x) * _World2Object[0].z;
    //Instruction 62338
    //MUL
    t5.y = (-t4.x) * _World2Object[1].z;
    //Instruction 62339
    //MUL
    t5.z = (-t4.x) * _World2Object[2].z;
    //Instruction 62340
    //ADD
    t3.xyz = t3.xyz + t5.xyz;
    //Instruction 62341
    //DP3
    t1.x = dot(t3.xyz, t3.xyz);
    //Instruction 62342
    //RSQ
    t1.x = inversesqrt(t1.x);
    //Instruction 62343
    //MUL
    t3.xyz = t1.xxx * t3.xyz;
    //Instruction 62344
    //MOV
    vs_TEXCOORD0.xyz = t3.xyz;
    //Instruction 62345
    //MUL
    t5.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 62346
    //MAD
    t5.xyz = _Object2World[0].xyz * t2.xxx + t5.xyz;
    //Instruction 62347
    //MAD
    t5.xyz = _Object2World[2].xyz * t2.www + t5.xyz;
    //Instruction 62348
    //ADD
    vs_TEXCOORD1.xyz = t5.xyz + _Object2World[3].xyz;
    //Instruction 62349
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 62350
    //ADD
    t1.x = t9.y + t9.x;
    //Instruction 62351
    //ADD
    t1.x = t9.z + t1.x;
    //Instruction 62352
    //FRC
    t1.x = fract(t1.x);
    //Instruction 62353
    //MUL
    t1.x = t1.x * _HueVariation.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 62354
    //MOV
    vs_TEXCOORD3.z = t1.x;
    //Instruction 62355
    //MAX
    t1.x = max(abs(t4.y), abs(t4.x));
    //Instruction 62356
    //DIV
    t1.x = float(1.0) / t1.x;
    //Instruction 62357
    //MIN
    t9.x = min(abs(t4.y), abs(t4.x));
    //Instruction 62358
    //MUL
    t1.x = t1.x * t9.x;
    //Instruction 62359
    //MUL
    t9.x = t1.x * t1.x;
    //Instruction 62360
    //MAD
    t17.x = t9.x * 0.020835 + -0.085133;
    //Instruction 62361
    //MAD
    t17.x = t9.x * t17.x + 0.180141;
    //Instruction 62362
    //MAD
    t17.x = t9.x * t17.x + -0.330299;
    //Instruction 62363
    //MAD
    t9.x = t9.x * t17.x + 0.999866;
    //Instruction 62364
    //MUL
    t17.x = t9.x * t1.x;
    //Instruction 62365
    //MAD
    t17.x = t17.x * -2.000000 + 1.570796;
    //Instruction 62366
    //LT
    tb25 = abs(t4.y)<abs(t4.x);
    //Instruction 62367
    //AND
    t17.x = tb25 ? t17.x : float(0.0);
    //Instruction 62368
    //MAD
    t1.x = t1.x * t9.x + t17.x;
    //Instruction 62369
    //LT
    tb9 = t4.y<(-t4.y);
    //Instruction 62370
    //AND
    t9.x = tb9 ? -3.141593 : float(0.0);
    //Instruction 62371
    //ADD
    t1.x = t9.x + t1.x;
    //Instruction 62372
    //MIN
    t9.x = min(t4.y, (-t4.x));
    //Instruction 62373
    //MAX
    t17.x = max(t4.y, (-t4.x));
    //Instruction 62374
    //GE
    tb17 = t17.x>=(-t17.x);
    //Instruction 62375
    //LT
    tb9 = t9.x<(-t9.x);
    //Instruction 62376
    //AND
    ti9 = int(uint(tb17) & uint(tb9));
    //Instruction 62377
    //MOVC
    t1.x = (ti9 != 0) ? (-t1.x) : t1.x;
    //Instruction 62378
    //LT
    tb9 = t1.x<0.0;
    //Instruction 62379
    //AND
    t9.x = tb9 ? 6.283185 : float(0.0);
    //Instruction 62380
    //ADD
    t1.x = t9.x + t1.x;
    //Instruction 62381
    //ADD
    t1.x = t0.z + t1.x;
    //Instruction 62382
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu18) + 0].y + 0.500000;
    //Instruction 62383
    //ROUND_NI
    t1.x = floor(t1.x);
    //Instruction 62384
    //DIV
    t1.x = t1.x / _TreeInfo[int(tu18) + 0].x;
    //Instruction 62385
    //GE
    tb9 = t1.x>=(-t1.x);
    //Instruction 62386
    //FRC
    t1.x = fract(abs(t1.x));
    //Instruction 62387
    //MOVC
    t1.x = (tb9) ? t1.x : (-t1.x);
    //Instruction 62388
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu18) + 0].x + _TreeInfo[int(tu18) + 0].z;
    //Instruction 62389
    //FTOU
    tu1 = uint(t1.x);
    //Instruction 62390
    //LT
    tb9 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 62391
    //MAD
    t17.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 62392
    //MAD
    t4.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 62393
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb9)) ? t17.xy : t4.xy;
    //Instruction 62394
    //MUL
    t1.xyz = t2.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 62395
    //MAD
    t1.xyz = glstate_matrix_mvp[0].xyw * t2.xxx + t1.xyz;
    //Instruction 62396
    //MAD
    t1.xyz = glstate_matrix_mvp[2].xyw * t2.www + t1.xyz;
    //Instruction 62397
    //ADD
    t1.xyz = t1.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 62398
    //MUL
    t2.xz = t1.xz * vec2(0.500000, 0.500000);
    //Instruction 62399
    //MUL
    t25 = t1.y * _ProjectionParams.x;
    //Instruction 62400
    //MUL
    t2.w = t25 * 0.500000;
    //Instruction 62401
    //ADD
    t2.xy = t2.zz + t2.xw;
    //Instruction 62402
    //MUL
    t2.xy = t2.xy * _ScreenParams.xy;
    //Instruction 62403
    //MUL
    t1.xy = t2.xy * vec2(0.250000, 0.250000);
    //Instruction 62404
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 62405
    //MUL
    t16_6 = t3.y * t3.y;
    //Instruction 62406
    //MAD
    t16_6 = t3.x * t3.x + (-t16_6);
    //Instruction 62407
    //MUL
    t16_0 = t3.yzzx * t3.xyzz;
    //Instruction 62408
    //DP4
    t16_7.x = dot(unity_SHBr, t16_0);
    //Instruction 62409
    //DP4
    t16_7.y = dot(unity_SHBg, t16_0);
    //Instruction 62410
    //DP4
    t16_7.z = dot(unity_SHBb, t16_0);
    //Instruction 62411
    //MAD
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(t16_6) + t16_7.xyz;
    //Instruction 62412
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump float t16_6;
mediump vec3 t16_9;
mediump float t16_21;
void main()
{
    //Instruction 62240
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 62241
    //FRC
    t16_6 = fract(t16_0.y);
    //Instruction 62242
    //MOV
    t1.x = t16_0.x;
    //Instruction 62243
    //MAD
    t1.y = t16_6 * 0.062500 + unity_LODFade.y;
    //Instruction 62244
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 62245
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 62246
    //LT
    tb1 = t16_1<0.0;
    //Instruction 62247
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 62248
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 62249
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 62250
    //LT
    tb1 = t10_2<0.0;
    //Instruction 62251
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 62252
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 62253
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 62254
    //ADD
    t16_9.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 62255
    //MAD
    t16_9.xyz = vs_TEXCOORD3.zzz * t16_9.xyz + t10_0.xyz;
    //Instruction 62256
    //MAX
    t16_4.x = max(t16_9.z, t16_9.y);
    //Instruction 62257
    //MAX
    t16_4.x = max(t16_9.x, t16_4.x);
    //Instruction 62258
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 62259
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 62260
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_9.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 62261
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD2.xyz;
    //Instruction 62262
    //MUL
    t16_4.xyz = t16_3.xyz * _LightColor0.xyz;
    //Instruction 62263
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 62264
    //MOV
    t16_0.w = 1.0;
    //Instruction 62265
    //DP4
    t16_5.x = dot(unity_SHAr, t16_0);
    //Instruction 62266
    //DP4
    t16_5.y = dot(unity_SHAg, t16_0);
    //Instruction 62267
    //DP4
    t16_5.z = dot(unity_SHAb, t16_0);
    //Instruction 62268
    //ADD
    t16_5.xyz = t16_5.xyz + vs_TEXCOORD5.xyz;
    //Instruction 62269
    //MUL
    t16_3.xyz = t16_3.xyz * t16_5.xyz;
    //Instruction 62270
    //DP3
    t16_21 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 62271
    //MAX
    t16_21 = max(t16_21, 0.0);
    //Instruction 62272
    //MAD
    t16_3.xyz = t16_4.xyz * vec3(t16_21) + t16_3.xyz;
    //Instruction 62273
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 62274
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 62275
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp vec3 angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_18.z / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_18.z / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  angle_9 = vec3(tmpvar_19);
  bvec3 tmpvar_22;
  tmpvar_22 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_23;
  if (tmpvar_22.x) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_22.y) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_22.z) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  vec3 tmpvar_26;
  tmpvar_26.x = tmpvar_23;
  tmpvar_26.y = tmpvar_24;
  tmpvar_26.z = tmpvar_25;
  angle_9 = (vec3(tmpvar_19) + tmpvar_26);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_8.xz = tmpvar_28.xz;
  billboardPos_8.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_8;
    highp float fMoveAmount_30;
    highp float fAdjust_31;
    highp float fLength_32;
    fLength_32 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_33;
    tmpvar_33 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_31 = tmpvar_33;
    if ((tmpvar_33 != 0.0)) {
      fAdjust_31 = pow (tmpvar_33, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_34;
    tmpvar_34.zw = vec2(0.0, 0.0);
    tmpvar_34.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_34.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_35;
    highp vec4 tmpvar_36;
    tmpvar_36 = abs(((
      fract((tmpvar_34 + 0.5))
     * 2.0) - 1.0));
    tmpvar_35 = (((
      (tmpvar_36 * tmpvar_36)
     * 
      (3.0 - (2.0 * tmpvar_36))
    ) - 0.5) * 2.0);
    fMoveAmount_30 = ((_ST_WindGlobal.y * (tmpvar_35.x + 
      (tmpvar_35.y * tmpvar_35.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_30 = (fMoveAmount_30 * fAdjust_31);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * fMoveAmount_30));
    vPos_29 = (normalize(vPos_29) * fLength_32);
    billboardPos_8 = vPos_29;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (angle_9 + tmpvar_27.z);
  highp vec3 tmpvar_37;
  tmpvar_37 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_38;
  tmpvar_38 = (fract(abs(tmpvar_37)) * tmpvar_11.xxx);
  highp float tmpvar_39;
  if ((tmpvar_37.x >= 0.0)) {
    tmpvar_39 = tmpvar_38.x;
  } else {
    tmpvar_39 = -(tmpvar_38.x);
  };
  highp vec4 tmpvar_40;
  tmpvar_40 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_39))];
  if ((tmpvar_40.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_40.xy - (tmpvar_40.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_40.xy + (tmpvar_40.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_41;
  tmpvar_41 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_41;
  highp vec4 hPos_42;
  hPos_42 = (glstate_matrix_mvp * tmpvar_6);
  mediump vec3 screenPos_43;
  highp vec4 o_44;
  highp vec4 tmpvar_45;
  tmpvar_45 = (hPos_42 * 0.5);
  highp vec2 tmpvar_46;
  tmpvar_46.x = tmpvar_45.x;
  tmpvar_46.y = (tmpvar_45.y * _ProjectionParams.x);
  o_44.xy = (tmpvar_46 + tmpvar_45.w);
  o_44.zw = hPos_42.zw;
  highp vec3 tmpvar_47;
  tmpvar_47 = o_44.xyw;
  screenPos_43 = tmpvar_47;
  screenPos_43.xy = (screenPos_43.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = _Color;
  highp vec4 v_48;
  v_48.x = _World2Object[0].x;
  v_48.y = _World2Object[1].x;
  v_48.z = _World2Object[2].x;
  v_48.w = _World2Object[3].x;
  highp vec4 v_49;
  v_49.x = _World2Object[0].z;
  v_49.y = _World2Object[1].z;
  v_49.z = _World2Object[2].z;
  v_49.w = _World2Object[3].z;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(((v_48.xyz * tmpvar_17.z) + (v_49.xyz * tmpvar_18.z)));
  worldNormal_2 = tmpvar_50;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_51;
  tmpvar_51.w = 1.0;
  tmpvar_51.xyz = worldNormal_2;
  mediump vec4 normal_52;
  normal_52 = tmpvar_51;
  mediump vec3 x2_53;
  mediump vec4 tmpvar_54;
  tmpvar_54 = (normal_52.xyzz * normal_52.yzzx);
  x2_53.x = dot (unity_SHBr, tmpvar_54);
  x2_53.y = dot (unity_SHBg, tmpvar_54);
  x2_53.z = dot (unity_SHBb, tmpvar_54);
  tmpvar_5 = (unity_World2Shadow[0] * (_Object2World * tmpvar_6));
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = screenPos_43;
  xlv_TEXCOORD5 = (x2_53 + (unity_SHC.xyz * (
    (normal_52.x * normal_52.x)
   - 
    (normal_52.y * normal_52.y)
  )));
  xlv_TEXCOORD6 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_13.x = tmpvar_14.x;
  projUV_13.y = ((fract(tmpvar_14.y) * 0.0625) + unity_LODFade.y);
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_16;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_17;
  x_17 = (tmpvar_10 - _Cutoff);
  if ((x_17 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_18;
  tmpvar_18 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_18.x, max (tmpvar_18.y, tmpvar_18.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_18 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_19 = tmpvar_20;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_19;
  mediump vec3 normalWorld_21;
  normalWorld_21 = tmpvar_5;
  mediump vec3 tmpvar_22;
  mediump vec3 tmpvar_23;
  mediump vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = normalWorld_21;
  mediump vec3 x1_25;
  x1_25.x = dot (unity_SHAr, tmpvar_24);
  x1_25.y = dot (unity_SHAg, tmpvar_24);
  x1_25.z = dot (unity_SHAb, tmpvar_24);
  tmpvar_23 = (xlv_TEXCOORD5 + x1_25);
  tmpvar_22 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_22;
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_28 = tmpvar_29;
  c_27.xyz = ((tmpvar_9 * tmpvar_22) * diff_28);
  c_27.w = tmpvar_10;
  c_26.w = c_27.w;
  c_26.xyz = (c_27.xyz + (tmpvar_9 * tmpvar_23));
  c_4.xyz = c_26.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp vec3 angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_18.z / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_18.z / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  angle_9 = vec3(tmpvar_19);
  bvec3 tmpvar_22;
  tmpvar_22 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_23;
  if (tmpvar_22.x) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_22.y) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_22.z) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  vec3 tmpvar_26;
  tmpvar_26.x = tmpvar_23;
  tmpvar_26.y = tmpvar_24;
  tmpvar_26.z = tmpvar_25;
  angle_9 = (vec3(tmpvar_19) + tmpvar_26);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_8.xz = tmpvar_28.xz;
  billboardPos_8.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_8;
    highp float fMoveAmount_30;
    highp float fAdjust_31;
    highp float fLength_32;
    fLength_32 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_33;
    tmpvar_33 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_31 = tmpvar_33;
    if ((tmpvar_33 != 0.0)) {
      fAdjust_31 = pow (tmpvar_33, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_34;
    tmpvar_34.zw = vec2(0.0, 0.0);
    tmpvar_34.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_34.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_35;
    highp vec4 tmpvar_36;
    tmpvar_36 = abs(((
      fract((tmpvar_34 + 0.5))
     * 2.0) - 1.0));
    tmpvar_35 = (((
      (tmpvar_36 * tmpvar_36)
     * 
      (3.0 - (2.0 * tmpvar_36))
    ) - 0.5) * 2.0);
    fMoveAmount_30 = ((_ST_WindGlobal.y * (tmpvar_35.x + 
      (tmpvar_35.y * tmpvar_35.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_30 = (fMoveAmount_30 * fAdjust_31);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * fMoveAmount_30));
    vPos_29 = (normalize(vPos_29) * fLength_32);
    billboardPos_8 = vPos_29;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (angle_9 + tmpvar_27.z);
  highp vec3 tmpvar_37;
  tmpvar_37 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_38;
  tmpvar_38 = (fract(abs(tmpvar_37)) * tmpvar_11.xxx);
  highp float tmpvar_39;
  if ((tmpvar_37.x >= 0.0)) {
    tmpvar_39 = tmpvar_38.x;
  } else {
    tmpvar_39 = -(tmpvar_38.x);
  };
  highp vec4 tmpvar_40;
  tmpvar_40 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_39))];
  if ((tmpvar_40.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_40.xy - (tmpvar_40.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_40.xy + (tmpvar_40.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_41;
  tmpvar_41 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_41;
  highp vec4 hPos_42;
  hPos_42 = (glstate_matrix_mvp * tmpvar_6);
  mediump vec3 screenPos_43;
  highp vec4 o_44;
  highp vec4 tmpvar_45;
  tmpvar_45 = (hPos_42 * 0.5);
  highp vec2 tmpvar_46;
  tmpvar_46.x = tmpvar_45.x;
  tmpvar_46.y = (tmpvar_45.y * _ProjectionParams.x);
  o_44.xy = (tmpvar_46 + tmpvar_45.w);
  o_44.zw = hPos_42.zw;
  highp vec3 tmpvar_47;
  tmpvar_47 = o_44.xyw;
  screenPos_43 = tmpvar_47;
  screenPos_43.xy = (screenPos_43.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = _Color;
  highp vec3 tmpvar_48;
  tmpvar_48 = (_Object2World * tmpvar_6).xyz;
  highp vec4 v_49;
  v_49.x = _World2Object[0].x;
  v_49.y = _World2Object[1].x;
  v_49.z = _World2Object[2].x;
  v_49.w = _World2Object[3].x;
  highp vec4 v_50;
  v_50.x = _World2Object[0].z;
  v_50.y = _World2Object[1].z;
  v_50.z = _World2Object[2].z;
  v_50.w = _World2Object[3].z;
  highp vec3 tmpvar_51;
  tmpvar_51 = normalize(((v_49.xyz * tmpvar_17.z) + (v_50.xyz * tmpvar_18.z)));
  worldNormal_2 = tmpvar_51;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_52;
  tmpvar_52.w = 1.0;
  tmpvar_52.xyz = worldNormal_2;
  mediump vec4 normal_53;
  normal_53 = tmpvar_52;
  mediump vec3 x2_54;
  mediump vec4 tmpvar_55;
  tmpvar_55 = (normal_53.xyzz * normal_53.yzzx);
  x2_54.x = dot (unity_SHBr, tmpvar_55);
  x2_54.y = dot (unity_SHBg, tmpvar_55);
  x2_54.z = dot (unity_SHBb, tmpvar_55);
  highp vec3 lightColor0_56;
  lightColor0_56 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_57;
  lightColor1_57 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_58;
  lightColor2_58 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_59;
  lightColor3_59 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_60;
  lightAttenSq_60 = unity_4LightAtten0;
  highp vec3 normal_61;
  normal_61 = worldNormal_2;
  highp vec3 col_62;
  highp vec4 ndotl_63;
  highp vec4 lengthSq_64;
  highp vec4 tmpvar_65;
  tmpvar_65 = (unity_4LightPosX0 - tmpvar_48.x);
  highp vec4 tmpvar_66;
  tmpvar_66 = (unity_4LightPosY0 - tmpvar_48.y);
  highp vec4 tmpvar_67;
  tmpvar_67 = (unity_4LightPosZ0 - tmpvar_48.z);
  lengthSq_64 = (tmpvar_65 * tmpvar_65);
  lengthSq_64 = (lengthSq_64 + (tmpvar_66 * tmpvar_66));
  lengthSq_64 = (lengthSq_64 + (tmpvar_67 * tmpvar_67));
  ndotl_63 = (tmpvar_65 * normal_61.x);
  ndotl_63 = (ndotl_63 + (tmpvar_66 * normal_61.y));
  ndotl_63 = (ndotl_63 + (tmpvar_67 * normal_61.z));
  highp vec4 tmpvar_68;
  tmpvar_68 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_63 * inversesqrt(lengthSq_64)));
  ndotl_63 = tmpvar_68;
  highp vec4 tmpvar_69;
  tmpvar_69 = (tmpvar_68 * (1.0/((1.0 + 
    (lengthSq_64 * lightAttenSq_60)
  ))));
  col_62 = (lightColor0_56 * tmpvar_69.x);
  col_62 = (col_62 + (lightColor1_57 * tmpvar_69.y));
  col_62 = (col_62 + (lightColor2_58 * tmpvar_69.z));
  col_62 = (col_62 + (lightColor3_59 * tmpvar_69.w));
  tmpvar_5 = ((x2_54 + (unity_SHC.xyz * 
    ((normal_53.x * normal_53.x) - (normal_53.y * normal_53.y))
  )) + col_62);
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_48;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = screenPos_43;
  xlv_TEXCOORD5 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_16;
  x_16 = (tmpvar_9 - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_17.x, max (tmpvar_17.y, tmpvar_17.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_17 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_18;
  normalWorld_18 = tmpvar_4;
  mediump vec3 tmpvar_19;
  mediump vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = normalWorld_18;
  mediump vec3 x1_21;
  x1_21.x = dot (unity_SHAr, tmpvar_20);
  x1_21.y = dot (unity_SHAg, tmpvar_20);
  x1_21.z = dot (unity_SHAb, tmpvar_20);
  tmpvar_19 = (xlv_TEXCOORD5 + x1_21);
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_24 = tmpvar_25;
  c_23.xyz = ((tmpvar_8 * tmpvar_1) * diff_24);
  c_23.w = tmpvar_9;
  c_22.w = c_23.w;
  c_22.xyz = (c_23.xyz + (tmpvar_8 * tmpvar_19));
  c_3.xyz = c_22.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
highp vec3 t5;
mediump vec3 t16_6;
mediump vec3 t16_7;
highp vec3 t9;
highp int ti9;
bool tb9;
highp float t10;
highp vec2 t17;
bool tb17;
highp vec2 t18;
highp uint tu18;
highp float t25;
bool tb25;
highp float t26;
highp float t27;
bool tb27;
void main()
{
    //Instruction 62449
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 62450
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 62451
    //LT
    tb9 = 0.0<_InstanceData.x;
    //Instruction 62452
    //MOVC
    t0 = (bool(tb9)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 62453
    //ADD
    t9.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 62454
    //ADD
    t2.x = t0.w + t9.x;
    //Instruction 62455
    //MAD
    t2.y = t0.w * 0.800000 + t9.y;
    //Instruction 62456
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 62457
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 62458
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 62459
    //MUL
    t18.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 62460
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 62461
    //MAD
    t2.xy = t18.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 62462
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 62463
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 62464
    //DIV
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 62465
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t10;
    //Instruction 62466
    //DIV
    t10 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 62467
    //MUL
    t18.x = in_COLOR0.w * 255.000000;
    //Instruction 62468
    //FTOU
    tu18 = uint(t18.x);
    //Instruction 62469
    //MAD
    t26 = in_TEXCOORD0.y * _TreeSize[int(tu18) + 0].y + _TreeSize[int(tu18) + 0].z;
    //Instruction 62470
    //MUL
    t3.y = t0.y * t26;
    //Instruction 62471
    //MAD
    t10 = (-t10) * 0.250000 + t3.y;
    //Instruction 62472
    //MAX
    t10 = max(t10, 0.0);
    //Instruction 62473
    //MUL
    t10 = t10 * _ST_WindGlobal.z;
    //Instruction 62474
    //LOG
    t26 = log2(t10);
    //Instruction 62475
    //MUL
    t26 = t26 * _ST_WindGlobal.w;
    //Instruction 62476
    //EXP
    t26 = exp2(t26);
    //Instruction 62477
    //NE
    tb27 = t10!=0.0;
    //Instruction 62478
    //MOVC
    t10 = (tb27) ? t26 : t10;
    //Instruction 62479
    //MUL
    t2.x = t10 * t2.x;
    //Instruction 62480
    //ADD
    t10 = in_TEXCOORD0.x + -0.500000;
    //Instruction 62481
    //MUL
    t10 = t10 * _TreeSize[int(tu18) + 0].x;
    //Instruction 62482
    //MUL
    t10 = t0.x * t10;
    //Instruction 62483
    //ADD
    t4.xyz = (-t9.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 62484
    //DP3
    t26 = dot(t4.xyz, t4.xyz);
    //Instruction 62485
    //RSQ
    t26 = inversesqrt(t26);
    //Instruction 62486
    //MUL
    t4.xy = vec2(t26) * t4.xz;
    //Instruction 62487
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 62488
    //DP2
    t26 = dot(t4.xz, t4.xw);
    //Instruction 62489
    //MUL
    t4.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 62490
    //RSQ
    t26 = inversesqrt(t26);
    //Instruction 62491
    //MUL
    t4.xy = vec2(t26) * t4.xy;
    //Instruction 62492
    //MUL
    t3.xz = vec2(t10) * t4.xy;
    //Instruction 62493
    //MAD
    t5.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 62494
    //MOV
    t5.y = t3.y;
    //Instruction 62495
    //DP3
    t2.x = dot(t5.xyz, t5.xyz);
    //Instruction 62496
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 62497
    //MUL
    t2.xyw = t2.xxx * t5.xyz;
    //Instruction 62498
    //DP3
    t27 = dot(t3.xyz, t3.xyz);
    //Instruction 62499
    //SQRT
    t27 = sqrt(t27);
    //Instruction 62500
    //MUL
    t2.xyw = t2.xyw * vec3(t27);
    //Instruction 62501
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 62502
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 62503
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 62504
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 62505
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 62506
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 62507
    //MUL
    t3.x = t4.y * _World2Object[0].x;
    //Instruction 62508
    //MUL
    t3.y = t4.y * _World2Object[1].x;
    //Instruction 62509
    //MUL
    t3.z = t4.y * _World2Object[2].x;
    //Instruction 62510
    //MUL
    t5.x = (-t4.x) * _World2Object[0].z;
    //Instruction 62511
    //MUL
    t5.y = (-t4.x) * _World2Object[1].z;
    //Instruction 62512
    //MUL
    t5.z = (-t4.x) * _World2Object[2].z;
    //Instruction 62513
    //ADD
    t3.xyz = t3.xyz + t5.xyz;
    //Instruction 62514
    //DP3
    t1.x = dot(t3.xyz, t3.xyz);
    //Instruction 62515
    //RSQ
    t1.x = inversesqrt(t1.x);
    //Instruction 62516
    //MUL
    t3.xyz = t1.xxx * t3.xyz;
    //Instruction 62517
    //MOV
    vs_TEXCOORD0.xyz = t3.xyz;
    //Instruction 62518
    //MUL
    t5.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 62519
    //MAD
    t5.xyz = _Object2World[0].xyz * t2.xxx + t5.xyz;
    //Instruction 62520
    //MAD
    t5.xyz = _Object2World[2].xyz * t2.www + t5.xyz;
    //Instruction 62521
    //ADD
    t5.xyz = t5.xyz + _Object2World[3].xyz;
    //Instruction 62522
    //MOV
    vs_TEXCOORD1.xyz = t5.xyz;
    //Instruction 62523
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 62524
    //ADD
    t1.x = t9.y + t9.x;
    //Instruction 62525
    //ADD
    t1.x = t9.z + t1.x;
    //Instruction 62526
    //FRC
    t1.x = fract(t1.x);
    //Instruction 62527
    //MUL
    t1.x = t1.x * _HueVariation.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 62528
    //MOV
    vs_TEXCOORD3.z = t1.x;
    //Instruction 62529
    //MAX
    t1.x = max(abs(t4.y), abs(t4.x));
    //Instruction 62530
    //DIV
    t1.x = float(1.0) / t1.x;
    //Instruction 62531
    //MIN
    t9.x = min(abs(t4.y), abs(t4.x));
    //Instruction 62532
    //MUL
    t1.x = t1.x * t9.x;
    //Instruction 62533
    //MUL
    t9.x = t1.x * t1.x;
    //Instruction 62534
    //MAD
    t17.x = t9.x * 0.020835 + -0.085133;
    //Instruction 62535
    //MAD
    t17.x = t9.x * t17.x + 0.180141;
    //Instruction 62536
    //MAD
    t17.x = t9.x * t17.x + -0.330299;
    //Instruction 62537
    //MAD
    t9.x = t9.x * t17.x + 0.999866;
    //Instruction 62538
    //MUL
    t17.x = t9.x * t1.x;
    //Instruction 62539
    //MAD
    t17.x = t17.x * -2.000000 + 1.570796;
    //Instruction 62540
    //LT
    tb25 = abs(t4.y)<abs(t4.x);
    //Instruction 62541
    //AND
    t17.x = tb25 ? t17.x : float(0.0);
    //Instruction 62542
    //MAD
    t1.x = t1.x * t9.x + t17.x;
    //Instruction 62543
    //LT
    tb9 = t4.y<(-t4.y);
    //Instruction 62544
    //AND
    t9.x = tb9 ? -3.141593 : float(0.0);
    //Instruction 62545
    //ADD
    t1.x = t9.x + t1.x;
    //Instruction 62546
    //MIN
    t9.x = min(t4.y, (-t4.x));
    //Instruction 62547
    //MAX
    t17.x = max(t4.y, (-t4.x));
    //Instruction 62548
    //GE
    tb17 = t17.x>=(-t17.x);
    //Instruction 62549
    //LT
    tb9 = t9.x<(-t9.x);
    //Instruction 62550
    //AND
    ti9 = int(uint(tb17) & uint(tb9));
    //Instruction 62551
    //MOVC
    t1.x = (ti9 != 0) ? (-t1.x) : t1.x;
    //Instruction 62552
    //LT
    tb9 = t1.x<0.0;
    //Instruction 62553
    //AND
    t9.x = tb9 ? 6.283185 : float(0.0);
    //Instruction 62554
    //ADD
    t1.x = t9.x + t1.x;
    //Instruction 62555
    //ADD
    t1.x = t0.z + t1.x;
    //Instruction 62556
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu18) + 0].y + 0.500000;
    //Instruction 62557
    //ROUND_NI
    t1.x = floor(t1.x);
    //Instruction 62558
    //DIV
    t1.x = t1.x / _TreeInfo[int(tu18) + 0].x;
    //Instruction 62559
    //GE
    tb9 = t1.x>=(-t1.x);
    //Instruction 62560
    //FRC
    t1.x = fract(abs(t1.x));
    //Instruction 62561
    //MOVC
    t1.x = (tb9) ? t1.x : (-t1.x);
    //Instruction 62562
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu18) + 0].x + _TreeInfo[int(tu18) + 0].z;
    //Instruction 62563
    //FTOU
    tu1 = uint(t1.x);
    //Instruction 62564
    //LT
    tb9 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 62565
    //MAD
    t17.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 62566
    //MAD
    t4.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 62567
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb9)) ? t17.xy : t4.xy;
    //Instruction 62568
    //MUL
    t1.xyz = t2.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 62569
    //MAD
    t1.xyz = glstate_matrix_mvp[0].xyw * t2.xxx + t1.xyz;
    //Instruction 62570
    //MAD
    t1.xyz = glstate_matrix_mvp[2].xyw * t2.www + t1.xyz;
    //Instruction 62571
    //ADD
    t1.xyz = t1.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 62572
    //MUL
    t2.xz = t1.xz * vec2(0.500000, 0.500000);
    //Instruction 62573
    //MUL
    t25 = t1.y * _ProjectionParams.x;
    //Instruction 62574
    //MUL
    t2.w = t25 * 0.500000;
    //Instruction 62575
    //ADD
    t2.xy = t2.zz + t2.xw;
    //Instruction 62576
    //MUL
    t2.xy = t2.xy * _ScreenParams.xy;
    //Instruction 62577
    //MUL
    t1.xy = t2.xy * vec2(0.250000, 0.250000);
    //Instruction 62578
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 62579
    //ADD
    t0 = (-t5.zzzz) + unity_4LightPosZ0;
    //Instruction 62580
    //ADD
    t1 = (-t5.xxxx) + unity_4LightPosX0;
    //Instruction 62581
    //ADD
    t2 = (-t5.yyyy) + unity_4LightPosY0;
    //Instruction 62582
    //MUL
    t4 = t3.yyyy * t2;
    //Instruction 62583
    //MUL
    t2 = t2 * t2;
    //Instruction 62584
    //MAD
    t2 = t1 * t1 + t2;
    //Instruction 62585
    //MAD
    t1 = t1 * t3.xxxx + t4;
    //Instruction 62586
    //MAD
    t1 = t0 * t3.zzzz + t1;
    //Instruction 62587
    //MAD
    t0 = t0 * t0 + t2;
    //Instruction 62588
    //RSQ
    t2 = inversesqrt(t0);
    //Instruction 62589
    //MAD
    t0 = t0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 62590
    //DIV
    t0 = vec4(1.0, 1.0, 1.0, 1.0) / t0;
    //Instruction 62591
    //MUL
    t1 = t1 * t2;
    //Instruction 62592
    //MAX
    t1 = max(t1, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 62593
    //MUL
    t0 = t0 * t1;
    //Instruction 62594
    //MUL
    t1.xyz = t0.yyy * unity_LightColor[1].xyz;
    //Instruction 62595
    //MAD
    t1.xyz = unity_LightColor[0].xyz * t0.xxx + t1.xyz;
    //Instruction 62596
    //MAD
    t1.xyz = unity_LightColor[2].xyz * t0.zzz + t1.xyz;
    //Instruction 62597
    //MAD
    t1.xyz = unity_LightColor[3].xyz * t0.www + t1.xyz;
    //Instruction 62598
    //MUL
    t16_6.x = t3.y * t3.y;
    //Instruction 62599
    //MAD
    t16_6.x = t3.x * t3.x + (-t16_6.x);
    //Instruction 62600
    //MUL
    t16_0 = t3.yzzx * t3.xyzz;
    //Instruction 62601
    //DP4
    t16_7.x = dot(unity_SHBr, t16_0);
    //Instruction 62602
    //DP4
    t16_7.y = dot(unity_SHBg, t16_0);
    //Instruction 62603
    //DP4
    t16_7.z = dot(unity_SHBb, t16_0);
    //Instruction 62604
    //MAD
    t16_6.xyz = unity_SHC.xyz * t16_6.xxx + t16_7.xyz;
    //Instruction 62605
    //ADD
    t1.xyz = t1.xyz + t16_6.xyz;
    //Instruction 62606
    //MOV
    vs_TEXCOORD5.xyz = t1.xyz;
    //Instruction 62607
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump float t16_6;
mediump vec3 t16_9;
mediump float t16_21;
void main()
{
    //Instruction 62413
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 62414
    //FRC
    t16_6 = fract(t16_0.y);
    //Instruction 62415
    //MOV
    t1.x = t16_0.x;
    //Instruction 62416
    //MAD
    t1.y = t16_6 * 0.062500 + unity_LODFade.y;
    //Instruction 62417
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 62418
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 62419
    //LT
    tb1 = t16_1<0.0;
    //Instruction 62420
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 62421
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 62422
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 62423
    //LT
    tb1 = t10_2<0.0;
    //Instruction 62424
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 62425
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 62426
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 62427
    //ADD
    t16_9.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 62428
    //MAD
    t16_9.xyz = vs_TEXCOORD3.zzz * t16_9.xyz + t10_0.xyz;
    //Instruction 62429
    //MAX
    t16_4.x = max(t16_9.z, t16_9.y);
    //Instruction 62430
    //MAX
    t16_4.x = max(t16_9.x, t16_4.x);
    //Instruction 62431
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 62432
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 62433
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_9.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 62434
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD2.xyz;
    //Instruction 62435
    //MUL
    t16_4.xyz = t16_3.xyz * _LightColor0.xyz;
    //Instruction 62436
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 62437
    //MOV
    t16_0.w = 1.0;
    //Instruction 62438
    //DP4
    t16_5.x = dot(unity_SHAr, t16_0);
    //Instruction 62439
    //DP4
    t16_5.y = dot(unity_SHAg, t16_0);
    //Instruction 62440
    //DP4
    t16_5.z = dot(unity_SHAb, t16_0);
    //Instruction 62441
    //ADD
    t16_5.xyz = t16_5.xyz + vs_TEXCOORD5.xyz;
    //Instruction 62442
    //MUL
    t16_3.xyz = t16_3.xyz * t16_5.xyz;
    //Instruction 62443
    //DP3
    t16_21 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 62444
    //MAX
    t16_21 = max(t16_21, 0.0);
    //Instruction 62445
    //MAD
    t16_3.xyz = t16_4.xyz * vec3(t16_21) + t16_3.xyz;
    //Instruction 62446
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 62447
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 62448
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesVertex;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp vec3 angle_10;
  highp float tmpvar_11;
  tmpvar_11 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeInfo[int(tmpvar_11)];
  highp vec4 tmpvar_13;
  tmpvar_13 = _TreeSize[int(tmpvar_11)];
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (_glesVertex.xyz + tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceCameraPos - tmpvar_15));
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = -(tmpvar_16.z);
  tmpvar_17.z = tmpvar_16.x;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(tmpvar_17);
  highp vec3 tmpvar_19;
  tmpvar_19.y = 0.0;
  tmpvar_19.x = tmpvar_18.z;
  tmpvar_19.z = -(tmpvar_18.x);
  highp float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = (min (abs(
    (tmpvar_19.z / tmpvar_18.z)
  ), 1.0) / max (abs(
    (tmpvar_19.z / tmpvar_18.z)
  ), 1.0));
  highp float tmpvar_22;
  tmpvar_22 = (tmpvar_21 * tmpvar_21);
  tmpvar_22 = (((
    ((((
      ((((-0.01213232 * tmpvar_22) + 0.05368138) * tmpvar_22) - 0.1173503)
     * tmpvar_22) + 0.1938925) * tmpvar_22) - 0.3326756)
   * tmpvar_22) + 0.9999793) * tmpvar_21);
  tmpvar_22 = (tmpvar_22 + (float(
    (abs((tmpvar_19.z / tmpvar_18.z)) > 1.0)
  ) * (
    (tmpvar_22 * -2.0)
   + 1.570796)));
  tmpvar_20 = (tmpvar_22 * sign((tmpvar_19.z / tmpvar_18.z)));
  if ((abs(tmpvar_18.z) > (1e-08 * abs(tmpvar_19.z)))) {
    if ((tmpvar_18.z < 0.0)) {
      if ((tmpvar_19.z >= 0.0)) {
        tmpvar_20 += 3.141593;
      } else {
        tmpvar_20 = (tmpvar_20 - 3.141593);
      };
    };
  } else {
    tmpvar_20 = (sign(tmpvar_19.z) * 1.570796);
  };
  angle_10 = vec3(tmpvar_20);
  bvec3 tmpvar_23;
  tmpvar_23 = lessThan (vec3(tmpvar_20), vec3(0.0, 0.0, 0.0));
  float tmpvar_24;
  if (tmpvar_23.x) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_23.y) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  float tmpvar_26;
  if (tmpvar_23.z) {
    tmpvar_26 = 6.283185;
  } else {
    tmpvar_26 = 0.0;
  };
  vec3 tmpvar_27;
  tmpvar_27.x = tmpvar_24;
  tmpvar_27.y = tmpvar_25;
  tmpvar_27.z = tmpvar_26;
  angle_10 = (vec3(tmpvar_20) + tmpvar_27);
  highp vec4 tmpvar_28;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_28 = _InstanceData;
  } else {
    tmpvar_28 = tmpvar_1;
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_13.x) * tmpvar_28.x) * tmpvar_18);
  billboardPos_9.xz = tmpvar_29.xz;
  billboardPos_9.y = (tmpvar_29.y + ((
    (_glesMultiTexCoord0.y * tmpvar_13.y)
   + tmpvar_13.z) * tmpvar_28.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_30;
    vPos_30 = billboardPos_9;
    highp float fMoveAmount_31;
    highp float fAdjust_32;
    highp float fLength_33;
    fLength_33 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_34;
    tmpvar_34 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_32 = tmpvar_34;
    if ((tmpvar_34 != 0.0)) {
      fAdjust_32 = pow (tmpvar_34, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_35;
    tmpvar_35.zw = vec2(0.0, 0.0);
    tmpvar_35.x = (tmpvar_15.x + tmpvar_28.w);
    tmpvar_35.y = (tmpvar_15.y + (tmpvar_28.w * 0.8));
    highp vec4 tmpvar_36;
    highp vec4 tmpvar_37;
    tmpvar_37 = abs(((
      fract((tmpvar_35 + 0.5))
     * 2.0) - 1.0));
    tmpvar_36 = (((
      (tmpvar_37 * tmpvar_37)
     * 
      (3.0 - (2.0 * tmpvar_37))
    ) - 0.5) * 2.0);
    fMoveAmount_31 = ((_ST_WindGlobal.y * (tmpvar_36.x + 
      (tmpvar_36.y * tmpvar_36.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_31 = (fMoveAmount_31 * fAdjust_32);
    vPos_30.xz = (tmpvar_29.xz + (_ST_WindVector.xz * fMoveAmount_31));
    vPos_30 = (normalize(vPos_30) * fLength_33);
    billboardPos_9 = vPos_30;
  };
  tmpvar_7.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_7.w = 1.0;
  angle_10 = (angle_10 + tmpvar_28.z);
  highp vec3 tmpvar_38;
  tmpvar_38 = (floor((
    (angle_10 * tmpvar_12.y)
   + 0.5)) / tmpvar_12.xxx);
  highp vec3 tmpvar_39;
  tmpvar_39 = (fract(abs(tmpvar_38)) * tmpvar_12.xxx);
  highp float tmpvar_40;
  if ((tmpvar_38.x >= 0.0)) {
    tmpvar_40 = tmpvar_39.x;
  } else {
    tmpvar_40 = -(tmpvar_39.x);
  };
  highp vec4 tmpvar_41;
  tmpvar_41 = _ImageTexCoords[int((tmpvar_12.z + tmpvar_40))];
  if ((tmpvar_41.w < 0.0)) {
    tmpvar_8.xy = (tmpvar_41.xy - (tmpvar_41.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_8.xy = (tmpvar_41.xy + (tmpvar_41.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_42;
  tmpvar_42 = clamp ((fract(
    ((tmpvar_15.x + tmpvar_15.y) + tmpvar_15.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_42;
  highp vec4 hPos_43;
  hPos_43 = (glstate_matrix_mvp * tmpvar_7);
  mediump vec3 screenPos_44;
  highp vec4 o_45;
  highp vec4 tmpvar_46;
  tmpvar_46 = (hPos_43 * 0.5);
  highp vec2 tmpvar_47;
  tmpvar_47.x = tmpvar_46.x;
  tmpvar_47.y = (tmpvar_46.y * _ProjectionParams.x);
  o_45.xy = (tmpvar_47 + tmpvar_46.w);
  o_45.zw = hPos_43.zw;
  highp vec3 tmpvar_48;
  tmpvar_48 = o_45.xyw;
  screenPos_44 = tmpvar_48;
  screenPos_44.xy = (screenPos_44.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = _Color;
  highp vec3 tmpvar_49;
  tmpvar_49 = (_Object2World * tmpvar_7).xyz;
  highp vec4 v_50;
  v_50.x = _World2Object[0].x;
  v_50.y = _World2Object[1].x;
  v_50.z = _World2Object[2].x;
  v_50.w = _World2Object[3].x;
  highp vec4 v_51;
  v_51.x = _World2Object[0].z;
  v_51.y = _World2Object[1].z;
  v_51.z = _World2Object[2].z;
  v_51.w = _World2Object[3].z;
  highp vec3 tmpvar_52;
  tmpvar_52 = normalize(((v_50.xyz * tmpvar_18.z) + (v_51.xyz * tmpvar_19.z)));
  worldNormal_2 = tmpvar_52;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_53;
  tmpvar_53.w = 1.0;
  tmpvar_53.xyz = worldNormal_2;
  mediump vec4 normal_54;
  normal_54 = tmpvar_53;
  mediump vec3 x2_55;
  mediump vec4 tmpvar_56;
  tmpvar_56 = (normal_54.xyzz * normal_54.yzzx);
  x2_55.x = dot (unity_SHBr, tmpvar_56);
  x2_55.y = dot (unity_SHBg, tmpvar_56);
  x2_55.z = dot (unity_SHBb, tmpvar_56);
  highp vec3 lightColor0_57;
  lightColor0_57 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_58;
  lightColor1_58 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_59;
  lightColor2_59 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_60;
  lightColor3_60 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_61;
  lightAttenSq_61 = unity_4LightAtten0;
  highp vec3 normal_62;
  normal_62 = worldNormal_2;
  highp vec3 col_63;
  highp vec4 ndotl_64;
  highp vec4 lengthSq_65;
  highp vec4 tmpvar_66;
  tmpvar_66 = (unity_4LightPosX0 - tmpvar_49.x);
  highp vec4 tmpvar_67;
  tmpvar_67 = (unity_4LightPosY0 - tmpvar_49.y);
  highp vec4 tmpvar_68;
  tmpvar_68 = (unity_4LightPosZ0 - tmpvar_49.z);
  lengthSq_65 = (tmpvar_66 * tmpvar_66);
  lengthSq_65 = (lengthSq_65 + (tmpvar_67 * tmpvar_67));
  lengthSq_65 = (lengthSq_65 + (tmpvar_68 * tmpvar_68));
  ndotl_64 = (tmpvar_66 * normal_62.x);
  ndotl_64 = (ndotl_64 + (tmpvar_67 * normal_62.y));
  ndotl_64 = (ndotl_64 + (tmpvar_68 * normal_62.z));
  highp vec4 tmpvar_69;
  tmpvar_69 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_64 * inversesqrt(lengthSq_65)));
  ndotl_64 = tmpvar_69;
  highp vec4 tmpvar_70;
  tmpvar_70 = (tmpvar_69 * (1.0/((1.0 + 
    (lengthSq_65 * lightAttenSq_61)
  ))));
  col_63 = (lightColor0_57 * tmpvar_70.x);
  col_63 = (col_63 + (lightColor1_58 * tmpvar_70.y));
  col_63 = (col_63 + (lightColor2_59 * tmpvar_70.z));
  col_63 = (col_63 + (lightColor3_60 * tmpvar_70.w));
  tmpvar_5 = ((x2_55 + (unity_SHC.xyz * 
    ((normal_54.x * normal_54.x) - (normal_54.y * normal_54.y))
  )) + col_63);
  tmpvar_6 = (unity_World2Shadow[0] * (_Object2World * tmpvar_7));
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_49;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = screenPos_44;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_TEXCOORD6 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_13.x = tmpvar_14.x;
  projUV_13.y = ((fract(tmpvar_14.y) * 0.0625) + unity_LODFade.y);
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_16;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_17;
  x_17 = (tmpvar_10 - _Cutoff);
  if ((x_17 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_18;
  tmpvar_18 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_18.x, max (tmpvar_18.y, tmpvar_18.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_18 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_19 = tmpvar_20;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_19;
  mediump vec3 normalWorld_21;
  normalWorld_21 = tmpvar_5;
  mediump vec3 tmpvar_22;
  mediump vec3 tmpvar_23;
  mediump vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = normalWorld_21;
  mediump vec3 x1_25;
  x1_25.x = dot (unity_SHAr, tmpvar_24);
  x1_25.y = dot (unity_SHAg, tmpvar_24);
  x1_25.z = dot (unity_SHAb, tmpvar_24);
  tmpvar_23 = (xlv_TEXCOORD5 + x1_25);
  tmpvar_22 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_22;
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_28 = tmpvar_29;
  c_27.xyz = ((tmpvar_9 * tmpvar_22) * diff_28);
  c_27.w = tmpvar_10;
  c_26.w = c_27.w;
  c_26.xyz = (c_27.xyz + (tmpvar_9 * tmpvar_23));
  c_4.xyz = c_26.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp vec3 angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_18.z / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_18.z / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  angle_9 = vec3(tmpvar_19);
  bvec3 tmpvar_22;
  tmpvar_22 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_23;
  if (tmpvar_22.x) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_22.y) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_22.z) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  vec3 tmpvar_26;
  tmpvar_26.x = tmpvar_23;
  tmpvar_26.y = tmpvar_24;
  tmpvar_26.z = tmpvar_25;
  angle_9 = (vec3(tmpvar_19) + tmpvar_26);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_8.xz = tmpvar_28.xz;
  billboardPos_8.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_8;
    highp float fMoveAmount_30;
    highp float fAdjust_31;
    highp float fLength_32;
    fLength_32 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_33;
    tmpvar_33 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_31 = tmpvar_33;
    if ((tmpvar_33 != 0.0)) {
      fAdjust_31 = pow (tmpvar_33, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_34;
    tmpvar_34.zw = vec2(0.0, 0.0);
    tmpvar_34.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_34.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_35;
    highp vec4 tmpvar_36;
    tmpvar_36 = abs(((
      fract((tmpvar_34 + 0.5))
     * 2.0) - 1.0));
    tmpvar_35 = (((
      (tmpvar_36 * tmpvar_36)
     * 
      (3.0 - (2.0 * tmpvar_36))
    ) - 0.5) * 2.0);
    fMoveAmount_30 = ((_ST_WindGlobal.y * (tmpvar_35.x + 
      (tmpvar_35.y * tmpvar_35.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_30 = (fMoveAmount_30 * fAdjust_31);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * fMoveAmount_30));
    vPos_29 = (normalize(vPos_29) * fLength_32);
    billboardPos_8 = vPos_29;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (angle_9 + tmpvar_27.z);
  highp vec3 tmpvar_37;
  tmpvar_37 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_38;
  tmpvar_38 = (fract(abs(tmpvar_37)) * tmpvar_11.xxx);
  highp float tmpvar_39;
  if ((tmpvar_37.x >= 0.0)) {
    tmpvar_39 = tmpvar_38.x;
  } else {
    tmpvar_39 = -(tmpvar_38.x);
  };
  highp vec4 tmpvar_40;
  tmpvar_40 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_39))];
  if ((tmpvar_40.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_40.xy - (tmpvar_40.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_40.xy + (tmpvar_40.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_41;
  tmpvar_41 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_41;
  highp vec4 hPos_42;
  hPos_42 = (glstate_matrix_mvp * tmpvar_6);
  mediump vec3 screenPos_43;
  highp vec4 o_44;
  highp vec4 tmpvar_45;
  tmpvar_45 = (hPos_42 * 0.5);
  highp vec2 tmpvar_46;
  tmpvar_46.x = tmpvar_45.x;
  tmpvar_46.y = (tmpvar_45.y * _ProjectionParams.x);
  o_44.xy = (tmpvar_46 + tmpvar_45.w);
  o_44.zw = hPos_42.zw;
  highp vec3 tmpvar_47;
  tmpvar_47 = o_44.xyw;
  screenPos_43 = tmpvar_47;
  screenPos_43.xy = (screenPos_43.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = _Color;
  highp vec4 v_48;
  v_48.x = _World2Object[0].x;
  v_48.y = _World2Object[1].x;
  v_48.z = _World2Object[2].x;
  v_48.w = _World2Object[3].x;
  highp vec4 v_49;
  v_49.x = _World2Object[0].z;
  v_49.y = _World2Object[1].z;
  v_49.z = _World2Object[2].z;
  v_49.w = _World2Object[3].z;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(((v_48.xyz * tmpvar_17.z) + (v_49.xyz * tmpvar_18.z)));
  worldNormal_2 = tmpvar_50;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_51;
  tmpvar_51.w = 1.0;
  tmpvar_51.xyz = worldNormal_2;
  mediump vec4 normal_52;
  normal_52 = tmpvar_51;
  mediump vec3 x2_53;
  mediump vec4 tmpvar_54;
  tmpvar_54 = (normal_52.xyzz * normal_52.yzzx);
  x2_53.x = dot (unity_SHBr, tmpvar_54);
  x2_53.y = dot (unity_SHBg, tmpvar_54);
  x2_53.z = dot (unity_SHBb, tmpvar_54);
  tmpvar_5 = (unity_World2Shadow[0] * (_Object2World * tmpvar_6));
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = screenPos_43;
  xlv_TEXCOORD5 = (x2_53 + (unity_SHC.xyz * (
    (normal_52.x * normal_52.x)
   - 
    (normal_52.y * normal_52.y)
  )));
  xlv_TEXCOORD6 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_13.x = tmpvar_14.x;
  projUV_13.y = ((fract(tmpvar_14.y) * 0.0625) + unity_LODFade.y);
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_16;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_17;
  x_17 = (tmpvar_10 - _Cutoff);
  if ((x_17 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_18;
  tmpvar_18 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_18.x, max (tmpvar_18.y, tmpvar_18.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_18 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp float shadow_19;
  shadow_19 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_19;
  mediump vec3 normalWorld_20;
  normalWorld_20 = tmpvar_5;
  mediump vec3 tmpvar_21;
  mediump vec3 tmpvar_22;
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = normalWorld_20;
  mediump vec3 x1_24;
  x1_24.x = dot (unity_SHAr, tmpvar_23);
  x1_24.y = dot (unity_SHAg, tmpvar_23);
  x1_24.z = dot (unity_SHAb, tmpvar_23);
  tmpvar_22 = (xlv_TEXCOORD5 + x1_24);
  tmpvar_21 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_21;
  lowp vec4 c_25;
  lowp vec4 c_26;
  lowp float diff_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_27 = tmpvar_28;
  c_26.xyz = ((tmpvar_9 * tmpvar_21) * diff_27);
  c_26.w = tmpvar_10;
  c_25.w = c_26.w;
  c_25.xyz = (c_26.xyz + (tmpvar_9 * tmpvar_22));
  c_4.xyz = c_25.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
highp vec3 t5;
mediump float t16_6;
mediump vec3 t16_7;
highp vec3 t9;
highp int ti9;
bool tb9;
highp float t10;
highp vec2 t17;
bool tb17;
highp vec2 t18;
highp uint tu18;
bool tb25;
highp float t26;
highp float t27;
bool tb27;
void main()
{
    //Instruction 62648
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 62649
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 62650
    //LT
    tb9 = 0.0<_InstanceData.x;
    //Instruction 62651
    //MOVC
    t0 = (bool(tb9)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 62652
    //ADD
    t9.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 62653
    //ADD
    t2.x = t0.w + t9.x;
    //Instruction 62654
    //MAD
    t2.y = t0.w * 0.800000 + t9.y;
    //Instruction 62655
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 62656
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 62657
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 62658
    //MUL
    t18.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 62659
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 62660
    //MAD
    t2.xy = t18.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 62661
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 62662
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 62663
    //DIV
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 62664
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t10;
    //Instruction 62665
    //DIV
    t10 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 62666
    //MUL
    t18.x = in_COLOR0.w * 255.000000;
    //Instruction 62667
    //FTOU
    tu18 = uint(t18.x);
    //Instruction 62668
    //MAD
    t26 = in_TEXCOORD0.y * _TreeSize[int(tu18) + 0].y + _TreeSize[int(tu18) + 0].z;
    //Instruction 62669
    //MUL
    t3.y = t0.y * t26;
    //Instruction 62670
    //MAD
    t10 = (-t10) * 0.250000 + t3.y;
    //Instruction 62671
    //MAX
    t10 = max(t10, 0.0);
    //Instruction 62672
    //MUL
    t10 = t10 * _ST_WindGlobal.z;
    //Instruction 62673
    //LOG
    t26 = log2(t10);
    //Instruction 62674
    //MUL
    t26 = t26 * _ST_WindGlobal.w;
    //Instruction 62675
    //EXP
    t26 = exp2(t26);
    //Instruction 62676
    //NE
    tb27 = t10!=0.0;
    //Instruction 62677
    //MOVC
    t10 = (tb27) ? t26 : t10;
    //Instruction 62678
    //MUL
    t2.x = t10 * t2.x;
    //Instruction 62679
    //ADD
    t10 = in_TEXCOORD0.x + -0.500000;
    //Instruction 62680
    //MUL
    t10 = t10 * _TreeSize[int(tu18) + 0].x;
    //Instruction 62681
    //MUL
    t10 = t0.x * t10;
    //Instruction 62682
    //ADD
    t4.xyz = (-t9.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 62683
    //DP3
    t26 = dot(t4.xyz, t4.xyz);
    //Instruction 62684
    //RSQ
    t26 = inversesqrt(t26);
    //Instruction 62685
    //MUL
    t4.xy = vec2(t26) * t4.xz;
    //Instruction 62686
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 62687
    //DP2
    t26 = dot(t4.xz, t4.xw);
    //Instruction 62688
    //MUL
    t4.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 62689
    //RSQ
    t26 = inversesqrt(t26);
    //Instruction 62690
    //MUL
    t4.xy = vec2(t26) * t4.xy;
    //Instruction 62691
    //MUL
    t3.xz = vec2(t10) * t4.xy;
    //Instruction 62692
    //MAD
    t5.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 62693
    //MOV
    t5.y = t3.y;
    //Instruction 62694
    //DP3
    t2.x = dot(t5.xyz, t5.xyz);
    //Instruction 62695
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 62696
    //MUL
    t2.xyw = t2.xxx * t5.xyz;
    //Instruction 62697
    //DP3
    t27 = dot(t3.xyz, t3.xyz);
    //Instruction 62698
    //SQRT
    t27 = sqrt(t27);
    //Instruction 62699
    //MUL
    t2.xyw = t2.xyw * vec3(t27);
    //Instruction 62700
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 62701
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 62702
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 62703
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 62704
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 62705
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 62706
    //MUL
    t3.x = t4.y * _World2Object[0].x;
    //Instruction 62707
    //MUL
    t3.y = t4.y * _World2Object[1].x;
    //Instruction 62708
    //MUL
    t3.z = t4.y * _World2Object[2].x;
    //Instruction 62709
    //MUL
    t5.x = (-t4.x) * _World2Object[0].z;
    //Instruction 62710
    //MUL
    t5.y = (-t4.x) * _World2Object[1].z;
    //Instruction 62711
    //MUL
    t5.z = (-t4.x) * _World2Object[2].z;
    //Instruction 62712
    //ADD
    t3.xyz = t3.xyz + t5.xyz;
    //Instruction 62713
    //DP3
    t1.x = dot(t3.xyz, t3.xyz);
    //Instruction 62714
    //RSQ
    t1.x = inversesqrt(t1.x);
    //Instruction 62715
    //MUL
    t3.xyz = t1.xxx * t3.xyz;
    //Instruction 62716
    //MOV
    vs_TEXCOORD0.xyz = t3.xyz;
    //Instruction 62717
    //MUL
    t5.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 62718
    //MAD
    t5.xyz = _Object2World[0].xyz * t2.xxx + t5.xyz;
    //Instruction 62719
    //MAD
    t5.xyz = _Object2World[2].xyz * t2.www + t5.xyz;
    //Instruction 62720
    //ADD
    vs_TEXCOORD1.xyz = t5.xyz + _Object2World[3].xyz;
    //Instruction 62721
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 62722
    //ADD
    t1.x = t9.y + t9.x;
    //Instruction 62723
    //ADD
    t1.x = t9.z + t1.x;
    //Instruction 62724
    //FRC
    t1.x = fract(t1.x);
    //Instruction 62725
    //MUL
    t1.x = t1.x * _HueVariation.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 62726
    //MOV
    vs_TEXCOORD3.z = t1.x;
    //Instruction 62727
    //MAX
    t1.x = max(abs(t4.y), abs(t4.x));
    //Instruction 62728
    //DIV
    t1.x = float(1.0) / t1.x;
    //Instruction 62729
    //MIN
    t9.x = min(abs(t4.y), abs(t4.x));
    //Instruction 62730
    //MUL
    t1.x = t1.x * t9.x;
    //Instruction 62731
    //MUL
    t9.x = t1.x * t1.x;
    //Instruction 62732
    //MAD
    t17.x = t9.x * 0.020835 + -0.085133;
    //Instruction 62733
    //MAD
    t17.x = t9.x * t17.x + 0.180141;
    //Instruction 62734
    //MAD
    t17.x = t9.x * t17.x + -0.330299;
    //Instruction 62735
    //MAD
    t9.x = t9.x * t17.x + 0.999866;
    //Instruction 62736
    //MUL
    t17.x = t9.x * t1.x;
    //Instruction 62737
    //MAD
    t17.x = t17.x * -2.000000 + 1.570796;
    //Instruction 62738
    //LT
    tb25 = abs(t4.y)<abs(t4.x);
    //Instruction 62739
    //AND
    t17.x = tb25 ? t17.x : float(0.0);
    //Instruction 62740
    //MAD
    t1.x = t1.x * t9.x + t17.x;
    //Instruction 62741
    //LT
    tb9 = t4.y<(-t4.y);
    //Instruction 62742
    //AND
    t9.x = tb9 ? -3.141593 : float(0.0);
    //Instruction 62743
    //ADD
    t1.x = t9.x + t1.x;
    //Instruction 62744
    //MIN
    t9.x = min(t4.y, (-t4.x));
    //Instruction 62745
    //MAX
    t17.x = max(t4.y, (-t4.x));
    //Instruction 62746
    //GE
    tb17 = t17.x>=(-t17.x);
    //Instruction 62747
    //LT
    tb9 = t9.x<(-t9.x);
    //Instruction 62748
    //AND
    ti9 = int(uint(tb17) & uint(tb9));
    //Instruction 62749
    //MOVC
    t1.x = (ti9 != 0) ? (-t1.x) : t1.x;
    //Instruction 62750
    //LT
    tb9 = t1.x<0.0;
    //Instruction 62751
    //AND
    t9.x = tb9 ? 6.283185 : float(0.0);
    //Instruction 62752
    //ADD
    t1.x = t9.x + t1.x;
    //Instruction 62753
    //ADD
    t1.x = t0.z + t1.x;
    //Instruction 62754
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu18) + 0].y + 0.500000;
    //Instruction 62755
    //ROUND_NI
    t1.x = floor(t1.x);
    //Instruction 62756
    //DIV
    t1.x = t1.x / _TreeInfo[int(tu18) + 0].x;
    //Instruction 62757
    //GE
    tb9 = t1.x>=(-t1.x);
    //Instruction 62758
    //FRC
    t1.x = fract(abs(t1.x));
    //Instruction 62759
    //MOVC
    t1.x = (tb9) ? t1.x : (-t1.x);
    //Instruction 62760
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu18) + 0].x + _TreeInfo[int(tu18) + 0].z;
    //Instruction 62761
    //FTOU
    tu1 = uint(t1.x);
    //Instruction 62762
    //LT
    tb9 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 62763
    //MAD
    t17.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 62764
    //MAD
    t4.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 62765
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb9)) ? t17.xy : t4.xy;
    //Instruction 62766
    //MUL
    t1.xyz = t2.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 62767
    //MAD
    t1.xyz = glstate_matrix_mvp[0].xyw * t2.xxx + t1.xyz;
    //Instruction 62768
    //MAD
    t1.xyz = glstate_matrix_mvp[2].xyw * t2.www + t1.xyz;
    //Instruction 62769
    //ADD
    t1.xyz = t1.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 62770
    //MUL
    t1.w = t1.y * _ProjectionParams.x;
    //Instruction 62771
    //MUL
    t4.xzw = t1.xzw * vec3(0.500000, 0.500000, 0.500000);
    //Instruction 62772
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 62773
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 62774
    //MUL
    t1.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 62775
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 62776
    //MUL
    t16_6 = t3.y * t3.y;
    //Instruction 62777
    //MAD
    t16_6 = t3.x * t3.x + (-t16_6);
    //Instruction 62778
    //MUL
    t16_0 = t3.yzzx * t3.xyzz;
    //Instruction 62779
    //DP4
    t16_7.x = dot(unity_SHBr, t16_0);
    //Instruction 62780
    //DP4
    t16_7.y = dot(unity_SHBg, t16_0);
    //Instruction 62781
    //DP4
    t16_7.z = dot(unity_SHBb, t16_0);
    //Instruction 62782
    //MAD
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(t16_6) + t16_7.xyz;
    //Instruction 62783
    //MUL
    t0 = t2.yyyy * _Object2World[1];
    //Instruction 62784
    //MAD
    t0 = _Object2World[0] * t2.xxxx + t0;
    //Instruction 62785
    //MAD
    t0 = _Object2World[2] * t2.wwww + t0;
    //Instruction 62786
    //ADD
    t0 = t0 + _Object2World[3];
    //Instruction 62787
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 62788
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 62789
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 62790
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 62791
    //MOV
    vs_TEXCOORD6 = t0;
    //Instruction 62792
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump float t16_6;
mediump vec3 t16_9;
mediump float t16_21;
void main()
{
    //Instruction 62608
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 62609
    //FRC
    t16_6 = fract(t16_0.y);
    //Instruction 62610
    //MOV
    t1.x = t16_0.x;
    //Instruction 62611
    //MAD
    t1.y = t16_6 * 0.062500 + unity_LODFade.y;
    //Instruction 62612
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 62613
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 62614
    //LT
    tb1 = t16_1<0.0;
    //Instruction 62615
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 62616
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 62617
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 62618
    //LT
    tb1 = t10_2<0.0;
    //Instruction 62619
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 62620
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 62621
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 62622
    //ADD
    t16_9.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 62623
    //MAD
    t16_9.xyz = vs_TEXCOORD3.zzz * t16_9.xyz + t10_0.xyz;
    //Instruction 62624
    //MAX
    t16_4.x = max(t16_9.z, t16_9.y);
    //Instruction 62625
    //MAX
    t16_4.x = max(t16_9.x, t16_4.x);
    //Instruction 62626
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 62627
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 62628
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_9.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 62629
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD2.xyz;
    //Instruction 62630
    //SAMPLE_C_LZ
    vec3 txVec59 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_21 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec59, 0.0);
    //Instruction 62631
    //ADD
    t16_4.x = (-_LightShadowData.x) + 1.0;
    //Instruction 62632
    //MAD
    t16_21 = t16_21 * t16_4.x + _LightShadowData.x;
    //Instruction 62633
    //MUL
    t16_4.xyz = vec3(t16_21) * _LightColor0.xyz;
    //Instruction 62634
    //MUL
    t16_4.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 62635
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 62636
    //MOV
    t16_0.w = 1.0;
    //Instruction 62637
    //DP4
    t16_5.x = dot(unity_SHAr, t16_0);
    //Instruction 62638
    //DP4
    t16_5.y = dot(unity_SHAg, t16_0);
    //Instruction 62639
    //DP4
    t16_5.z = dot(unity_SHAb, t16_0);
    //Instruction 62640
    //ADD
    t16_5.xyz = t16_5.xyz + vs_TEXCOORD5.xyz;
    //Instruction 62641
    //MUL
    t16_3.xyz = t16_3.xyz * t16_5.xyz;
    //Instruction 62642
    //DP3
    t16_21 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 62643
    //MAX
    t16_21 = max(t16_21, 0.0);
    //Instruction 62644
    //MAD
    t16_3.xyz = t16_4.xyz * vec3(t16_21) + t16_3.xyz;
    //Instruction 62645
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 62646
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 62647
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesVertex;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp vec3 angle_10;
  highp float tmpvar_11;
  tmpvar_11 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeInfo[int(tmpvar_11)];
  highp vec4 tmpvar_13;
  tmpvar_13 = _TreeSize[int(tmpvar_11)];
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (_glesVertex.xyz + tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceCameraPos - tmpvar_15));
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = -(tmpvar_16.z);
  tmpvar_17.z = tmpvar_16.x;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(tmpvar_17);
  highp vec3 tmpvar_19;
  tmpvar_19.y = 0.0;
  tmpvar_19.x = tmpvar_18.z;
  tmpvar_19.z = -(tmpvar_18.x);
  highp float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = (min (abs(
    (tmpvar_19.z / tmpvar_18.z)
  ), 1.0) / max (abs(
    (tmpvar_19.z / tmpvar_18.z)
  ), 1.0));
  highp float tmpvar_22;
  tmpvar_22 = (tmpvar_21 * tmpvar_21);
  tmpvar_22 = (((
    ((((
      ((((-0.01213232 * tmpvar_22) + 0.05368138) * tmpvar_22) - 0.1173503)
     * tmpvar_22) + 0.1938925) * tmpvar_22) - 0.3326756)
   * tmpvar_22) + 0.9999793) * tmpvar_21);
  tmpvar_22 = (tmpvar_22 + (float(
    (abs((tmpvar_19.z / tmpvar_18.z)) > 1.0)
  ) * (
    (tmpvar_22 * -2.0)
   + 1.570796)));
  tmpvar_20 = (tmpvar_22 * sign((tmpvar_19.z / tmpvar_18.z)));
  if ((abs(tmpvar_18.z) > (1e-08 * abs(tmpvar_19.z)))) {
    if ((tmpvar_18.z < 0.0)) {
      if ((tmpvar_19.z >= 0.0)) {
        tmpvar_20 += 3.141593;
      } else {
        tmpvar_20 = (tmpvar_20 - 3.141593);
      };
    };
  } else {
    tmpvar_20 = (sign(tmpvar_19.z) * 1.570796);
  };
  angle_10 = vec3(tmpvar_20);
  bvec3 tmpvar_23;
  tmpvar_23 = lessThan (vec3(tmpvar_20), vec3(0.0, 0.0, 0.0));
  float tmpvar_24;
  if (tmpvar_23.x) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_23.y) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  float tmpvar_26;
  if (tmpvar_23.z) {
    tmpvar_26 = 6.283185;
  } else {
    tmpvar_26 = 0.0;
  };
  vec3 tmpvar_27;
  tmpvar_27.x = tmpvar_24;
  tmpvar_27.y = tmpvar_25;
  tmpvar_27.z = tmpvar_26;
  angle_10 = (vec3(tmpvar_20) + tmpvar_27);
  highp vec4 tmpvar_28;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_28 = _InstanceData;
  } else {
    tmpvar_28 = tmpvar_1;
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_13.x) * tmpvar_28.x) * tmpvar_18);
  billboardPos_9.xz = tmpvar_29.xz;
  billboardPos_9.y = (tmpvar_29.y + ((
    (_glesMultiTexCoord0.y * tmpvar_13.y)
   + tmpvar_13.z) * tmpvar_28.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_30;
    vPos_30 = billboardPos_9;
    highp float fMoveAmount_31;
    highp float fAdjust_32;
    highp float fLength_33;
    fLength_33 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_34;
    tmpvar_34 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_32 = tmpvar_34;
    if ((tmpvar_34 != 0.0)) {
      fAdjust_32 = pow (tmpvar_34, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_35;
    tmpvar_35.zw = vec2(0.0, 0.0);
    tmpvar_35.x = (tmpvar_15.x + tmpvar_28.w);
    tmpvar_35.y = (tmpvar_15.y + (tmpvar_28.w * 0.8));
    highp vec4 tmpvar_36;
    highp vec4 tmpvar_37;
    tmpvar_37 = abs(((
      fract((tmpvar_35 + 0.5))
     * 2.0) - 1.0));
    tmpvar_36 = (((
      (tmpvar_37 * tmpvar_37)
     * 
      (3.0 - (2.0 * tmpvar_37))
    ) - 0.5) * 2.0);
    fMoveAmount_31 = ((_ST_WindGlobal.y * (tmpvar_36.x + 
      (tmpvar_36.y * tmpvar_36.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_31 = (fMoveAmount_31 * fAdjust_32);
    vPos_30.xz = (tmpvar_29.xz + (_ST_WindVector.xz * fMoveAmount_31));
    vPos_30 = (normalize(vPos_30) * fLength_33);
    billboardPos_9 = vPos_30;
  };
  tmpvar_7.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_7.w = 1.0;
  angle_10 = (angle_10 + tmpvar_28.z);
  highp vec3 tmpvar_38;
  tmpvar_38 = (floor((
    (angle_10 * tmpvar_12.y)
   + 0.5)) / tmpvar_12.xxx);
  highp vec3 tmpvar_39;
  tmpvar_39 = (fract(abs(tmpvar_38)) * tmpvar_12.xxx);
  highp float tmpvar_40;
  if ((tmpvar_38.x >= 0.0)) {
    tmpvar_40 = tmpvar_39.x;
  } else {
    tmpvar_40 = -(tmpvar_39.x);
  };
  highp vec4 tmpvar_41;
  tmpvar_41 = _ImageTexCoords[int((tmpvar_12.z + tmpvar_40))];
  if ((tmpvar_41.w < 0.0)) {
    tmpvar_8.xy = (tmpvar_41.xy - (tmpvar_41.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_8.xy = (tmpvar_41.xy + (tmpvar_41.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_42;
  tmpvar_42 = clamp ((fract(
    ((tmpvar_15.x + tmpvar_15.y) + tmpvar_15.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_42;
  highp vec4 hPos_43;
  hPos_43 = (glstate_matrix_mvp * tmpvar_7);
  mediump vec3 screenPos_44;
  highp vec4 o_45;
  highp vec4 tmpvar_46;
  tmpvar_46 = (hPos_43 * 0.5);
  highp vec2 tmpvar_47;
  tmpvar_47.x = tmpvar_46.x;
  tmpvar_47.y = (tmpvar_46.y * _ProjectionParams.x);
  o_45.xy = (tmpvar_47 + tmpvar_46.w);
  o_45.zw = hPos_43.zw;
  highp vec3 tmpvar_48;
  tmpvar_48 = o_45.xyw;
  screenPos_44 = tmpvar_48;
  screenPos_44.xy = (screenPos_44.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = _Color;
  highp vec3 tmpvar_49;
  tmpvar_49 = (_Object2World * tmpvar_7).xyz;
  highp vec4 v_50;
  v_50.x = _World2Object[0].x;
  v_50.y = _World2Object[1].x;
  v_50.z = _World2Object[2].x;
  v_50.w = _World2Object[3].x;
  highp vec4 v_51;
  v_51.x = _World2Object[0].z;
  v_51.y = _World2Object[1].z;
  v_51.z = _World2Object[2].z;
  v_51.w = _World2Object[3].z;
  highp vec3 tmpvar_52;
  tmpvar_52 = normalize(((v_50.xyz * tmpvar_18.z) + (v_51.xyz * tmpvar_19.z)));
  worldNormal_2 = tmpvar_52;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_53;
  tmpvar_53.w = 1.0;
  tmpvar_53.xyz = worldNormal_2;
  mediump vec4 normal_54;
  normal_54 = tmpvar_53;
  mediump vec3 x2_55;
  mediump vec4 tmpvar_56;
  tmpvar_56 = (normal_54.xyzz * normal_54.yzzx);
  x2_55.x = dot (unity_SHBr, tmpvar_56);
  x2_55.y = dot (unity_SHBg, tmpvar_56);
  x2_55.z = dot (unity_SHBb, tmpvar_56);
  highp vec3 lightColor0_57;
  lightColor0_57 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_58;
  lightColor1_58 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_59;
  lightColor2_59 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_60;
  lightColor3_60 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_61;
  lightAttenSq_61 = unity_4LightAtten0;
  highp vec3 normal_62;
  normal_62 = worldNormal_2;
  highp vec3 col_63;
  highp vec4 ndotl_64;
  highp vec4 lengthSq_65;
  highp vec4 tmpvar_66;
  tmpvar_66 = (unity_4LightPosX0 - tmpvar_49.x);
  highp vec4 tmpvar_67;
  tmpvar_67 = (unity_4LightPosY0 - tmpvar_49.y);
  highp vec4 tmpvar_68;
  tmpvar_68 = (unity_4LightPosZ0 - tmpvar_49.z);
  lengthSq_65 = (tmpvar_66 * tmpvar_66);
  lengthSq_65 = (lengthSq_65 + (tmpvar_67 * tmpvar_67));
  lengthSq_65 = (lengthSq_65 + (tmpvar_68 * tmpvar_68));
  ndotl_64 = (tmpvar_66 * normal_62.x);
  ndotl_64 = (ndotl_64 + (tmpvar_67 * normal_62.y));
  ndotl_64 = (ndotl_64 + (tmpvar_68 * normal_62.z));
  highp vec4 tmpvar_69;
  tmpvar_69 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_64 * inversesqrt(lengthSq_65)));
  ndotl_64 = tmpvar_69;
  highp vec4 tmpvar_70;
  tmpvar_70 = (tmpvar_69 * (1.0/((1.0 + 
    (lengthSq_65 * lightAttenSq_61)
  ))));
  col_63 = (lightColor0_57 * tmpvar_70.x);
  col_63 = (col_63 + (lightColor1_58 * tmpvar_70.y));
  col_63 = (col_63 + (lightColor2_59 * tmpvar_70.z));
  col_63 = (col_63 + (lightColor3_60 * tmpvar_70.w));
  tmpvar_5 = ((x2_55 + (unity_SHC.xyz * 
    ((normal_54.x * normal_54.x) - (normal_54.y * normal_54.y))
  )) + col_63);
  tmpvar_6 = (unity_World2Shadow[0] * (_Object2World * tmpvar_7));
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_49;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = screenPos_44;
  xlv_TEXCOORD5 = tmpvar_5;
  xlv_TEXCOORD6 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_13.x = tmpvar_14.x;
  projUV_13.y = ((fract(tmpvar_14.y) * 0.0625) + unity_LODFade.y);
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_16;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_17;
  x_17 = (tmpvar_10 - _Cutoff);
  if ((x_17 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_18;
  tmpvar_18 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_18.x, max (tmpvar_18.y, tmpvar_18.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_18 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp float shadow_19;
  shadow_19 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_19;
  mediump vec3 normalWorld_20;
  normalWorld_20 = tmpvar_5;
  mediump vec3 tmpvar_21;
  mediump vec3 tmpvar_22;
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = normalWorld_20;
  mediump vec3 x1_24;
  x1_24.x = dot (unity_SHAr, tmpvar_23);
  x1_24.y = dot (unity_SHAg, tmpvar_23);
  x1_24.z = dot (unity_SHAb, tmpvar_23);
  tmpvar_22 = (xlv_TEXCOORD5 + x1_24);
  tmpvar_21 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_21;
  lowp vec4 c_25;
  lowp vec4 c_26;
  lowp float diff_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_27 = tmpvar_28;
  c_26.xyz = ((tmpvar_9 * tmpvar_21) * diff_27);
  c_26.w = tmpvar_10;
  c_25.w = c_26.w;
  c_25.xyz = (c_26.xyz + (tmpvar_9 * tmpvar_22));
  c_4.xyz = c_25.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
highp vec4 t5;
mediump vec3 t16_6;
mediump vec3 t16_7;
highp vec3 t9;
highp int ti9;
bool tb9;
highp float t10;
highp vec2 t17;
bool tb17;
highp vec2 t18;
highp uint tu18;
bool tb25;
highp float t26;
highp float t27;
bool tb27;
void main()
{
    //Instruction 63875
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 63876
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 63877
    //LT
    tb9 = 0.0<_InstanceData.x;
    //Instruction 63878
    //MOVC
    t0 = (bool(tb9)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 63879
    //ADD
    t9.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 63880
    //ADD
    t2.x = t0.w + t9.x;
    //Instruction 63881
    //MAD
    t2.y = t0.w * 0.800000 + t9.y;
    //Instruction 63882
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 63883
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 63884
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 63885
    //MUL
    t18.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 63886
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 63887
    //MAD
    t2.xy = t18.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 63888
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 63889
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 63890
    //DIV
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 63891
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t10;
    //Instruction 63892
    //DIV
    t10 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 63893
    //MUL
    t18.x = in_COLOR0.w * 255.000000;
    //Instruction 63894
    //FTOU
    tu18 = uint(t18.x);
    //Instruction 63895
    //MAD
    t26 = in_TEXCOORD0.y * _TreeSize[int(tu18) + 0].y + _TreeSize[int(tu18) + 0].z;
    //Instruction 63896
    //MUL
    t3.y = t0.y * t26;
    //Instruction 63897
    //MAD
    t10 = (-t10) * 0.250000 + t3.y;
    //Instruction 63898
    //MAX
    t10 = max(t10, 0.0);
    //Instruction 63899
    //MUL
    t10 = t10 * _ST_WindGlobal.z;
    //Instruction 63900
    //LOG
    t26 = log2(t10);
    //Instruction 63901
    //MUL
    t26 = t26 * _ST_WindGlobal.w;
    //Instruction 63902
    //EXP
    t26 = exp2(t26);
    //Instruction 63903
    //NE
    tb27 = t10!=0.0;
    //Instruction 63904
    //MOVC
    t10 = (tb27) ? t26 : t10;
    //Instruction 63905
    //MUL
    t2.x = t10 * t2.x;
    //Instruction 63906
    //ADD
    t10 = in_TEXCOORD0.x + -0.500000;
    //Instruction 63907
    //MUL
    t10 = t10 * _TreeSize[int(tu18) + 0].x;
    //Instruction 63908
    //MUL
    t10 = t0.x * t10;
    //Instruction 63909
    //ADD
    t4.xyz = (-t9.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 63910
    //DP3
    t26 = dot(t4.xyz, t4.xyz);
    //Instruction 63911
    //RSQ
    t26 = inversesqrt(t26);
    //Instruction 63912
    //MUL
    t4.xy = vec2(t26) * t4.xz;
    //Instruction 63913
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 63914
    //DP2
    t26 = dot(t4.xz, t4.xw);
    //Instruction 63915
    //MUL
    t4.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 63916
    //RSQ
    t26 = inversesqrt(t26);
    //Instruction 63917
    //MUL
    t4.xy = vec2(t26) * t4.xy;
    //Instruction 63918
    //MUL
    t3.xz = vec2(t10) * t4.xy;
    //Instruction 63919
    //MAD
    t5.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 63920
    //MOV
    t5.y = t3.y;
    //Instruction 63921
    //DP3
    t2.x = dot(t5.xyz, t5.xyz);
    //Instruction 63922
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 63923
    //MUL
    t2.xyw = t2.xxx * t5.xyz;
    //Instruction 63924
    //DP3
    t27 = dot(t3.xyz, t3.xyz);
    //Instruction 63925
    //SQRT
    t27 = sqrt(t27);
    //Instruction 63926
    //MUL
    t2.xyw = t2.xyw * vec3(t27);
    //Instruction 63927
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 63928
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 63929
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 63930
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 63931
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 63932
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 63933
    //MUL
    t3.x = t4.y * _World2Object[0].x;
    //Instruction 63934
    //MUL
    t3.y = t4.y * _World2Object[1].x;
    //Instruction 63935
    //MUL
    t3.z = t4.y * _World2Object[2].x;
    //Instruction 63936
    //MUL
    t5.x = (-t4.x) * _World2Object[0].z;
    //Instruction 63937
    //MUL
    t5.y = (-t4.x) * _World2Object[1].z;
    //Instruction 63938
    //MUL
    t5.z = (-t4.x) * _World2Object[2].z;
    //Instruction 63939
    //ADD
    t3.xyz = t3.xyz + t5.xyz;
    //Instruction 63940
    //DP3
    t1.x = dot(t3.xyz, t3.xyz);
    //Instruction 63941
    //RSQ
    t1.x = inversesqrt(t1.x);
    //Instruction 63942
    //MUL
    t3.xyz = t1.xxx * t3.xyz;
    //Instruction 63943
    //MOV
    vs_TEXCOORD0.xyz = t3.xyz;
    //Instruction 63944
    //MUL
    t5.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 63945
    //MAD
    t5.xyz = _Object2World[0].xyz * t2.xxx + t5.xyz;
    //Instruction 63946
    //MAD
    t5.xyz = _Object2World[2].xyz * t2.www + t5.xyz;
    //Instruction 63947
    //ADD
    t5.xyz = t5.xyz + _Object2World[3].xyz;
    //Instruction 63948
    //MOV
    vs_TEXCOORD1.xyz = t5.xyz;
    //Instruction 63949
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 63950
    //ADD
    t1.x = t9.y + t9.x;
    //Instruction 63951
    //ADD
    t1.x = t9.z + t1.x;
    //Instruction 63952
    //FRC
    t1.x = fract(t1.x);
    //Instruction 63953
    //MUL
    t1.x = t1.x * _HueVariation.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 63954
    //MOV
    vs_TEXCOORD3.z = t1.x;
    //Instruction 63955
    //MAX
    t1.x = max(abs(t4.y), abs(t4.x));
    //Instruction 63956
    //DIV
    t1.x = float(1.0) / t1.x;
    //Instruction 63957
    //MIN
    t9.x = min(abs(t4.y), abs(t4.x));
    //Instruction 63958
    //MUL
    t1.x = t1.x * t9.x;
    //Instruction 63959
    //MUL
    t9.x = t1.x * t1.x;
    //Instruction 63960
    //MAD
    t17.x = t9.x * 0.020835 + -0.085133;
    //Instruction 63961
    //MAD
    t17.x = t9.x * t17.x + 0.180141;
    //Instruction 63962
    //MAD
    t17.x = t9.x * t17.x + -0.330299;
    //Instruction 63963
    //MAD
    t9.x = t9.x * t17.x + 0.999866;
    //Instruction 63964
    //MUL
    t17.x = t9.x * t1.x;
    //Instruction 63965
    //MAD
    t17.x = t17.x * -2.000000 + 1.570796;
    //Instruction 63966
    //LT
    tb25 = abs(t4.y)<abs(t4.x);
    //Instruction 63967
    //AND
    t17.x = tb25 ? t17.x : float(0.0);
    //Instruction 63968
    //MAD
    t1.x = t1.x * t9.x + t17.x;
    //Instruction 63969
    //LT
    tb9 = t4.y<(-t4.y);
    //Instruction 63970
    //AND
    t9.x = tb9 ? -3.141593 : float(0.0);
    //Instruction 63971
    //ADD
    t1.x = t9.x + t1.x;
    //Instruction 63972
    //MIN
    t9.x = min(t4.y, (-t4.x));
    //Instruction 63973
    //MAX
    t17.x = max(t4.y, (-t4.x));
    //Instruction 63974
    //GE
    tb17 = t17.x>=(-t17.x);
    //Instruction 63975
    //LT
    tb9 = t9.x<(-t9.x);
    //Instruction 63976
    //AND
    ti9 = int(uint(tb17) & uint(tb9));
    //Instruction 63977
    //MOVC
    t1.x = (ti9 != 0) ? (-t1.x) : t1.x;
    //Instruction 63978
    //LT
    tb9 = t1.x<0.0;
    //Instruction 63979
    //AND
    t9.x = tb9 ? 6.283185 : float(0.0);
    //Instruction 63980
    //ADD
    t1.x = t9.x + t1.x;
    //Instruction 63981
    //ADD
    t1.x = t0.z + t1.x;
    //Instruction 63982
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu18) + 0].y + 0.500000;
    //Instruction 63983
    //ROUND_NI
    t1.x = floor(t1.x);
    //Instruction 63984
    //DIV
    t1.x = t1.x / _TreeInfo[int(tu18) + 0].x;
    //Instruction 63985
    //GE
    tb9 = t1.x>=(-t1.x);
    //Instruction 63986
    //FRC
    t1.x = fract(abs(t1.x));
    //Instruction 63987
    //MOVC
    t1.x = (tb9) ? t1.x : (-t1.x);
    //Instruction 63988
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu18) + 0].x + _TreeInfo[int(tu18) + 0].z;
    //Instruction 63989
    //FTOU
    tu1 = uint(t1.x);
    //Instruction 63990
    //LT
    tb9 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 63991
    //MAD
    t17.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 63992
    //MAD
    t4.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 63993
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb9)) ? t17.xy : t4.xy;
    //Instruction 63994
    //MUL
    t1.xyz = t2.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 63995
    //MAD
    t1.xyz = glstate_matrix_mvp[0].xyw * t2.xxx + t1.xyz;
    //Instruction 63996
    //MAD
    t1.xyz = glstate_matrix_mvp[2].xyw * t2.www + t1.xyz;
    //Instruction 63997
    //ADD
    t1.xyz = t1.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 63998
    //MUL
    t1.w = t1.y * _ProjectionParams.x;
    //Instruction 63999
    //MUL
    t4.xzw = t1.xzw * vec3(0.500000, 0.500000, 0.500000);
    //Instruction 64000
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 64001
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 64002
    //MUL
    t1.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 64003
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 64004
    //ADD
    t0 = (-t5.xxxx) + unity_4LightPosX0;
    //Instruction 64005
    //ADD
    t1 = (-t5.yyyy) + unity_4LightPosY0;
    //Instruction 64006
    //ADD
    t4 = (-t5.zzzz) + unity_4LightPosZ0;
    //Instruction 64007
    //MUL
    t5 = t3.yyyy * t1;
    //Instruction 64008
    //MUL
    t1 = t1 * t1;
    //Instruction 64009
    //MAD
    t1 = t0 * t0 + t1;
    //Instruction 64010
    //MAD
    t0 = t0 * t3.xxxx + t5;
    //Instruction 64011
    //MAD
    t0 = t4 * t3.zzzz + t0;
    //Instruction 64012
    //MAD
    t1 = t4 * t4 + t1;
    //Instruction 64013
    //RSQ
    t4 = inversesqrt(t1);
    //Instruction 64014
    //MAD
    t1 = t1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 64015
    //DIV
    t1 = vec4(1.0, 1.0, 1.0, 1.0) / t1;
    //Instruction 64016
    //MUL
    t0 = t0 * t4;
    //Instruction 64017
    //MAX
    t0 = max(t0, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 64018
    //MUL
    t0 = t1 * t0;
    //Instruction 64019
    //MUL
    t1.xyz = t0.yyy * unity_LightColor[1].xyz;
    //Instruction 64020
    //MAD
    t1.xyz = unity_LightColor[0].xyz * t0.xxx + t1.xyz;
    //Instruction 64021
    //MAD
    t1.xyz = unity_LightColor[2].xyz * t0.zzz + t1.xyz;
    //Instruction 64022
    //MAD
    t1.xyz = unity_LightColor[3].xyz * t0.www + t1.xyz;
    //Instruction 64023
    //MUL
    t16_6.x = t3.y * t3.y;
    //Instruction 64024
    //MAD
    t16_6.x = t3.x * t3.x + (-t16_6.x);
    //Instruction 64025
    //MUL
    t16_0 = t3.yzzx * t3.xyzz;
    //Instruction 64026
    //DP4
    t16_7.x = dot(unity_SHBr, t16_0);
    //Instruction 64027
    //DP4
    t16_7.y = dot(unity_SHBg, t16_0);
    //Instruction 64028
    //DP4
    t16_7.z = dot(unity_SHBb, t16_0);
    //Instruction 64029
    //MAD
    t16_6.xyz = unity_SHC.xyz * t16_6.xxx + t16_7.xyz;
    //Instruction 64030
    //ADD
    t1.xyz = t1.xyz + t16_6.xyz;
    //Instruction 64031
    //MOV
    vs_TEXCOORD5.xyz = t1.xyz;
    //Instruction 64032
    //MUL
    t0 = t2.yyyy * _Object2World[1];
    //Instruction 64033
    //MAD
    t0 = _Object2World[0] * t2.xxxx + t0;
    //Instruction 64034
    //MAD
    t0 = _Object2World[2] * t2.wwww + t0;
    //Instruction 64035
    //ADD
    t0 = t0 + _Object2World[3];
    //Instruction 64036
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 64037
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 64038
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 64039
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 64040
    //MOV
    vs_TEXCOORD6 = t0;
    //Instruction 64041
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump float t16_6;
mediump vec3 t16_9;
mediump float t16_21;
void main()
{
    //Instruction 63835
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 63836
    //FRC
    t16_6 = fract(t16_0.y);
    //Instruction 63837
    //MOV
    t1.x = t16_0.x;
    //Instruction 63838
    //MAD
    t1.y = t16_6 * 0.062500 + unity_LODFade.y;
    //Instruction 63839
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 63840
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 63841
    //LT
    tb1 = t16_1<0.0;
    //Instruction 63842
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 63843
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 63844
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 63845
    //LT
    tb1 = t10_2<0.0;
    //Instruction 63846
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 63847
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 63848
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 63849
    //ADD
    t16_9.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 63850
    //MAD
    t16_9.xyz = vs_TEXCOORD3.zzz * t16_9.xyz + t10_0.xyz;
    //Instruction 63851
    //MAX
    t16_4.x = max(t16_9.z, t16_9.y);
    //Instruction 63852
    //MAX
    t16_4.x = max(t16_9.x, t16_4.x);
    //Instruction 63853
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 63854
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 63855
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_9.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 63856
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD2.xyz;
    //Instruction 63857
    //SAMPLE_C_LZ
    vec3 txVec72 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_21 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec72, 0.0);
    //Instruction 63858
    //ADD
    t16_4.x = (-_LightShadowData.x) + 1.0;
    //Instruction 63859
    //MAD
    t16_21 = t16_21 * t16_4.x + _LightShadowData.x;
    //Instruction 63860
    //MUL
    t16_4.xyz = vec3(t16_21) * _LightColor0.xyz;
    //Instruction 63861
    //MUL
    t16_4.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 63862
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 63863
    //MOV
    t16_0.w = 1.0;
    //Instruction 63864
    //DP4
    t16_5.x = dot(unity_SHAr, t16_0);
    //Instruction 63865
    //DP4
    t16_5.y = dot(unity_SHAg, t16_0);
    //Instruction 63866
    //DP4
    t16_5.z = dot(unity_SHAb, t16_0);
    //Instruction 63867
    //ADD
    t16_5.xyz = t16_5.xyz + vs_TEXCOORD5.xyz;
    //Instruction 63868
    //MUL
    t16_3.xyz = t16_3.xyz * t16_5.xyz;
    //Instruction 63869
    //DP3
    t16_21 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 63870
    //MAX
    t16_21 = max(t16_21, 0.0);
    //Instruction 63871
    //MAD
    t16_3.xyz = t16_4.xyz * vec3(t16_21) + t16_3.xyz;
    //Instruction 63872
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 63873
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 63874
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp vec3 angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_18.z / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_18.z / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  angle_9 = vec3(tmpvar_19);
  bvec3 tmpvar_22;
  tmpvar_22 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_23;
  if (tmpvar_22.x) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_22.y) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_22.z) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  vec3 tmpvar_26;
  tmpvar_26.x = tmpvar_23;
  tmpvar_26.y = tmpvar_24;
  tmpvar_26.z = tmpvar_25;
  angle_9 = (vec3(tmpvar_19) + tmpvar_26);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_8.xz = tmpvar_28.xz;
  billboardPos_8.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_8;
    highp float fMoveAmount_30;
    highp float fAdjust_31;
    highp float fLength_32;
    fLength_32 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_33;
    tmpvar_33 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_31 = tmpvar_33;
    if ((tmpvar_33 != 0.0)) {
      fAdjust_31 = pow (tmpvar_33, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_34;
    tmpvar_34.zw = vec2(0.0, 0.0);
    tmpvar_34.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_34.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_35;
    highp vec4 tmpvar_36;
    tmpvar_36 = abs(((
      fract((tmpvar_34 + 0.5))
     * 2.0) - 1.0));
    tmpvar_35 = (((
      (tmpvar_36 * tmpvar_36)
     * 
      (3.0 - (2.0 * tmpvar_36))
    ) - 0.5) * 2.0);
    fMoveAmount_30 = ((_ST_WindGlobal.y * (tmpvar_35.x + 
      (tmpvar_35.y * tmpvar_35.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_30 = (fMoveAmount_30 * fAdjust_31);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * fMoveAmount_30));
    vPos_29 = (normalize(vPos_29) * fLength_32);
    billboardPos_8 = vPos_29;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (angle_9 + tmpvar_27.z);
  highp vec3 tmpvar_37;
  tmpvar_37 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_38;
  tmpvar_38 = (fract(abs(tmpvar_37)) * tmpvar_11.xxx);
  highp float tmpvar_39;
  if ((tmpvar_37.x >= 0.0)) {
    tmpvar_39 = tmpvar_38.x;
  } else {
    tmpvar_39 = -(tmpvar_38.x);
  };
  highp vec4 tmpvar_40;
  tmpvar_40 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_39))];
  if ((tmpvar_40.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_40.xy - (tmpvar_40.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_40.xy + (tmpvar_40.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_41;
  hPos_41 = (glstate_matrix_mvp * tmpvar_6);
  mediump vec3 screenPos_42;
  highp vec4 o_43;
  highp vec4 tmpvar_44;
  tmpvar_44 = (hPos_41 * 0.5);
  highp vec2 tmpvar_45;
  tmpvar_45.x = tmpvar_44.x;
  tmpvar_45.y = (tmpvar_44.y * _ProjectionParams.x);
  o_43.xy = (tmpvar_45 + tmpvar_44.w);
  o_43.zw = hPos_41.zw;
  highp vec3 tmpvar_46;
  tmpvar_46 = o_43.xyw;
  screenPos_42 = tmpvar_46;
  screenPos_42.xy = (screenPos_42.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = _Color;
  highp vec3 tmpvar_47;
  tmpvar_47 = (_Object2World * tmpvar_6).xyz;
  highp vec4 v_48;
  v_48.x = _World2Object[0].x;
  v_48.y = _World2Object[1].x;
  v_48.z = _World2Object[2].x;
  v_48.w = _World2Object[3].x;
  highp vec4 v_49;
  v_49.x = _World2Object[0].z;
  v_49.y = _World2Object[1].z;
  v_49.z = _World2Object[2].z;
  v_49.w = _World2Object[3].z;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(((v_48.xyz * tmpvar_17.z) + (v_49.xyz * tmpvar_18.z)));
  worldNormal_4 = tmpvar_50;
  highp mat3 tmpvar_51;
  tmpvar_51[0] = _Object2World[0].xyz;
  tmpvar_51[1] = _Object2World[1].xyz;
  tmpvar_51[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_52;
  tmpvar_52 = normalize((tmpvar_51 * tmpvar_17));
  worldTangent_3 = tmpvar_52;
  lowp vec3 tmpvar_53;
  tmpvar_53 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_54;
  tmpvar_54 = -(tmpvar_53);
  worldBinormal_2 = tmpvar_54;
  highp vec4 tmpvar_55;
  tmpvar_55.x = worldTangent_3.x;
  tmpvar_55.y = worldBinormal_2.x;
  tmpvar_55.z = worldNormal_4.x;
  tmpvar_55.w = tmpvar_47.x;
  highp vec4 tmpvar_56;
  tmpvar_56.x = worldTangent_3.y;
  tmpvar_56.y = worldBinormal_2.y;
  tmpvar_56.z = worldNormal_4.y;
  tmpvar_56.w = tmpvar_47.y;
  highp vec4 tmpvar_57;
  tmpvar_57.x = worldTangent_3.z;
  tmpvar_57.y = worldBinormal_2.z;
  tmpvar_57.z = worldNormal_4.z;
  tmpvar_57.w = tmpvar_47.z;
  lowp vec4 tmpvar_58;
  tmpvar_58.w = 1.0;
  tmpvar_58.xyz = worldNormal_4;
  mediump vec4 normal_59;
  normal_59 = tmpvar_58;
  mediump vec3 x2_60;
  mediump vec4 tmpvar_61;
  tmpvar_61 = (normal_59.xyzz * normal_59.yzzx);
  x2_60.x = dot (unity_SHBr, tmpvar_61);
  x2_60.y = dot (unity_SHBg, tmpvar_61);
  x2_60.z = dot (unity_SHBb, tmpvar_61);
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_55;
  xlv_TEXCOORD1 = tmpvar_56;
  xlv_TEXCOORD2 = tmpvar_57;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = screenPos_42;
  xlv_TEXCOORD6 = (x2_60 + (unity_SHC.xyz * (
    (normal_59.x * normal_59.x)
   - 
    (normal_59.y * normal_59.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_11.x = tmpvar_12.x;
  projUV_11.y = ((fract(tmpvar_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_10 = tmpvar_14;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_15;
  x_15 = (tmpvar_9 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_16;
  tmpvar_16 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD0.xyz, tmpvar_16);
  worldN_3.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD1.xyz, tmpvar_16);
  worldN_3.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD2.xyz, tmpvar_16);
  worldN_3.z = tmpvar_19;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_20;
  normalWorld_20 = worldN_3;
  mediump vec3 tmpvar_21;
  mediump vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = normalWorld_20;
  mediump vec3 x1_23;
  x1_23.x = dot (unity_SHAr, tmpvar_22);
  x1_23.y = dot (unity_SHAg, tmpvar_22);
  x1_23.z = dot (unity_SHAb, tmpvar_22);
  tmpvar_21 = (xlv_TEXCOORD6 + x1_23);
  lowp vec4 c_24;
  lowp vec4 c_25;
  lowp float diff_26;
  mediump float tmpvar_27;
  tmpvar_27 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_26 = tmpvar_27;
  c_25.xyz = ((tmpvar_8 * tmpvar_1) * diff_26);
  c_25.w = tmpvar_9;
  c_24.w = c_25.w;
  c_24.xyz = (c_25.xyz + (tmpvar_8 * tmpvar_21));
  c_4.xyz = c_24.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
highp vec3 t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
bool tb2;
highp vec4 t3;
highp vec4 t4;
lowp vec3 t10_5;
highp vec3 t6;
mediump float t16_7;
mediump vec3 t16_8;
highp vec3 t10;
highp int ti10;
bool tb10;
highp float t11;
bool tb13;
highp vec2 t19;
bool tb19;
highp vec2 t20;
highp uint tu20;
highp float t28;
bool tb28;
highp float t29;
bool tb30;
void main()
{
    //Instruction 64073
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 64074
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 64075
    //ADD
    t10.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 64076
    //LT
    tb2 = 0.0<_InstanceData.x;
    //Instruction 64077
    //MOVC
    t0 = (bool(tb2)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 64078
    //ADD
    t2.x = t0.w + t10.x;
    //Instruction 64079
    //MAD
    t2.y = t0.w * 0.800000 + t10.y;
    //Instruction 64080
    //ADD
    t10.xyz = (-t10.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 64081
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 64082
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 64083
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 64084
    //MUL
    t20.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 64085
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 64086
    //MAD
    t2.xy = t20.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 64087
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 64088
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 64089
    //DIV
    t11 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 64090
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t11;
    //Instruction 64091
    //DIV
    t11 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 64092
    //MUL
    t20.x = in_COLOR0.w * 255.000000;
    //Instruction 64093
    //FTOU
    tu20 = uint(t20.x);
    //Instruction 64094
    //MAD
    t29 = in_TEXCOORD0.y * _TreeSize[int(tu20) + 0].y + _TreeSize[int(tu20) + 0].z;
    //Instruction 64095
    //MUL
    t3.y = t0.y * t29;
    //Instruction 64096
    //MAD
    t11 = (-t11) * 0.250000 + t3.y;
    //Instruction 64097
    //MAX
    t11 = max(t11, 0.0);
    //Instruction 64098
    //MUL
    t11 = t11 * _ST_WindGlobal.z;
    //Instruction 64099
    //LOG
    t29 = log2(t11);
    //Instruction 64100
    //MUL
    t29 = t29 * _ST_WindGlobal.w;
    //Instruction 64101
    //EXP
    t29 = exp2(t29);
    //Instruction 64102
    //NE
    tb30 = t11!=0.0;
    //Instruction 64103
    //MOVC
    t11 = (tb30) ? t29 : t11;
    //Instruction 64104
    //MUL
    t2.x = t11 * t2.x;
    //Instruction 64105
    //ADD
    t11 = in_TEXCOORD0.x + -0.500000;
    //Instruction 64106
    //MUL
    t11 = t11 * _TreeSize[int(tu20) + 0].x;
    //Instruction 64107
    //MUL
    t11 = t0.x * t11;
    //Instruction 64108
    //DP3
    t19.x = dot(t10.xyz, t10.xyz);
    //Instruction 64109
    //RSQ
    t19.x = inversesqrt(t19.x);
    //Instruction 64110
    //MUL
    t4.xy = t19.xx * t10.xz;
    //Instruction 64111
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 64112
    //DP2
    t10.x = dot(t4.xz, t4.xw);
    //Instruction 64113
    //MUL
    t19.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 64114
    //RSQ
    t10.x = inversesqrt(t10.x);
    //Instruction 64115
    //MUL
    t10.xy = t10.xx * t19.xy;
    //Instruction 64116
    //MUL
    t3.xz = t10.xy * vec2(t11);
    //Instruction 64117
    //MAD
    t4.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 64118
    //MOV
    t4.y = t3.y;
    //Instruction 64119
    //DP3
    t28 = dot(t4.xyz, t4.xyz);
    //Instruction 64120
    //RSQ
    t28 = inversesqrt(t28);
    //Instruction 64121
    //MUL
    t2.xyw = vec3(t28) * t4.xyz;
    //Instruction 64122
    //DP3
    t28 = dot(t3.xyz, t3.xyz);
    //Instruction 64123
    //SQRT
    t28 = sqrt(t28);
    //Instruction 64124
    //MUL
    t2.xyw = vec3(t28) * t2.xyw;
    //Instruction 64125
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 64126
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 64127
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 64128
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 64129
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 64130
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 64131
    //MUL
    t3.x = t10.y * _World2Object[0].x;
    //Instruction 64132
    //MUL
    t3.y = t10.y * _World2Object[1].x;
    //Instruction 64133
    //MUL
    t3.zw = t10.yy * _World2Object[2].xx;
    //Instruction 64134
    //MUL
    t4.x = (-t10.x) * _World2Object[0].z;
    //Instruction 64135
    //MUL
    t4.y = (-t10.x) * _World2Object[1].z;
    //Instruction 64136
    //MUL
    t4.zw = (-t10.xx) * _World2Object[2].zz;
    //Instruction 64137
    //ADD
    t3 = t3 + t4;
    //Instruction 64138
    //DP3
    t1.x = dot(t3.xyw, t3.xyw);
    //Instruction 64139
    //RSQ
    t1.x = inversesqrt(t1.x);
    //Instruction 64140
    //MUL
    t3 = t1.xxxx * t3;
    //Instruction 64141
    //MUL
    t4.xyz = t10.yyy * _Object2World[2].yzx;
    //Instruction 64142
    //MAD
    t4.xyz = _Object2World[0].yzx * t10.xxx + t4.xyz;
    //Instruction 64143
    //DP3
    t1.x = dot(t4.xyz, t4.xyz);
    //Instruction 64144
    //RSQ
    t1.x = inversesqrt(t1.x);
    //Instruction 64145
    //MUL
    t4.xyz = t1.xxx * t4.xyz;
    //Instruction 64146
    //MUL
    t10_5.xyz = t3.wxy * t4.xyz;
    //Instruction 64147
    //MAD
    t10_5.xyz = t3.ywx * t4.yzx + (-t10_5.xyz);
    //Instruction 64148
    //MOV
    vs_TEXCOORD0.y = (-t10_5.x);
    //Instruction 64149
    //MUL
    t6.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 64150
    //MAD
    t6.xyz = _Object2World[0].xyz * t2.xxx + t6.xyz;
    //Instruction 64151
    //MAD
    t6.xyz = _Object2World[2].xyz * t2.www + t6.xyz;
    //Instruction 64152
    //ADD
    t6.xyz = t6.xyz + _Object2World[3].xyz;
    //Instruction 64153
    //MOV
    vs_TEXCOORD0.w = t6.x;
    //Instruction 64154
    //MOV
    vs_TEXCOORD0.z = t3.x;
    //Instruction 64155
    //MOV
    vs_TEXCOORD0.x = t4.z;
    //Instruction 64156
    //MOV
    vs_TEXCOORD1.w = t6.y;
    //Instruction 64157
    //MOV
    vs_TEXCOORD2.w = t6.z;
    //Instruction 64158
    //MOV
    vs_TEXCOORD1.x = t4.x;
    //Instruction 64159
    //MOV
    vs_TEXCOORD2.x = t4.y;
    //Instruction 64160
    //MOV
    vs_TEXCOORD1.z = t3.y;
    //Instruction 64161
    //MOV
    vs_TEXCOORD1.y = (-t10_5.y);
    //Instruction 64162
    //MOV
    vs_TEXCOORD2.y = (-t10_5.z);
    //Instruction 64163
    //MOV
    vs_TEXCOORD2.z = t3.w;
    //Instruction 64164
    //MOV
    vs_TEXCOORD3 = _Color;
    //Instruction 64165
    //MAX
    t1.x = max(abs(t10.y), abs(t10.x));
    //Instruction 64166
    //DIV
    t1.x = float(1.0) / t1.x;
    //Instruction 64167
    //MIN
    t28 = min(abs(t10.y), abs(t10.x));
    //Instruction 64168
    //MUL
    t1.x = t1.x * t28;
    //Instruction 64169
    //MUL
    t28 = t1.x * t1.x;
    //Instruction 64170
    //MAD
    t4.x = t28 * 0.020835 + -0.085133;
    //Instruction 64171
    //MAD
    t4.x = t28 * t4.x + 0.180141;
    //Instruction 64172
    //MAD
    t4.x = t28 * t4.x + -0.330299;
    //Instruction 64173
    //MAD
    t28 = t28 * t4.x + 0.999866;
    //Instruction 64174
    //MUL
    t4.x = t28 * t1.x;
    //Instruction 64175
    //MAD
    t4.x = t4.x * -2.000000 + 1.570796;
    //Instruction 64176
    //LT
    tb13 = abs(t10.y)<abs(t10.x);
    //Instruction 64177
    //AND
    t4.x = tb13 ? t4.x : float(0.0);
    //Instruction 64178
    //MAD
    t1.x = t1.x * t28 + t4.x;
    //Instruction 64179
    //LT
    tb28 = t10.y<(-t10.y);
    //Instruction 64180
    //AND
    t28 = tb28 ? -3.141593 : float(0.0);
    //Instruction 64181
    //ADD
    t1.x = t28 + t1.x;
    //Instruction 64182
    //MIN
    t28 = min(t10.y, (-t10.x));
    //Instruction 64183
    //MAX
    t10.x = max(t10.y, (-t10.x));
    //Instruction 64184
    //GE
    tb10 = t10.x>=(-t10.x);
    //Instruction 64185
    //LT
    tb19 = t28<(-t28);
    //Instruction 64186
    //AND
    ti10 = int(uint(tb10) & uint(tb19));
    //Instruction 64187
    //MOVC
    t1.x = (ti10 != 0) ? (-t1.x) : t1.x;
    //Instruction 64188
    //LT
    tb10 = t1.x<0.0;
    //Instruction 64189
    //AND
    t10.x = tb10 ? 6.283185 : float(0.0);
    //Instruction 64190
    //ADD
    t1.x = t10.x + t1.x;
    //Instruction 64191
    //ADD
    t1.x = t0.z + t1.x;
    //Instruction 64192
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu20) + 0].y + 0.500000;
    //Instruction 64193
    //ROUND_NI
    t1.x = floor(t1.x);
    //Instruction 64194
    //DIV
    t1.x = t1.x / _TreeInfo[int(tu20) + 0].x;
    //Instruction 64195
    //GE
    tb10 = t1.x>=(-t1.x);
    //Instruction 64196
    //FRC
    t1.x = fract(abs(t1.x));
    //Instruction 64197
    //MOVC
    t1.x = (tb10) ? t1.x : (-t1.x);
    //Instruction 64198
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu20) + 0].x + _TreeInfo[int(tu20) + 0].z;
    //Instruction 64199
    //FTOU
    tu1 = uint(t1.x);
    //Instruction 64200
    //LT
    tb10 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 64201
    //MAD
    t19.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 64202
    //MAD
    t4.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 64203
    //MOVC
    vs_TEXCOORD4.xy = (bool(tb10)) ? t19.xy : t4.xy;
    //Instruction 64204
    //MOV
    vs_TEXCOORD4.z = 0.0;
    //Instruction 64205
    //MUL
    t1.xyz = t2.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 64206
    //MAD
    t1.xyz = glstate_matrix_mvp[0].xyw * t2.xxx + t1.xyz;
    //Instruction 64207
    //MAD
    t1.xyz = glstate_matrix_mvp[2].xyw * t2.www + t1.xyz;
    //Instruction 64208
    //ADD
    t1.xyz = t1.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 64209
    //MUL
    t2.xz = t1.xz * vec2(0.500000, 0.500000);
    //Instruction 64210
    //MUL
    t28 = t1.y * _ProjectionParams.x;
    //Instruction 64211
    //MUL
    t2.w = t28 * 0.500000;
    //Instruction 64212
    //ADD
    t2.xy = t2.zz + t2.xw;
    //Instruction 64213
    //MUL
    t2.xy = t2.xy * _ScreenParams.xy;
    //Instruction 64214
    //MUL
    t1.xy = t2.xy * vec2(0.250000, 0.250000);
    //Instruction 64215
    //MOV
    vs_TEXCOORD5.xyz = t1.xyz;
    //Instruction 64216
    //MUL
    t16_7 = t3.y * t3.y;
    //Instruction 64217
    //MAD
    t16_7 = t3.x * t3.x + (-t16_7);
    //Instruction 64218
    //MUL
    t16_0 = t3.ywzx * t3;
    //Instruction 64219
    //DP4
    t16_8.x = dot(unity_SHBr, t16_0);
    //Instruction 64220
    //DP4
    t16_8.y = dot(unity_SHBg, t16_0);
    //Instruction 64221
    //DP4
    t16_8.z = dot(unity_SHBb, t16_0);
    //Instruction 64222
    //MAD
    vs_TEXCOORD6.xyz = unity_SHC.xyz * vec3(t16_7) + t16_8.xyz;
    //Instruction 64223
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump float t16_6;
mediump float t16_21;
void main()
{
    //Instruction 64042
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    //Instruction 64043
    //FRC
    t16_6 = fract(t16_0.y);
    //Instruction 64044
    //MOV
    t1.x = t16_0.x;
    //Instruction 64045
    //MAD
    t1.y = t16_6 * 0.062500 + unity_LODFade.y;
    //Instruction 64046
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 64047
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 64048
    //LT
    tb1 = t16_1<0.0;
    //Instruction 64049
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 64050
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    //Instruction 64051
    //MAD
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 64052
    //MUL
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD3.xyz;
    //Instruction 64053
    //LT
    tb1 = t10_2.x<0.0;
    //Instruction 64054
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 64055
    //MUL
    t16_4.xyz = t16_3.xyz * _LightColor0.xyz;
    //Instruction 64056
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 64057
    //MAD
    t10_2.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 64058
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    //Instruction 64059
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    //Instruction 64060
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    //Instruction 64061
    //MOV
    t0.w = 1.0;
    //Instruction 64062
    //DP4
    t16_5.x = dot(unity_SHAr, t0);
    //Instruction 64063
    //DP4
    t16_5.y = dot(unity_SHAg, t0);
    //Instruction 64064
    //DP4
    t16_5.z = dot(unity_SHAb, t0);
    //Instruction 64065
    //DP3
    t16_21 = dot(t0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 64066
    //MAX
    t16_21 = max(t16_21, 0.0);
    //Instruction 64067
    //ADD
    t16_5.xyz = t16_5.xyz + vs_TEXCOORD6.xyz;
    //Instruction 64068
    //MUL
    t16_3.xyz = t16_3.xyz * t16_5.xyz;
    //Instruction 64069
    //MAD
    t16_3.xyz = t16_4.xyz * vec3(t16_21) + t16_3.xyz;
    //Instruction 64070
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 64071
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 64072
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesVertex;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp vec3 angle_10;
  highp float tmpvar_11;
  tmpvar_11 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeInfo[int(tmpvar_11)];
  highp vec4 tmpvar_13;
  tmpvar_13 = _TreeSize[int(tmpvar_11)];
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (_glesVertex.xyz + tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceCameraPos - tmpvar_15));
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = -(tmpvar_16.z);
  tmpvar_17.z = tmpvar_16.x;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(tmpvar_17);
  highp vec3 tmpvar_19;
  tmpvar_19.y = 0.0;
  tmpvar_19.x = tmpvar_18.z;
  tmpvar_19.z = -(tmpvar_18.x);
  highp float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = (min (abs(
    (tmpvar_19.z / tmpvar_18.z)
  ), 1.0) / max (abs(
    (tmpvar_19.z / tmpvar_18.z)
  ), 1.0));
  highp float tmpvar_22;
  tmpvar_22 = (tmpvar_21 * tmpvar_21);
  tmpvar_22 = (((
    ((((
      ((((-0.01213232 * tmpvar_22) + 0.05368138) * tmpvar_22) - 0.1173503)
     * tmpvar_22) + 0.1938925) * tmpvar_22) - 0.3326756)
   * tmpvar_22) + 0.9999793) * tmpvar_21);
  tmpvar_22 = (tmpvar_22 + (float(
    (abs((tmpvar_19.z / tmpvar_18.z)) > 1.0)
  ) * (
    (tmpvar_22 * -2.0)
   + 1.570796)));
  tmpvar_20 = (tmpvar_22 * sign((tmpvar_19.z / tmpvar_18.z)));
  if ((abs(tmpvar_18.z) > (1e-08 * abs(tmpvar_19.z)))) {
    if ((tmpvar_18.z < 0.0)) {
      if ((tmpvar_19.z >= 0.0)) {
        tmpvar_20 += 3.141593;
      } else {
        tmpvar_20 = (tmpvar_20 - 3.141593);
      };
    };
  } else {
    tmpvar_20 = (sign(tmpvar_19.z) * 1.570796);
  };
  angle_10 = vec3(tmpvar_20);
  bvec3 tmpvar_23;
  tmpvar_23 = lessThan (vec3(tmpvar_20), vec3(0.0, 0.0, 0.0));
  float tmpvar_24;
  if (tmpvar_23.x) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_23.y) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  float tmpvar_26;
  if (tmpvar_23.z) {
    tmpvar_26 = 6.283185;
  } else {
    tmpvar_26 = 0.0;
  };
  vec3 tmpvar_27;
  tmpvar_27.x = tmpvar_24;
  tmpvar_27.y = tmpvar_25;
  tmpvar_27.z = tmpvar_26;
  angle_10 = (vec3(tmpvar_20) + tmpvar_27);
  highp vec4 tmpvar_28;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_28 = _InstanceData;
  } else {
    tmpvar_28 = tmpvar_1;
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_13.x) * tmpvar_28.x) * tmpvar_18);
  billboardPos_9.xz = tmpvar_29.xz;
  billboardPos_9.y = (tmpvar_29.y + ((
    (_glesMultiTexCoord0.y * tmpvar_13.y)
   + tmpvar_13.z) * tmpvar_28.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_30;
    vPos_30 = billboardPos_9;
    highp float fMoveAmount_31;
    highp float fAdjust_32;
    highp float fLength_33;
    fLength_33 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_34;
    tmpvar_34 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_32 = tmpvar_34;
    if ((tmpvar_34 != 0.0)) {
      fAdjust_32 = pow (tmpvar_34, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_35;
    tmpvar_35.zw = vec2(0.0, 0.0);
    tmpvar_35.x = (tmpvar_15.x + tmpvar_28.w);
    tmpvar_35.y = (tmpvar_15.y + (tmpvar_28.w * 0.8));
    highp vec4 tmpvar_36;
    highp vec4 tmpvar_37;
    tmpvar_37 = abs(((
      fract((tmpvar_35 + 0.5))
     * 2.0) - 1.0));
    tmpvar_36 = (((
      (tmpvar_37 * tmpvar_37)
     * 
      (3.0 - (2.0 * tmpvar_37))
    ) - 0.5) * 2.0);
    fMoveAmount_31 = ((_ST_WindGlobal.y * (tmpvar_36.x + 
      (tmpvar_36.y * tmpvar_36.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_31 = (fMoveAmount_31 * fAdjust_32);
    vPos_30.xz = (tmpvar_29.xz + (_ST_WindVector.xz * fMoveAmount_31));
    vPos_30 = (normalize(vPos_30) * fLength_33);
    billboardPos_9 = vPos_30;
  };
  tmpvar_7.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_7.w = 1.0;
  angle_10 = (angle_10 + tmpvar_28.z);
  highp vec3 tmpvar_38;
  tmpvar_38 = (floor((
    (angle_10 * tmpvar_12.y)
   + 0.5)) / tmpvar_12.xxx);
  highp vec3 tmpvar_39;
  tmpvar_39 = (fract(abs(tmpvar_38)) * tmpvar_12.xxx);
  highp float tmpvar_40;
  if ((tmpvar_38.x >= 0.0)) {
    tmpvar_40 = tmpvar_39.x;
  } else {
    tmpvar_40 = -(tmpvar_39.x);
  };
  highp vec4 tmpvar_41;
  tmpvar_41 = _ImageTexCoords[int((tmpvar_12.z + tmpvar_40))];
  if ((tmpvar_41.w < 0.0)) {
    tmpvar_8.xy = (tmpvar_41.xy - (tmpvar_41.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_8.xy = (tmpvar_41.xy + (tmpvar_41.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_42;
  hPos_42 = (glstate_matrix_mvp * tmpvar_7);
  mediump vec3 screenPos_43;
  highp vec4 o_44;
  highp vec4 tmpvar_45;
  tmpvar_45 = (hPos_42 * 0.5);
  highp vec2 tmpvar_46;
  tmpvar_46.x = tmpvar_45.x;
  tmpvar_46.y = (tmpvar_45.y * _ProjectionParams.x);
  o_44.xy = (tmpvar_46 + tmpvar_45.w);
  o_44.zw = hPos_42.zw;
  highp vec3 tmpvar_47;
  tmpvar_47 = o_44.xyw;
  screenPos_43 = tmpvar_47;
  screenPos_43.xy = (screenPos_43.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = _Color;
  highp vec3 tmpvar_48;
  tmpvar_48 = (_Object2World * tmpvar_7).xyz;
  highp vec4 v_49;
  v_49.x = _World2Object[0].x;
  v_49.y = _World2Object[1].x;
  v_49.z = _World2Object[2].x;
  v_49.w = _World2Object[3].x;
  highp vec4 v_50;
  v_50.x = _World2Object[0].z;
  v_50.y = _World2Object[1].z;
  v_50.z = _World2Object[2].z;
  v_50.w = _World2Object[3].z;
  highp vec3 tmpvar_51;
  tmpvar_51 = normalize(((v_49.xyz * tmpvar_18.z) + (v_50.xyz * tmpvar_19.z)));
  worldNormal_4 = tmpvar_51;
  highp mat3 tmpvar_52;
  tmpvar_52[0] = _Object2World[0].xyz;
  tmpvar_52[1] = _Object2World[1].xyz;
  tmpvar_52[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_53;
  tmpvar_53 = normalize((tmpvar_52 * tmpvar_18));
  worldTangent_3 = tmpvar_53;
  lowp vec3 tmpvar_54;
  tmpvar_54 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_55;
  tmpvar_55 = -(tmpvar_54);
  worldBinormal_2 = tmpvar_55;
  highp vec4 tmpvar_56;
  tmpvar_56.x = worldTangent_3.x;
  tmpvar_56.y = worldBinormal_2.x;
  tmpvar_56.z = worldNormal_4.x;
  tmpvar_56.w = tmpvar_48.x;
  highp vec4 tmpvar_57;
  tmpvar_57.x = worldTangent_3.y;
  tmpvar_57.y = worldBinormal_2.y;
  tmpvar_57.z = worldNormal_4.y;
  tmpvar_57.w = tmpvar_48.y;
  highp vec4 tmpvar_58;
  tmpvar_58.x = worldTangent_3.z;
  tmpvar_58.y = worldBinormal_2.z;
  tmpvar_58.z = worldNormal_4.z;
  tmpvar_58.w = tmpvar_48.z;
  lowp vec4 tmpvar_59;
  tmpvar_59.w = 1.0;
  tmpvar_59.xyz = worldNormal_4;
  mediump vec4 normal_60;
  normal_60 = tmpvar_59;
  mediump vec3 x2_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = (normal_60.xyzz * normal_60.yzzx);
  x2_61.x = dot (unity_SHBr, tmpvar_62);
  x2_61.y = dot (unity_SHBg, tmpvar_62);
  x2_61.z = dot (unity_SHBb, tmpvar_62);
  tmpvar_6 = (unity_World2Shadow[0] * (_Object2World * tmpvar_7));
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_TEXCOORD0 = tmpvar_56;
  xlv_TEXCOORD1 = tmpvar_57;
  xlv_TEXCOORD2 = tmpvar_58;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = screenPos_43;
  xlv_TEXCOORD6 = (x2_61 + (unity_SHC.xyz * (
    (normal_60.x * normal_60.x)
   - 
    (normal_60.y * normal_60.y)
  )));
  xlv_TEXCOORD7 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_16;
  x_16 = (tmpvar_10 - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7).x > 
    (xlv_TEXCOORD7.z / xlv_TEXCOORD7.w)
  )), _LightShadowData.x);
  tmpvar_18 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD0.xyz, tmpvar_17);
  worldN_4.x = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (xlv_TEXCOORD1.xyz, tmpvar_17);
  worldN_4.y = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (xlv_TEXCOORD2.xyz, tmpvar_17);
  worldN_4.z = tmpvar_22;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_18;
  mediump vec3 normalWorld_23;
  normalWorld_23 = worldN_4;
  mediump vec3 tmpvar_24;
  mediump vec3 tmpvar_25;
  mediump vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = normalWorld_23;
  mediump vec3 x1_27;
  x1_27.x = dot (unity_SHAr, tmpvar_26);
  x1_27.y = dot (unity_SHAg, tmpvar_26);
  x1_27.z = dot (unity_SHAb, tmpvar_26);
  tmpvar_25 = (xlv_TEXCOORD6 + x1_27);
  tmpvar_24 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_24;
  lowp vec4 c_28;
  lowp vec4 c_29;
  lowp float diff_30;
  mediump float tmpvar_31;
  tmpvar_31 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_30 = tmpvar_31;
  c_29.xyz = ((tmpvar_9 * tmpvar_24) * diff_30);
  c_29.w = tmpvar_10;
  c_28.w = c_29.w;
  c_28.xyz = (c_29.xyz + (tmpvar_9 * tmpvar_25));
  c_5.xyz = c_28.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesVertex;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp vec3 angle_10;
  highp float tmpvar_11;
  tmpvar_11 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeInfo[int(tmpvar_11)];
  highp vec4 tmpvar_13;
  tmpvar_13 = _TreeSize[int(tmpvar_11)];
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (_glesVertex.xyz + tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceCameraPos - tmpvar_15));
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = -(tmpvar_16.z);
  tmpvar_17.z = tmpvar_16.x;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(tmpvar_17);
  highp vec3 tmpvar_19;
  tmpvar_19.y = 0.0;
  tmpvar_19.x = tmpvar_18.z;
  tmpvar_19.z = -(tmpvar_18.x);
  highp float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = (min (abs(
    (tmpvar_19.z / tmpvar_18.z)
  ), 1.0) / max (abs(
    (tmpvar_19.z / tmpvar_18.z)
  ), 1.0));
  highp float tmpvar_22;
  tmpvar_22 = (tmpvar_21 * tmpvar_21);
  tmpvar_22 = (((
    ((((
      ((((-0.01213232 * tmpvar_22) + 0.05368138) * tmpvar_22) - 0.1173503)
     * tmpvar_22) + 0.1938925) * tmpvar_22) - 0.3326756)
   * tmpvar_22) + 0.9999793) * tmpvar_21);
  tmpvar_22 = (tmpvar_22 + (float(
    (abs((tmpvar_19.z / tmpvar_18.z)) > 1.0)
  ) * (
    (tmpvar_22 * -2.0)
   + 1.570796)));
  tmpvar_20 = (tmpvar_22 * sign((tmpvar_19.z / tmpvar_18.z)));
  if ((abs(tmpvar_18.z) > (1e-08 * abs(tmpvar_19.z)))) {
    if ((tmpvar_18.z < 0.0)) {
      if ((tmpvar_19.z >= 0.0)) {
        tmpvar_20 += 3.141593;
      } else {
        tmpvar_20 = (tmpvar_20 - 3.141593);
      };
    };
  } else {
    tmpvar_20 = (sign(tmpvar_19.z) * 1.570796);
  };
  angle_10 = vec3(tmpvar_20);
  bvec3 tmpvar_23;
  tmpvar_23 = lessThan (vec3(tmpvar_20), vec3(0.0, 0.0, 0.0));
  float tmpvar_24;
  if (tmpvar_23.x) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_23.y) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  float tmpvar_26;
  if (tmpvar_23.z) {
    tmpvar_26 = 6.283185;
  } else {
    tmpvar_26 = 0.0;
  };
  vec3 tmpvar_27;
  tmpvar_27.x = tmpvar_24;
  tmpvar_27.y = tmpvar_25;
  tmpvar_27.z = tmpvar_26;
  angle_10 = (vec3(tmpvar_20) + tmpvar_27);
  highp vec4 tmpvar_28;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_28 = _InstanceData;
  } else {
    tmpvar_28 = tmpvar_1;
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_13.x) * tmpvar_28.x) * tmpvar_18);
  billboardPos_9.xz = tmpvar_29.xz;
  billboardPos_9.y = (tmpvar_29.y + ((
    (_glesMultiTexCoord0.y * tmpvar_13.y)
   + tmpvar_13.z) * tmpvar_28.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_30;
    vPos_30 = billboardPos_9;
    highp float fMoveAmount_31;
    highp float fAdjust_32;
    highp float fLength_33;
    fLength_33 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_34;
    tmpvar_34 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_32 = tmpvar_34;
    if ((tmpvar_34 != 0.0)) {
      fAdjust_32 = pow (tmpvar_34, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_35;
    tmpvar_35.zw = vec2(0.0, 0.0);
    tmpvar_35.x = (tmpvar_15.x + tmpvar_28.w);
    tmpvar_35.y = (tmpvar_15.y + (tmpvar_28.w * 0.8));
    highp vec4 tmpvar_36;
    highp vec4 tmpvar_37;
    tmpvar_37 = abs(((
      fract((tmpvar_35 + 0.5))
     * 2.0) - 1.0));
    tmpvar_36 = (((
      (tmpvar_37 * tmpvar_37)
     * 
      (3.0 - (2.0 * tmpvar_37))
    ) - 0.5) * 2.0);
    fMoveAmount_31 = ((_ST_WindGlobal.y * (tmpvar_36.x + 
      (tmpvar_36.y * tmpvar_36.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_31 = (fMoveAmount_31 * fAdjust_32);
    vPos_30.xz = (tmpvar_29.xz + (_ST_WindVector.xz * fMoveAmount_31));
    vPos_30 = (normalize(vPos_30) * fLength_33);
    billboardPos_9 = vPos_30;
  };
  tmpvar_7.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_7.w = 1.0;
  angle_10 = (angle_10 + tmpvar_28.z);
  highp vec3 tmpvar_38;
  tmpvar_38 = (floor((
    (angle_10 * tmpvar_12.y)
   + 0.5)) / tmpvar_12.xxx);
  highp vec3 tmpvar_39;
  tmpvar_39 = (fract(abs(tmpvar_38)) * tmpvar_12.xxx);
  highp float tmpvar_40;
  if ((tmpvar_38.x >= 0.0)) {
    tmpvar_40 = tmpvar_39.x;
  } else {
    tmpvar_40 = -(tmpvar_39.x);
  };
  highp vec4 tmpvar_41;
  tmpvar_41 = _ImageTexCoords[int((tmpvar_12.z + tmpvar_40))];
  if ((tmpvar_41.w < 0.0)) {
    tmpvar_8.xy = (tmpvar_41.xy - (tmpvar_41.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_8.xy = (tmpvar_41.xy + (tmpvar_41.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_42;
  hPos_42 = (glstate_matrix_mvp * tmpvar_7);
  mediump vec3 screenPos_43;
  highp vec4 o_44;
  highp vec4 tmpvar_45;
  tmpvar_45 = (hPos_42 * 0.5);
  highp vec2 tmpvar_46;
  tmpvar_46.x = tmpvar_45.x;
  tmpvar_46.y = (tmpvar_45.y * _ProjectionParams.x);
  o_44.xy = (tmpvar_46 + tmpvar_45.w);
  o_44.zw = hPos_42.zw;
  highp vec3 tmpvar_47;
  tmpvar_47 = o_44.xyw;
  screenPos_43 = tmpvar_47;
  screenPos_43.xy = (screenPos_43.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = _Color;
  highp vec3 tmpvar_48;
  tmpvar_48 = (_Object2World * tmpvar_7).xyz;
  highp vec4 v_49;
  v_49.x = _World2Object[0].x;
  v_49.y = _World2Object[1].x;
  v_49.z = _World2Object[2].x;
  v_49.w = _World2Object[3].x;
  highp vec4 v_50;
  v_50.x = _World2Object[0].z;
  v_50.y = _World2Object[1].z;
  v_50.z = _World2Object[2].z;
  v_50.w = _World2Object[3].z;
  highp vec3 tmpvar_51;
  tmpvar_51 = normalize(((v_49.xyz * tmpvar_18.z) + (v_50.xyz * tmpvar_19.z)));
  worldNormal_4 = tmpvar_51;
  highp mat3 tmpvar_52;
  tmpvar_52[0] = _Object2World[0].xyz;
  tmpvar_52[1] = _Object2World[1].xyz;
  tmpvar_52[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_53;
  tmpvar_53 = normalize((tmpvar_52 * tmpvar_18));
  worldTangent_3 = tmpvar_53;
  lowp vec3 tmpvar_54;
  tmpvar_54 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_55;
  tmpvar_55 = -(tmpvar_54);
  worldBinormal_2 = tmpvar_55;
  highp vec4 tmpvar_56;
  tmpvar_56.x = worldTangent_3.x;
  tmpvar_56.y = worldBinormal_2.x;
  tmpvar_56.z = worldNormal_4.x;
  tmpvar_56.w = tmpvar_48.x;
  highp vec4 tmpvar_57;
  tmpvar_57.x = worldTangent_3.y;
  tmpvar_57.y = worldBinormal_2.y;
  tmpvar_57.z = worldNormal_4.y;
  tmpvar_57.w = tmpvar_48.y;
  highp vec4 tmpvar_58;
  tmpvar_58.x = worldTangent_3.z;
  tmpvar_58.y = worldBinormal_2.z;
  tmpvar_58.z = worldNormal_4.z;
  tmpvar_58.w = tmpvar_48.z;
  lowp vec4 tmpvar_59;
  tmpvar_59.w = 1.0;
  tmpvar_59.xyz = worldNormal_4;
  mediump vec4 normal_60;
  normal_60 = tmpvar_59;
  mediump vec3 x2_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = (normal_60.xyzz * normal_60.yzzx);
  x2_61.x = dot (unity_SHBr, tmpvar_62);
  x2_61.y = dot (unity_SHBg, tmpvar_62);
  x2_61.z = dot (unity_SHBb, tmpvar_62);
  highp vec3 lightColor0_63;
  lightColor0_63 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_64;
  lightColor1_64 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_65;
  lightColor2_65 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_66;
  lightColor3_66 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_67;
  lightAttenSq_67 = unity_4LightAtten0;
  highp vec3 normal_68;
  normal_68 = worldNormal_4;
  highp vec3 col_69;
  highp vec4 ndotl_70;
  highp vec4 lengthSq_71;
  highp vec4 tmpvar_72;
  tmpvar_72 = (unity_4LightPosX0 - tmpvar_48.x);
  highp vec4 tmpvar_73;
  tmpvar_73 = (unity_4LightPosY0 - tmpvar_48.y);
  highp vec4 tmpvar_74;
  tmpvar_74 = (unity_4LightPosZ0 - tmpvar_48.z);
  lengthSq_71 = (tmpvar_72 * tmpvar_72);
  lengthSq_71 = (lengthSq_71 + (tmpvar_73 * tmpvar_73));
  lengthSq_71 = (lengthSq_71 + (tmpvar_74 * tmpvar_74));
  ndotl_70 = (tmpvar_72 * normal_68.x);
  ndotl_70 = (ndotl_70 + (tmpvar_73 * normal_68.y));
  ndotl_70 = (ndotl_70 + (tmpvar_74 * normal_68.z));
  highp vec4 tmpvar_75;
  tmpvar_75 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_70 * inversesqrt(lengthSq_71)));
  ndotl_70 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = (tmpvar_75 * (1.0/((1.0 + 
    (lengthSq_71 * lightAttenSq_67)
  ))));
  col_69 = (lightColor0_63 * tmpvar_76.x);
  col_69 = (col_69 + (lightColor1_64 * tmpvar_76.y));
  col_69 = (col_69 + (lightColor2_65 * tmpvar_76.z));
  col_69 = (col_69 + (lightColor3_66 * tmpvar_76.w));
  tmpvar_6 = ((x2_61 + (unity_SHC.xyz * 
    ((normal_60.x * normal_60.x) - (normal_60.y * normal_60.y))
  )) + col_69);
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_TEXCOORD0 = tmpvar_56;
  xlv_TEXCOORD1 = tmpvar_57;
  xlv_TEXCOORD2 = tmpvar_58;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = screenPos_43;
  xlv_TEXCOORD6 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_11.x = tmpvar_12.x;
  projUV_11.y = ((fract(tmpvar_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_10 = tmpvar_14;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_15;
  x_15 = (tmpvar_9 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_16;
  tmpvar_16 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD0.xyz, tmpvar_16);
  worldN_3.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD1.xyz, tmpvar_16);
  worldN_3.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD2.xyz, tmpvar_16);
  worldN_3.z = tmpvar_19;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_20;
  normalWorld_20 = worldN_3;
  mediump vec3 tmpvar_21;
  mediump vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = normalWorld_20;
  mediump vec3 x1_23;
  x1_23.x = dot (unity_SHAr, tmpvar_22);
  x1_23.y = dot (unity_SHAg, tmpvar_22);
  x1_23.z = dot (unity_SHAb, tmpvar_22);
  tmpvar_21 = (xlv_TEXCOORD6 + x1_23);
  lowp vec4 c_24;
  lowp vec4 c_25;
  lowp float diff_26;
  mediump float tmpvar_27;
  tmpvar_27 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_26 = tmpvar_27;
  c_25.xyz = ((tmpvar_8 * tmpvar_1) * diff_26);
  c_25.w = tmpvar_9;
  c_24.w = c_25.w;
  c_24.xyz = (c_25.xyz + (tmpvar_8 * tmpvar_21));
  c_4.xyz = c_24.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
bool tb2;
highp vec4 t3;
highp vec4 t4;
highp vec4 t5;
bool tb5;
lowp vec3 t10_6;
mediump vec3 t16_7;
mediump vec3 t16_8;
highp vec3 t10;
highp int ti10;
bool tb10;
highp float t11;
highp vec2 t19;
bool tb19;
highp vec2 t20;
highp uint tu20;
highp float t28;
bool tb28;
highp float t29;
highp float t30;
bool tb30;
void main()
{
    //Instruction 64255
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 64256
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 64257
    //ADD
    t10.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 64258
    //LT
    tb2 = 0.0<_InstanceData.x;
    //Instruction 64259
    //MOVC
    t0 = (bool(tb2)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 64260
    //ADD
    t2.x = t0.w + t10.x;
    //Instruction 64261
    //MAD
    t2.y = t0.w * 0.800000 + t10.y;
    //Instruction 64262
    //ADD
    t10.xyz = (-t10.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 64263
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 64264
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 64265
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 64266
    //MUL
    t20.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 64267
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 64268
    //MAD
    t2.xy = t20.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 64269
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 64270
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 64271
    //DIV
    t11 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 64272
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t11;
    //Instruction 64273
    //DIV
    t11 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 64274
    //MUL
    t20.x = in_COLOR0.w * 255.000000;
    //Instruction 64275
    //FTOU
    tu20 = uint(t20.x);
    //Instruction 64276
    //MAD
    t29 = in_TEXCOORD0.y * _TreeSize[int(tu20) + 0].y + _TreeSize[int(tu20) + 0].z;
    //Instruction 64277
    //MUL
    t3.y = t0.y * t29;
    //Instruction 64278
    //MAD
    t11 = (-t11) * 0.250000 + t3.y;
    //Instruction 64279
    //MAX
    t11 = max(t11, 0.0);
    //Instruction 64280
    //MUL
    t11 = t11 * _ST_WindGlobal.z;
    //Instruction 64281
    //LOG
    t29 = log2(t11);
    //Instruction 64282
    //MUL
    t29 = t29 * _ST_WindGlobal.w;
    //Instruction 64283
    //EXP
    t29 = exp2(t29);
    //Instruction 64284
    //NE
    tb30 = t11!=0.0;
    //Instruction 64285
    //MOVC
    t11 = (tb30) ? t29 : t11;
    //Instruction 64286
    //MUL
    t2.x = t11 * t2.x;
    //Instruction 64287
    //ADD
    t11 = in_TEXCOORD0.x + -0.500000;
    //Instruction 64288
    //MUL
    t11 = t11 * _TreeSize[int(tu20) + 0].x;
    //Instruction 64289
    //MUL
    t11 = t0.x * t11;
    //Instruction 64290
    //DP3
    t19.x = dot(t10.xyz, t10.xyz);
    //Instruction 64291
    //RSQ
    t19.x = inversesqrt(t19.x);
    //Instruction 64292
    //MUL
    t4.xy = t19.xx * t10.xz;
    //Instruction 64293
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 64294
    //DP2
    t10.x = dot(t4.xz, t4.xw);
    //Instruction 64295
    //MUL
    t19.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 64296
    //RSQ
    t10.x = inversesqrt(t10.x);
    //Instruction 64297
    //MUL
    t10.xy = t10.xx * t19.xy;
    //Instruction 64298
    //MUL
    t3.xz = t10.xy * vec2(t11);
    //Instruction 64299
    //MAD
    t4.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 64300
    //MOV
    t4.y = t3.y;
    //Instruction 64301
    //DP3
    t28 = dot(t4.xyz, t4.xyz);
    //Instruction 64302
    //RSQ
    t28 = inversesqrt(t28);
    //Instruction 64303
    //MUL
    t2.xyw = vec3(t28) * t4.xyz;
    //Instruction 64304
    //DP3
    t28 = dot(t3.xyz, t3.xyz);
    //Instruction 64305
    //SQRT
    t28 = sqrt(t28);
    //Instruction 64306
    //MUL
    t2.xyw = vec3(t28) * t2.xyw;
    //Instruction 64307
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 64308
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 64309
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 64310
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 64311
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 64312
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 64313
    //MUL
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 64314
    //MAD
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    //Instruction 64315
    //MAD
    t3.xyz = _Object2World[2].xyz * t2.www + t3.xyz;
    //Instruction 64316
    //ADD
    t3.xyz = t3.xyz + _Object2World[3].xyz;
    //Instruction 64317
    //MOV
    vs_TEXCOORD0.w = t3.x;
    //Instruction 64318
    //MUL
    t4.x = t10.y * _World2Object[0].x;
    //Instruction 64319
    //MUL
    t4.y = t10.y * _World2Object[1].x;
    //Instruction 64320
    //MUL
    t4.zw = t10.yy * _World2Object[2].xx;
    //Instruction 64321
    //MUL
    t5.x = (-t10.x) * _World2Object[0].z;
    //Instruction 64322
    //MUL
    t5.y = (-t10.x) * _World2Object[1].z;
    //Instruction 64323
    //MUL
    t5.zw = (-t10.xx) * _World2Object[2].zz;
    //Instruction 64324
    //ADD
    t4 = t4 + t5;
    //Instruction 64325
    //DP3
    t1.x = dot(t4.xyw, t4.xyw);
    //Instruction 64326
    //RSQ
    t1.x = inversesqrt(t1.x);
    //Instruction 64327
    //MUL
    t4 = t1.xxxx * t4;
    //Instruction 64328
    //MUL
    t5.xyz = t10.yyy * _Object2World[2].yzx;
    //Instruction 64329
    //MAD
    t5.xyz = _Object2World[0].yzx * t10.xxx + t5.xyz;
    //Instruction 64330
    //DP3
    t1.x = dot(t5.xyz, t5.xyz);
    //Instruction 64331
    //RSQ
    t1.x = inversesqrt(t1.x);
    //Instruction 64332
    //MUL
    t5.xyz = t1.xxx * t5.xyz;
    //Instruction 64333
    //MUL
    t10_6.xyz = t4.wxy * t5.xyz;
    //Instruction 64334
    //MAD
    t10_6.xyz = t4.ywx * t5.yzx + (-t10_6.xyz);
    //Instruction 64335
    //MOV
    vs_TEXCOORD0.y = (-t10_6.x);
    //Instruction 64336
    //MOV
    vs_TEXCOORD0.z = t4.x;
    //Instruction 64337
    //MOV
    vs_TEXCOORD0.x = t5.z;
    //Instruction 64338
    //MOV
    vs_TEXCOORD1.w = t3.y;
    //Instruction 64339
    //MOV
    vs_TEXCOORD1.x = t5.x;
    //Instruction 64340
    //MOV
    vs_TEXCOORD2.x = t5.y;
    //Instruction 64341
    //MOV
    vs_TEXCOORD1.y = (-t10_6.y);
    //Instruction 64342
    //MOV
    vs_TEXCOORD2.y = (-t10_6.z);
    //Instruction 64343
    //MOV
    vs_TEXCOORD1.z = t4.y;
    //Instruction 64344
    //MOV
    vs_TEXCOORD2.w = t3.z;
    //Instruction 64345
    //MOV
    vs_TEXCOORD2.z = t4.w;
    //Instruction 64346
    //MOV
    vs_TEXCOORD3 = _Color;
    //Instruction 64347
    //MAX
    t1.x = max(abs(t10.y), abs(t10.x));
    //Instruction 64348
    //DIV
    t1.x = float(1.0) / t1.x;
    //Instruction 64349
    //MIN
    t28 = min(abs(t10.y), abs(t10.x));
    //Instruction 64350
    //MUL
    t1.x = t1.x * t28;
    //Instruction 64351
    //MUL
    t28 = t1.x * t1.x;
    //Instruction 64352
    //MAD
    t30 = t28 * 0.020835 + -0.085133;
    //Instruction 64353
    //MAD
    t30 = t28 * t30 + 0.180141;
    //Instruction 64354
    //MAD
    t30 = t28 * t30 + -0.330299;
    //Instruction 64355
    //MAD
    t28 = t28 * t30 + 0.999866;
    //Instruction 64356
    //MUL
    t30 = t28 * t1.x;
    //Instruction 64357
    //MAD
    t30 = t30 * -2.000000 + 1.570796;
    //Instruction 64358
    //LT
    tb5 = abs(t10.y)<abs(t10.x);
    //Instruction 64359
    //AND
    t30 = tb5 ? t30 : float(0.0);
    //Instruction 64360
    //MAD
    t1.x = t1.x * t28 + t30;
    //Instruction 64361
    //LT
    tb28 = t10.y<(-t10.y);
    //Instruction 64362
    //AND
    t28 = tb28 ? -3.141593 : float(0.0);
    //Instruction 64363
    //ADD
    t1.x = t28 + t1.x;
    //Instruction 64364
    //MIN
    t28 = min(t10.y, (-t10.x));
    //Instruction 64365
    //MAX
    t10.x = max(t10.y, (-t10.x));
    //Instruction 64366
    //GE
    tb10 = t10.x>=(-t10.x);
    //Instruction 64367
    //LT
    tb19 = t28<(-t28);
    //Instruction 64368
    //AND
    ti10 = int(uint(tb10) & uint(tb19));
    //Instruction 64369
    //MOVC
    t1.x = (ti10 != 0) ? (-t1.x) : t1.x;
    //Instruction 64370
    //LT
    tb10 = t1.x<0.0;
    //Instruction 64371
    //AND
    t10.x = tb10 ? 6.283185 : float(0.0);
    //Instruction 64372
    //ADD
    t1.x = t10.x + t1.x;
    //Instruction 64373
    //ADD
    t1.x = t0.z + t1.x;
    //Instruction 64374
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu20) + 0].y + 0.500000;
    //Instruction 64375
    //ROUND_NI
    t1.x = floor(t1.x);
    //Instruction 64376
    //DIV
    t1.x = t1.x / _TreeInfo[int(tu20) + 0].x;
    //Instruction 64377
    //GE
    tb10 = t1.x>=(-t1.x);
    //Instruction 64378
    //FRC
    t1.x = fract(abs(t1.x));
    //Instruction 64379
    //MOVC
    t1.x = (tb10) ? t1.x : (-t1.x);
    //Instruction 64380
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu20) + 0].x + _TreeInfo[int(tu20) + 0].z;
    //Instruction 64381
    //FTOU
    tu1 = uint(t1.x);
    //Instruction 64382
    //LT
    tb10 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 64383
    //MAD
    t19.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 64384
    //MAD
    t5.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 64385
    //MOVC
    vs_TEXCOORD4.xy = (bool(tb10)) ? t19.xy : t5.xy;
    //Instruction 64386
    //MOV
    vs_TEXCOORD4.z = 0.0;
    //Instruction 64387
    //MUL
    t1.xyz = t2.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 64388
    //MAD
    t1.xyz = glstate_matrix_mvp[0].xyw * t2.xxx + t1.xyz;
    //Instruction 64389
    //MAD
    t1.xyz = glstate_matrix_mvp[2].xyw * t2.www + t1.xyz;
    //Instruction 64390
    //ADD
    t1.xyz = t1.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 64391
    //MUL
    t2.xz = t1.xz * vec2(0.500000, 0.500000);
    //Instruction 64392
    //MUL
    t28 = t1.y * _ProjectionParams.x;
    //Instruction 64393
    //MUL
    t2.w = t28 * 0.500000;
    //Instruction 64394
    //ADD
    t2.xy = t2.zz + t2.xw;
    //Instruction 64395
    //MUL
    t2.xy = t2.xy * _ScreenParams.xy;
    //Instruction 64396
    //MUL
    t1.xy = t2.xy * vec2(0.250000, 0.250000);
    //Instruction 64397
    //MOV
    vs_TEXCOORD5.xyz = t1.xyz;
    //Instruction 64398
    //ADD
    t0 = (-t3.zzzz) + unity_4LightPosZ0;
    //Instruction 64399
    //ADD
    t1 = (-t3.xxxx) + unity_4LightPosX0;
    //Instruction 64400
    //ADD
    t2 = (-t3.yyyy) + unity_4LightPosY0;
    //Instruction 64401
    //MUL
    t3 = t4.yyyy * t2;
    //Instruction 64402
    //MUL
    t2 = t2 * t2;
    //Instruction 64403
    //MAD
    t2 = t1 * t1 + t2;
    //Instruction 64404
    //MAD
    t1 = t1 * t4.xxxx + t3;
    //Instruction 64405
    //MAD
    t1 = t0 * t4.wwww + t1;
    //Instruction 64406
    //MAD
    t0 = t0 * t0 + t2;
    //Instruction 64407
    //RSQ
    t2 = inversesqrt(t0);
    //Instruction 64408
    //MAD
    t0 = t0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 64409
    //DIV
    t0 = vec4(1.0, 1.0, 1.0, 1.0) / t0;
    //Instruction 64410
    //MUL
    t1 = t1 * t2;
    //Instruction 64411
    //MAX
    t1 = max(t1, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 64412
    //MUL
    t0 = t0 * t1;
    //Instruction 64413
    //MUL
    t1.xyz = t0.yyy * unity_LightColor[1].xyz;
    //Instruction 64414
    //MAD
    t1.xyz = unity_LightColor[0].xyz * t0.xxx + t1.xyz;
    //Instruction 64415
    //MAD
    t1.xyz = unity_LightColor[2].xyz * t0.zzz + t1.xyz;
    //Instruction 64416
    //MAD
    t1.xyz = unity_LightColor[3].xyz * t0.www + t1.xyz;
    //Instruction 64417
    //MUL
    t16_7.x = t4.y * t4.y;
    //Instruction 64418
    //MAD
    t16_7.x = t4.x * t4.x + (-t16_7.x);
    //Instruction 64419
    //MUL
    t16_0 = t4.ywzx * t4;
    //Instruction 64420
    //DP4
    t16_8.x = dot(unity_SHBr, t16_0);
    //Instruction 64421
    //DP4
    t16_8.y = dot(unity_SHBg, t16_0);
    //Instruction 64422
    //DP4
    t16_8.z = dot(unity_SHBb, t16_0);
    //Instruction 64423
    //MAD
    t16_7.xyz = unity_SHC.xyz * t16_7.xxx + t16_8.xyz;
    //Instruction 64424
    //ADD
    t1.xyz = t1.xyz + t16_7.xyz;
    //Instruction 64425
    //MOV
    vs_TEXCOORD6.xyz = t1.xyz;
    //Instruction 64426
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump float t16_6;
mediump float t16_21;
void main()
{
    //Instruction 64224
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    //Instruction 64225
    //FRC
    t16_6 = fract(t16_0.y);
    //Instruction 64226
    //MOV
    t1.x = t16_0.x;
    //Instruction 64227
    //MAD
    t1.y = t16_6 * 0.062500 + unity_LODFade.y;
    //Instruction 64228
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 64229
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 64230
    //LT
    tb1 = t16_1<0.0;
    //Instruction 64231
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 64232
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    //Instruction 64233
    //MAD
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 64234
    //MUL
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD3.xyz;
    //Instruction 64235
    //LT
    tb1 = t10_2.x<0.0;
    //Instruction 64236
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 64237
    //MUL
    t16_4.xyz = t16_3.xyz * _LightColor0.xyz;
    //Instruction 64238
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 64239
    //MAD
    t10_2.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 64240
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    //Instruction 64241
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    //Instruction 64242
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    //Instruction 64243
    //MOV
    t0.w = 1.0;
    //Instruction 64244
    //DP4
    t16_5.x = dot(unity_SHAr, t0);
    //Instruction 64245
    //DP4
    t16_5.y = dot(unity_SHAg, t0);
    //Instruction 64246
    //DP4
    t16_5.z = dot(unity_SHAb, t0);
    //Instruction 64247
    //DP3
    t16_21 = dot(t0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 64248
    //MAX
    t16_21 = max(t16_21, 0.0);
    //Instruction 64249
    //ADD
    t16_5.xyz = t16_5.xyz + vs_TEXCOORD6.xyz;
    //Instruction 64250
    //MUL
    t16_3.xyz = t16_3.xyz * t16_5.xyz;
    //Instruction 64251
    //MAD
    t16_3.xyz = t16_4.xyz * vec3(t16_21) + t16_3.xyz;
    //Instruction 64252
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 64253
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 64254
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = _glesVertex;
  mediump vec3 tmpvar_9;
  highp vec3 billboardPos_10;
  highp vec3 angle_11;
  highp float tmpvar_12;
  tmpvar_12 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_13;
  tmpvar_13 = _TreeInfo[int(tmpvar_12)];
  highp vec4 tmpvar_14;
  tmpvar_14 = _TreeSize[int(tmpvar_12)];
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  highp vec3 tmpvar_16;
  tmpvar_16 = (_glesVertex.xyz + tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((_WorldSpaceCameraPos - tmpvar_16));
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = -(tmpvar_17.z);
  tmpvar_18.z = tmpvar_17.x;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(tmpvar_18);
  highp vec3 tmpvar_20;
  tmpvar_20.y = 0.0;
  tmpvar_20.x = tmpvar_19.z;
  tmpvar_20.z = -(tmpvar_19.x);
  highp float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (min (abs(
    (tmpvar_20.z / tmpvar_19.z)
  ), 1.0) / max (abs(
    (tmpvar_20.z / tmpvar_19.z)
  ), 1.0));
  highp float tmpvar_23;
  tmpvar_23 = (tmpvar_22 * tmpvar_22);
  tmpvar_23 = (((
    ((((
      ((((-0.01213232 * tmpvar_23) + 0.05368138) * tmpvar_23) - 0.1173503)
     * tmpvar_23) + 0.1938925) * tmpvar_23) - 0.3326756)
   * tmpvar_23) + 0.9999793) * tmpvar_22);
  tmpvar_23 = (tmpvar_23 + (float(
    (abs((tmpvar_20.z / tmpvar_19.z)) > 1.0)
  ) * (
    (tmpvar_23 * -2.0)
   + 1.570796)));
  tmpvar_21 = (tmpvar_23 * sign((tmpvar_20.z / tmpvar_19.z)));
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_20.z)))) {
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_20.z >= 0.0)) {
        tmpvar_21 += 3.141593;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.141593);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_20.z) * 1.570796);
  };
  angle_11 = vec3(tmpvar_21);
  bvec3 tmpvar_24;
  tmpvar_24 = lessThan (vec3(tmpvar_21), vec3(0.0, 0.0, 0.0));
  float tmpvar_25;
  if (tmpvar_24.x) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  float tmpvar_26;
  if (tmpvar_24.y) {
    tmpvar_26 = 6.283185;
  } else {
    tmpvar_26 = 0.0;
  };
  float tmpvar_27;
  if (tmpvar_24.z) {
    tmpvar_27 = 6.283185;
  } else {
    tmpvar_27 = 0.0;
  };
  vec3 tmpvar_28;
  tmpvar_28.x = tmpvar_25;
  tmpvar_28.y = tmpvar_26;
  tmpvar_28.z = tmpvar_27;
  angle_11 = (vec3(tmpvar_21) + tmpvar_28);
  highp vec4 tmpvar_29;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_29 = _InstanceData;
  } else {
    tmpvar_29 = tmpvar_1;
  };
  highp vec3 tmpvar_30;
  tmpvar_30 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_14.x) * tmpvar_29.x) * tmpvar_19);
  billboardPos_10.xz = tmpvar_30.xz;
  billboardPos_10.y = (tmpvar_30.y + ((
    (_glesMultiTexCoord0.y * tmpvar_14.y)
   + tmpvar_14.z) * tmpvar_29.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_31;
    vPos_31 = billboardPos_10;
    highp float fMoveAmount_32;
    highp float fAdjust_33;
    highp float fLength_34;
    fLength_34 = sqrt(dot (billboardPos_10, billboardPos_10));
    highp float tmpvar_35;
    tmpvar_35 = (max ((billboardPos_10.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_33 = tmpvar_35;
    if ((tmpvar_35 != 0.0)) {
      fAdjust_33 = pow (tmpvar_35, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_36;
    tmpvar_36.zw = vec2(0.0, 0.0);
    tmpvar_36.x = (tmpvar_16.x + tmpvar_29.w);
    tmpvar_36.y = (tmpvar_16.y + (tmpvar_29.w * 0.8));
    highp vec4 tmpvar_37;
    highp vec4 tmpvar_38;
    tmpvar_38 = abs(((
      fract((tmpvar_36 + 0.5))
     * 2.0) - 1.0));
    tmpvar_37 = (((
      (tmpvar_38 * tmpvar_38)
     * 
      (3.0 - (2.0 * tmpvar_38))
    ) - 0.5) * 2.0);
    fMoveAmount_32 = ((_ST_WindGlobal.y * (tmpvar_37.x + 
      (tmpvar_37.y * tmpvar_37.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_32 = (fMoveAmount_32 * fAdjust_33);
    vPos_31.xz = (tmpvar_30.xz + (_ST_WindVector.xz * fMoveAmount_32));
    vPos_31 = (normalize(vPos_31) * fLength_34);
    billboardPos_10 = vPos_31;
  };
  tmpvar_8.xyz = (_glesVertex.xyz + billboardPos_10);
  tmpvar_8.w = 1.0;
  angle_11 = (angle_11 + tmpvar_29.z);
  highp vec3 tmpvar_39;
  tmpvar_39 = (floor((
    (angle_11 * tmpvar_13.y)
   + 0.5)) / tmpvar_13.xxx);
  highp vec3 tmpvar_40;
  tmpvar_40 = (fract(abs(tmpvar_39)) * tmpvar_13.xxx);
  highp float tmpvar_41;
  if ((tmpvar_39.x >= 0.0)) {
    tmpvar_41 = tmpvar_40.x;
  } else {
    tmpvar_41 = -(tmpvar_40.x);
  };
  highp vec4 tmpvar_42;
  tmpvar_42 = _ImageTexCoords[int((tmpvar_13.z + tmpvar_41))];
  if ((tmpvar_42.w < 0.0)) {
    tmpvar_9.xy = (tmpvar_42.xy - (tmpvar_42.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_9.xy = (tmpvar_42.xy + (tmpvar_42.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_43;
  hPos_43 = (glstate_matrix_mvp * tmpvar_8);
  mediump vec3 screenPos_44;
  highp vec4 o_45;
  highp vec4 tmpvar_46;
  tmpvar_46 = (hPos_43 * 0.5);
  highp vec2 tmpvar_47;
  tmpvar_47.x = tmpvar_46.x;
  tmpvar_47.y = (tmpvar_46.y * _ProjectionParams.x);
  o_45.xy = (tmpvar_47 + tmpvar_46.w);
  o_45.zw = hPos_43.zw;
  highp vec3 tmpvar_48;
  tmpvar_48 = o_45.xyw;
  screenPos_44 = tmpvar_48;
  screenPos_44.xy = (screenPos_44.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = _Color;
  highp vec3 tmpvar_49;
  tmpvar_49 = (_Object2World * tmpvar_8).xyz;
  highp vec4 v_50;
  v_50.x = _World2Object[0].x;
  v_50.y = _World2Object[1].x;
  v_50.z = _World2Object[2].x;
  v_50.w = _World2Object[3].x;
  highp vec4 v_51;
  v_51.x = _World2Object[0].z;
  v_51.y = _World2Object[1].z;
  v_51.z = _World2Object[2].z;
  v_51.w = _World2Object[3].z;
  highp vec3 tmpvar_52;
  tmpvar_52 = normalize(((v_50.xyz * tmpvar_19.z) + (v_51.xyz * tmpvar_20.z)));
  worldNormal_4 = tmpvar_52;
  highp mat3 tmpvar_53;
  tmpvar_53[0] = _Object2World[0].xyz;
  tmpvar_53[1] = _Object2World[1].xyz;
  tmpvar_53[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize((tmpvar_53 * tmpvar_19));
  worldTangent_3 = tmpvar_54;
  lowp vec3 tmpvar_55;
  tmpvar_55 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_56;
  tmpvar_56 = -(tmpvar_55);
  worldBinormal_2 = tmpvar_56;
  highp vec4 tmpvar_57;
  tmpvar_57.x = worldTangent_3.x;
  tmpvar_57.y = worldBinormal_2.x;
  tmpvar_57.z = worldNormal_4.x;
  tmpvar_57.w = tmpvar_49.x;
  highp vec4 tmpvar_58;
  tmpvar_58.x = worldTangent_3.y;
  tmpvar_58.y = worldBinormal_2.y;
  tmpvar_58.z = worldNormal_4.y;
  tmpvar_58.w = tmpvar_49.y;
  highp vec4 tmpvar_59;
  tmpvar_59.x = worldTangent_3.z;
  tmpvar_59.y = worldBinormal_2.z;
  tmpvar_59.z = worldNormal_4.z;
  tmpvar_59.w = tmpvar_49.z;
  lowp vec4 tmpvar_60;
  tmpvar_60.w = 1.0;
  tmpvar_60.xyz = worldNormal_4;
  mediump vec4 normal_61;
  normal_61 = tmpvar_60;
  mediump vec3 x2_62;
  mediump vec4 tmpvar_63;
  tmpvar_63 = (normal_61.xyzz * normal_61.yzzx);
  x2_62.x = dot (unity_SHBr, tmpvar_63);
  x2_62.y = dot (unity_SHBg, tmpvar_63);
  x2_62.z = dot (unity_SHBb, tmpvar_63);
  highp vec3 lightColor0_64;
  lightColor0_64 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_65;
  lightColor1_65 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_66;
  lightColor2_66 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_67;
  lightColor3_67 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_68;
  lightAttenSq_68 = unity_4LightAtten0;
  highp vec3 normal_69;
  normal_69 = worldNormal_4;
  highp vec3 col_70;
  highp vec4 ndotl_71;
  highp vec4 lengthSq_72;
  highp vec4 tmpvar_73;
  tmpvar_73 = (unity_4LightPosX0 - tmpvar_49.x);
  highp vec4 tmpvar_74;
  tmpvar_74 = (unity_4LightPosY0 - tmpvar_49.y);
  highp vec4 tmpvar_75;
  tmpvar_75 = (unity_4LightPosZ0 - tmpvar_49.z);
  lengthSq_72 = (tmpvar_73 * tmpvar_73);
  lengthSq_72 = (lengthSq_72 + (tmpvar_74 * tmpvar_74));
  lengthSq_72 = (lengthSq_72 + (tmpvar_75 * tmpvar_75));
  ndotl_71 = (tmpvar_73 * normal_69.x);
  ndotl_71 = (ndotl_71 + (tmpvar_74 * normal_69.y));
  ndotl_71 = (ndotl_71 + (tmpvar_75 * normal_69.z));
  highp vec4 tmpvar_76;
  tmpvar_76 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_71 * inversesqrt(lengthSq_72)));
  ndotl_71 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = (tmpvar_76 * (1.0/((1.0 + 
    (lengthSq_72 * lightAttenSq_68)
  ))));
  col_70 = (lightColor0_64 * tmpvar_77.x);
  col_70 = (col_70 + (lightColor1_65 * tmpvar_77.y));
  col_70 = (col_70 + (lightColor2_66 * tmpvar_77.z));
  col_70 = (col_70 + (lightColor3_67 * tmpvar_77.w));
  tmpvar_6 = ((x2_62 + (unity_SHC.xyz * 
    ((normal_61.x * normal_61.x) - (normal_61.y * normal_61.y))
  )) + col_70);
  tmpvar_7 = (unity_World2Shadow[0] * (_Object2World * tmpvar_8));
  gl_Position = (glstate_matrix_mvp * tmpvar_8);
  xlv_TEXCOORD0 = tmpvar_57;
  xlv_TEXCOORD1 = tmpvar_58;
  xlv_TEXCOORD2 = tmpvar_59;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = screenPos_44;
  xlv_TEXCOORD6 = tmpvar_6;
  xlv_TEXCOORD7 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_16;
  x_16 = (tmpvar_10 - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7).x > 
    (xlv_TEXCOORD7.z / xlv_TEXCOORD7.w)
  )), _LightShadowData.x);
  tmpvar_18 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD0.xyz, tmpvar_17);
  worldN_4.x = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (xlv_TEXCOORD1.xyz, tmpvar_17);
  worldN_4.y = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (xlv_TEXCOORD2.xyz, tmpvar_17);
  worldN_4.z = tmpvar_22;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_18;
  mediump vec3 normalWorld_23;
  normalWorld_23 = worldN_4;
  mediump vec3 tmpvar_24;
  mediump vec3 tmpvar_25;
  mediump vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = normalWorld_23;
  mediump vec3 x1_27;
  x1_27.x = dot (unity_SHAr, tmpvar_26);
  x1_27.y = dot (unity_SHAg, tmpvar_26);
  x1_27.z = dot (unity_SHAb, tmpvar_26);
  tmpvar_25 = (xlv_TEXCOORD6 + x1_27);
  tmpvar_24 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_24;
  lowp vec4 c_28;
  lowp vec4 c_29;
  lowp float diff_30;
  mediump float tmpvar_31;
  tmpvar_31 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_30 = tmpvar_31;
  c_29.xyz = ((tmpvar_9 * tmpvar_24) * diff_30);
  c_29.w = tmpvar_10;
  c_28.w = c_29.w;
  c_28.xyz = (c_29.xyz + (tmpvar_9 * tmpvar_25));
  c_5.xyz = c_28.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesVertex;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp vec3 angle_10;
  highp float tmpvar_11;
  tmpvar_11 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeInfo[int(tmpvar_11)];
  highp vec4 tmpvar_13;
  tmpvar_13 = _TreeSize[int(tmpvar_11)];
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (_glesVertex.xyz + tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceCameraPos - tmpvar_15));
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = -(tmpvar_16.z);
  tmpvar_17.z = tmpvar_16.x;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(tmpvar_17);
  highp vec3 tmpvar_19;
  tmpvar_19.y = 0.0;
  tmpvar_19.x = tmpvar_18.z;
  tmpvar_19.z = -(tmpvar_18.x);
  highp float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = (min (abs(
    (tmpvar_19.z / tmpvar_18.z)
  ), 1.0) / max (abs(
    (tmpvar_19.z / tmpvar_18.z)
  ), 1.0));
  highp float tmpvar_22;
  tmpvar_22 = (tmpvar_21 * tmpvar_21);
  tmpvar_22 = (((
    ((((
      ((((-0.01213232 * tmpvar_22) + 0.05368138) * tmpvar_22) - 0.1173503)
     * tmpvar_22) + 0.1938925) * tmpvar_22) - 0.3326756)
   * tmpvar_22) + 0.9999793) * tmpvar_21);
  tmpvar_22 = (tmpvar_22 + (float(
    (abs((tmpvar_19.z / tmpvar_18.z)) > 1.0)
  ) * (
    (tmpvar_22 * -2.0)
   + 1.570796)));
  tmpvar_20 = (tmpvar_22 * sign((tmpvar_19.z / tmpvar_18.z)));
  if ((abs(tmpvar_18.z) > (1e-08 * abs(tmpvar_19.z)))) {
    if ((tmpvar_18.z < 0.0)) {
      if ((tmpvar_19.z >= 0.0)) {
        tmpvar_20 += 3.141593;
      } else {
        tmpvar_20 = (tmpvar_20 - 3.141593);
      };
    };
  } else {
    tmpvar_20 = (sign(tmpvar_19.z) * 1.570796);
  };
  angle_10 = vec3(tmpvar_20);
  bvec3 tmpvar_23;
  tmpvar_23 = lessThan (vec3(tmpvar_20), vec3(0.0, 0.0, 0.0));
  float tmpvar_24;
  if (tmpvar_23.x) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_23.y) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  float tmpvar_26;
  if (tmpvar_23.z) {
    tmpvar_26 = 6.283185;
  } else {
    tmpvar_26 = 0.0;
  };
  vec3 tmpvar_27;
  tmpvar_27.x = tmpvar_24;
  tmpvar_27.y = tmpvar_25;
  tmpvar_27.z = tmpvar_26;
  angle_10 = (vec3(tmpvar_20) + tmpvar_27);
  highp vec4 tmpvar_28;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_28 = _InstanceData;
  } else {
    tmpvar_28 = tmpvar_1;
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_13.x) * tmpvar_28.x) * tmpvar_18);
  billboardPos_9.xz = tmpvar_29.xz;
  billboardPos_9.y = (tmpvar_29.y + ((
    (_glesMultiTexCoord0.y * tmpvar_13.y)
   + tmpvar_13.z) * tmpvar_28.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_30;
    vPos_30 = billboardPos_9;
    highp float fMoveAmount_31;
    highp float fAdjust_32;
    highp float fLength_33;
    fLength_33 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_34;
    tmpvar_34 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_32 = tmpvar_34;
    if ((tmpvar_34 != 0.0)) {
      fAdjust_32 = pow (tmpvar_34, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_35;
    tmpvar_35.zw = vec2(0.0, 0.0);
    tmpvar_35.x = (tmpvar_15.x + tmpvar_28.w);
    tmpvar_35.y = (tmpvar_15.y + (tmpvar_28.w * 0.8));
    highp vec4 tmpvar_36;
    highp vec4 tmpvar_37;
    tmpvar_37 = abs(((
      fract((tmpvar_35 + 0.5))
     * 2.0) - 1.0));
    tmpvar_36 = (((
      (tmpvar_37 * tmpvar_37)
     * 
      (3.0 - (2.0 * tmpvar_37))
    ) - 0.5) * 2.0);
    fMoveAmount_31 = ((_ST_WindGlobal.y * (tmpvar_36.x + 
      (tmpvar_36.y * tmpvar_36.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_31 = (fMoveAmount_31 * fAdjust_32);
    vPos_30.xz = (tmpvar_29.xz + (_ST_WindVector.xz * fMoveAmount_31));
    vPos_30 = (normalize(vPos_30) * fLength_33);
    billboardPos_9 = vPos_30;
  };
  tmpvar_7.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_7.w = 1.0;
  angle_10 = (angle_10 + tmpvar_28.z);
  highp vec3 tmpvar_38;
  tmpvar_38 = (floor((
    (angle_10 * tmpvar_12.y)
   + 0.5)) / tmpvar_12.xxx);
  highp vec3 tmpvar_39;
  tmpvar_39 = (fract(abs(tmpvar_38)) * tmpvar_12.xxx);
  highp float tmpvar_40;
  if ((tmpvar_38.x >= 0.0)) {
    tmpvar_40 = tmpvar_39.x;
  } else {
    tmpvar_40 = -(tmpvar_39.x);
  };
  highp vec4 tmpvar_41;
  tmpvar_41 = _ImageTexCoords[int((tmpvar_12.z + tmpvar_40))];
  if ((tmpvar_41.w < 0.0)) {
    tmpvar_8.xy = (tmpvar_41.xy - (tmpvar_41.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_8.xy = (tmpvar_41.xy + (tmpvar_41.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_42;
  hPos_42 = (glstate_matrix_mvp * tmpvar_7);
  mediump vec3 screenPos_43;
  highp vec4 o_44;
  highp vec4 tmpvar_45;
  tmpvar_45 = (hPos_42 * 0.5);
  highp vec2 tmpvar_46;
  tmpvar_46.x = tmpvar_45.x;
  tmpvar_46.y = (tmpvar_45.y * _ProjectionParams.x);
  o_44.xy = (tmpvar_46 + tmpvar_45.w);
  o_44.zw = hPos_42.zw;
  highp vec3 tmpvar_47;
  tmpvar_47 = o_44.xyw;
  screenPos_43 = tmpvar_47;
  screenPos_43.xy = (screenPos_43.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = _Color;
  highp vec3 tmpvar_48;
  tmpvar_48 = (_Object2World * tmpvar_7).xyz;
  highp vec4 v_49;
  v_49.x = _World2Object[0].x;
  v_49.y = _World2Object[1].x;
  v_49.z = _World2Object[2].x;
  v_49.w = _World2Object[3].x;
  highp vec4 v_50;
  v_50.x = _World2Object[0].z;
  v_50.y = _World2Object[1].z;
  v_50.z = _World2Object[2].z;
  v_50.w = _World2Object[3].z;
  highp vec3 tmpvar_51;
  tmpvar_51 = normalize(((v_49.xyz * tmpvar_18.z) + (v_50.xyz * tmpvar_19.z)));
  worldNormal_4 = tmpvar_51;
  highp mat3 tmpvar_52;
  tmpvar_52[0] = _Object2World[0].xyz;
  tmpvar_52[1] = _Object2World[1].xyz;
  tmpvar_52[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_53;
  tmpvar_53 = normalize((tmpvar_52 * tmpvar_18));
  worldTangent_3 = tmpvar_53;
  lowp vec3 tmpvar_54;
  tmpvar_54 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_55;
  tmpvar_55 = -(tmpvar_54);
  worldBinormal_2 = tmpvar_55;
  highp vec4 tmpvar_56;
  tmpvar_56.x = worldTangent_3.x;
  tmpvar_56.y = worldBinormal_2.x;
  tmpvar_56.z = worldNormal_4.x;
  tmpvar_56.w = tmpvar_48.x;
  highp vec4 tmpvar_57;
  tmpvar_57.x = worldTangent_3.y;
  tmpvar_57.y = worldBinormal_2.y;
  tmpvar_57.z = worldNormal_4.y;
  tmpvar_57.w = tmpvar_48.y;
  highp vec4 tmpvar_58;
  tmpvar_58.x = worldTangent_3.z;
  tmpvar_58.y = worldBinormal_2.z;
  tmpvar_58.z = worldNormal_4.z;
  tmpvar_58.w = tmpvar_48.z;
  lowp vec4 tmpvar_59;
  tmpvar_59.w = 1.0;
  tmpvar_59.xyz = worldNormal_4;
  mediump vec4 normal_60;
  normal_60 = tmpvar_59;
  mediump vec3 x2_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = (normal_60.xyzz * normal_60.yzzx);
  x2_61.x = dot (unity_SHBr, tmpvar_62);
  x2_61.y = dot (unity_SHBg, tmpvar_62);
  x2_61.z = dot (unity_SHBb, tmpvar_62);
  tmpvar_6 = (unity_World2Shadow[0] * (_Object2World * tmpvar_7));
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_TEXCOORD0 = tmpvar_56;
  xlv_TEXCOORD1 = tmpvar_57;
  xlv_TEXCOORD2 = tmpvar_58;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = screenPos_43;
  xlv_TEXCOORD6 = (x2_61 + (unity_SHC.xyz * (
    (normal_60.x * normal_60.x)
   - 
    (normal_60.y * normal_60.y)
  )));
  xlv_TEXCOORD7 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_16;
  x_16 = (tmpvar_10 - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float shadow_18;
  shadow_18 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD7.xyz) * (1.0 - _LightShadowData.x)));
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD0.xyz, tmpvar_17);
  worldN_4.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD1.xyz, tmpvar_17);
  worldN_4.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (xlv_TEXCOORD2.xyz, tmpvar_17);
  worldN_4.z = tmpvar_21;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_18;
  mediump vec3 normalWorld_22;
  normalWorld_22 = worldN_4;
  mediump vec3 tmpvar_23;
  mediump vec3 tmpvar_24;
  mediump vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = normalWorld_22;
  mediump vec3 x1_26;
  x1_26.x = dot (unity_SHAr, tmpvar_25);
  x1_26.y = dot (unity_SHAg, tmpvar_25);
  x1_26.z = dot (unity_SHAb, tmpvar_25);
  tmpvar_24 = (xlv_TEXCOORD6 + x1_26);
  tmpvar_23 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_23;
  lowp vec4 c_27;
  lowp vec4 c_28;
  lowp float diff_29;
  mediump float tmpvar_30;
  tmpvar_30 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_29 = tmpvar_30;
  c_28.xyz = ((tmpvar_9 * tmpvar_23) * diff_29);
  c_28.w = tmpvar_10;
  c_27.w = c_28.w;
  c_27.xyz = (c_28.xyz + (tmpvar_9 * tmpvar_24));
  c_5.xyz = c_27.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec4 vs_TEXCOORD7;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
bool tb2;
highp vec4 t3;
highp vec4 t4;
lowp vec3 t10_5;
highp vec3 t6;
mediump float t16_7;
mediump vec3 t16_8;
highp vec3 t10;
highp int ti10;
bool tb10;
highp float t11;
bool tb13;
highp vec2 t19;
bool tb19;
highp vec2 t20;
highp uint tu20;
highp float t28;
bool tb28;
highp float t29;
bool tb30;
void main()
{
    //Instruction 64462
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 64463
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 64464
    //ADD
    t10.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 64465
    //LT
    tb2 = 0.0<_InstanceData.x;
    //Instruction 64466
    //MOVC
    t0 = (bool(tb2)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 64467
    //ADD
    t2.x = t0.w + t10.x;
    //Instruction 64468
    //MAD
    t2.y = t0.w * 0.800000 + t10.y;
    //Instruction 64469
    //ADD
    t10.xyz = (-t10.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 64470
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 64471
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 64472
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 64473
    //MUL
    t20.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 64474
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 64475
    //MAD
    t2.xy = t20.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 64476
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 64477
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 64478
    //DIV
    t11 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 64479
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t11;
    //Instruction 64480
    //DIV
    t11 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 64481
    //MUL
    t20.x = in_COLOR0.w * 255.000000;
    //Instruction 64482
    //FTOU
    tu20 = uint(t20.x);
    //Instruction 64483
    //MAD
    t29 = in_TEXCOORD0.y * _TreeSize[int(tu20) + 0].y + _TreeSize[int(tu20) + 0].z;
    //Instruction 64484
    //MUL
    t3.y = t0.y * t29;
    //Instruction 64485
    //MAD
    t11 = (-t11) * 0.250000 + t3.y;
    //Instruction 64486
    //MAX
    t11 = max(t11, 0.0);
    //Instruction 64487
    //MUL
    t11 = t11 * _ST_WindGlobal.z;
    //Instruction 64488
    //LOG
    t29 = log2(t11);
    //Instruction 64489
    //MUL
    t29 = t29 * _ST_WindGlobal.w;
    //Instruction 64490
    //EXP
    t29 = exp2(t29);
    //Instruction 64491
    //NE
    tb30 = t11!=0.0;
    //Instruction 64492
    //MOVC
    t11 = (tb30) ? t29 : t11;
    //Instruction 64493
    //MUL
    t2.x = t11 * t2.x;
    //Instruction 64494
    //ADD
    t11 = in_TEXCOORD0.x + -0.500000;
    //Instruction 64495
    //MUL
    t11 = t11 * _TreeSize[int(tu20) + 0].x;
    //Instruction 64496
    //MUL
    t11 = t0.x * t11;
    //Instruction 64497
    //DP3
    t19.x = dot(t10.xyz, t10.xyz);
    //Instruction 64498
    //RSQ
    t19.x = inversesqrt(t19.x);
    //Instruction 64499
    //MUL
    t4.xy = t19.xx * t10.xz;
    //Instruction 64500
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 64501
    //DP2
    t10.x = dot(t4.xz, t4.xw);
    //Instruction 64502
    //MUL
    t19.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 64503
    //RSQ
    t10.x = inversesqrt(t10.x);
    //Instruction 64504
    //MUL
    t10.xy = t10.xx * t19.xy;
    //Instruction 64505
    //MUL
    t3.xz = t10.xy * vec2(t11);
    //Instruction 64506
    //MAD
    t4.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 64507
    //MOV
    t4.y = t3.y;
    //Instruction 64508
    //DP3
    t28 = dot(t4.xyz, t4.xyz);
    //Instruction 64509
    //RSQ
    t28 = inversesqrt(t28);
    //Instruction 64510
    //MUL
    t2.xyw = vec3(t28) * t4.xyz;
    //Instruction 64511
    //DP3
    t28 = dot(t3.xyz, t3.xyz);
    //Instruction 64512
    //SQRT
    t28 = sqrt(t28);
    //Instruction 64513
    //MUL
    t2.xyw = vec3(t28) * t2.xyw;
    //Instruction 64514
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 64515
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 64516
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 64517
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 64518
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 64519
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 64520
    //MUL
    t3.x = t10.y * _World2Object[0].x;
    //Instruction 64521
    //MUL
    t3.y = t10.y * _World2Object[1].x;
    //Instruction 64522
    //MUL
    t3.zw = t10.yy * _World2Object[2].xx;
    //Instruction 64523
    //MUL
    t4.x = (-t10.x) * _World2Object[0].z;
    //Instruction 64524
    //MUL
    t4.y = (-t10.x) * _World2Object[1].z;
    //Instruction 64525
    //MUL
    t4.zw = (-t10.xx) * _World2Object[2].zz;
    //Instruction 64526
    //ADD
    t3 = t3 + t4;
    //Instruction 64527
    //DP3
    t1.x = dot(t3.xyw, t3.xyw);
    //Instruction 64528
    //RSQ
    t1.x = inversesqrt(t1.x);
    //Instruction 64529
    //MUL
    t3 = t1.xxxx * t3;
    //Instruction 64530
    //MUL
    t4.xyz = t10.yyy * _Object2World[2].yzx;
    //Instruction 64531
    //MAD
    t4.xyz = _Object2World[0].yzx * t10.xxx + t4.xyz;
    //Instruction 64532
    //DP3
    t1.x = dot(t4.xyz, t4.xyz);
    //Instruction 64533
    //RSQ
    t1.x = inversesqrt(t1.x);
    //Instruction 64534
    //MUL
    t4.xyz = t1.xxx * t4.xyz;
    //Instruction 64535
    //MUL
    t10_5.xyz = t3.wxy * t4.xyz;
    //Instruction 64536
    //MAD
    t10_5.xyz = t3.ywx * t4.yzx + (-t10_5.xyz);
    //Instruction 64537
    //MOV
    vs_TEXCOORD0.y = (-t10_5.x);
    //Instruction 64538
    //MUL
    t6.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 64539
    //MAD
    t6.xyz = _Object2World[0].xyz * t2.xxx + t6.xyz;
    //Instruction 64540
    //MAD
    t6.xyz = _Object2World[2].xyz * t2.www + t6.xyz;
    //Instruction 64541
    //ADD
    t6.xyz = t6.xyz + _Object2World[3].xyz;
    //Instruction 64542
    //MOV
    vs_TEXCOORD0.w = t6.x;
    //Instruction 64543
    //MOV
    vs_TEXCOORD0.z = t3.x;
    //Instruction 64544
    //MOV
    vs_TEXCOORD0.x = t4.z;
    //Instruction 64545
    //MOV
    vs_TEXCOORD1.w = t6.y;
    //Instruction 64546
    //MOV
    vs_TEXCOORD2.w = t6.z;
    //Instruction 64547
    //MOV
    vs_TEXCOORD1.x = t4.x;
    //Instruction 64548
    //MOV
    vs_TEXCOORD2.x = t4.y;
    //Instruction 64549
    //MOV
    vs_TEXCOORD1.z = t3.y;
    //Instruction 64550
    //MOV
    vs_TEXCOORD1.y = (-t10_5.y);
    //Instruction 64551
    //MOV
    vs_TEXCOORD2.y = (-t10_5.z);
    //Instruction 64552
    //MOV
    vs_TEXCOORD2.z = t3.w;
    //Instruction 64553
    //MOV
    vs_TEXCOORD3 = _Color;
    //Instruction 64554
    //MAX
    t1.x = max(abs(t10.y), abs(t10.x));
    //Instruction 64555
    //DIV
    t1.x = float(1.0) / t1.x;
    //Instruction 64556
    //MIN
    t28 = min(abs(t10.y), abs(t10.x));
    //Instruction 64557
    //MUL
    t1.x = t1.x * t28;
    //Instruction 64558
    //MUL
    t28 = t1.x * t1.x;
    //Instruction 64559
    //MAD
    t4.x = t28 * 0.020835 + -0.085133;
    //Instruction 64560
    //MAD
    t4.x = t28 * t4.x + 0.180141;
    //Instruction 64561
    //MAD
    t4.x = t28 * t4.x + -0.330299;
    //Instruction 64562
    //MAD
    t28 = t28 * t4.x + 0.999866;
    //Instruction 64563
    //MUL
    t4.x = t28 * t1.x;
    //Instruction 64564
    //MAD
    t4.x = t4.x * -2.000000 + 1.570796;
    //Instruction 64565
    //LT
    tb13 = abs(t10.y)<abs(t10.x);
    //Instruction 64566
    //AND
    t4.x = tb13 ? t4.x : float(0.0);
    //Instruction 64567
    //MAD
    t1.x = t1.x * t28 + t4.x;
    //Instruction 64568
    //LT
    tb28 = t10.y<(-t10.y);
    //Instruction 64569
    //AND
    t28 = tb28 ? -3.141593 : float(0.0);
    //Instruction 64570
    //ADD
    t1.x = t28 + t1.x;
    //Instruction 64571
    //MIN
    t28 = min(t10.y, (-t10.x));
    //Instruction 64572
    //MAX
    t10.x = max(t10.y, (-t10.x));
    //Instruction 64573
    //GE
    tb10 = t10.x>=(-t10.x);
    //Instruction 64574
    //LT
    tb19 = t28<(-t28);
    //Instruction 64575
    //AND
    ti10 = int(uint(tb10) & uint(tb19));
    //Instruction 64576
    //MOVC
    t1.x = (ti10 != 0) ? (-t1.x) : t1.x;
    //Instruction 64577
    //LT
    tb10 = t1.x<0.0;
    //Instruction 64578
    //AND
    t10.x = tb10 ? 6.283185 : float(0.0);
    //Instruction 64579
    //ADD
    t1.x = t10.x + t1.x;
    //Instruction 64580
    //ADD
    t1.x = t0.z + t1.x;
    //Instruction 64581
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu20) + 0].y + 0.500000;
    //Instruction 64582
    //ROUND_NI
    t1.x = floor(t1.x);
    //Instruction 64583
    //DIV
    t1.x = t1.x / _TreeInfo[int(tu20) + 0].x;
    //Instruction 64584
    //GE
    tb10 = t1.x>=(-t1.x);
    //Instruction 64585
    //FRC
    t1.x = fract(abs(t1.x));
    //Instruction 64586
    //MOVC
    t1.x = (tb10) ? t1.x : (-t1.x);
    //Instruction 64587
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu20) + 0].x + _TreeInfo[int(tu20) + 0].z;
    //Instruction 64588
    //FTOU
    tu1 = uint(t1.x);
    //Instruction 64589
    //LT
    tb10 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 64590
    //MAD
    t19.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 64591
    //MAD
    t4.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 64592
    //MOVC
    vs_TEXCOORD4.xy = (bool(tb10)) ? t19.xy : t4.xy;
    //Instruction 64593
    //MOV
    vs_TEXCOORD4.z = 0.0;
    //Instruction 64594
    //MUL
    t1.xyz = t2.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 64595
    //MAD
    t1.xyz = glstate_matrix_mvp[0].xyw * t2.xxx + t1.xyz;
    //Instruction 64596
    //MAD
    t1.xyz = glstate_matrix_mvp[2].xyw * t2.www + t1.xyz;
    //Instruction 64597
    //ADD
    t1.xyz = t1.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 64598
    //MUL
    t1.w = t1.y * _ProjectionParams.x;
    //Instruction 64599
    //MUL
    t4.xzw = t1.xzw * vec3(0.500000, 0.500000, 0.500000);
    //Instruction 64600
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 64601
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 64602
    //MUL
    t1.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 64603
    //MOV
    vs_TEXCOORD5.xyz = t1.xyz;
    //Instruction 64604
    //MUL
    t16_7 = t3.y * t3.y;
    //Instruction 64605
    //MAD
    t16_7 = t3.x * t3.x + (-t16_7);
    //Instruction 64606
    //MUL
    t16_0 = t3.ywzx * t3;
    //Instruction 64607
    //DP4
    t16_8.x = dot(unity_SHBr, t16_0);
    //Instruction 64608
    //DP4
    t16_8.y = dot(unity_SHBg, t16_0);
    //Instruction 64609
    //DP4
    t16_8.z = dot(unity_SHBb, t16_0);
    //Instruction 64610
    //MAD
    vs_TEXCOORD6.xyz = unity_SHC.xyz * vec3(t16_7) + t16_8.xyz;
    //Instruction 64611
    //MUL
    t0 = t2.yyyy * _Object2World[1];
    //Instruction 64612
    //MAD
    t0 = _Object2World[0] * t2.xxxx + t0;
    //Instruction 64613
    //MAD
    t0 = _Object2World[2] * t2.wwww + t0;
    //Instruction 64614
    //ADD
    t0 = t0 + _Object2World[3];
    //Instruction 64615
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 64616
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 64617
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 64618
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 64619
    //MOV
    vs_TEXCOORD7 = t0;
    //Instruction 64620
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec4 vs_TEXCOORD7;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump float t16_6;
mediump float t16_21;
void main()
{
    //Instruction 64427
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    //Instruction 64428
    //FRC
    t16_6 = fract(t16_0.y);
    //Instruction 64429
    //MOV
    t1.x = t16_0.x;
    //Instruction 64430
    //MAD
    t1.y = t16_6 * 0.062500 + unity_LODFade.y;
    //Instruction 64431
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 64432
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 64433
    //LT
    tb1 = t16_1<0.0;
    //Instruction 64434
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 64435
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    //Instruction 64436
    //MAD
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 64437
    //MUL
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD3.xyz;
    //Instruction 64438
    //LT
    tb1 = t10_2.x<0.0;
    //Instruction 64439
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 64440
    //SAMPLE_C_LZ
    vec3 txVec73 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
    t16_21 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec73, 0.0);
    //Instruction 64441
    //ADD
    t16_4.x = (-_LightShadowData.x) + 1.0;
    //Instruction 64442
    //MAD
    t16_21 = t16_21 * t16_4.x + _LightShadowData.x;
    //Instruction 64443
    //MUL
    t16_4.xyz = vec3(t16_21) * _LightColor0.xyz;
    //Instruction 64444
    //MUL
    t16_4.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 64445
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 64446
    //MAD
    t10_2.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 64447
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    //Instruction 64448
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    //Instruction 64449
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    //Instruction 64450
    //MOV
    t0.w = 1.0;
    //Instruction 64451
    //DP4
    t16_5.x = dot(unity_SHAr, t0);
    //Instruction 64452
    //DP4
    t16_5.y = dot(unity_SHAg, t0);
    //Instruction 64453
    //DP4
    t16_5.z = dot(unity_SHAb, t0);
    //Instruction 64454
    //DP3
    t16_21 = dot(t0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 64455
    //MAX
    t16_21 = max(t16_21, 0.0);
    //Instruction 64456
    //ADD
    t16_5.xyz = t16_5.xyz + vs_TEXCOORD6.xyz;
    //Instruction 64457
    //MUL
    t16_3.xyz = t16_3.xyz * t16_5.xyz;
    //Instruction 64458
    //MAD
    t16_3.xyz = t16_4.xyz * vec3(t16_21) + t16_3.xyz;
    //Instruction 64459
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 64460
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 64461
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = _glesVertex;
  mediump vec3 tmpvar_9;
  highp vec3 billboardPos_10;
  highp vec3 angle_11;
  highp float tmpvar_12;
  tmpvar_12 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_13;
  tmpvar_13 = _TreeInfo[int(tmpvar_12)];
  highp vec4 tmpvar_14;
  tmpvar_14 = _TreeSize[int(tmpvar_12)];
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  highp vec3 tmpvar_16;
  tmpvar_16 = (_glesVertex.xyz + tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((_WorldSpaceCameraPos - tmpvar_16));
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = -(tmpvar_17.z);
  tmpvar_18.z = tmpvar_17.x;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(tmpvar_18);
  highp vec3 tmpvar_20;
  tmpvar_20.y = 0.0;
  tmpvar_20.x = tmpvar_19.z;
  tmpvar_20.z = -(tmpvar_19.x);
  highp float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (min (abs(
    (tmpvar_20.z / tmpvar_19.z)
  ), 1.0) / max (abs(
    (tmpvar_20.z / tmpvar_19.z)
  ), 1.0));
  highp float tmpvar_23;
  tmpvar_23 = (tmpvar_22 * tmpvar_22);
  tmpvar_23 = (((
    ((((
      ((((-0.01213232 * tmpvar_23) + 0.05368138) * tmpvar_23) - 0.1173503)
     * tmpvar_23) + 0.1938925) * tmpvar_23) - 0.3326756)
   * tmpvar_23) + 0.9999793) * tmpvar_22);
  tmpvar_23 = (tmpvar_23 + (float(
    (abs((tmpvar_20.z / tmpvar_19.z)) > 1.0)
  ) * (
    (tmpvar_23 * -2.0)
   + 1.570796)));
  tmpvar_21 = (tmpvar_23 * sign((tmpvar_20.z / tmpvar_19.z)));
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_20.z)))) {
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_20.z >= 0.0)) {
        tmpvar_21 += 3.141593;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.141593);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_20.z) * 1.570796);
  };
  angle_11 = vec3(tmpvar_21);
  bvec3 tmpvar_24;
  tmpvar_24 = lessThan (vec3(tmpvar_21), vec3(0.0, 0.0, 0.0));
  float tmpvar_25;
  if (tmpvar_24.x) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  float tmpvar_26;
  if (tmpvar_24.y) {
    tmpvar_26 = 6.283185;
  } else {
    tmpvar_26 = 0.0;
  };
  float tmpvar_27;
  if (tmpvar_24.z) {
    tmpvar_27 = 6.283185;
  } else {
    tmpvar_27 = 0.0;
  };
  vec3 tmpvar_28;
  tmpvar_28.x = tmpvar_25;
  tmpvar_28.y = tmpvar_26;
  tmpvar_28.z = tmpvar_27;
  angle_11 = (vec3(tmpvar_21) + tmpvar_28);
  highp vec4 tmpvar_29;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_29 = _InstanceData;
  } else {
    tmpvar_29 = tmpvar_1;
  };
  highp vec3 tmpvar_30;
  tmpvar_30 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_14.x) * tmpvar_29.x) * tmpvar_19);
  billboardPos_10.xz = tmpvar_30.xz;
  billboardPos_10.y = (tmpvar_30.y + ((
    (_glesMultiTexCoord0.y * tmpvar_14.y)
   + tmpvar_14.z) * tmpvar_29.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_31;
    vPos_31 = billboardPos_10;
    highp float fMoveAmount_32;
    highp float fAdjust_33;
    highp float fLength_34;
    fLength_34 = sqrt(dot (billboardPos_10, billboardPos_10));
    highp float tmpvar_35;
    tmpvar_35 = (max ((billboardPos_10.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_33 = tmpvar_35;
    if ((tmpvar_35 != 0.0)) {
      fAdjust_33 = pow (tmpvar_35, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_36;
    tmpvar_36.zw = vec2(0.0, 0.0);
    tmpvar_36.x = (tmpvar_16.x + tmpvar_29.w);
    tmpvar_36.y = (tmpvar_16.y + (tmpvar_29.w * 0.8));
    highp vec4 tmpvar_37;
    highp vec4 tmpvar_38;
    tmpvar_38 = abs(((
      fract((tmpvar_36 + 0.5))
     * 2.0) - 1.0));
    tmpvar_37 = (((
      (tmpvar_38 * tmpvar_38)
     * 
      (3.0 - (2.0 * tmpvar_38))
    ) - 0.5) * 2.0);
    fMoveAmount_32 = ((_ST_WindGlobal.y * (tmpvar_37.x + 
      (tmpvar_37.y * tmpvar_37.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_32 = (fMoveAmount_32 * fAdjust_33);
    vPos_31.xz = (tmpvar_30.xz + (_ST_WindVector.xz * fMoveAmount_32));
    vPos_31 = (normalize(vPos_31) * fLength_34);
    billboardPos_10 = vPos_31;
  };
  tmpvar_8.xyz = (_glesVertex.xyz + billboardPos_10);
  tmpvar_8.w = 1.0;
  angle_11 = (angle_11 + tmpvar_29.z);
  highp vec3 tmpvar_39;
  tmpvar_39 = (floor((
    (angle_11 * tmpvar_13.y)
   + 0.5)) / tmpvar_13.xxx);
  highp vec3 tmpvar_40;
  tmpvar_40 = (fract(abs(tmpvar_39)) * tmpvar_13.xxx);
  highp float tmpvar_41;
  if ((tmpvar_39.x >= 0.0)) {
    tmpvar_41 = tmpvar_40.x;
  } else {
    tmpvar_41 = -(tmpvar_40.x);
  };
  highp vec4 tmpvar_42;
  tmpvar_42 = _ImageTexCoords[int((tmpvar_13.z + tmpvar_41))];
  if ((tmpvar_42.w < 0.0)) {
    tmpvar_9.xy = (tmpvar_42.xy - (tmpvar_42.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_9.xy = (tmpvar_42.xy + (tmpvar_42.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_43;
  hPos_43 = (glstate_matrix_mvp * tmpvar_8);
  mediump vec3 screenPos_44;
  highp vec4 o_45;
  highp vec4 tmpvar_46;
  tmpvar_46 = (hPos_43 * 0.5);
  highp vec2 tmpvar_47;
  tmpvar_47.x = tmpvar_46.x;
  tmpvar_47.y = (tmpvar_46.y * _ProjectionParams.x);
  o_45.xy = (tmpvar_47 + tmpvar_46.w);
  o_45.zw = hPos_43.zw;
  highp vec3 tmpvar_48;
  tmpvar_48 = o_45.xyw;
  screenPos_44 = tmpvar_48;
  screenPos_44.xy = (screenPos_44.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = _Color;
  highp vec3 tmpvar_49;
  tmpvar_49 = (_Object2World * tmpvar_8).xyz;
  highp vec4 v_50;
  v_50.x = _World2Object[0].x;
  v_50.y = _World2Object[1].x;
  v_50.z = _World2Object[2].x;
  v_50.w = _World2Object[3].x;
  highp vec4 v_51;
  v_51.x = _World2Object[0].z;
  v_51.y = _World2Object[1].z;
  v_51.z = _World2Object[2].z;
  v_51.w = _World2Object[3].z;
  highp vec3 tmpvar_52;
  tmpvar_52 = normalize(((v_50.xyz * tmpvar_19.z) + (v_51.xyz * tmpvar_20.z)));
  worldNormal_4 = tmpvar_52;
  highp mat3 tmpvar_53;
  tmpvar_53[0] = _Object2World[0].xyz;
  tmpvar_53[1] = _Object2World[1].xyz;
  tmpvar_53[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize((tmpvar_53 * tmpvar_19));
  worldTangent_3 = tmpvar_54;
  lowp vec3 tmpvar_55;
  tmpvar_55 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_56;
  tmpvar_56 = -(tmpvar_55);
  worldBinormal_2 = tmpvar_56;
  highp vec4 tmpvar_57;
  tmpvar_57.x = worldTangent_3.x;
  tmpvar_57.y = worldBinormal_2.x;
  tmpvar_57.z = worldNormal_4.x;
  tmpvar_57.w = tmpvar_49.x;
  highp vec4 tmpvar_58;
  tmpvar_58.x = worldTangent_3.y;
  tmpvar_58.y = worldBinormal_2.y;
  tmpvar_58.z = worldNormal_4.y;
  tmpvar_58.w = tmpvar_49.y;
  highp vec4 tmpvar_59;
  tmpvar_59.x = worldTangent_3.z;
  tmpvar_59.y = worldBinormal_2.z;
  tmpvar_59.z = worldNormal_4.z;
  tmpvar_59.w = tmpvar_49.z;
  lowp vec4 tmpvar_60;
  tmpvar_60.w = 1.0;
  tmpvar_60.xyz = worldNormal_4;
  mediump vec4 normal_61;
  normal_61 = tmpvar_60;
  mediump vec3 x2_62;
  mediump vec4 tmpvar_63;
  tmpvar_63 = (normal_61.xyzz * normal_61.yzzx);
  x2_62.x = dot (unity_SHBr, tmpvar_63);
  x2_62.y = dot (unity_SHBg, tmpvar_63);
  x2_62.z = dot (unity_SHBb, tmpvar_63);
  highp vec3 lightColor0_64;
  lightColor0_64 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_65;
  lightColor1_65 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_66;
  lightColor2_66 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_67;
  lightColor3_67 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_68;
  lightAttenSq_68 = unity_4LightAtten0;
  highp vec3 normal_69;
  normal_69 = worldNormal_4;
  highp vec3 col_70;
  highp vec4 ndotl_71;
  highp vec4 lengthSq_72;
  highp vec4 tmpvar_73;
  tmpvar_73 = (unity_4LightPosX0 - tmpvar_49.x);
  highp vec4 tmpvar_74;
  tmpvar_74 = (unity_4LightPosY0 - tmpvar_49.y);
  highp vec4 tmpvar_75;
  tmpvar_75 = (unity_4LightPosZ0 - tmpvar_49.z);
  lengthSq_72 = (tmpvar_73 * tmpvar_73);
  lengthSq_72 = (lengthSq_72 + (tmpvar_74 * tmpvar_74));
  lengthSq_72 = (lengthSq_72 + (tmpvar_75 * tmpvar_75));
  ndotl_71 = (tmpvar_73 * normal_69.x);
  ndotl_71 = (ndotl_71 + (tmpvar_74 * normal_69.y));
  ndotl_71 = (ndotl_71 + (tmpvar_75 * normal_69.z));
  highp vec4 tmpvar_76;
  tmpvar_76 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_71 * inversesqrt(lengthSq_72)));
  ndotl_71 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = (tmpvar_76 * (1.0/((1.0 + 
    (lengthSq_72 * lightAttenSq_68)
  ))));
  col_70 = (lightColor0_64 * tmpvar_77.x);
  col_70 = (col_70 + (lightColor1_65 * tmpvar_77.y));
  col_70 = (col_70 + (lightColor2_66 * tmpvar_77.z));
  col_70 = (col_70 + (lightColor3_67 * tmpvar_77.w));
  tmpvar_6 = ((x2_62 + (unity_SHC.xyz * 
    ((normal_61.x * normal_61.x) - (normal_61.y * normal_61.y))
  )) + col_70);
  tmpvar_7 = (unity_World2Shadow[0] * (_Object2World * tmpvar_8));
  gl_Position = (glstate_matrix_mvp * tmpvar_8);
  xlv_TEXCOORD0 = tmpvar_57;
  xlv_TEXCOORD1 = tmpvar_58;
  xlv_TEXCOORD2 = tmpvar_59;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = screenPos_44;
  xlv_TEXCOORD6 = tmpvar_6;
  xlv_TEXCOORD7 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_16;
  x_16 = (tmpvar_10 - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float shadow_18;
  shadow_18 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD7.xyz) * (1.0 - _LightShadowData.x)));
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD0.xyz, tmpvar_17);
  worldN_4.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD1.xyz, tmpvar_17);
  worldN_4.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (xlv_TEXCOORD2.xyz, tmpvar_17);
  worldN_4.z = tmpvar_21;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_18;
  mediump vec3 normalWorld_22;
  normalWorld_22 = worldN_4;
  mediump vec3 tmpvar_23;
  mediump vec3 tmpvar_24;
  mediump vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = normalWorld_22;
  mediump vec3 x1_26;
  x1_26.x = dot (unity_SHAr, tmpvar_25);
  x1_26.y = dot (unity_SHAg, tmpvar_25);
  x1_26.z = dot (unity_SHAb, tmpvar_25);
  tmpvar_24 = (xlv_TEXCOORD6 + x1_26);
  tmpvar_23 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_23;
  lowp vec4 c_27;
  lowp vec4 c_28;
  lowp float diff_29;
  mediump float tmpvar_30;
  tmpvar_30 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_29 = tmpvar_30;
  c_28.xyz = ((tmpvar_9 * tmpvar_23) * diff_29);
  c_28.w = tmpvar_10;
  c_27.w = c_28.w;
  c_27.xyz = (c_28.xyz + (tmpvar_9 * tmpvar_24));
  c_5.xyz = c_27.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec4 vs_TEXCOORD7;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
bool tb2;
highp vec4 t3;
highp vec4 t4;
highp vec4 t5;
lowp vec3 t10_5;
highp vec3 t6;
mediump vec3 t16_7;
mediump vec3 t16_8;
highp vec3 t10;
highp int ti10;
bool tb10;
highp float t11;
bool tb13;
highp vec2 t19;
bool tb19;
highp vec2 t20;
highp uint tu20;
highp float t28;
bool tb28;
highp float t29;
bool tb30;
void main()
{
    //Instruction 62147
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 62148
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 62149
    //ADD
    t10.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 62150
    //LT
    tb2 = 0.0<_InstanceData.x;
    //Instruction 62151
    //MOVC
    t0 = (bool(tb2)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 62152
    //ADD
    t2.x = t0.w + t10.x;
    //Instruction 62153
    //MAD
    t2.y = t0.w * 0.800000 + t10.y;
    //Instruction 62154
    //ADD
    t10.xyz = (-t10.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 62155
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 62156
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 62157
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 62158
    //MUL
    t20.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 62159
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 62160
    //MAD
    t2.xy = t20.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 62161
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 62162
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 62163
    //DIV
    t11 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 62164
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t11;
    //Instruction 62165
    //DIV
    t11 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 62166
    //MUL
    t20.x = in_COLOR0.w * 255.000000;
    //Instruction 62167
    //FTOU
    tu20 = uint(t20.x);
    //Instruction 62168
    //MAD
    t29 = in_TEXCOORD0.y * _TreeSize[int(tu20) + 0].y + _TreeSize[int(tu20) + 0].z;
    //Instruction 62169
    //MUL
    t3.y = t0.y * t29;
    //Instruction 62170
    //MAD
    t11 = (-t11) * 0.250000 + t3.y;
    //Instruction 62171
    //MAX
    t11 = max(t11, 0.0);
    //Instruction 62172
    //MUL
    t11 = t11 * _ST_WindGlobal.z;
    //Instruction 62173
    //LOG
    t29 = log2(t11);
    //Instruction 62174
    //MUL
    t29 = t29 * _ST_WindGlobal.w;
    //Instruction 62175
    //EXP
    t29 = exp2(t29);
    //Instruction 62176
    //NE
    tb30 = t11!=0.0;
    //Instruction 62177
    //MOVC
    t11 = (tb30) ? t29 : t11;
    //Instruction 62178
    //MUL
    t2.x = t11 * t2.x;
    //Instruction 62179
    //ADD
    t11 = in_TEXCOORD0.x + -0.500000;
    //Instruction 62180
    //MUL
    t11 = t11 * _TreeSize[int(tu20) + 0].x;
    //Instruction 62181
    //MUL
    t11 = t0.x * t11;
    //Instruction 62182
    //DP3
    t19.x = dot(t10.xyz, t10.xyz);
    //Instruction 62183
    //RSQ
    t19.x = inversesqrt(t19.x);
    //Instruction 62184
    //MUL
    t4.xy = t19.xx * t10.xz;
    //Instruction 62185
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 62186
    //DP2
    t10.x = dot(t4.xz, t4.xw);
    //Instruction 62187
    //MUL
    t19.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 62188
    //RSQ
    t10.x = inversesqrt(t10.x);
    //Instruction 62189
    //MUL
    t10.xy = t10.xx * t19.xy;
    //Instruction 62190
    //MUL
    t3.xz = t10.xy * vec2(t11);
    //Instruction 62191
    //MAD
    t4.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 62192
    //MOV
    t4.y = t3.y;
    //Instruction 62193
    //DP3
    t28 = dot(t4.xyz, t4.xyz);
    //Instruction 62194
    //RSQ
    t28 = inversesqrt(t28);
    //Instruction 62195
    //MUL
    t2.xyw = vec3(t28) * t4.xyz;
    //Instruction 62196
    //DP3
    t28 = dot(t3.xyz, t3.xyz);
    //Instruction 62197
    //SQRT
    t28 = sqrt(t28);
    //Instruction 62198
    //MUL
    t2.xyw = vec3(t28) * t2.xyw;
    //Instruction 62199
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 62200
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 62201
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 62202
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 62203
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 62204
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 62205
    //MUL
    t3.x = t10.y * _World2Object[0].x;
    //Instruction 62206
    //MUL
    t3.y = t10.y * _World2Object[1].x;
    //Instruction 62207
    //MUL
    t3.zw = t10.yy * _World2Object[2].xx;
    //Instruction 62208
    //MUL
    t4.x = (-t10.x) * _World2Object[0].z;
    //Instruction 62209
    //MUL
    t4.y = (-t10.x) * _World2Object[1].z;
    //Instruction 62210
    //MUL
    t4.zw = (-t10.xx) * _World2Object[2].zz;
    //Instruction 62211
    //ADD
    t3 = t3 + t4;
    //Instruction 62212
    //DP3
    t1.x = dot(t3.xyw, t3.xyw);
    //Instruction 62213
    //RSQ
    t1.x = inversesqrt(t1.x);
    //Instruction 62214
    //MUL
    t3 = t1.xxxx * t3;
    //Instruction 62215
    //MUL
    t4.xyz = t10.yyy * _Object2World[2].yzx;
    //Instruction 62216
    //MAD
    t4.xyz = _Object2World[0].yzx * t10.xxx + t4.xyz;
    //Instruction 62217
    //DP3
    t1.x = dot(t4.xyz, t4.xyz);
    //Instruction 62218
    //RSQ
    t1.x = inversesqrt(t1.x);
    //Instruction 62219
    //MUL
    t4.xyz = t1.xxx * t4.xyz;
    //Instruction 62220
    //MUL
    t10_5.xyz = t3.wxy * t4.xyz;
    //Instruction 62221
    //MAD
    t10_5.xyz = t3.ywx * t4.yzx + (-t10_5.xyz);
    //Instruction 62222
    //MOV
    vs_TEXCOORD0.y = (-t10_5.x);
    //Instruction 62223
    //MUL
    t6.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 62224
    //MAD
    t6.xyz = _Object2World[0].xyz * t2.xxx + t6.xyz;
    //Instruction 62225
    //MAD
    t6.xyz = _Object2World[2].xyz * t2.www + t6.xyz;
    //Instruction 62226
    //ADD
    t6.xyz = t6.xyz + _Object2World[3].xyz;
    //Instruction 62227
    //MOV
    vs_TEXCOORD0.w = t6.x;
    //Instruction 62228
    //MOV
    vs_TEXCOORD0.z = t3.x;
    //Instruction 62229
    //MOV
    vs_TEXCOORD0.x = t4.z;
    //Instruction 62230
    //MOV
    vs_TEXCOORD1.w = t6.y;
    //Instruction 62231
    //MOV
    vs_TEXCOORD1.x = t4.x;
    //Instruction 62232
    //MOV
    vs_TEXCOORD2.x = t4.y;
    //Instruction 62233
    //MOV
    vs_TEXCOORD1.y = (-t10_5.y);
    //Instruction 62234
    //MOV
    vs_TEXCOORD2.y = (-t10_5.z);
    //Instruction 62235
    //MOV
    vs_TEXCOORD1.z = t3.y;
    //Instruction 62236
    //MOV
    vs_TEXCOORD2.w = t6.z;
    //Instruction 62237
    //MOV
    vs_TEXCOORD2.z = t3.w;
    //Instruction 62238
    //MOV
    vs_TEXCOORD3 = _Color;
    //Instruction 62239
    //MAX
    t1.x = max(abs(t10.y), abs(t10.x));
    //Instruction 62240
    //DIV
    t1.x = float(1.0) / t1.x;
    //Instruction 62241
    //MIN
    t28 = min(abs(t10.y), abs(t10.x));
    //Instruction 62242
    //MUL
    t1.x = t1.x * t28;
    //Instruction 62243
    //MUL
    t28 = t1.x * t1.x;
    //Instruction 62244
    //MAD
    t4.x = t28 * 0.020835 + -0.085133;
    //Instruction 62245
    //MAD
    t4.x = t28 * t4.x + 0.180141;
    //Instruction 62246
    //MAD
    t4.x = t28 * t4.x + -0.330299;
    //Instruction 62247
    //MAD
    t28 = t28 * t4.x + 0.999866;
    //Instruction 62248
    //MUL
    t4.x = t28 * t1.x;
    //Instruction 62249
    //MAD
    t4.x = t4.x * -2.000000 + 1.570796;
    //Instruction 62250
    //LT
    tb13 = abs(t10.y)<abs(t10.x);
    //Instruction 62251
    //AND
    t4.x = tb13 ? t4.x : float(0.0);
    //Instruction 62252
    //MAD
    t1.x = t1.x * t28 + t4.x;
    //Instruction 62253
    //LT
    tb28 = t10.y<(-t10.y);
    //Instruction 62254
    //AND
    t28 = tb28 ? -3.141593 : float(0.0);
    //Instruction 62255
    //ADD
    t1.x = t28 + t1.x;
    //Instruction 62256
    //MIN
    t28 = min(t10.y, (-t10.x));
    //Instruction 62257
    //MAX
    t10.x = max(t10.y, (-t10.x));
    //Instruction 62258
    //GE
    tb10 = t10.x>=(-t10.x);
    //Instruction 62259
    //LT
    tb19 = t28<(-t28);
    //Instruction 62260
    //AND
    ti10 = int(uint(tb10) & uint(tb19));
    //Instruction 62261
    //MOVC
    t1.x = (ti10 != 0) ? (-t1.x) : t1.x;
    //Instruction 62262
    //LT
    tb10 = t1.x<0.0;
    //Instruction 62263
    //AND
    t10.x = tb10 ? 6.283185 : float(0.0);
    //Instruction 62264
    //ADD
    t1.x = t10.x + t1.x;
    //Instruction 62265
    //ADD
    t1.x = t0.z + t1.x;
    //Instruction 62266
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu20) + 0].y + 0.500000;
    //Instruction 62267
    //ROUND_NI
    t1.x = floor(t1.x);
    //Instruction 62268
    //DIV
    t1.x = t1.x / _TreeInfo[int(tu20) + 0].x;
    //Instruction 62269
    //GE
    tb10 = t1.x>=(-t1.x);
    //Instruction 62270
    //FRC
    t1.x = fract(abs(t1.x));
    //Instruction 62271
    //MOVC
    t1.x = (tb10) ? t1.x : (-t1.x);
    //Instruction 62272
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu20) + 0].x + _TreeInfo[int(tu20) + 0].z;
    //Instruction 62273
    //FTOU
    tu1 = uint(t1.x);
    //Instruction 62274
    //LT
    tb10 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 62275
    //MAD
    t19.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 62276
    //MAD
    t4.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 62277
    //MOVC
    vs_TEXCOORD4.xy = (bool(tb10)) ? t19.xy : t4.xy;
    //Instruction 62278
    //MOV
    vs_TEXCOORD4.z = 0.0;
    //Instruction 62279
    //MUL
    t1.xyz = t2.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 62280
    //MAD
    t1.xyz = glstate_matrix_mvp[0].xyw * t2.xxx + t1.xyz;
    //Instruction 62281
    //MAD
    t1.xyz = glstate_matrix_mvp[2].xyw * t2.www + t1.xyz;
    //Instruction 62282
    //ADD
    t1.xyz = t1.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 62283
    //MUL
    t1.w = t1.y * _ProjectionParams.x;
    //Instruction 62284
    //MUL
    t4.xzw = t1.xzw * vec3(0.500000, 0.500000, 0.500000);
    //Instruction 62285
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 62286
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 62287
    //MUL
    t1.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 62288
    //MOV
    vs_TEXCOORD5.xyz = t1.xyz;
    //Instruction 62289
    //ADD
    t0 = (-t6.xxxx) + unity_4LightPosX0;
    //Instruction 62290
    //ADD
    t1 = (-t6.yyyy) + unity_4LightPosY0;
    //Instruction 62291
    //ADD
    t4 = (-t6.zzzz) + unity_4LightPosZ0;
    //Instruction 62292
    //MUL
    t5 = t3.yyyy * t1;
    //Instruction 62293
    //MUL
    t1 = t1 * t1;
    //Instruction 62294
    //MAD
    t1 = t0 * t0 + t1;
    //Instruction 62295
    //MAD
    t0 = t0 * t3.xxxx + t5;
    //Instruction 62296
    //MAD
    t0 = t4 * t3.wwww + t0;
    //Instruction 62297
    //MAD
    t1 = t4 * t4 + t1;
    //Instruction 62298
    //RSQ
    t4 = inversesqrt(t1);
    //Instruction 62299
    //MAD
    t1 = t1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 62300
    //DIV
    t1 = vec4(1.0, 1.0, 1.0, 1.0) / t1;
    //Instruction 62301
    //MUL
    t0 = t0 * t4;
    //Instruction 62302
    //MAX
    t0 = max(t0, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 62303
    //MUL
    t0 = t1 * t0;
    //Instruction 62304
    //MUL
    t1.xyz = t0.yyy * unity_LightColor[1].xyz;
    //Instruction 62305
    //MAD
    t1.xyz = unity_LightColor[0].xyz * t0.xxx + t1.xyz;
    //Instruction 62306
    //MAD
    t1.xyz = unity_LightColor[2].xyz * t0.zzz + t1.xyz;
    //Instruction 62307
    //MAD
    t1.xyz = unity_LightColor[3].xyz * t0.www + t1.xyz;
    //Instruction 62308
    //MUL
    t16_7.x = t3.y * t3.y;
    //Instruction 62309
    //MAD
    t16_7.x = t3.x * t3.x + (-t16_7.x);
    //Instruction 62310
    //MUL
    t16_0 = t3.ywzx * t3;
    //Instruction 62311
    //DP4
    t16_8.x = dot(unity_SHBr, t16_0);
    //Instruction 62312
    //DP4
    t16_8.y = dot(unity_SHBg, t16_0);
    //Instruction 62313
    //DP4
    t16_8.z = dot(unity_SHBb, t16_0);
    //Instruction 62314
    //MAD
    t16_7.xyz = unity_SHC.xyz * t16_7.xxx + t16_8.xyz;
    //Instruction 62315
    //ADD
    t1.xyz = t1.xyz + t16_7.xyz;
    //Instruction 62316
    //MOV
    vs_TEXCOORD6.xyz = t1.xyz;
    //Instruction 62317
    //MUL
    t0 = t2.yyyy * _Object2World[1];
    //Instruction 62318
    //MAD
    t0 = _Object2World[0] * t2.xxxx + t0;
    //Instruction 62319
    //MAD
    t0 = _Object2World[2] * t2.wwww + t0;
    //Instruction 62320
    //ADD
    t0 = t0 + _Object2World[3];
    //Instruction 62321
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 62322
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 62323
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 62324
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 62325
    //MOV
    vs_TEXCOORD7 = t0;
    //Instruction 62326
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec4 vs_TEXCOORD7;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump float t16_6;
mediump float t16_21;
void main()
{
    //Instruction 62112
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    //Instruction 62113
    //FRC
    t16_6 = fract(t16_0.y);
    //Instruction 62114
    //MOV
    t1.x = t16_0.x;
    //Instruction 62115
    //MAD
    t1.y = t16_6 * 0.062500 + unity_LODFade.y;
    //Instruction 62116
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 62117
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 62118
    //LT
    tb1 = t16_1<0.0;
    //Instruction 62119
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 62120
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    //Instruction 62121
    //MAD
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 62122
    //MUL
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD3.xyz;
    //Instruction 62123
    //LT
    tb1 = t10_2.x<0.0;
    //Instruction 62124
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 62125
    //SAMPLE_C_LZ
    vec3 txVec74 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
    t16_21 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec74, 0.0);
    //Instruction 62126
    //ADD
    t16_4.x = (-_LightShadowData.x) + 1.0;
    //Instruction 62127
    //MAD
    t16_21 = t16_21 * t16_4.x + _LightShadowData.x;
    //Instruction 62128
    //MUL
    t16_4.xyz = vec3(t16_21) * _LightColor0.xyz;
    //Instruction 62129
    //MUL
    t16_4.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 62130
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 62131
    //MAD
    t10_2.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 62132
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    //Instruction 62133
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    //Instruction 62134
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    //Instruction 62135
    //MOV
    t0.w = 1.0;
    //Instruction 62136
    //DP4
    t16_5.x = dot(unity_SHAr, t0);
    //Instruction 62137
    //DP4
    t16_5.y = dot(unity_SHAg, t0);
    //Instruction 62138
    //DP4
    t16_5.z = dot(unity_SHAb, t0);
    //Instruction 62139
    //DP3
    t16_21 = dot(t0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 62140
    //MAX
    t16_21 = max(t16_21, 0.0);
    //Instruction 62141
    //ADD
    t16_5.xyz = t16_5.xyz + vs_TEXCOORD6.xyz;
    //Instruction 62142
    //MUL
    t16_3.xyz = t16_3.xyz * t16_5.xyz;
    //Instruction 62143
    //MAD
    t16_3.xyz = t16_4.xyz * vec3(t16_21) + t16_3.xyz;
    //Instruction 62144
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 62145
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 62146
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp vec3 angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_18.z / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_18.z / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  angle_9 = vec3(tmpvar_19);
  bvec3 tmpvar_22;
  tmpvar_22 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_23;
  if (tmpvar_22.x) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_22.y) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_22.z) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  vec3 tmpvar_26;
  tmpvar_26.x = tmpvar_23;
  tmpvar_26.y = tmpvar_24;
  tmpvar_26.z = tmpvar_25;
  angle_9 = (vec3(tmpvar_19) + tmpvar_26);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_8.xz = tmpvar_28.xz;
  billboardPos_8.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_8;
    highp float fMoveAmount_30;
    highp float fAdjust_31;
    highp float fLength_32;
    fLength_32 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_33;
    tmpvar_33 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_31 = tmpvar_33;
    if ((tmpvar_33 != 0.0)) {
      fAdjust_31 = pow (tmpvar_33, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_34;
    tmpvar_34.zw = vec2(0.0, 0.0);
    tmpvar_34.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_34.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_35;
    highp vec4 tmpvar_36;
    tmpvar_36 = abs(((
      fract((tmpvar_34 + 0.5))
     * 2.0) - 1.0));
    tmpvar_35 = (((
      (tmpvar_36 * tmpvar_36)
     * 
      (3.0 - (2.0 * tmpvar_36))
    ) - 0.5) * 2.0);
    fMoveAmount_30 = ((_ST_WindGlobal.y * (tmpvar_35.x + 
      (tmpvar_35.y * tmpvar_35.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_30 = (fMoveAmount_30 * fAdjust_31);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * fMoveAmount_30));
    vPos_29 = (normalize(vPos_29) * fLength_32);
    billboardPos_8 = vPos_29;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (angle_9 + tmpvar_27.z);
  highp vec3 tmpvar_37;
  tmpvar_37 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_38;
  tmpvar_38 = (fract(abs(tmpvar_37)) * tmpvar_11.xxx);
  highp float tmpvar_39;
  if ((tmpvar_37.x >= 0.0)) {
    tmpvar_39 = tmpvar_38.x;
  } else {
    tmpvar_39 = -(tmpvar_38.x);
  };
  highp vec4 tmpvar_40;
  tmpvar_40 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_39))];
  if ((tmpvar_40.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_40.xy - (tmpvar_40.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_40.xy + (tmpvar_40.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_41;
  tmpvar_41 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_41;
  highp vec4 hPos_42;
  hPos_42 = (glstate_matrix_mvp * tmpvar_6);
  mediump vec3 screenPos_43;
  highp vec4 o_44;
  highp vec4 tmpvar_45;
  tmpvar_45 = (hPos_42 * 0.5);
  highp vec2 tmpvar_46;
  tmpvar_46.x = tmpvar_45.x;
  tmpvar_46.y = (tmpvar_45.y * _ProjectionParams.x);
  o_44.xy = (tmpvar_46 + tmpvar_45.w);
  o_44.zw = hPos_42.zw;
  highp vec3 tmpvar_47;
  tmpvar_47 = o_44.xyw;
  screenPos_43 = tmpvar_47;
  screenPos_43.xy = (screenPos_43.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = _Color;
  highp vec3 tmpvar_48;
  tmpvar_48 = (_Object2World * tmpvar_6).xyz;
  highp vec4 v_49;
  v_49.x = _World2Object[0].x;
  v_49.y = _World2Object[1].x;
  v_49.z = _World2Object[2].x;
  v_49.w = _World2Object[3].x;
  highp vec4 v_50;
  v_50.x = _World2Object[0].z;
  v_50.y = _World2Object[1].z;
  v_50.z = _World2Object[2].z;
  v_50.w = _World2Object[3].z;
  highp vec3 tmpvar_51;
  tmpvar_51 = normalize(((v_49.xyz * tmpvar_17.z) + (v_50.xyz * tmpvar_18.z)));
  worldNormal_4 = tmpvar_51;
  highp mat3 tmpvar_52;
  tmpvar_52[0] = _Object2World[0].xyz;
  tmpvar_52[1] = _Object2World[1].xyz;
  tmpvar_52[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_53;
  tmpvar_53 = normalize((tmpvar_52 * tmpvar_17));
  worldTangent_3 = tmpvar_53;
  lowp vec3 tmpvar_54;
  tmpvar_54 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_55;
  tmpvar_55 = -(tmpvar_54);
  worldBinormal_2 = tmpvar_55;
  highp vec4 tmpvar_56;
  tmpvar_56.x = worldTangent_3.x;
  tmpvar_56.y = worldBinormal_2.x;
  tmpvar_56.z = worldNormal_4.x;
  tmpvar_56.w = tmpvar_48.x;
  highp vec4 tmpvar_57;
  tmpvar_57.x = worldTangent_3.y;
  tmpvar_57.y = worldBinormal_2.y;
  tmpvar_57.z = worldNormal_4.y;
  tmpvar_57.w = tmpvar_48.y;
  highp vec4 tmpvar_58;
  tmpvar_58.x = worldTangent_3.z;
  tmpvar_58.y = worldBinormal_2.z;
  tmpvar_58.z = worldNormal_4.z;
  tmpvar_58.w = tmpvar_48.z;
  lowp vec4 tmpvar_59;
  tmpvar_59.w = 1.0;
  tmpvar_59.xyz = worldNormal_4;
  mediump vec4 normal_60;
  normal_60 = tmpvar_59;
  mediump vec3 x2_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = (normal_60.xyzz * normal_60.yzzx);
  x2_61.x = dot (unity_SHBr, tmpvar_62);
  x2_61.y = dot (unity_SHBg, tmpvar_62);
  x2_61.z = dot (unity_SHBb, tmpvar_62);
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_56;
  xlv_TEXCOORD1 = tmpvar_57;
  xlv_TEXCOORD2 = tmpvar_58;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = screenPos_43;
  xlv_TEXCOORD6 = (x2_61 + (unity_SHC.xyz * (
    (normal_60.x * normal_60.x)
   - 
    (normal_60.y * normal_60.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_16;
  x_16 = (tmpvar_9 - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_17.x, max (tmpvar_17.y, tmpvar_17.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_17 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_18;
  tmpvar_18 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD0.xyz, tmpvar_18);
  worldN_3.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD1.xyz, tmpvar_18);
  worldN_3.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (xlv_TEXCOORD2.xyz, tmpvar_18);
  worldN_3.z = tmpvar_21;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_22;
  normalWorld_22 = worldN_3;
  mediump vec3 tmpvar_23;
  mediump vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = normalWorld_22;
  mediump vec3 x1_25;
  x1_25.x = dot (unity_SHAr, tmpvar_24);
  x1_25.y = dot (unity_SHAg, tmpvar_24);
  x1_25.z = dot (unity_SHAb, tmpvar_24);
  tmpvar_23 = (xlv_TEXCOORD6 + x1_25);
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_28 = tmpvar_29;
  c_27.xyz = ((tmpvar_8 * tmpvar_1) * diff_28);
  c_27.w = tmpvar_9;
  c_26.w = c_27.w;
  c_26.xyz = (c_27.xyz + (tmpvar_8 * tmpvar_23));
  c_4.xyz = c_26.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
highp vec3 t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
lowp vec3 t10_7;
mediump float t16_8;
mediump vec3 t16_9;
highp vec3 t11;
highp int ti11;
bool tb11;
highp float t12;
highp vec2 t21;
bool tb21;
highp vec2 t22;
highp uint tu22;
highp float t31;
bool tb31;
highp float t32;
highp float t33;
bool tb33;
void main()
{
    //Instruction 62367
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 62368
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 62369
    //LT
    tb11 = 0.0<_InstanceData.x;
    //Instruction 62370
    //MOVC
    t0 = (bool(tb11)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 62371
    //ADD
    t11.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 62372
    //ADD
    t2.x = t0.w + t11.x;
    //Instruction 62373
    //MAD
    t2.y = t0.w * 0.800000 + t11.y;
    //Instruction 62374
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 62375
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 62376
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 62377
    //MUL
    t22.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 62378
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 62379
    //MAD
    t2.xy = t22.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 62380
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 62381
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 62382
    //DIV
    t12 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 62383
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t12;
    //Instruction 62384
    //DIV
    t12 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 62385
    //MUL
    t22.x = in_COLOR0.w * 255.000000;
    //Instruction 62386
    //FTOU
    tu22 = uint(t22.x);
    //Instruction 62387
    //MAD
    t32 = in_TEXCOORD0.y * _TreeSize[int(tu22) + 0].y + _TreeSize[int(tu22) + 0].z;
    //Instruction 62388
    //MUL
    t3.y = t0.y * t32;
    //Instruction 62389
    //MAD
    t12 = (-t12) * 0.250000 + t3.y;
    //Instruction 62390
    //MAX
    t12 = max(t12, 0.0);
    //Instruction 62391
    //MUL
    t12 = t12 * _ST_WindGlobal.z;
    //Instruction 62392
    //LOG
    t32 = log2(t12);
    //Instruction 62393
    //MUL
    t32 = t32 * _ST_WindGlobal.w;
    //Instruction 62394
    //EXP
    t32 = exp2(t32);
    //Instruction 62395
    //NE
    tb33 = t12!=0.0;
    //Instruction 62396
    //MOVC
    t12 = (tb33) ? t32 : t12;
    //Instruction 62397
    //MUL
    t2.x = t12 * t2.x;
    //Instruction 62398
    //ADD
    t12 = in_TEXCOORD0.x + -0.500000;
    //Instruction 62399
    //MUL
    t12 = t12 * _TreeSize[int(tu22) + 0].x;
    //Instruction 62400
    //MUL
    t12 = t0.x * t12;
    //Instruction 62401
    //ADD
    t4.xyz = (-t11.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 62402
    //DP3
    t32 = dot(t4.xyz, t4.xyz);
    //Instruction 62403
    //RSQ
    t32 = inversesqrt(t32);
    //Instruction 62404
    //MUL
    t4.xy = vec2(t32) * t4.xz;
    //Instruction 62405
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 62406
    //DP2
    t32 = dot(t4.xz, t4.xw);
    //Instruction 62407
    //MUL
    t4.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 62408
    //RSQ
    t32 = inversesqrt(t32);
    //Instruction 62409
    //MUL
    t4.xy = vec2(t32) * t4.xy;
    //Instruction 62410
    //MUL
    t3.xz = vec2(t12) * t4.xy;
    //Instruction 62411
    //MAD
    t5.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 62412
    //MOV
    t5.y = t3.y;
    //Instruction 62413
    //DP3
    t2.x = dot(t5.xyz, t5.xyz);
    //Instruction 62414
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 62415
    //MUL
    t2.xyw = t2.xxx * t5.xyz;
    //Instruction 62416
    //DP3
    t33 = dot(t3.xyz, t3.xyz);
    //Instruction 62417
    //SQRT
    t33 = sqrt(t33);
    //Instruction 62418
    //MUL
    t2.xyw = t2.xyw * vec3(t33);
    //Instruction 62419
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 62420
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 62421
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 62422
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 62423
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 62424
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 62425
    //MUL
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 62426
    //MAD
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    //Instruction 62427
    //MAD
    t3.xyz = _Object2World[2].xyz * t2.www + t3.xyz;
    //Instruction 62428
    //ADD
    t3.xyz = t3.xyz + _Object2World[3].xyz;
    //Instruction 62429
    //MOV
    vs_TEXCOORD0.w = t3.x;
    //Instruction 62430
    //MUL
    t5.x = t4.y * _World2Object[0].x;
    //Instruction 62431
    //MUL
    t5.y = t4.y * _World2Object[1].x;
    //Instruction 62432
    //MUL
    t5.zw = t4.yy * _World2Object[2].xx;
    //Instruction 62433
    //MUL
    t6.x = (-t4.x) * _World2Object[0].z;
    //Instruction 62434
    //MUL
    t6.y = (-t4.x) * _World2Object[1].z;
    //Instruction 62435
    //MUL
    t6.zw = (-t4.xx) * _World2Object[2].zz;
    //Instruction 62436
    //ADD
    t5 = t5 + t6;
    //Instruction 62437
    //DP3
    t1.x = dot(t5.xyw, t5.xyw);
    //Instruction 62438
    //RSQ
    t1.x = inversesqrt(t1.x);
    //Instruction 62439
    //MUL
    t5 = t1.xxxx * t5;
    //Instruction 62440
    //MUL
    t6.xyz = t4.yyy * _Object2World[2].yzx;
    //Instruction 62441
    //MAD
    t6.xyz = _Object2World[0].yzx * t4.xxx + t6.xyz;
    //Instruction 62442
    //DP3
    t1.x = dot(t6.xyz, t6.xyz);
    //Instruction 62443
    //RSQ
    t1.x = inversesqrt(t1.x);
    //Instruction 62444
    //MUL
    t6.xyz = t1.xxx * t6.xyz;
    //Instruction 62445
    //MUL
    t10_7.xyz = t5.wxy * t6.xyz;
    //Instruction 62446
    //MAD
    t10_7.xyz = t5.ywx * t6.yzx + (-t10_7.xyz);
    //Instruction 62447
    //MOV
    vs_TEXCOORD0.y = (-t10_7.x);
    //Instruction 62448
    //MOV
    vs_TEXCOORD0.z = t5.x;
    //Instruction 62449
    //MOV
    vs_TEXCOORD0.x = t6.z;
    //Instruction 62450
    //MOV
    vs_TEXCOORD1.w = t3.y;
    //Instruction 62451
    //MOV
    vs_TEXCOORD2.w = t3.z;
    //Instruction 62452
    //MOV
    vs_TEXCOORD1.x = t6.x;
    //Instruction 62453
    //MOV
    vs_TEXCOORD2.x = t6.y;
    //Instruction 62454
    //MOV
    vs_TEXCOORD1.z = t5.y;
    //Instruction 62455
    //MOV
    vs_TEXCOORD1.y = (-t10_7.y);
    //Instruction 62456
    //MOV
    vs_TEXCOORD2.y = (-t10_7.z);
    //Instruction 62457
    //MOV
    vs_TEXCOORD2.z = t5.w;
    //Instruction 62458
    //MOV
    vs_TEXCOORD3 = _Color;
    //Instruction 62459
    //ADD
    t1.x = t11.y + t11.x;
    //Instruction 62460
    //ADD
    t1.x = t11.z + t1.x;
    //Instruction 62461
    //FRC
    t1.x = fract(t1.x);
    //Instruction 62462
    //MUL
    t1.x = t1.x * _HueVariation.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 62463
    //MOV
    vs_TEXCOORD4.z = t1.x;
    //Instruction 62464
    //MAX
    t1.x = max(abs(t4.y), abs(t4.x));
    //Instruction 62465
    //DIV
    t1.x = float(1.0) / t1.x;
    //Instruction 62466
    //MIN
    t11.x = min(abs(t4.y), abs(t4.x));
    //Instruction 62467
    //MUL
    t1.x = t1.x * t11.x;
    //Instruction 62468
    //MUL
    t11.x = t1.x * t1.x;
    //Instruction 62469
    //MAD
    t21.x = t11.x * 0.020835 + -0.085133;
    //Instruction 62470
    //MAD
    t21.x = t11.x * t21.x + 0.180141;
    //Instruction 62471
    //MAD
    t21.x = t11.x * t21.x + -0.330299;
    //Instruction 62472
    //MAD
    t11.x = t11.x * t21.x + 0.999866;
    //Instruction 62473
    //MUL
    t21.x = t11.x * t1.x;
    //Instruction 62474
    //MAD
    t21.x = t21.x * -2.000000 + 1.570796;
    //Instruction 62475
    //LT
    tb31 = abs(t4.y)<abs(t4.x);
    //Instruction 62476
    //AND
    t21.x = tb31 ? t21.x : float(0.0);
    //Instruction 62477
    //MAD
    t1.x = t1.x * t11.x + t21.x;
    //Instruction 62478
    //LT
    tb11 = t4.y<(-t4.y);
    //Instruction 62479
    //AND
    t11.x = tb11 ? -3.141593 : float(0.0);
    //Instruction 62480
    //ADD
    t1.x = t11.x + t1.x;
    //Instruction 62481
    //MIN
    t11.x = min(t4.y, (-t4.x));
    //Instruction 62482
    //MAX
    t21.x = max(t4.y, (-t4.x));
    //Instruction 62483
    //GE
    tb21 = t21.x>=(-t21.x);
    //Instruction 62484
    //LT
    tb11 = t11.x<(-t11.x);
    //Instruction 62485
    //AND
    ti11 = int(uint(tb21) & uint(tb11));
    //Instruction 62486
    //MOVC
    t1.x = (ti11 != 0) ? (-t1.x) : t1.x;
    //Instruction 62487
    //LT
    tb11 = t1.x<0.0;
    //Instruction 62488
    //AND
    t11.x = tb11 ? 6.283185 : float(0.0);
    //Instruction 62489
    //ADD
    t1.x = t11.x + t1.x;
    //Instruction 62490
    //ADD
    t1.x = t0.z + t1.x;
    //Instruction 62491
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu22) + 0].y + 0.500000;
    //Instruction 62492
    //ROUND_NI
    t1.x = floor(t1.x);
    //Instruction 62493
    //DIV
    t1.x = t1.x / _TreeInfo[int(tu22) + 0].x;
    //Instruction 62494
    //GE
    tb11 = t1.x>=(-t1.x);
    //Instruction 62495
    //FRC
    t1.x = fract(abs(t1.x));
    //Instruction 62496
    //MOVC
    t1.x = (tb11) ? t1.x : (-t1.x);
    //Instruction 62497
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu22) + 0].x + _TreeInfo[int(tu22) + 0].z;
    //Instruction 62498
    //FTOU
    tu1 = uint(t1.x);
    //Instruction 62499
    //LT
    tb11 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 62500
    //MAD
    t21.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 62501
    //MAD
    t3.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 62502
    //MOVC
    vs_TEXCOORD4.xy = (bool(tb11)) ? t21.xy : t3.xy;
    //Instruction 62503
    //MUL
    t1.xyz = t2.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 62504
    //MAD
    t1.xyz = glstate_matrix_mvp[0].xyw * t2.xxx + t1.xyz;
    //Instruction 62505
    //MAD
    t1.xyz = glstate_matrix_mvp[2].xyw * t2.www + t1.xyz;
    //Instruction 62506
    //ADD
    t1.xyz = t1.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 62507
    //MUL
    t2.xz = t1.xz * vec2(0.500000, 0.500000);
    //Instruction 62508
    //MUL
    t31 = t1.y * _ProjectionParams.x;
    //Instruction 62509
    //MUL
    t2.w = t31 * 0.500000;
    //Instruction 62510
    //ADD
    t2.xy = t2.zz + t2.xw;
    //Instruction 62511
    //MUL
    t2.xy = t2.xy * _ScreenParams.xy;
    //Instruction 62512
    //MUL
    t1.xy = t2.xy * vec2(0.250000, 0.250000);
    //Instruction 62513
    //MOV
    vs_TEXCOORD5.xyz = t1.xyz;
    //Instruction 62514
    //MUL
    t16_8 = t5.y * t5.y;
    //Instruction 62515
    //MAD
    t16_8 = t5.x * t5.x + (-t16_8);
    //Instruction 62516
    //MUL
    t16_0 = t5.ywzx * t5;
    //Instruction 62517
    //DP4
    t16_9.x = dot(unity_SHBr, t16_0);
    //Instruction 62518
    //DP4
    t16_9.y = dot(unity_SHBg, t16_0);
    //Instruction 62519
    //DP4
    t16_9.z = dot(unity_SHBb, t16_0);
    //Instruction 62520
    //MAD
    vs_TEXCOORD6.xyz = unity_SHC.xyz * vec3(t16_8) + t16_9.xyz;
    //Instruction 62521
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump float t16_6;
mediump vec3 t16_9;
mediump float t16_21;
void main()
{
    //Instruction 62327
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    //Instruction 62328
    //FRC
    t16_6 = fract(t16_0.y);
    //Instruction 62329
    //MOV
    t1.x = t16_0.x;
    //Instruction 62330
    //MAD
    t1.y = t16_6 * 0.062500 + unity_LODFade.y;
    //Instruction 62331
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 62332
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 62333
    //LT
    tb1 = t16_1<0.0;
    //Instruction 62334
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 62335
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    //Instruction 62336
    //MAD
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 62337
    //LT
    tb1 = t10_2.x<0.0;
    //Instruction 62338
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 62339
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 62340
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 62341
    //ADD
    t16_9.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 62342
    //MAD
    t16_9.xyz = vs_TEXCOORD4.zzz * t16_9.xyz + t10_0.xyz;
    //Instruction 62343
    //MAX
    t16_4.x = max(t16_9.z, t16_9.y);
    //Instruction 62344
    //MAX
    t16_4.x = max(t16_9.x, t16_4.x);
    //Instruction 62345
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 62346
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 62347
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_9.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 62348
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD3.xyz;
    //Instruction 62349
    //MUL
    t16_4.xyz = t16_3.xyz * _LightColor0.xyz;
    //Instruction 62350
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 62351
    //MAD
    t10_2.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 62352
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    //Instruction 62353
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    //Instruction 62354
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    //Instruction 62355
    //MOV
    t0.w = 1.0;
    //Instruction 62356
    //DP4
    t16_5.x = dot(unity_SHAr, t0);
    //Instruction 62357
    //DP4
    t16_5.y = dot(unity_SHAg, t0);
    //Instruction 62358
    //DP4
    t16_5.z = dot(unity_SHAb, t0);
    //Instruction 62359
    //DP3
    t16_21 = dot(t0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 62360
    //MAX
    t16_21 = max(t16_21, 0.0);
    //Instruction 62361
    //ADD
    t16_5.xyz = t16_5.xyz + vs_TEXCOORD6.xyz;
    //Instruction 62362
    //MUL
    t16_3.xyz = t16_3.xyz * t16_5.xyz;
    //Instruction 62363
    //MAD
    t16_3.xyz = t16_4.xyz * vec3(t16_21) + t16_3.xyz;
    //Instruction 62364
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 62365
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 62366
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesVertex;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp vec3 angle_10;
  highp float tmpvar_11;
  tmpvar_11 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeInfo[int(tmpvar_11)];
  highp vec4 tmpvar_13;
  tmpvar_13 = _TreeSize[int(tmpvar_11)];
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (_glesVertex.xyz + tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceCameraPos - tmpvar_15));
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = -(tmpvar_16.z);
  tmpvar_17.z = tmpvar_16.x;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(tmpvar_17);
  highp vec3 tmpvar_19;
  tmpvar_19.y = 0.0;
  tmpvar_19.x = tmpvar_18.z;
  tmpvar_19.z = -(tmpvar_18.x);
  highp float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = (min (abs(
    (tmpvar_19.z / tmpvar_18.z)
  ), 1.0) / max (abs(
    (tmpvar_19.z / tmpvar_18.z)
  ), 1.0));
  highp float tmpvar_22;
  tmpvar_22 = (tmpvar_21 * tmpvar_21);
  tmpvar_22 = (((
    ((((
      ((((-0.01213232 * tmpvar_22) + 0.05368138) * tmpvar_22) - 0.1173503)
     * tmpvar_22) + 0.1938925) * tmpvar_22) - 0.3326756)
   * tmpvar_22) + 0.9999793) * tmpvar_21);
  tmpvar_22 = (tmpvar_22 + (float(
    (abs((tmpvar_19.z / tmpvar_18.z)) > 1.0)
  ) * (
    (tmpvar_22 * -2.0)
   + 1.570796)));
  tmpvar_20 = (tmpvar_22 * sign((tmpvar_19.z / tmpvar_18.z)));
  if ((abs(tmpvar_18.z) > (1e-08 * abs(tmpvar_19.z)))) {
    if ((tmpvar_18.z < 0.0)) {
      if ((tmpvar_19.z >= 0.0)) {
        tmpvar_20 += 3.141593;
      } else {
        tmpvar_20 = (tmpvar_20 - 3.141593);
      };
    };
  } else {
    tmpvar_20 = (sign(tmpvar_19.z) * 1.570796);
  };
  angle_10 = vec3(tmpvar_20);
  bvec3 tmpvar_23;
  tmpvar_23 = lessThan (vec3(tmpvar_20), vec3(0.0, 0.0, 0.0));
  float tmpvar_24;
  if (tmpvar_23.x) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_23.y) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  float tmpvar_26;
  if (tmpvar_23.z) {
    tmpvar_26 = 6.283185;
  } else {
    tmpvar_26 = 0.0;
  };
  vec3 tmpvar_27;
  tmpvar_27.x = tmpvar_24;
  tmpvar_27.y = tmpvar_25;
  tmpvar_27.z = tmpvar_26;
  angle_10 = (vec3(tmpvar_20) + tmpvar_27);
  highp vec4 tmpvar_28;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_28 = _InstanceData;
  } else {
    tmpvar_28 = tmpvar_1;
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_13.x) * tmpvar_28.x) * tmpvar_18);
  billboardPos_9.xz = tmpvar_29.xz;
  billboardPos_9.y = (tmpvar_29.y + ((
    (_glesMultiTexCoord0.y * tmpvar_13.y)
   + tmpvar_13.z) * tmpvar_28.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_30;
    vPos_30 = billboardPos_9;
    highp float fMoveAmount_31;
    highp float fAdjust_32;
    highp float fLength_33;
    fLength_33 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_34;
    tmpvar_34 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_32 = tmpvar_34;
    if ((tmpvar_34 != 0.0)) {
      fAdjust_32 = pow (tmpvar_34, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_35;
    tmpvar_35.zw = vec2(0.0, 0.0);
    tmpvar_35.x = (tmpvar_15.x + tmpvar_28.w);
    tmpvar_35.y = (tmpvar_15.y + (tmpvar_28.w * 0.8));
    highp vec4 tmpvar_36;
    highp vec4 tmpvar_37;
    tmpvar_37 = abs(((
      fract((tmpvar_35 + 0.5))
     * 2.0) - 1.0));
    tmpvar_36 = (((
      (tmpvar_37 * tmpvar_37)
     * 
      (3.0 - (2.0 * tmpvar_37))
    ) - 0.5) * 2.0);
    fMoveAmount_31 = ((_ST_WindGlobal.y * (tmpvar_36.x + 
      (tmpvar_36.y * tmpvar_36.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_31 = (fMoveAmount_31 * fAdjust_32);
    vPos_30.xz = (tmpvar_29.xz + (_ST_WindVector.xz * fMoveAmount_31));
    vPos_30 = (normalize(vPos_30) * fLength_33);
    billboardPos_9 = vPos_30;
  };
  tmpvar_7.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_7.w = 1.0;
  angle_10 = (angle_10 + tmpvar_28.z);
  highp vec3 tmpvar_38;
  tmpvar_38 = (floor((
    (angle_10 * tmpvar_12.y)
   + 0.5)) / tmpvar_12.xxx);
  highp vec3 tmpvar_39;
  tmpvar_39 = (fract(abs(tmpvar_38)) * tmpvar_12.xxx);
  highp float tmpvar_40;
  if ((tmpvar_38.x >= 0.0)) {
    tmpvar_40 = tmpvar_39.x;
  } else {
    tmpvar_40 = -(tmpvar_39.x);
  };
  highp vec4 tmpvar_41;
  tmpvar_41 = _ImageTexCoords[int((tmpvar_12.z + tmpvar_40))];
  if ((tmpvar_41.w < 0.0)) {
    tmpvar_8.xy = (tmpvar_41.xy - (tmpvar_41.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_8.xy = (tmpvar_41.xy + (tmpvar_41.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_42;
  tmpvar_42 = clamp ((fract(
    ((tmpvar_15.x + tmpvar_15.y) + tmpvar_15.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_42;
  highp vec4 hPos_43;
  hPos_43 = (glstate_matrix_mvp * tmpvar_7);
  mediump vec3 screenPos_44;
  highp vec4 o_45;
  highp vec4 tmpvar_46;
  tmpvar_46 = (hPos_43 * 0.5);
  highp vec2 tmpvar_47;
  tmpvar_47.x = tmpvar_46.x;
  tmpvar_47.y = (tmpvar_46.y * _ProjectionParams.x);
  o_45.xy = (tmpvar_47 + tmpvar_46.w);
  o_45.zw = hPos_43.zw;
  highp vec3 tmpvar_48;
  tmpvar_48 = o_45.xyw;
  screenPos_44 = tmpvar_48;
  screenPos_44.xy = (screenPos_44.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = _Color;
  highp vec3 tmpvar_49;
  tmpvar_49 = (_Object2World * tmpvar_7).xyz;
  highp vec4 v_50;
  v_50.x = _World2Object[0].x;
  v_50.y = _World2Object[1].x;
  v_50.z = _World2Object[2].x;
  v_50.w = _World2Object[3].x;
  highp vec4 v_51;
  v_51.x = _World2Object[0].z;
  v_51.y = _World2Object[1].z;
  v_51.z = _World2Object[2].z;
  v_51.w = _World2Object[3].z;
  highp vec3 tmpvar_52;
  tmpvar_52 = normalize(((v_50.xyz * tmpvar_18.z) + (v_51.xyz * tmpvar_19.z)));
  worldNormal_4 = tmpvar_52;
  highp mat3 tmpvar_53;
  tmpvar_53[0] = _Object2World[0].xyz;
  tmpvar_53[1] = _Object2World[1].xyz;
  tmpvar_53[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize((tmpvar_53 * tmpvar_18));
  worldTangent_3 = tmpvar_54;
  lowp vec3 tmpvar_55;
  tmpvar_55 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_56;
  tmpvar_56 = -(tmpvar_55);
  worldBinormal_2 = tmpvar_56;
  highp vec4 tmpvar_57;
  tmpvar_57.x = worldTangent_3.x;
  tmpvar_57.y = worldBinormal_2.x;
  tmpvar_57.z = worldNormal_4.x;
  tmpvar_57.w = tmpvar_49.x;
  highp vec4 tmpvar_58;
  tmpvar_58.x = worldTangent_3.y;
  tmpvar_58.y = worldBinormal_2.y;
  tmpvar_58.z = worldNormal_4.y;
  tmpvar_58.w = tmpvar_49.y;
  highp vec4 tmpvar_59;
  tmpvar_59.x = worldTangent_3.z;
  tmpvar_59.y = worldBinormal_2.z;
  tmpvar_59.z = worldNormal_4.z;
  tmpvar_59.w = tmpvar_49.z;
  lowp vec4 tmpvar_60;
  tmpvar_60.w = 1.0;
  tmpvar_60.xyz = worldNormal_4;
  mediump vec4 normal_61;
  normal_61 = tmpvar_60;
  mediump vec3 x2_62;
  mediump vec4 tmpvar_63;
  tmpvar_63 = (normal_61.xyzz * normal_61.yzzx);
  x2_62.x = dot (unity_SHBr, tmpvar_63);
  x2_62.y = dot (unity_SHBg, tmpvar_63);
  x2_62.z = dot (unity_SHBb, tmpvar_63);
  tmpvar_6 = (unity_World2Shadow[0] * (_Object2World * tmpvar_7));
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_TEXCOORD0 = tmpvar_57;
  xlv_TEXCOORD1 = tmpvar_58;
  xlv_TEXCOORD2 = tmpvar_59;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = screenPos_44;
  xlv_TEXCOORD6 = (x2_62 + (unity_SHC.xyz * (
    (normal_61.x * normal_61.x)
   - 
    (normal_61.y * normal_61.y)
  )));
  xlv_TEXCOORD7 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_13.x = tmpvar_14.x;
  projUV_13.y = ((fract(tmpvar_14.y) * 0.0625) + unity_LODFade.y);
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_12 = tmpvar_16;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_17;
  x_17 = (tmpvar_10 - _Cutoff);
  if ((x_17 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_18;
  tmpvar_18 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_18.x, max (tmpvar_18.y, tmpvar_18.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_18 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_19;
  tmpvar_19 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7).x > 
    (xlv_TEXCOORD7.z / xlv_TEXCOORD7.w)
  )), _LightShadowData.x);
  tmpvar_20 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (xlv_TEXCOORD0.xyz, tmpvar_19);
  worldN_4.x = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = dot (xlv_TEXCOORD1.xyz, tmpvar_19);
  worldN_4.y = tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = dot (xlv_TEXCOORD2.xyz, tmpvar_19);
  worldN_4.z = tmpvar_24;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_20;
  mediump vec3 normalWorld_25;
  normalWorld_25 = worldN_4;
  mediump vec3 tmpvar_26;
  mediump vec3 tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = normalWorld_25;
  mediump vec3 x1_29;
  x1_29.x = dot (unity_SHAr, tmpvar_28);
  x1_29.y = dot (unity_SHAg, tmpvar_28);
  x1_29.z = dot (unity_SHAb, tmpvar_28);
  tmpvar_27 = (xlv_TEXCOORD6 + x1_29);
  tmpvar_26 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_26;
  lowp vec4 c_30;
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_32 = tmpvar_33;
  c_31.xyz = ((tmpvar_9 * tmpvar_26) * diff_32);
  c_31.w = tmpvar_10;
  c_30.w = c_31.w;
  c_30.xyz = (c_31.xyz + (tmpvar_9 * tmpvar_27));
  c_5.xyz = c_30.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesVertex;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp vec3 angle_10;
  highp float tmpvar_11;
  tmpvar_11 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeInfo[int(tmpvar_11)];
  highp vec4 tmpvar_13;
  tmpvar_13 = _TreeSize[int(tmpvar_11)];
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (_glesVertex.xyz + tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceCameraPos - tmpvar_15));
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = -(tmpvar_16.z);
  tmpvar_17.z = tmpvar_16.x;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(tmpvar_17);
  highp vec3 tmpvar_19;
  tmpvar_19.y = 0.0;
  tmpvar_19.x = tmpvar_18.z;
  tmpvar_19.z = -(tmpvar_18.x);
  highp float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = (min (abs(
    (tmpvar_19.z / tmpvar_18.z)
  ), 1.0) / max (abs(
    (tmpvar_19.z / tmpvar_18.z)
  ), 1.0));
  highp float tmpvar_22;
  tmpvar_22 = (tmpvar_21 * tmpvar_21);
  tmpvar_22 = (((
    ((((
      ((((-0.01213232 * tmpvar_22) + 0.05368138) * tmpvar_22) - 0.1173503)
     * tmpvar_22) + 0.1938925) * tmpvar_22) - 0.3326756)
   * tmpvar_22) + 0.9999793) * tmpvar_21);
  tmpvar_22 = (tmpvar_22 + (float(
    (abs((tmpvar_19.z / tmpvar_18.z)) > 1.0)
  ) * (
    (tmpvar_22 * -2.0)
   + 1.570796)));
  tmpvar_20 = (tmpvar_22 * sign((tmpvar_19.z / tmpvar_18.z)));
  if ((abs(tmpvar_18.z) > (1e-08 * abs(tmpvar_19.z)))) {
    if ((tmpvar_18.z < 0.0)) {
      if ((tmpvar_19.z >= 0.0)) {
        tmpvar_20 += 3.141593;
      } else {
        tmpvar_20 = (tmpvar_20 - 3.141593);
      };
    };
  } else {
    tmpvar_20 = (sign(tmpvar_19.z) * 1.570796);
  };
  angle_10 = vec3(tmpvar_20);
  bvec3 tmpvar_23;
  tmpvar_23 = lessThan (vec3(tmpvar_20), vec3(0.0, 0.0, 0.0));
  float tmpvar_24;
  if (tmpvar_23.x) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_23.y) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  float tmpvar_26;
  if (tmpvar_23.z) {
    tmpvar_26 = 6.283185;
  } else {
    tmpvar_26 = 0.0;
  };
  vec3 tmpvar_27;
  tmpvar_27.x = tmpvar_24;
  tmpvar_27.y = tmpvar_25;
  tmpvar_27.z = tmpvar_26;
  angle_10 = (vec3(tmpvar_20) + tmpvar_27);
  highp vec4 tmpvar_28;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_28 = _InstanceData;
  } else {
    tmpvar_28 = tmpvar_1;
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_13.x) * tmpvar_28.x) * tmpvar_18);
  billboardPos_9.xz = tmpvar_29.xz;
  billboardPos_9.y = (tmpvar_29.y + ((
    (_glesMultiTexCoord0.y * tmpvar_13.y)
   + tmpvar_13.z) * tmpvar_28.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_30;
    vPos_30 = billboardPos_9;
    highp float fMoveAmount_31;
    highp float fAdjust_32;
    highp float fLength_33;
    fLength_33 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_34;
    tmpvar_34 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_32 = tmpvar_34;
    if ((tmpvar_34 != 0.0)) {
      fAdjust_32 = pow (tmpvar_34, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_35;
    tmpvar_35.zw = vec2(0.0, 0.0);
    tmpvar_35.x = (tmpvar_15.x + tmpvar_28.w);
    tmpvar_35.y = (tmpvar_15.y + (tmpvar_28.w * 0.8));
    highp vec4 tmpvar_36;
    highp vec4 tmpvar_37;
    tmpvar_37 = abs(((
      fract((tmpvar_35 + 0.5))
     * 2.0) - 1.0));
    tmpvar_36 = (((
      (tmpvar_37 * tmpvar_37)
     * 
      (3.0 - (2.0 * tmpvar_37))
    ) - 0.5) * 2.0);
    fMoveAmount_31 = ((_ST_WindGlobal.y * (tmpvar_36.x + 
      (tmpvar_36.y * tmpvar_36.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_31 = (fMoveAmount_31 * fAdjust_32);
    vPos_30.xz = (tmpvar_29.xz + (_ST_WindVector.xz * fMoveAmount_31));
    vPos_30 = (normalize(vPos_30) * fLength_33);
    billboardPos_9 = vPos_30;
  };
  tmpvar_7.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_7.w = 1.0;
  angle_10 = (angle_10 + tmpvar_28.z);
  highp vec3 tmpvar_38;
  tmpvar_38 = (floor((
    (angle_10 * tmpvar_12.y)
   + 0.5)) / tmpvar_12.xxx);
  highp vec3 tmpvar_39;
  tmpvar_39 = (fract(abs(tmpvar_38)) * tmpvar_12.xxx);
  highp float tmpvar_40;
  if ((tmpvar_38.x >= 0.0)) {
    tmpvar_40 = tmpvar_39.x;
  } else {
    tmpvar_40 = -(tmpvar_39.x);
  };
  highp vec4 tmpvar_41;
  tmpvar_41 = _ImageTexCoords[int((tmpvar_12.z + tmpvar_40))];
  if ((tmpvar_41.w < 0.0)) {
    tmpvar_8.xy = (tmpvar_41.xy - (tmpvar_41.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_8.xy = (tmpvar_41.xy + (tmpvar_41.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_42;
  tmpvar_42 = clamp ((fract(
    ((tmpvar_15.x + tmpvar_15.y) + tmpvar_15.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_42;
  highp vec4 hPos_43;
  hPos_43 = (glstate_matrix_mvp * tmpvar_7);
  mediump vec3 screenPos_44;
  highp vec4 o_45;
  highp vec4 tmpvar_46;
  tmpvar_46 = (hPos_43 * 0.5);
  highp vec2 tmpvar_47;
  tmpvar_47.x = tmpvar_46.x;
  tmpvar_47.y = (tmpvar_46.y * _ProjectionParams.x);
  o_45.xy = (tmpvar_47 + tmpvar_46.w);
  o_45.zw = hPos_43.zw;
  highp vec3 tmpvar_48;
  tmpvar_48 = o_45.xyw;
  screenPos_44 = tmpvar_48;
  screenPos_44.xy = (screenPos_44.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = _Color;
  highp vec3 tmpvar_49;
  tmpvar_49 = (_Object2World * tmpvar_7).xyz;
  highp vec4 v_50;
  v_50.x = _World2Object[0].x;
  v_50.y = _World2Object[1].x;
  v_50.z = _World2Object[2].x;
  v_50.w = _World2Object[3].x;
  highp vec4 v_51;
  v_51.x = _World2Object[0].z;
  v_51.y = _World2Object[1].z;
  v_51.z = _World2Object[2].z;
  v_51.w = _World2Object[3].z;
  highp vec3 tmpvar_52;
  tmpvar_52 = normalize(((v_50.xyz * tmpvar_18.z) + (v_51.xyz * tmpvar_19.z)));
  worldNormal_4 = tmpvar_52;
  highp mat3 tmpvar_53;
  tmpvar_53[0] = _Object2World[0].xyz;
  tmpvar_53[1] = _Object2World[1].xyz;
  tmpvar_53[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize((tmpvar_53 * tmpvar_18));
  worldTangent_3 = tmpvar_54;
  lowp vec3 tmpvar_55;
  tmpvar_55 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_56;
  tmpvar_56 = -(tmpvar_55);
  worldBinormal_2 = tmpvar_56;
  highp vec4 tmpvar_57;
  tmpvar_57.x = worldTangent_3.x;
  tmpvar_57.y = worldBinormal_2.x;
  tmpvar_57.z = worldNormal_4.x;
  tmpvar_57.w = tmpvar_49.x;
  highp vec4 tmpvar_58;
  tmpvar_58.x = worldTangent_3.y;
  tmpvar_58.y = worldBinormal_2.y;
  tmpvar_58.z = worldNormal_4.y;
  tmpvar_58.w = tmpvar_49.y;
  highp vec4 tmpvar_59;
  tmpvar_59.x = worldTangent_3.z;
  tmpvar_59.y = worldBinormal_2.z;
  tmpvar_59.z = worldNormal_4.z;
  tmpvar_59.w = tmpvar_49.z;
  lowp vec4 tmpvar_60;
  tmpvar_60.w = 1.0;
  tmpvar_60.xyz = worldNormal_4;
  mediump vec4 normal_61;
  normal_61 = tmpvar_60;
  mediump vec3 x2_62;
  mediump vec4 tmpvar_63;
  tmpvar_63 = (normal_61.xyzz * normal_61.yzzx);
  x2_62.x = dot (unity_SHBr, tmpvar_63);
  x2_62.y = dot (unity_SHBg, tmpvar_63);
  x2_62.z = dot (unity_SHBb, tmpvar_63);
  highp vec3 lightColor0_64;
  lightColor0_64 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_65;
  lightColor1_65 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_66;
  lightColor2_66 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_67;
  lightColor3_67 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_68;
  lightAttenSq_68 = unity_4LightAtten0;
  highp vec3 normal_69;
  normal_69 = worldNormal_4;
  highp vec3 col_70;
  highp vec4 ndotl_71;
  highp vec4 lengthSq_72;
  highp vec4 tmpvar_73;
  tmpvar_73 = (unity_4LightPosX0 - tmpvar_49.x);
  highp vec4 tmpvar_74;
  tmpvar_74 = (unity_4LightPosY0 - tmpvar_49.y);
  highp vec4 tmpvar_75;
  tmpvar_75 = (unity_4LightPosZ0 - tmpvar_49.z);
  lengthSq_72 = (tmpvar_73 * tmpvar_73);
  lengthSq_72 = (lengthSq_72 + (tmpvar_74 * tmpvar_74));
  lengthSq_72 = (lengthSq_72 + (tmpvar_75 * tmpvar_75));
  ndotl_71 = (tmpvar_73 * normal_69.x);
  ndotl_71 = (ndotl_71 + (tmpvar_74 * normal_69.y));
  ndotl_71 = (ndotl_71 + (tmpvar_75 * normal_69.z));
  highp vec4 tmpvar_76;
  tmpvar_76 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_71 * inversesqrt(lengthSq_72)));
  ndotl_71 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = (tmpvar_76 * (1.0/((1.0 + 
    (lengthSq_72 * lightAttenSq_68)
  ))));
  col_70 = (lightColor0_64 * tmpvar_77.x);
  col_70 = (col_70 + (lightColor1_65 * tmpvar_77.y));
  col_70 = (col_70 + (lightColor2_66 * tmpvar_77.z));
  col_70 = (col_70 + (lightColor3_67 * tmpvar_77.w));
  tmpvar_6 = ((x2_62 + (unity_SHC.xyz * 
    ((normal_61.x * normal_61.x) - (normal_61.y * normal_61.y))
  )) + col_70);
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_TEXCOORD0 = tmpvar_57;
  xlv_TEXCOORD1 = tmpvar_58;
  xlv_TEXCOORD2 = tmpvar_59;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = screenPos_44;
  xlv_TEXCOORD6 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_16;
  x_16 = (tmpvar_9 - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_17.x, max (tmpvar_17.y, tmpvar_17.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_17 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_18;
  tmpvar_18 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD0.xyz, tmpvar_18);
  worldN_3.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD1.xyz, tmpvar_18);
  worldN_3.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (xlv_TEXCOORD2.xyz, tmpvar_18);
  worldN_3.z = tmpvar_21;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_22;
  normalWorld_22 = worldN_3;
  mediump vec3 tmpvar_23;
  mediump vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = normalWorld_22;
  mediump vec3 x1_25;
  x1_25.x = dot (unity_SHAr, tmpvar_24);
  x1_25.y = dot (unity_SHAg, tmpvar_24);
  x1_25.z = dot (unity_SHAb, tmpvar_24);
  tmpvar_23 = (xlv_TEXCOORD6 + x1_25);
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_28 = tmpvar_29;
  c_27.xyz = ((tmpvar_8 * tmpvar_1) * diff_28);
  c_27.w = tmpvar_9;
  c_26.w = c_27.w;
  c_26.xyz = (c_27.xyz + (tmpvar_8 * tmpvar_23));
  c_4.xyz = c_26.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
lowp vec3 t10_7;
mediump vec3 t16_8;
mediump vec3 t16_9;
highp vec3 t11;
highp int ti11;
bool tb11;
highp float t12;
highp vec2 t21;
bool tb21;
highp vec2 t22;
highp uint tu22;
highp float t31;
bool tb31;
highp float t32;
highp float t33;
bool tb33;
void main()
{
    //Instruction 62562
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 62563
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 62564
    //LT
    tb11 = 0.0<_InstanceData.x;
    //Instruction 62565
    //MOVC
    t0 = (bool(tb11)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 62566
    //ADD
    t11.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 62567
    //ADD
    t2.x = t0.w + t11.x;
    //Instruction 62568
    //MAD
    t2.y = t0.w * 0.800000 + t11.y;
    //Instruction 62569
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 62570
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 62571
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 62572
    //MUL
    t22.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 62573
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 62574
    //MAD
    t2.xy = t22.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 62575
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 62576
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 62577
    //DIV
    t12 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 62578
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t12;
    //Instruction 62579
    //DIV
    t12 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 62580
    //MUL
    t22.x = in_COLOR0.w * 255.000000;
    //Instruction 62581
    //FTOU
    tu22 = uint(t22.x);
    //Instruction 62582
    //MAD
    t32 = in_TEXCOORD0.y * _TreeSize[int(tu22) + 0].y + _TreeSize[int(tu22) + 0].z;
    //Instruction 62583
    //MUL
    t3.y = t0.y * t32;
    //Instruction 62584
    //MAD
    t12 = (-t12) * 0.250000 + t3.y;
    //Instruction 62585
    //MAX
    t12 = max(t12, 0.0);
    //Instruction 62586
    //MUL
    t12 = t12 * _ST_WindGlobal.z;
    //Instruction 62587
    //LOG
    t32 = log2(t12);
    //Instruction 62588
    //MUL
    t32 = t32 * _ST_WindGlobal.w;
    //Instruction 62589
    //EXP
    t32 = exp2(t32);
    //Instruction 62590
    //NE
    tb33 = t12!=0.0;
    //Instruction 62591
    //MOVC
    t12 = (tb33) ? t32 : t12;
    //Instruction 62592
    //MUL
    t2.x = t12 * t2.x;
    //Instruction 62593
    //ADD
    t12 = in_TEXCOORD0.x + -0.500000;
    //Instruction 62594
    //MUL
    t12 = t12 * _TreeSize[int(tu22) + 0].x;
    //Instruction 62595
    //MUL
    t12 = t0.x * t12;
    //Instruction 62596
    //ADD
    t4.xyz = (-t11.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 62597
    //DP3
    t32 = dot(t4.xyz, t4.xyz);
    //Instruction 62598
    //RSQ
    t32 = inversesqrt(t32);
    //Instruction 62599
    //MUL
    t4.xy = vec2(t32) * t4.xz;
    //Instruction 62600
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 62601
    //DP2
    t32 = dot(t4.xz, t4.xw);
    //Instruction 62602
    //MUL
    t4.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 62603
    //RSQ
    t32 = inversesqrt(t32);
    //Instruction 62604
    //MUL
    t4.xy = vec2(t32) * t4.xy;
    //Instruction 62605
    //MUL
    t3.xz = vec2(t12) * t4.xy;
    //Instruction 62606
    //MAD
    t5.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 62607
    //MOV
    t5.y = t3.y;
    //Instruction 62608
    //DP3
    t2.x = dot(t5.xyz, t5.xyz);
    //Instruction 62609
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 62610
    //MUL
    t2.xyw = t2.xxx * t5.xyz;
    //Instruction 62611
    //DP3
    t33 = dot(t3.xyz, t3.xyz);
    //Instruction 62612
    //SQRT
    t33 = sqrt(t33);
    //Instruction 62613
    //MUL
    t2.xyw = t2.xyw * vec3(t33);
    //Instruction 62614
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 62615
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 62616
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 62617
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 62618
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 62619
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 62620
    //MUL
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 62621
    //MAD
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    //Instruction 62622
    //MAD
    t3.xyz = _Object2World[2].xyz * t2.www + t3.xyz;
    //Instruction 62623
    //ADD
    t3.xyz = t3.xyz + _Object2World[3].xyz;
    //Instruction 62624
    //MOV
    vs_TEXCOORD0.w = t3.x;
    //Instruction 62625
    //MUL
    t5.x = t4.y * _World2Object[0].x;
    //Instruction 62626
    //MUL
    t5.y = t4.y * _World2Object[1].x;
    //Instruction 62627
    //MUL
    t5.zw = t4.yy * _World2Object[2].xx;
    //Instruction 62628
    //MUL
    t6.x = (-t4.x) * _World2Object[0].z;
    //Instruction 62629
    //MUL
    t6.y = (-t4.x) * _World2Object[1].z;
    //Instruction 62630
    //MUL
    t6.zw = (-t4.xx) * _World2Object[2].zz;
    //Instruction 62631
    //ADD
    t5 = t5 + t6;
    //Instruction 62632
    //DP3
    t1.x = dot(t5.xyw, t5.xyw);
    //Instruction 62633
    //RSQ
    t1.x = inversesqrt(t1.x);
    //Instruction 62634
    //MUL
    t5 = t1.xxxx * t5;
    //Instruction 62635
    //MUL
    t6.xyz = t4.yyy * _Object2World[2].yzx;
    //Instruction 62636
    //MAD
    t6.xyz = _Object2World[0].yzx * t4.xxx + t6.xyz;
    //Instruction 62637
    //DP3
    t1.x = dot(t6.xyz, t6.xyz);
    //Instruction 62638
    //RSQ
    t1.x = inversesqrt(t1.x);
    //Instruction 62639
    //MUL
    t6.xyz = t1.xxx * t6.xyz;
    //Instruction 62640
    //MUL
    t10_7.xyz = t5.wxy * t6.xyz;
    //Instruction 62641
    //MAD
    t10_7.xyz = t5.ywx * t6.yzx + (-t10_7.xyz);
    //Instruction 62642
    //MOV
    vs_TEXCOORD0.y = (-t10_7.x);
    //Instruction 62643
    //MOV
    vs_TEXCOORD0.z = t5.x;
    //Instruction 62644
    //MOV
    vs_TEXCOORD0.x = t6.z;
    //Instruction 62645
    //MOV
    vs_TEXCOORD1.w = t3.y;
    //Instruction 62646
    //MOV
    vs_TEXCOORD1.x = t6.x;
    //Instruction 62647
    //MOV
    vs_TEXCOORD2.x = t6.y;
    //Instruction 62648
    //MOV
    vs_TEXCOORD1.y = (-t10_7.y);
    //Instruction 62649
    //MOV
    vs_TEXCOORD2.y = (-t10_7.z);
    //Instruction 62650
    //MOV
    vs_TEXCOORD1.z = t5.y;
    //Instruction 62651
    //MOV
    vs_TEXCOORD2.w = t3.z;
    //Instruction 62652
    //MOV
    vs_TEXCOORD2.z = t5.w;
    //Instruction 62653
    //MOV
    vs_TEXCOORD3 = _Color;
    //Instruction 62654
    //ADD
    t1.x = t11.y + t11.x;
    //Instruction 62655
    //ADD
    t1.x = t11.z + t1.x;
    //Instruction 62656
    //FRC
    t1.x = fract(t1.x);
    //Instruction 62657
    //MUL
    t1.x = t1.x * _HueVariation.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 62658
    //MOV
    vs_TEXCOORD4.z = t1.x;
    //Instruction 62659
    //MAX
    t1.x = max(abs(t4.y), abs(t4.x));
    //Instruction 62660
    //DIV
    t1.x = float(1.0) / t1.x;
    //Instruction 62661
    //MIN
    t11.x = min(abs(t4.y), abs(t4.x));
    //Instruction 62662
    //MUL
    t1.x = t1.x * t11.x;
    //Instruction 62663
    //MUL
    t11.x = t1.x * t1.x;
    //Instruction 62664
    //MAD
    t21.x = t11.x * 0.020835 + -0.085133;
    //Instruction 62665
    //MAD
    t21.x = t11.x * t21.x + 0.180141;
    //Instruction 62666
    //MAD
    t21.x = t11.x * t21.x + -0.330299;
    //Instruction 62667
    //MAD
    t11.x = t11.x * t21.x + 0.999866;
    //Instruction 62668
    //MUL
    t21.x = t11.x * t1.x;
    //Instruction 62669
    //MAD
    t21.x = t21.x * -2.000000 + 1.570796;
    //Instruction 62670
    //LT
    tb31 = abs(t4.y)<abs(t4.x);
    //Instruction 62671
    //AND
    t21.x = tb31 ? t21.x : float(0.0);
    //Instruction 62672
    //MAD
    t1.x = t1.x * t11.x + t21.x;
    //Instruction 62673
    //LT
    tb11 = t4.y<(-t4.y);
    //Instruction 62674
    //AND
    t11.x = tb11 ? -3.141593 : float(0.0);
    //Instruction 62675
    //ADD
    t1.x = t11.x + t1.x;
    //Instruction 62676
    //MIN
    t11.x = min(t4.y, (-t4.x));
    //Instruction 62677
    //MAX
    t21.x = max(t4.y, (-t4.x));
    //Instruction 62678
    //GE
    tb21 = t21.x>=(-t21.x);
    //Instruction 62679
    //LT
    tb11 = t11.x<(-t11.x);
    //Instruction 62680
    //AND
    ti11 = int(uint(tb21) & uint(tb11));
    //Instruction 62681
    //MOVC
    t1.x = (ti11 != 0) ? (-t1.x) : t1.x;
    //Instruction 62682
    //LT
    tb11 = t1.x<0.0;
    //Instruction 62683
    //AND
    t11.x = tb11 ? 6.283185 : float(0.0);
    //Instruction 62684
    //ADD
    t1.x = t11.x + t1.x;
    //Instruction 62685
    //ADD
    t1.x = t0.z + t1.x;
    //Instruction 62686
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu22) + 0].y + 0.500000;
    //Instruction 62687
    //ROUND_NI
    t1.x = floor(t1.x);
    //Instruction 62688
    //DIV
    t1.x = t1.x / _TreeInfo[int(tu22) + 0].x;
    //Instruction 62689
    //GE
    tb11 = t1.x>=(-t1.x);
    //Instruction 62690
    //FRC
    t1.x = fract(abs(t1.x));
    //Instruction 62691
    //MOVC
    t1.x = (tb11) ? t1.x : (-t1.x);
    //Instruction 62692
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu22) + 0].x + _TreeInfo[int(tu22) + 0].z;
    //Instruction 62693
    //FTOU
    tu1 = uint(t1.x);
    //Instruction 62694
    //LT
    tb11 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 62695
    //MAD
    t21.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 62696
    //MAD
    t4.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 62697
    //MOVC
    vs_TEXCOORD4.xy = (bool(tb11)) ? t21.xy : t4.xy;
    //Instruction 62698
    //MUL
    t1.xyz = t2.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 62699
    //MAD
    t1.xyz = glstate_matrix_mvp[0].xyw * t2.xxx + t1.xyz;
    //Instruction 62700
    //MAD
    t1.xyz = glstate_matrix_mvp[2].xyw * t2.www + t1.xyz;
    //Instruction 62701
    //ADD
    t1.xyz = t1.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 62702
    //MUL
    t2.xz = t1.xz * vec2(0.500000, 0.500000);
    //Instruction 62703
    //MUL
    t31 = t1.y * _ProjectionParams.x;
    //Instruction 62704
    //MUL
    t2.w = t31 * 0.500000;
    //Instruction 62705
    //ADD
    t2.xy = t2.zz + t2.xw;
    //Instruction 62706
    //MUL
    t2.xy = t2.xy * _ScreenParams.xy;
    //Instruction 62707
    //MUL
    t1.xy = t2.xy * vec2(0.250000, 0.250000);
    //Instruction 62708
    //MOV
    vs_TEXCOORD5.xyz = t1.xyz;
    //Instruction 62709
    //ADD
    t0 = (-t3.zzzz) + unity_4LightPosZ0;
    //Instruction 62710
    //ADD
    t1 = (-t3.xxxx) + unity_4LightPosX0;
    //Instruction 62711
    //ADD
    t2 = (-t3.yyyy) + unity_4LightPosY0;
    //Instruction 62712
    //MUL
    t3 = t5.yyyy * t2;
    //Instruction 62713
    //MUL
    t2 = t2 * t2;
    //Instruction 62714
    //MAD
    t2 = t1 * t1 + t2;
    //Instruction 62715
    //MAD
    t1 = t1 * t5.xxxx + t3;
    //Instruction 62716
    //MAD
    t1 = t0 * t5.wwww + t1;
    //Instruction 62717
    //MAD
    t0 = t0 * t0 + t2;
    //Instruction 62718
    //RSQ
    t2 = inversesqrt(t0);
    //Instruction 62719
    //MAD
    t0 = t0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 62720
    //DIV
    t0 = vec4(1.0, 1.0, 1.0, 1.0) / t0;
    //Instruction 62721
    //MUL
    t1 = t1 * t2;
    //Instruction 62722
    //MAX
    t1 = max(t1, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 62723
    //MUL
    t0 = t0 * t1;
    //Instruction 62724
    //MUL
    t1.xyz = t0.yyy * unity_LightColor[1].xyz;
    //Instruction 62725
    //MAD
    t1.xyz = unity_LightColor[0].xyz * t0.xxx + t1.xyz;
    //Instruction 62726
    //MAD
    t1.xyz = unity_LightColor[2].xyz * t0.zzz + t1.xyz;
    //Instruction 62727
    //MAD
    t1.xyz = unity_LightColor[3].xyz * t0.www + t1.xyz;
    //Instruction 62728
    //MUL
    t16_8.x = t5.y * t5.y;
    //Instruction 62729
    //MAD
    t16_8.x = t5.x * t5.x + (-t16_8.x);
    //Instruction 62730
    //MUL
    t16_0 = t5.ywzx * t5;
    //Instruction 62731
    //DP4
    t16_9.x = dot(unity_SHBr, t16_0);
    //Instruction 62732
    //DP4
    t16_9.y = dot(unity_SHBg, t16_0);
    //Instruction 62733
    //DP4
    t16_9.z = dot(unity_SHBb, t16_0);
    //Instruction 62734
    //MAD
    t16_8.xyz = unity_SHC.xyz * t16_8.xxx + t16_9.xyz;
    //Instruction 62735
    //ADD
    t1.xyz = t1.xyz + t16_8.xyz;
    //Instruction 62736
    //MOV
    vs_TEXCOORD6.xyz = t1.xyz;
    //Instruction 62737
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump float t16_6;
mediump vec3 t16_9;
mediump float t16_21;
void main()
{
    //Instruction 62522
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    //Instruction 62523
    //FRC
    t16_6 = fract(t16_0.y);
    //Instruction 62524
    //MOV
    t1.x = t16_0.x;
    //Instruction 62525
    //MAD
    t1.y = t16_6 * 0.062500 + unity_LODFade.y;
    //Instruction 62526
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 62527
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 62528
    //LT
    tb1 = t16_1<0.0;
    //Instruction 62529
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 62530
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    //Instruction 62531
    //MAD
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 62532
    //LT
    tb1 = t10_2.x<0.0;
    //Instruction 62533
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 62534
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 62535
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 62536
    //ADD
    t16_9.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 62537
    //MAD
    t16_9.xyz = vs_TEXCOORD4.zzz * t16_9.xyz + t10_0.xyz;
    //Instruction 62538
    //MAX
    t16_4.x = max(t16_9.z, t16_9.y);
    //Instruction 62539
    //MAX
    t16_4.x = max(t16_9.x, t16_4.x);
    //Instruction 62540
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 62541
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 62542
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_9.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 62543
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD3.xyz;
    //Instruction 62544
    //MUL
    t16_4.xyz = t16_3.xyz * _LightColor0.xyz;
    //Instruction 62545
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 62546
    //MAD
    t10_2.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 62547
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    //Instruction 62548
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    //Instruction 62549
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    //Instruction 62550
    //MOV
    t0.w = 1.0;
    //Instruction 62551
    //DP4
    t16_5.x = dot(unity_SHAr, t0);
    //Instruction 62552
    //DP4
    t16_5.y = dot(unity_SHAg, t0);
    //Instruction 62553
    //DP4
    t16_5.z = dot(unity_SHAb, t0);
    //Instruction 62554
    //DP3
    t16_21 = dot(t0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 62555
    //MAX
    t16_21 = max(t16_21, 0.0);
    //Instruction 62556
    //ADD
    t16_5.xyz = t16_5.xyz + vs_TEXCOORD6.xyz;
    //Instruction 62557
    //MUL
    t16_3.xyz = t16_3.xyz * t16_5.xyz;
    //Instruction 62558
    //MAD
    t16_3.xyz = t16_4.xyz * vec3(t16_21) + t16_3.xyz;
    //Instruction 62559
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 62560
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 62561
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = _glesVertex;
  mediump vec3 tmpvar_9;
  highp vec3 billboardPos_10;
  highp vec3 angle_11;
  highp float tmpvar_12;
  tmpvar_12 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_13;
  tmpvar_13 = _TreeInfo[int(tmpvar_12)];
  highp vec4 tmpvar_14;
  tmpvar_14 = _TreeSize[int(tmpvar_12)];
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  highp vec3 tmpvar_16;
  tmpvar_16 = (_glesVertex.xyz + tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((_WorldSpaceCameraPos - tmpvar_16));
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = -(tmpvar_17.z);
  tmpvar_18.z = tmpvar_17.x;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(tmpvar_18);
  highp vec3 tmpvar_20;
  tmpvar_20.y = 0.0;
  tmpvar_20.x = tmpvar_19.z;
  tmpvar_20.z = -(tmpvar_19.x);
  highp float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (min (abs(
    (tmpvar_20.z / tmpvar_19.z)
  ), 1.0) / max (abs(
    (tmpvar_20.z / tmpvar_19.z)
  ), 1.0));
  highp float tmpvar_23;
  tmpvar_23 = (tmpvar_22 * tmpvar_22);
  tmpvar_23 = (((
    ((((
      ((((-0.01213232 * tmpvar_23) + 0.05368138) * tmpvar_23) - 0.1173503)
     * tmpvar_23) + 0.1938925) * tmpvar_23) - 0.3326756)
   * tmpvar_23) + 0.9999793) * tmpvar_22);
  tmpvar_23 = (tmpvar_23 + (float(
    (abs((tmpvar_20.z / tmpvar_19.z)) > 1.0)
  ) * (
    (tmpvar_23 * -2.0)
   + 1.570796)));
  tmpvar_21 = (tmpvar_23 * sign((tmpvar_20.z / tmpvar_19.z)));
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_20.z)))) {
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_20.z >= 0.0)) {
        tmpvar_21 += 3.141593;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.141593);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_20.z) * 1.570796);
  };
  angle_11 = vec3(tmpvar_21);
  bvec3 tmpvar_24;
  tmpvar_24 = lessThan (vec3(tmpvar_21), vec3(0.0, 0.0, 0.0));
  float tmpvar_25;
  if (tmpvar_24.x) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  float tmpvar_26;
  if (tmpvar_24.y) {
    tmpvar_26 = 6.283185;
  } else {
    tmpvar_26 = 0.0;
  };
  float tmpvar_27;
  if (tmpvar_24.z) {
    tmpvar_27 = 6.283185;
  } else {
    tmpvar_27 = 0.0;
  };
  vec3 tmpvar_28;
  tmpvar_28.x = tmpvar_25;
  tmpvar_28.y = tmpvar_26;
  tmpvar_28.z = tmpvar_27;
  angle_11 = (vec3(tmpvar_21) + tmpvar_28);
  highp vec4 tmpvar_29;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_29 = _InstanceData;
  } else {
    tmpvar_29 = tmpvar_1;
  };
  highp vec3 tmpvar_30;
  tmpvar_30 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_14.x) * tmpvar_29.x) * tmpvar_19);
  billboardPos_10.xz = tmpvar_30.xz;
  billboardPos_10.y = (tmpvar_30.y + ((
    (_glesMultiTexCoord0.y * tmpvar_14.y)
   + tmpvar_14.z) * tmpvar_29.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_31;
    vPos_31 = billboardPos_10;
    highp float fMoveAmount_32;
    highp float fAdjust_33;
    highp float fLength_34;
    fLength_34 = sqrt(dot (billboardPos_10, billboardPos_10));
    highp float tmpvar_35;
    tmpvar_35 = (max ((billboardPos_10.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_33 = tmpvar_35;
    if ((tmpvar_35 != 0.0)) {
      fAdjust_33 = pow (tmpvar_35, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_36;
    tmpvar_36.zw = vec2(0.0, 0.0);
    tmpvar_36.x = (tmpvar_16.x + tmpvar_29.w);
    tmpvar_36.y = (tmpvar_16.y + (tmpvar_29.w * 0.8));
    highp vec4 tmpvar_37;
    highp vec4 tmpvar_38;
    tmpvar_38 = abs(((
      fract((tmpvar_36 + 0.5))
     * 2.0) - 1.0));
    tmpvar_37 = (((
      (tmpvar_38 * tmpvar_38)
     * 
      (3.0 - (2.0 * tmpvar_38))
    ) - 0.5) * 2.0);
    fMoveAmount_32 = ((_ST_WindGlobal.y * (tmpvar_37.x + 
      (tmpvar_37.y * tmpvar_37.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_32 = (fMoveAmount_32 * fAdjust_33);
    vPos_31.xz = (tmpvar_30.xz + (_ST_WindVector.xz * fMoveAmount_32));
    vPos_31 = (normalize(vPos_31) * fLength_34);
    billboardPos_10 = vPos_31;
  };
  tmpvar_8.xyz = (_glesVertex.xyz + billboardPos_10);
  tmpvar_8.w = 1.0;
  angle_11 = (angle_11 + tmpvar_29.z);
  highp vec3 tmpvar_39;
  tmpvar_39 = (floor((
    (angle_11 * tmpvar_13.y)
   + 0.5)) / tmpvar_13.xxx);
  highp vec3 tmpvar_40;
  tmpvar_40 = (fract(abs(tmpvar_39)) * tmpvar_13.xxx);
  highp float tmpvar_41;
  if ((tmpvar_39.x >= 0.0)) {
    tmpvar_41 = tmpvar_40.x;
  } else {
    tmpvar_41 = -(tmpvar_40.x);
  };
  highp vec4 tmpvar_42;
  tmpvar_42 = _ImageTexCoords[int((tmpvar_13.z + tmpvar_41))];
  if ((tmpvar_42.w < 0.0)) {
    tmpvar_9.xy = (tmpvar_42.xy - (tmpvar_42.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_9.xy = (tmpvar_42.xy + (tmpvar_42.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_43;
  tmpvar_43 = clamp ((fract(
    ((tmpvar_16.x + tmpvar_16.y) + tmpvar_16.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_43;
  highp vec4 hPos_44;
  hPos_44 = (glstate_matrix_mvp * tmpvar_8);
  mediump vec3 screenPos_45;
  highp vec4 o_46;
  highp vec4 tmpvar_47;
  tmpvar_47 = (hPos_44 * 0.5);
  highp vec2 tmpvar_48;
  tmpvar_48.x = tmpvar_47.x;
  tmpvar_48.y = (tmpvar_47.y * _ProjectionParams.x);
  o_46.xy = (tmpvar_48 + tmpvar_47.w);
  o_46.zw = hPos_44.zw;
  highp vec3 tmpvar_49;
  tmpvar_49 = o_46.xyw;
  screenPos_45 = tmpvar_49;
  screenPos_45.xy = (screenPos_45.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = _Color;
  highp vec3 tmpvar_50;
  tmpvar_50 = (_Object2World * tmpvar_8).xyz;
  highp vec4 v_51;
  v_51.x = _World2Object[0].x;
  v_51.y = _World2Object[1].x;
  v_51.z = _World2Object[2].x;
  v_51.w = _World2Object[3].x;
  highp vec4 v_52;
  v_52.x = _World2Object[0].z;
  v_52.y = _World2Object[1].z;
  v_52.z = _World2Object[2].z;
  v_52.w = _World2Object[3].z;
  highp vec3 tmpvar_53;
  tmpvar_53 = normalize(((v_51.xyz * tmpvar_19.z) + (v_52.xyz * tmpvar_20.z)));
  worldNormal_4 = tmpvar_53;
  highp mat3 tmpvar_54;
  tmpvar_54[0] = _Object2World[0].xyz;
  tmpvar_54[1] = _Object2World[1].xyz;
  tmpvar_54[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize((tmpvar_54 * tmpvar_19));
  worldTangent_3 = tmpvar_55;
  lowp vec3 tmpvar_56;
  tmpvar_56 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_57;
  tmpvar_57 = -(tmpvar_56);
  worldBinormal_2 = tmpvar_57;
  highp vec4 tmpvar_58;
  tmpvar_58.x = worldTangent_3.x;
  tmpvar_58.y = worldBinormal_2.x;
  tmpvar_58.z = worldNormal_4.x;
  tmpvar_58.w = tmpvar_50.x;
  highp vec4 tmpvar_59;
  tmpvar_59.x = worldTangent_3.y;
  tmpvar_59.y = worldBinormal_2.y;
  tmpvar_59.z = worldNormal_4.y;
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60.x = worldTangent_3.z;
  tmpvar_60.y = worldBinormal_2.z;
  tmpvar_60.z = worldNormal_4.z;
  tmpvar_60.w = tmpvar_50.z;
  lowp vec4 tmpvar_61;
  tmpvar_61.w = 1.0;
  tmpvar_61.xyz = worldNormal_4;
  mediump vec4 normal_62;
  normal_62 = tmpvar_61;
  mediump vec3 x2_63;
  mediump vec4 tmpvar_64;
  tmpvar_64 = (normal_62.xyzz * normal_62.yzzx);
  x2_63.x = dot (unity_SHBr, tmpvar_64);
  x2_63.y = dot (unity_SHBg, tmpvar_64);
  x2_63.z = dot (unity_SHBb, tmpvar_64);
  highp vec3 lightColor0_65;
  lightColor0_65 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_66;
  lightColor1_66 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_67;
  lightColor2_67 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_68;
  lightColor3_68 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_69;
  lightAttenSq_69 = unity_4LightAtten0;
  highp vec3 normal_70;
  normal_70 = worldNormal_4;
  highp vec3 col_71;
  highp vec4 ndotl_72;
  highp vec4 lengthSq_73;
  highp vec4 tmpvar_74;
  tmpvar_74 = (unity_4LightPosX0 - tmpvar_50.x);
  highp vec4 tmpvar_75;
  tmpvar_75 = (unity_4LightPosY0 - tmpvar_50.y);
  highp vec4 tmpvar_76;
  tmpvar_76 = (unity_4LightPosZ0 - tmpvar_50.z);
  lengthSq_73 = (tmpvar_74 * tmpvar_74);
  lengthSq_73 = (lengthSq_73 + (tmpvar_75 * tmpvar_75));
  lengthSq_73 = (lengthSq_73 + (tmpvar_76 * tmpvar_76));
  ndotl_72 = (tmpvar_74 * normal_70.x);
  ndotl_72 = (ndotl_72 + (tmpvar_75 * normal_70.y));
  ndotl_72 = (ndotl_72 + (tmpvar_76 * normal_70.z));
  highp vec4 tmpvar_77;
  tmpvar_77 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_72 * inversesqrt(lengthSq_73)));
  ndotl_72 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = (tmpvar_77 * (1.0/((1.0 + 
    (lengthSq_73 * lightAttenSq_69)
  ))));
  col_71 = (lightColor0_65 * tmpvar_78.x);
  col_71 = (col_71 + (lightColor1_66 * tmpvar_78.y));
  col_71 = (col_71 + (lightColor2_67 * tmpvar_78.z));
  col_71 = (col_71 + (lightColor3_68 * tmpvar_78.w));
  tmpvar_6 = ((x2_63 + (unity_SHC.xyz * 
    ((normal_62.x * normal_62.x) - (normal_62.y * normal_62.y))
  )) + col_71);
  tmpvar_7 = (unity_World2Shadow[0] * (_Object2World * tmpvar_8));
  gl_Position = (glstate_matrix_mvp * tmpvar_8);
  xlv_TEXCOORD0 = tmpvar_58;
  xlv_TEXCOORD1 = tmpvar_59;
  xlv_TEXCOORD2 = tmpvar_60;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = screenPos_45;
  xlv_TEXCOORD6 = tmpvar_6;
  xlv_TEXCOORD7 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_13.x = tmpvar_14.x;
  projUV_13.y = ((fract(tmpvar_14.y) * 0.0625) + unity_LODFade.y);
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_12 = tmpvar_16;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_17;
  x_17 = (tmpvar_10 - _Cutoff);
  if ((x_17 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_18;
  tmpvar_18 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_18.x, max (tmpvar_18.y, tmpvar_18.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_18 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_19;
  tmpvar_19 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7).x > 
    (xlv_TEXCOORD7.z / xlv_TEXCOORD7.w)
  )), _LightShadowData.x);
  tmpvar_20 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (xlv_TEXCOORD0.xyz, tmpvar_19);
  worldN_4.x = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = dot (xlv_TEXCOORD1.xyz, tmpvar_19);
  worldN_4.y = tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = dot (xlv_TEXCOORD2.xyz, tmpvar_19);
  worldN_4.z = tmpvar_24;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_20;
  mediump vec3 normalWorld_25;
  normalWorld_25 = worldN_4;
  mediump vec3 tmpvar_26;
  mediump vec3 tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = normalWorld_25;
  mediump vec3 x1_29;
  x1_29.x = dot (unity_SHAr, tmpvar_28);
  x1_29.y = dot (unity_SHAg, tmpvar_28);
  x1_29.z = dot (unity_SHAb, tmpvar_28);
  tmpvar_27 = (xlv_TEXCOORD6 + x1_29);
  tmpvar_26 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_26;
  lowp vec4 c_30;
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_32 = tmpvar_33;
  c_31.xyz = ((tmpvar_9 * tmpvar_26) * diff_32);
  c_31.w = tmpvar_10;
  c_30.w = c_31.w;
  c_30.xyz = (c_31.xyz + (tmpvar_9 * tmpvar_27));
  c_5.xyz = c_30.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesVertex;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp vec3 angle_10;
  highp float tmpvar_11;
  tmpvar_11 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeInfo[int(tmpvar_11)];
  highp vec4 tmpvar_13;
  tmpvar_13 = _TreeSize[int(tmpvar_11)];
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (_glesVertex.xyz + tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceCameraPos - tmpvar_15));
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = -(tmpvar_16.z);
  tmpvar_17.z = tmpvar_16.x;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(tmpvar_17);
  highp vec3 tmpvar_19;
  tmpvar_19.y = 0.0;
  tmpvar_19.x = tmpvar_18.z;
  tmpvar_19.z = -(tmpvar_18.x);
  highp float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = (min (abs(
    (tmpvar_19.z / tmpvar_18.z)
  ), 1.0) / max (abs(
    (tmpvar_19.z / tmpvar_18.z)
  ), 1.0));
  highp float tmpvar_22;
  tmpvar_22 = (tmpvar_21 * tmpvar_21);
  tmpvar_22 = (((
    ((((
      ((((-0.01213232 * tmpvar_22) + 0.05368138) * tmpvar_22) - 0.1173503)
     * tmpvar_22) + 0.1938925) * tmpvar_22) - 0.3326756)
   * tmpvar_22) + 0.9999793) * tmpvar_21);
  tmpvar_22 = (tmpvar_22 + (float(
    (abs((tmpvar_19.z / tmpvar_18.z)) > 1.0)
  ) * (
    (tmpvar_22 * -2.0)
   + 1.570796)));
  tmpvar_20 = (tmpvar_22 * sign((tmpvar_19.z / tmpvar_18.z)));
  if ((abs(tmpvar_18.z) > (1e-08 * abs(tmpvar_19.z)))) {
    if ((tmpvar_18.z < 0.0)) {
      if ((tmpvar_19.z >= 0.0)) {
        tmpvar_20 += 3.141593;
      } else {
        tmpvar_20 = (tmpvar_20 - 3.141593);
      };
    };
  } else {
    tmpvar_20 = (sign(tmpvar_19.z) * 1.570796);
  };
  angle_10 = vec3(tmpvar_20);
  bvec3 tmpvar_23;
  tmpvar_23 = lessThan (vec3(tmpvar_20), vec3(0.0, 0.0, 0.0));
  float tmpvar_24;
  if (tmpvar_23.x) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_23.y) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  float tmpvar_26;
  if (tmpvar_23.z) {
    tmpvar_26 = 6.283185;
  } else {
    tmpvar_26 = 0.0;
  };
  vec3 tmpvar_27;
  tmpvar_27.x = tmpvar_24;
  tmpvar_27.y = tmpvar_25;
  tmpvar_27.z = tmpvar_26;
  angle_10 = (vec3(tmpvar_20) + tmpvar_27);
  highp vec4 tmpvar_28;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_28 = _InstanceData;
  } else {
    tmpvar_28 = tmpvar_1;
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_13.x) * tmpvar_28.x) * tmpvar_18);
  billboardPos_9.xz = tmpvar_29.xz;
  billboardPos_9.y = (tmpvar_29.y + ((
    (_glesMultiTexCoord0.y * tmpvar_13.y)
   + tmpvar_13.z) * tmpvar_28.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_30;
    vPos_30 = billboardPos_9;
    highp float fMoveAmount_31;
    highp float fAdjust_32;
    highp float fLength_33;
    fLength_33 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_34;
    tmpvar_34 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_32 = tmpvar_34;
    if ((tmpvar_34 != 0.0)) {
      fAdjust_32 = pow (tmpvar_34, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_35;
    tmpvar_35.zw = vec2(0.0, 0.0);
    tmpvar_35.x = (tmpvar_15.x + tmpvar_28.w);
    tmpvar_35.y = (tmpvar_15.y + (tmpvar_28.w * 0.8));
    highp vec4 tmpvar_36;
    highp vec4 tmpvar_37;
    tmpvar_37 = abs(((
      fract((tmpvar_35 + 0.5))
     * 2.0) - 1.0));
    tmpvar_36 = (((
      (tmpvar_37 * tmpvar_37)
     * 
      (3.0 - (2.0 * tmpvar_37))
    ) - 0.5) * 2.0);
    fMoveAmount_31 = ((_ST_WindGlobal.y * (tmpvar_36.x + 
      (tmpvar_36.y * tmpvar_36.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_31 = (fMoveAmount_31 * fAdjust_32);
    vPos_30.xz = (tmpvar_29.xz + (_ST_WindVector.xz * fMoveAmount_31));
    vPos_30 = (normalize(vPos_30) * fLength_33);
    billboardPos_9 = vPos_30;
  };
  tmpvar_7.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_7.w = 1.0;
  angle_10 = (angle_10 + tmpvar_28.z);
  highp vec3 tmpvar_38;
  tmpvar_38 = (floor((
    (angle_10 * tmpvar_12.y)
   + 0.5)) / tmpvar_12.xxx);
  highp vec3 tmpvar_39;
  tmpvar_39 = (fract(abs(tmpvar_38)) * tmpvar_12.xxx);
  highp float tmpvar_40;
  if ((tmpvar_38.x >= 0.0)) {
    tmpvar_40 = tmpvar_39.x;
  } else {
    tmpvar_40 = -(tmpvar_39.x);
  };
  highp vec4 tmpvar_41;
  tmpvar_41 = _ImageTexCoords[int((tmpvar_12.z + tmpvar_40))];
  if ((tmpvar_41.w < 0.0)) {
    tmpvar_8.xy = (tmpvar_41.xy - (tmpvar_41.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_8.xy = (tmpvar_41.xy + (tmpvar_41.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_42;
  tmpvar_42 = clamp ((fract(
    ((tmpvar_15.x + tmpvar_15.y) + tmpvar_15.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_42;
  highp vec4 hPos_43;
  hPos_43 = (glstate_matrix_mvp * tmpvar_7);
  mediump vec3 screenPos_44;
  highp vec4 o_45;
  highp vec4 tmpvar_46;
  tmpvar_46 = (hPos_43 * 0.5);
  highp vec2 tmpvar_47;
  tmpvar_47.x = tmpvar_46.x;
  tmpvar_47.y = (tmpvar_46.y * _ProjectionParams.x);
  o_45.xy = (tmpvar_47 + tmpvar_46.w);
  o_45.zw = hPos_43.zw;
  highp vec3 tmpvar_48;
  tmpvar_48 = o_45.xyw;
  screenPos_44 = tmpvar_48;
  screenPos_44.xy = (screenPos_44.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = _Color;
  highp vec3 tmpvar_49;
  tmpvar_49 = (_Object2World * tmpvar_7).xyz;
  highp vec4 v_50;
  v_50.x = _World2Object[0].x;
  v_50.y = _World2Object[1].x;
  v_50.z = _World2Object[2].x;
  v_50.w = _World2Object[3].x;
  highp vec4 v_51;
  v_51.x = _World2Object[0].z;
  v_51.y = _World2Object[1].z;
  v_51.z = _World2Object[2].z;
  v_51.w = _World2Object[3].z;
  highp vec3 tmpvar_52;
  tmpvar_52 = normalize(((v_50.xyz * tmpvar_18.z) + (v_51.xyz * tmpvar_19.z)));
  worldNormal_4 = tmpvar_52;
  highp mat3 tmpvar_53;
  tmpvar_53[0] = _Object2World[0].xyz;
  tmpvar_53[1] = _Object2World[1].xyz;
  tmpvar_53[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize((tmpvar_53 * tmpvar_18));
  worldTangent_3 = tmpvar_54;
  lowp vec3 tmpvar_55;
  tmpvar_55 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_56;
  tmpvar_56 = -(tmpvar_55);
  worldBinormal_2 = tmpvar_56;
  highp vec4 tmpvar_57;
  tmpvar_57.x = worldTangent_3.x;
  tmpvar_57.y = worldBinormal_2.x;
  tmpvar_57.z = worldNormal_4.x;
  tmpvar_57.w = tmpvar_49.x;
  highp vec4 tmpvar_58;
  tmpvar_58.x = worldTangent_3.y;
  tmpvar_58.y = worldBinormal_2.y;
  tmpvar_58.z = worldNormal_4.y;
  tmpvar_58.w = tmpvar_49.y;
  highp vec4 tmpvar_59;
  tmpvar_59.x = worldTangent_3.z;
  tmpvar_59.y = worldBinormal_2.z;
  tmpvar_59.z = worldNormal_4.z;
  tmpvar_59.w = tmpvar_49.z;
  lowp vec4 tmpvar_60;
  tmpvar_60.w = 1.0;
  tmpvar_60.xyz = worldNormal_4;
  mediump vec4 normal_61;
  normal_61 = tmpvar_60;
  mediump vec3 x2_62;
  mediump vec4 tmpvar_63;
  tmpvar_63 = (normal_61.xyzz * normal_61.yzzx);
  x2_62.x = dot (unity_SHBr, tmpvar_63);
  x2_62.y = dot (unity_SHBg, tmpvar_63);
  x2_62.z = dot (unity_SHBb, tmpvar_63);
  tmpvar_6 = (unity_World2Shadow[0] * (_Object2World * tmpvar_7));
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_TEXCOORD0 = tmpvar_57;
  xlv_TEXCOORD1 = tmpvar_58;
  xlv_TEXCOORD2 = tmpvar_59;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = screenPos_44;
  xlv_TEXCOORD6 = (x2_62 + (unity_SHC.xyz * (
    (normal_61.x * normal_61.x)
   - 
    (normal_61.y * normal_61.y)
  )));
  xlv_TEXCOORD7 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_13.x = tmpvar_14.x;
  projUV_13.y = ((fract(tmpvar_14.y) * 0.0625) + unity_LODFade.y);
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_12 = tmpvar_16;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_17;
  x_17 = (tmpvar_10 - _Cutoff);
  if ((x_17 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_18;
  tmpvar_18 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_18.x, max (tmpvar_18.y, tmpvar_18.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_18 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_19;
  tmpvar_19 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float shadow_20;
  shadow_20 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD7.xyz) * (1.0 - _LightShadowData.x)));
  highp float tmpvar_21;
  tmpvar_21 = dot (xlv_TEXCOORD0.xyz, tmpvar_19);
  worldN_4.x = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (xlv_TEXCOORD1.xyz, tmpvar_19);
  worldN_4.y = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = dot (xlv_TEXCOORD2.xyz, tmpvar_19);
  worldN_4.z = tmpvar_23;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_20;
  mediump vec3 normalWorld_24;
  normalWorld_24 = worldN_4;
  mediump vec3 tmpvar_25;
  mediump vec3 tmpvar_26;
  mediump vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = normalWorld_24;
  mediump vec3 x1_28;
  x1_28.x = dot (unity_SHAr, tmpvar_27);
  x1_28.y = dot (unity_SHAg, tmpvar_27);
  x1_28.z = dot (unity_SHAb, tmpvar_27);
  tmpvar_26 = (xlv_TEXCOORD6 + x1_28);
  tmpvar_25 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_25;
  lowp vec4 c_29;
  lowp vec4 c_30;
  lowp float diff_31;
  mediump float tmpvar_32;
  tmpvar_32 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_31 = tmpvar_32;
  c_30.xyz = ((tmpvar_9 * tmpvar_25) * diff_31);
  c_30.w = tmpvar_10;
  c_29.w = c_30.w;
  c_29.xyz = (c_30.xyz + (tmpvar_9 * tmpvar_26));
  c_5.xyz = c_29.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec4 vs_TEXCOORD7;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
highp vec4 t5;
lowp vec3 t10_6;
highp vec3 t7;
mediump float t16_8;
mediump vec3 t16_9;
highp vec3 t11;
highp int ti11;
bool tb11;
highp float t12;
highp vec2 t21;
bool tb21;
highp vec2 t22;
highp uint tu22;
bool tb31;
highp float t32;
highp float t33;
bool tb33;
void main()
{
    //Instruction 62782
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 62783
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 62784
    //LT
    tb11 = 0.0<_InstanceData.x;
    //Instruction 62785
    //MOVC
    t0 = (bool(tb11)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 62786
    //ADD
    t11.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 62787
    //ADD
    t2.x = t0.w + t11.x;
    //Instruction 62788
    //MAD
    t2.y = t0.w * 0.800000 + t11.y;
    //Instruction 62789
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 62790
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 62791
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 62792
    //MUL
    t22.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 62793
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 62794
    //MAD
    t2.xy = t22.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 62795
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 62796
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 62797
    //DIV
    t12 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 62798
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t12;
    //Instruction 62799
    //DIV
    t12 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 62800
    //MUL
    t22.x = in_COLOR0.w * 255.000000;
    //Instruction 62801
    //FTOU
    tu22 = uint(t22.x);
    //Instruction 62802
    //MAD
    t32 = in_TEXCOORD0.y * _TreeSize[int(tu22) + 0].y + _TreeSize[int(tu22) + 0].z;
    //Instruction 62803
    //MUL
    t3.y = t0.y * t32;
    //Instruction 62804
    //MAD
    t12 = (-t12) * 0.250000 + t3.y;
    //Instruction 62805
    //MAX
    t12 = max(t12, 0.0);
    //Instruction 62806
    //MUL
    t12 = t12 * _ST_WindGlobal.z;
    //Instruction 62807
    //LOG
    t32 = log2(t12);
    //Instruction 62808
    //MUL
    t32 = t32 * _ST_WindGlobal.w;
    //Instruction 62809
    //EXP
    t32 = exp2(t32);
    //Instruction 62810
    //NE
    tb33 = t12!=0.0;
    //Instruction 62811
    //MOVC
    t12 = (tb33) ? t32 : t12;
    //Instruction 62812
    //MUL
    t2.x = t12 * t2.x;
    //Instruction 62813
    //ADD
    t12 = in_TEXCOORD0.x + -0.500000;
    //Instruction 62814
    //MUL
    t12 = t12 * _TreeSize[int(tu22) + 0].x;
    //Instruction 62815
    //MUL
    t12 = t0.x * t12;
    //Instruction 62816
    //ADD
    t4.xyz = (-t11.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 62817
    //DP3
    t32 = dot(t4.xyz, t4.xyz);
    //Instruction 62818
    //RSQ
    t32 = inversesqrt(t32);
    //Instruction 62819
    //MUL
    t4.xy = vec2(t32) * t4.xz;
    //Instruction 62820
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 62821
    //DP2
    t32 = dot(t4.xz, t4.xw);
    //Instruction 62822
    //MUL
    t4.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 62823
    //RSQ
    t32 = inversesqrt(t32);
    //Instruction 62824
    //MUL
    t4.xy = vec2(t32) * t4.xy;
    //Instruction 62825
    //MUL
    t3.xz = vec2(t12) * t4.xy;
    //Instruction 62826
    //MAD
    t5.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 62827
    //MOV
    t5.y = t3.y;
    //Instruction 62828
    //DP3
    t2.x = dot(t5.xyz, t5.xyz);
    //Instruction 62829
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 62830
    //MUL
    t2.xyw = t2.xxx * t5.xyz;
    //Instruction 62831
    //DP3
    t33 = dot(t3.xyz, t3.xyz);
    //Instruction 62832
    //SQRT
    t33 = sqrt(t33);
    //Instruction 62833
    //MUL
    t2.xyw = t2.xyw * vec3(t33);
    //Instruction 62834
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 62835
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 62836
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 62837
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 62838
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 62839
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 62840
    //MUL
    t3.x = t4.y * _World2Object[0].x;
    //Instruction 62841
    //MUL
    t3.y = t4.y * _World2Object[1].x;
    //Instruction 62842
    //MUL
    t3.zw = t4.yy * _World2Object[2].xx;
    //Instruction 62843
    //MUL
    t5.x = (-t4.x) * _World2Object[0].z;
    //Instruction 62844
    //MUL
    t5.y = (-t4.x) * _World2Object[1].z;
    //Instruction 62845
    //MUL
    t5.zw = (-t4.xx) * _World2Object[2].zz;
    //Instruction 62846
    //ADD
    t3 = t3 + t5;
    //Instruction 62847
    //DP3
    t1.x = dot(t3.xyw, t3.xyw);
    //Instruction 62848
    //RSQ
    t1.x = inversesqrt(t1.x);
    //Instruction 62849
    //MUL
    t3 = t1.xxxx * t3;
    //Instruction 62850
    //MUL
    t5.xyz = t4.yyy * _Object2World[2].yzx;
    //Instruction 62851
    //MAD
    t5.xyz = _Object2World[0].yzx * t4.xxx + t5.xyz;
    //Instruction 62852
    //DP3
    t1.x = dot(t5.xyz, t5.xyz);
    //Instruction 62853
    //RSQ
    t1.x = inversesqrt(t1.x);
    //Instruction 62854
    //MUL
    t5.xyz = t1.xxx * t5.xyz;
    //Instruction 62855
    //MUL
    t10_6.xyz = t3.wxy * t5.xyz;
    //Instruction 62856
    //MAD
    t10_6.xyz = t3.ywx * t5.yzx + (-t10_6.xyz);
    //Instruction 62857
    //MOV
    vs_TEXCOORD0.y = (-t10_6.x);
    //Instruction 62858
    //MUL
    t7.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 62859
    //MAD
    t7.xyz = _Object2World[0].xyz * t2.xxx + t7.xyz;
    //Instruction 62860
    //MAD
    t7.xyz = _Object2World[2].xyz * t2.www + t7.xyz;
    //Instruction 62861
    //ADD
    t7.xyz = t7.xyz + _Object2World[3].xyz;
    //Instruction 62862
    //MOV
    vs_TEXCOORD0.w = t7.x;
    //Instruction 62863
    //MOV
    vs_TEXCOORD0.z = t3.x;
    //Instruction 62864
    //MOV
    vs_TEXCOORD0.x = t5.z;
    //Instruction 62865
    //MOV
    vs_TEXCOORD1.w = t7.y;
    //Instruction 62866
    //MOV
    vs_TEXCOORD2.w = t7.z;
    //Instruction 62867
    //MOV
    vs_TEXCOORD1.x = t5.x;
    //Instruction 62868
    //MOV
    vs_TEXCOORD2.x = t5.y;
    //Instruction 62869
    //MOV
    vs_TEXCOORD1.z = t3.y;
    //Instruction 62870
    //MOV
    vs_TEXCOORD1.y = (-t10_6.y);
    //Instruction 62871
    //MOV
    vs_TEXCOORD2.y = (-t10_6.z);
    //Instruction 62872
    //MOV
    vs_TEXCOORD2.z = t3.w;
    //Instruction 62873
    //MOV
    vs_TEXCOORD3 = _Color;
    //Instruction 62874
    //ADD
    t1.x = t11.y + t11.x;
    //Instruction 62875
    //ADD
    t1.x = t11.z + t1.x;
    //Instruction 62876
    //FRC
    t1.x = fract(t1.x);
    //Instruction 62877
    //MUL
    t1.x = t1.x * _HueVariation.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 62878
    //MOV
    vs_TEXCOORD4.z = t1.x;
    //Instruction 62879
    //MAX
    t1.x = max(abs(t4.y), abs(t4.x));
    //Instruction 62880
    //DIV
    t1.x = float(1.0) / t1.x;
    //Instruction 62881
    //MIN
    t11.x = min(abs(t4.y), abs(t4.x));
    //Instruction 62882
    //MUL
    t1.x = t1.x * t11.x;
    //Instruction 62883
    //MUL
    t11.x = t1.x * t1.x;
    //Instruction 62884
    //MAD
    t21.x = t11.x * 0.020835 + -0.085133;
    //Instruction 62885
    //MAD
    t21.x = t11.x * t21.x + 0.180141;
    //Instruction 62886
    //MAD
    t21.x = t11.x * t21.x + -0.330299;
    //Instruction 62887
    //MAD
    t11.x = t11.x * t21.x + 0.999866;
    //Instruction 62888
    //MUL
    t21.x = t11.x * t1.x;
    //Instruction 62889
    //MAD
    t21.x = t21.x * -2.000000 + 1.570796;
    //Instruction 62890
    //LT
    tb31 = abs(t4.y)<abs(t4.x);
    //Instruction 62891
    //AND
    t21.x = tb31 ? t21.x : float(0.0);
    //Instruction 62892
    //MAD
    t1.x = t1.x * t11.x + t21.x;
    //Instruction 62893
    //LT
    tb11 = t4.y<(-t4.y);
    //Instruction 62894
    //AND
    t11.x = tb11 ? -3.141593 : float(0.0);
    //Instruction 62895
    //ADD
    t1.x = t11.x + t1.x;
    //Instruction 62896
    //MIN
    t11.x = min(t4.y, (-t4.x));
    //Instruction 62897
    //MAX
    t21.x = max(t4.y, (-t4.x));
    //Instruction 62898
    //GE
    tb21 = t21.x>=(-t21.x);
    //Instruction 62899
    //LT
    tb11 = t11.x<(-t11.x);
    //Instruction 62900
    //AND
    ti11 = int(uint(tb21) & uint(tb11));
    //Instruction 62901
    //MOVC
    t1.x = (ti11 != 0) ? (-t1.x) : t1.x;
    //Instruction 62902
    //LT
    tb11 = t1.x<0.0;
    //Instruction 62903
    //AND
    t11.x = tb11 ? 6.283185 : float(0.0);
    //Instruction 62904
    //ADD
    t1.x = t11.x + t1.x;
    //Instruction 62905
    //ADD
    t1.x = t0.z + t1.x;
    //Instruction 62906
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu22) + 0].y + 0.500000;
    //Instruction 62907
    //ROUND_NI
    t1.x = floor(t1.x);
    //Instruction 62908
    //DIV
    t1.x = t1.x / _TreeInfo[int(tu22) + 0].x;
    //Instruction 62909
    //GE
    tb11 = t1.x>=(-t1.x);
    //Instruction 62910
    //FRC
    t1.x = fract(abs(t1.x));
    //Instruction 62911
    //MOVC
    t1.x = (tb11) ? t1.x : (-t1.x);
    //Instruction 62912
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu22) + 0].x + _TreeInfo[int(tu22) + 0].z;
    //Instruction 62913
    //FTOU
    tu1 = uint(t1.x);
    //Instruction 62914
    //LT
    tb11 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 62915
    //MAD
    t21.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 62916
    //MAD
    t4.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 62917
    //MOVC
    vs_TEXCOORD4.xy = (bool(tb11)) ? t21.xy : t4.xy;
    //Instruction 62918
    //MUL
    t1.xyz = t2.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 62919
    //MAD
    t1.xyz = glstate_matrix_mvp[0].xyw * t2.xxx + t1.xyz;
    //Instruction 62920
    //MAD
    t1.xyz = glstate_matrix_mvp[2].xyw * t2.www + t1.xyz;
    //Instruction 62921
    //ADD
    t1.xyz = t1.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 62922
    //MUL
    t1.w = t1.y * _ProjectionParams.x;
    //Instruction 62923
    //MUL
    t4.xzw = t1.xzw * vec3(0.500000, 0.500000, 0.500000);
    //Instruction 62924
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 62925
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 62926
    //MUL
    t1.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 62927
    //MOV
    vs_TEXCOORD5.xyz = t1.xyz;
    //Instruction 62928
    //MUL
    t16_8 = t3.y * t3.y;
    //Instruction 62929
    //MAD
    t16_8 = t3.x * t3.x + (-t16_8);
    //Instruction 62930
    //MUL
    t16_0 = t3.ywzx * t3;
    //Instruction 62931
    //DP4
    t16_9.x = dot(unity_SHBr, t16_0);
    //Instruction 62932
    //DP4
    t16_9.y = dot(unity_SHBg, t16_0);
    //Instruction 62933
    //DP4
    t16_9.z = dot(unity_SHBb, t16_0);
    //Instruction 62934
    //MAD
    vs_TEXCOORD6.xyz = unity_SHC.xyz * vec3(t16_8) + t16_9.xyz;
    //Instruction 62935
    //MUL
    t0 = t2.yyyy * _Object2World[1];
    //Instruction 62936
    //MAD
    t0 = _Object2World[0] * t2.xxxx + t0;
    //Instruction 62937
    //MAD
    t0 = _Object2World[2] * t2.wwww + t0;
    //Instruction 62938
    //ADD
    t0 = t0 + _Object2World[3];
    //Instruction 62939
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 62940
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 62941
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 62942
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 62943
    //MOV
    vs_TEXCOORD7 = t0;
    //Instruction 62944
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec4 vs_TEXCOORD7;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump float t16_6;
mediump vec3 t16_9;
mediump float t16_21;
void main()
{
    //Instruction 62738
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    //Instruction 62739
    //FRC
    t16_6 = fract(t16_0.y);
    //Instruction 62740
    //MOV
    t1.x = t16_0.x;
    //Instruction 62741
    //MAD
    t1.y = t16_6 * 0.062500 + unity_LODFade.y;
    //Instruction 62742
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 62743
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 62744
    //LT
    tb1 = t16_1<0.0;
    //Instruction 62745
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 62746
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    //Instruction 62747
    //MAD
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 62748
    //LT
    tb1 = t10_2.x<0.0;
    //Instruction 62749
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 62750
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 62751
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 62752
    //ADD
    t16_9.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 62753
    //MAD
    t16_9.xyz = vs_TEXCOORD4.zzz * t16_9.xyz + t10_0.xyz;
    //Instruction 62754
    //MAX
    t16_4.x = max(t16_9.z, t16_9.y);
    //Instruction 62755
    //MAX
    t16_4.x = max(t16_9.x, t16_4.x);
    //Instruction 62756
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 62757
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 62758
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_9.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 62759
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD3.xyz;
    //Instruction 62760
    //SAMPLE_C_LZ
    vec3 txVec75 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
    t16_21 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec75, 0.0);
    //Instruction 62761
    //ADD
    t16_4.x = (-_LightShadowData.x) + 1.0;
    //Instruction 62762
    //MAD
    t16_21 = t16_21 * t16_4.x + _LightShadowData.x;
    //Instruction 62763
    //MUL
    t16_4.xyz = vec3(t16_21) * _LightColor0.xyz;
    //Instruction 62764
    //MUL
    t16_4.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 62765
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 62766
    //MAD
    t10_2.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 62767
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    //Instruction 62768
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    //Instruction 62769
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    //Instruction 62770
    //MOV
    t0.w = 1.0;
    //Instruction 62771
    //DP4
    t16_5.x = dot(unity_SHAr, t0);
    //Instruction 62772
    //DP4
    t16_5.y = dot(unity_SHAg, t0);
    //Instruction 62773
    //DP4
    t16_5.z = dot(unity_SHAb, t0);
    //Instruction 62774
    //DP3
    t16_21 = dot(t0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 62775
    //MAX
    t16_21 = max(t16_21, 0.0);
    //Instruction 62776
    //ADD
    t16_5.xyz = t16_5.xyz + vs_TEXCOORD6.xyz;
    //Instruction 62777
    //MUL
    t16_3.xyz = t16_3.xyz * t16_5.xyz;
    //Instruction 62778
    //MAD
    t16_3.xyz = t16_4.xyz * vec3(t16_21) + t16_3.xyz;
    //Instruction 62779
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 62780
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 62781
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = _glesVertex;
  mediump vec3 tmpvar_9;
  highp vec3 billboardPos_10;
  highp vec3 angle_11;
  highp float tmpvar_12;
  tmpvar_12 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_13;
  tmpvar_13 = _TreeInfo[int(tmpvar_12)];
  highp vec4 tmpvar_14;
  tmpvar_14 = _TreeSize[int(tmpvar_12)];
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  highp vec3 tmpvar_16;
  tmpvar_16 = (_glesVertex.xyz + tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((_WorldSpaceCameraPos - tmpvar_16));
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = -(tmpvar_17.z);
  tmpvar_18.z = tmpvar_17.x;
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize(tmpvar_18);
  highp vec3 tmpvar_20;
  tmpvar_20.y = 0.0;
  tmpvar_20.x = tmpvar_19.z;
  tmpvar_20.z = -(tmpvar_19.x);
  highp float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = (min (abs(
    (tmpvar_20.z / tmpvar_19.z)
  ), 1.0) / max (abs(
    (tmpvar_20.z / tmpvar_19.z)
  ), 1.0));
  highp float tmpvar_23;
  tmpvar_23 = (tmpvar_22 * tmpvar_22);
  tmpvar_23 = (((
    ((((
      ((((-0.01213232 * tmpvar_23) + 0.05368138) * tmpvar_23) - 0.1173503)
     * tmpvar_23) + 0.1938925) * tmpvar_23) - 0.3326756)
   * tmpvar_23) + 0.9999793) * tmpvar_22);
  tmpvar_23 = (tmpvar_23 + (float(
    (abs((tmpvar_20.z / tmpvar_19.z)) > 1.0)
  ) * (
    (tmpvar_23 * -2.0)
   + 1.570796)));
  tmpvar_21 = (tmpvar_23 * sign((tmpvar_20.z / tmpvar_19.z)));
  if ((abs(tmpvar_19.z) > (1e-08 * abs(tmpvar_20.z)))) {
    if ((tmpvar_19.z < 0.0)) {
      if ((tmpvar_20.z >= 0.0)) {
        tmpvar_21 += 3.141593;
      } else {
        tmpvar_21 = (tmpvar_21 - 3.141593);
      };
    };
  } else {
    tmpvar_21 = (sign(tmpvar_20.z) * 1.570796);
  };
  angle_11 = vec3(tmpvar_21);
  bvec3 tmpvar_24;
  tmpvar_24 = lessThan (vec3(tmpvar_21), vec3(0.0, 0.0, 0.0));
  float tmpvar_25;
  if (tmpvar_24.x) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  float tmpvar_26;
  if (tmpvar_24.y) {
    tmpvar_26 = 6.283185;
  } else {
    tmpvar_26 = 0.0;
  };
  float tmpvar_27;
  if (tmpvar_24.z) {
    tmpvar_27 = 6.283185;
  } else {
    tmpvar_27 = 0.0;
  };
  vec3 tmpvar_28;
  tmpvar_28.x = tmpvar_25;
  tmpvar_28.y = tmpvar_26;
  tmpvar_28.z = tmpvar_27;
  angle_11 = (vec3(tmpvar_21) + tmpvar_28);
  highp vec4 tmpvar_29;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_29 = _InstanceData;
  } else {
    tmpvar_29 = tmpvar_1;
  };
  highp vec3 tmpvar_30;
  tmpvar_30 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_14.x) * tmpvar_29.x) * tmpvar_19);
  billboardPos_10.xz = tmpvar_30.xz;
  billboardPos_10.y = (tmpvar_30.y + ((
    (_glesMultiTexCoord0.y * tmpvar_14.y)
   + tmpvar_14.z) * tmpvar_29.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_31;
    vPos_31 = billboardPos_10;
    highp float fMoveAmount_32;
    highp float fAdjust_33;
    highp float fLength_34;
    fLength_34 = sqrt(dot (billboardPos_10, billboardPos_10));
    highp float tmpvar_35;
    tmpvar_35 = (max ((billboardPos_10.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_33 = tmpvar_35;
    if ((tmpvar_35 != 0.0)) {
      fAdjust_33 = pow (tmpvar_35, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_36;
    tmpvar_36.zw = vec2(0.0, 0.0);
    tmpvar_36.x = (tmpvar_16.x + tmpvar_29.w);
    tmpvar_36.y = (tmpvar_16.y + (tmpvar_29.w * 0.8));
    highp vec4 tmpvar_37;
    highp vec4 tmpvar_38;
    tmpvar_38 = abs(((
      fract((tmpvar_36 + 0.5))
     * 2.0) - 1.0));
    tmpvar_37 = (((
      (tmpvar_38 * tmpvar_38)
     * 
      (3.0 - (2.0 * tmpvar_38))
    ) - 0.5) * 2.0);
    fMoveAmount_32 = ((_ST_WindGlobal.y * (tmpvar_37.x + 
      (tmpvar_37.y * tmpvar_37.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_32 = (fMoveAmount_32 * fAdjust_33);
    vPos_31.xz = (tmpvar_30.xz + (_ST_WindVector.xz * fMoveAmount_32));
    vPos_31 = (normalize(vPos_31) * fLength_34);
    billboardPos_10 = vPos_31;
  };
  tmpvar_8.xyz = (_glesVertex.xyz + billboardPos_10);
  tmpvar_8.w = 1.0;
  angle_11 = (angle_11 + tmpvar_29.z);
  highp vec3 tmpvar_39;
  tmpvar_39 = (floor((
    (angle_11 * tmpvar_13.y)
   + 0.5)) / tmpvar_13.xxx);
  highp vec3 tmpvar_40;
  tmpvar_40 = (fract(abs(tmpvar_39)) * tmpvar_13.xxx);
  highp float tmpvar_41;
  if ((tmpvar_39.x >= 0.0)) {
    tmpvar_41 = tmpvar_40.x;
  } else {
    tmpvar_41 = -(tmpvar_40.x);
  };
  highp vec4 tmpvar_42;
  tmpvar_42 = _ImageTexCoords[int((tmpvar_13.z + tmpvar_41))];
  if ((tmpvar_42.w < 0.0)) {
    tmpvar_9.xy = (tmpvar_42.xy - (tmpvar_42.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_9.xy = (tmpvar_42.xy + (tmpvar_42.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_43;
  tmpvar_43 = clamp ((fract(
    ((tmpvar_16.x + tmpvar_16.y) + tmpvar_16.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_43;
  highp vec4 hPos_44;
  hPos_44 = (glstate_matrix_mvp * tmpvar_8);
  mediump vec3 screenPos_45;
  highp vec4 o_46;
  highp vec4 tmpvar_47;
  tmpvar_47 = (hPos_44 * 0.5);
  highp vec2 tmpvar_48;
  tmpvar_48.x = tmpvar_47.x;
  tmpvar_48.y = (tmpvar_47.y * _ProjectionParams.x);
  o_46.xy = (tmpvar_48 + tmpvar_47.w);
  o_46.zw = hPos_44.zw;
  highp vec3 tmpvar_49;
  tmpvar_49 = o_46.xyw;
  screenPos_45 = tmpvar_49;
  screenPos_45.xy = (screenPos_45.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = _Color;
  highp vec3 tmpvar_50;
  tmpvar_50 = (_Object2World * tmpvar_8).xyz;
  highp vec4 v_51;
  v_51.x = _World2Object[0].x;
  v_51.y = _World2Object[1].x;
  v_51.z = _World2Object[2].x;
  v_51.w = _World2Object[3].x;
  highp vec4 v_52;
  v_52.x = _World2Object[0].z;
  v_52.y = _World2Object[1].z;
  v_52.z = _World2Object[2].z;
  v_52.w = _World2Object[3].z;
  highp vec3 tmpvar_53;
  tmpvar_53 = normalize(((v_51.xyz * tmpvar_19.z) + (v_52.xyz * tmpvar_20.z)));
  worldNormal_4 = tmpvar_53;
  highp mat3 tmpvar_54;
  tmpvar_54[0] = _Object2World[0].xyz;
  tmpvar_54[1] = _Object2World[1].xyz;
  tmpvar_54[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize((tmpvar_54 * tmpvar_19));
  worldTangent_3 = tmpvar_55;
  lowp vec3 tmpvar_56;
  tmpvar_56 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_57;
  tmpvar_57 = -(tmpvar_56);
  worldBinormal_2 = tmpvar_57;
  highp vec4 tmpvar_58;
  tmpvar_58.x = worldTangent_3.x;
  tmpvar_58.y = worldBinormal_2.x;
  tmpvar_58.z = worldNormal_4.x;
  tmpvar_58.w = tmpvar_50.x;
  highp vec4 tmpvar_59;
  tmpvar_59.x = worldTangent_3.y;
  tmpvar_59.y = worldBinormal_2.y;
  tmpvar_59.z = worldNormal_4.y;
  tmpvar_59.w = tmpvar_50.y;
  highp vec4 tmpvar_60;
  tmpvar_60.x = worldTangent_3.z;
  tmpvar_60.y = worldBinormal_2.z;
  tmpvar_60.z = worldNormal_4.z;
  tmpvar_60.w = tmpvar_50.z;
  lowp vec4 tmpvar_61;
  tmpvar_61.w = 1.0;
  tmpvar_61.xyz = worldNormal_4;
  mediump vec4 normal_62;
  normal_62 = tmpvar_61;
  mediump vec3 x2_63;
  mediump vec4 tmpvar_64;
  tmpvar_64 = (normal_62.xyzz * normal_62.yzzx);
  x2_63.x = dot (unity_SHBr, tmpvar_64);
  x2_63.y = dot (unity_SHBg, tmpvar_64);
  x2_63.z = dot (unity_SHBb, tmpvar_64);
  highp vec3 lightColor0_65;
  lightColor0_65 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_66;
  lightColor1_66 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_67;
  lightColor2_67 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_68;
  lightColor3_68 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_69;
  lightAttenSq_69 = unity_4LightAtten0;
  highp vec3 normal_70;
  normal_70 = worldNormal_4;
  highp vec3 col_71;
  highp vec4 ndotl_72;
  highp vec4 lengthSq_73;
  highp vec4 tmpvar_74;
  tmpvar_74 = (unity_4LightPosX0 - tmpvar_50.x);
  highp vec4 tmpvar_75;
  tmpvar_75 = (unity_4LightPosY0 - tmpvar_50.y);
  highp vec4 tmpvar_76;
  tmpvar_76 = (unity_4LightPosZ0 - tmpvar_50.z);
  lengthSq_73 = (tmpvar_74 * tmpvar_74);
  lengthSq_73 = (lengthSq_73 + (tmpvar_75 * tmpvar_75));
  lengthSq_73 = (lengthSq_73 + (tmpvar_76 * tmpvar_76));
  ndotl_72 = (tmpvar_74 * normal_70.x);
  ndotl_72 = (ndotl_72 + (tmpvar_75 * normal_70.y));
  ndotl_72 = (ndotl_72 + (tmpvar_76 * normal_70.z));
  highp vec4 tmpvar_77;
  tmpvar_77 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_72 * inversesqrt(lengthSq_73)));
  ndotl_72 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = (tmpvar_77 * (1.0/((1.0 + 
    (lengthSq_73 * lightAttenSq_69)
  ))));
  col_71 = (lightColor0_65 * tmpvar_78.x);
  col_71 = (col_71 + (lightColor1_66 * tmpvar_78.y));
  col_71 = (col_71 + (lightColor2_67 * tmpvar_78.z));
  col_71 = (col_71 + (lightColor3_68 * tmpvar_78.w));
  tmpvar_6 = ((x2_63 + (unity_SHC.xyz * 
    ((normal_62.x * normal_62.x) - (normal_62.y * normal_62.y))
  )) + col_71);
  tmpvar_7 = (unity_World2Shadow[0] * (_Object2World * tmpvar_8));
  gl_Position = (glstate_matrix_mvp * tmpvar_8);
  xlv_TEXCOORD0 = tmpvar_58;
  xlv_TEXCOORD1 = tmpvar_59;
  xlv_TEXCOORD2 = tmpvar_60;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = screenPos_45;
  xlv_TEXCOORD6 = tmpvar_6;
  xlv_TEXCOORD7 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_13.x = tmpvar_14.x;
  projUV_13.y = ((fract(tmpvar_14.y) * 0.0625) + unity_LODFade.y);
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_12 = tmpvar_16;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_17;
  x_17 = (tmpvar_10 - _Cutoff);
  if ((x_17 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_18;
  tmpvar_18 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_18.x, max (tmpvar_18.y, tmpvar_18.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_18 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_19;
  tmpvar_19 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float shadow_20;
  shadow_20 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD7.xyz) * (1.0 - _LightShadowData.x)));
  highp float tmpvar_21;
  tmpvar_21 = dot (xlv_TEXCOORD0.xyz, tmpvar_19);
  worldN_4.x = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (xlv_TEXCOORD1.xyz, tmpvar_19);
  worldN_4.y = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = dot (xlv_TEXCOORD2.xyz, tmpvar_19);
  worldN_4.z = tmpvar_23;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_20;
  mediump vec3 normalWorld_24;
  normalWorld_24 = worldN_4;
  mediump vec3 tmpvar_25;
  mediump vec3 tmpvar_26;
  mediump vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = normalWorld_24;
  mediump vec3 x1_28;
  x1_28.x = dot (unity_SHAr, tmpvar_27);
  x1_28.y = dot (unity_SHAg, tmpvar_27);
  x1_28.z = dot (unity_SHAb, tmpvar_27);
  tmpvar_26 = (xlv_TEXCOORD6 + x1_28);
  tmpvar_25 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_25;
  lowp vec4 c_29;
  lowp vec4 c_30;
  lowp float diff_31;
  mediump float tmpvar_32;
  tmpvar_32 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_31 = tmpvar_32;
  c_30.xyz = ((tmpvar_9 * tmpvar_25) * diff_31);
  c_30.w = tmpvar_10;
  c_29.w = c_30.w;
  c_29.xyz = (c_30.xyz + (tmpvar_9 * tmpvar_26));
  c_5.xyz = c_29.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec4 vs_TEXCOORD7;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
lowp vec3 t10_7;
mediump vec3 t16_8;
mediump vec3 t16_9;
highp vec3 t11;
highp int ti11;
bool tb11;
highp float t12;
highp vec2 t21;
bool tb21;
highp vec2 t22;
highp uint tu22;
bool tb31;
highp float t32;
highp float t33;
bool tb33;
void main()
{
    //Instruction 64665
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 64666
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 64667
    //LT
    tb11 = 0.0<_InstanceData.x;
    //Instruction 64668
    //MOVC
    t0 = (bool(tb11)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 64669
    //ADD
    t11.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 64670
    //ADD
    t2.x = t0.w + t11.x;
    //Instruction 64671
    //MAD
    t2.y = t0.w * 0.800000 + t11.y;
    //Instruction 64672
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 64673
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 64674
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 64675
    //MUL
    t22.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 64676
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 64677
    //MAD
    t2.xy = t22.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 64678
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 64679
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 64680
    //DIV
    t12 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 64681
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t12;
    //Instruction 64682
    //DIV
    t12 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 64683
    //MUL
    t22.x = in_COLOR0.w * 255.000000;
    //Instruction 64684
    //FTOU
    tu22 = uint(t22.x);
    //Instruction 64685
    //MAD
    t32 = in_TEXCOORD0.y * _TreeSize[int(tu22) + 0].y + _TreeSize[int(tu22) + 0].z;
    //Instruction 64686
    //MUL
    t3.y = t0.y * t32;
    //Instruction 64687
    //MAD
    t12 = (-t12) * 0.250000 + t3.y;
    //Instruction 64688
    //MAX
    t12 = max(t12, 0.0);
    //Instruction 64689
    //MUL
    t12 = t12 * _ST_WindGlobal.z;
    //Instruction 64690
    //LOG
    t32 = log2(t12);
    //Instruction 64691
    //MUL
    t32 = t32 * _ST_WindGlobal.w;
    //Instruction 64692
    //EXP
    t32 = exp2(t32);
    //Instruction 64693
    //NE
    tb33 = t12!=0.0;
    //Instruction 64694
    //MOVC
    t12 = (tb33) ? t32 : t12;
    //Instruction 64695
    //MUL
    t2.x = t12 * t2.x;
    //Instruction 64696
    //ADD
    t12 = in_TEXCOORD0.x + -0.500000;
    //Instruction 64697
    //MUL
    t12 = t12 * _TreeSize[int(tu22) + 0].x;
    //Instruction 64698
    //MUL
    t12 = t0.x * t12;
    //Instruction 64699
    //ADD
    t4.xyz = (-t11.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 64700
    //DP3
    t32 = dot(t4.xyz, t4.xyz);
    //Instruction 64701
    //RSQ
    t32 = inversesqrt(t32);
    //Instruction 64702
    //MUL
    t4.xy = vec2(t32) * t4.xz;
    //Instruction 64703
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 64704
    //DP2
    t32 = dot(t4.xz, t4.xw);
    //Instruction 64705
    //MUL
    t4.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 64706
    //RSQ
    t32 = inversesqrt(t32);
    //Instruction 64707
    //MUL
    t4.xy = vec2(t32) * t4.xy;
    //Instruction 64708
    //MUL
    t3.xz = vec2(t12) * t4.xy;
    //Instruction 64709
    //MAD
    t5.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 64710
    //MOV
    t5.y = t3.y;
    //Instruction 64711
    //DP3
    t2.x = dot(t5.xyz, t5.xyz);
    //Instruction 64712
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 64713
    //MUL
    t2.xyw = t2.xxx * t5.xyz;
    //Instruction 64714
    //DP3
    t33 = dot(t3.xyz, t3.xyz);
    //Instruction 64715
    //SQRT
    t33 = sqrt(t33);
    //Instruction 64716
    //MUL
    t2.xyw = t2.xyw * vec3(t33);
    //Instruction 64717
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 64718
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 64719
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 64720
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 64721
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 64722
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 64723
    //MUL
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 64724
    //MAD
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    //Instruction 64725
    //MAD
    t3.xyz = _Object2World[2].xyz * t2.www + t3.xyz;
    //Instruction 64726
    //ADD
    t3.xyz = t3.xyz + _Object2World[3].xyz;
    //Instruction 64727
    //MOV
    vs_TEXCOORD0.w = t3.x;
    //Instruction 64728
    //MUL
    t5.x = t4.y * _World2Object[0].x;
    //Instruction 64729
    //MUL
    t5.y = t4.y * _World2Object[1].x;
    //Instruction 64730
    //MUL
    t5.zw = t4.yy * _World2Object[2].xx;
    //Instruction 64731
    //MUL
    t6.x = (-t4.x) * _World2Object[0].z;
    //Instruction 64732
    //MUL
    t6.y = (-t4.x) * _World2Object[1].z;
    //Instruction 64733
    //MUL
    t6.zw = (-t4.xx) * _World2Object[2].zz;
    //Instruction 64734
    //ADD
    t5 = t5 + t6;
    //Instruction 64735
    //DP3
    t1.x = dot(t5.xyw, t5.xyw);
    //Instruction 64736
    //RSQ
    t1.x = inversesqrt(t1.x);
    //Instruction 64737
    //MUL
    t5 = t1.xxxx * t5;
    //Instruction 64738
    //MUL
    t6.xyz = t4.yyy * _Object2World[2].yzx;
    //Instruction 64739
    //MAD
    t6.xyz = _Object2World[0].yzx * t4.xxx + t6.xyz;
    //Instruction 64740
    //DP3
    t1.x = dot(t6.xyz, t6.xyz);
    //Instruction 64741
    //RSQ
    t1.x = inversesqrt(t1.x);
    //Instruction 64742
    //MUL
    t6.xyz = t1.xxx * t6.xyz;
    //Instruction 64743
    //MUL
    t10_7.xyz = t5.wxy * t6.xyz;
    //Instruction 64744
    //MAD
    t10_7.xyz = t5.ywx * t6.yzx + (-t10_7.xyz);
    //Instruction 64745
    //MOV
    vs_TEXCOORD0.y = (-t10_7.x);
    //Instruction 64746
    //MOV
    vs_TEXCOORD0.z = t5.x;
    //Instruction 64747
    //MOV
    vs_TEXCOORD0.x = t6.z;
    //Instruction 64748
    //MOV
    vs_TEXCOORD1.w = t3.y;
    //Instruction 64749
    //MOV
    vs_TEXCOORD1.x = t6.x;
    //Instruction 64750
    //MOV
    vs_TEXCOORD2.x = t6.y;
    //Instruction 64751
    //MOV
    vs_TEXCOORD1.y = (-t10_7.y);
    //Instruction 64752
    //MOV
    vs_TEXCOORD2.y = (-t10_7.z);
    //Instruction 64753
    //MOV
    vs_TEXCOORD1.z = t5.y;
    //Instruction 64754
    //MOV
    vs_TEXCOORD2.w = t3.z;
    //Instruction 64755
    //MOV
    vs_TEXCOORD2.z = t5.w;
    //Instruction 64756
    //MOV
    vs_TEXCOORD3 = _Color;
    //Instruction 64757
    //ADD
    t1.x = t11.y + t11.x;
    //Instruction 64758
    //ADD
    t1.x = t11.z + t1.x;
    //Instruction 64759
    //FRC
    t1.x = fract(t1.x);
    //Instruction 64760
    //MUL
    t1.x = t1.x * _HueVariation.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 64761
    //MOV
    vs_TEXCOORD4.z = t1.x;
    //Instruction 64762
    //MAX
    t1.x = max(abs(t4.y), abs(t4.x));
    //Instruction 64763
    //DIV
    t1.x = float(1.0) / t1.x;
    //Instruction 64764
    //MIN
    t11.x = min(abs(t4.y), abs(t4.x));
    //Instruction 64765
    //MUL
    t1.x = t1.x * t11.x;
    //Instruction 64766
    //MUL
    t11.x = t1.x * t1.x;
    //Instruction 64767
    //MAD
    t21.x = t11.x * 0.020835 + -0.085133;
    //Instruction 64768
    //MAD
    t21.x = t11.x * t21.x + 0.180141;
    //Instruction 64769
    //MAD
    t21.x = t11.x * t21.x + -0.330299;
    //Instruction 64770
    //MAD
    t11.x = t11.x * t21.x + 0.999866;
    //Instruction 64771
    //MUL
    t21.x = t11.x * t1.x;
    //Instruction 64772
    //MAD
    t21.x = t21.x * -2.000000 + 1.570796;
    //Instruction 64773
    //LT
    tb31 = abs(t4.y)<abs(t4.x);
    //Instruction 64774
    //AND
    t21.x = tb31 ? t21.x : float(0.0);
    //Instruction 64775
    //MAD
    t1.x = t1.x * t11.x + t21.x;
    //Instruction 64776
    //LT
    tb11 = t4.y<(-t4.y);
    //Instruction 64777
    //AND
    t11.x = tb11 ? -3.141593 : float(0.0);
    //Instruction 64778
    //ADD
    t1.x = t11.x + t1.x;
    //Instruction 64779
    //MIN
    t11.x = min(t4.y, (-t4.x));
    //Instruction 64780
    //MAX
    t21.x = max(t4.y, (-t4.x));
    //Instruction 64781
    //GE
    tb21 = t21.x>=(-t21.x);
    //Instruction 64782
    //LT
    tb11 = t11.x<(-t11.x);
    //Instruction 64783
    //AND
    ti11 = int(uint(tb21) & uint(tb11));
    //Instruction 64784
    //MOVC
    t1.x = (ti11 != 0) ? (-t1.x) : t1.x;
    //Instruction 64785
    //LT
    tb11 = t1.x<0.0;
    //Instruction 64786
    //AND
    t11.x = tb11 ? 6.283185 : float(0.0);
    //Instruction 64787
    //ADD
    t1.x = t11.x + t1.x;
    //Instruction 64788
    //ADD
    t1.x = t0.z + t1.x;
    //Instruction 64789
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu22) + 0].y + 0.500000;
    //Instruction 64790
    //ROUND_NI
    t1.x = floor(t1.x);
    //Instruction 64791
    //DIV
    t1.x = t1.x / _TreeInfo[int(tu22) + 0].x;
    //Instruction 64792
    //GE
    tb11 = t1.x>=(-t1.x);
    //Instruction 64793
    //FRC
    t1.x = fract(abs(t1.x));
    //Instruction 64794
    //MOVC
    t1.x = (tb11) ? t1.x : (-t1.x);
    //Instruction 64795
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu22) + 0].x + _TreeInfo[int(tu22) + 0].z;
    //Instruction 64796
    //FTOU
    tu1 = uint(t1.x);
    //Instruction 64797
    //LT
    tb11 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 64798
    //MAD
    t21.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 64799
    //MAD
    t4.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 64800
    //MOVC
    vs_TEXCOORD4.xy = (bool(tb11)) ? t21.xy : t4.xy;
    //Instruction 64801
    //MUL
    t1.xyz = t2.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 64802
    //MAD
    t1.xyz = glstate_matrix_mvp[0].xyw * t2.xxx + t1.xyz;
    //Instruction 64803
    //MAD
    t1.xyz = glstate_matrix_mvp[2].xyw * t2.www + t1.xyz;
    //Instruction 64804
    //ADD
    t1.xyz = t1.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 64805
    //MUL
    t1.w = t1.y * _ProjectionParams.x;
    //Instruction 64806
    //MUL
    t4.xzw = t1.xzw * vec3(0.500000, 0.500000, 0.500000);
    //Instruction 64807
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 64808
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 64809
    //MUL
    t1.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 64810
    //MOV
    vs_TEXCOORD5.xyz = t1.xyz;
    //Instruction 64811
    //ADD
    t0 = (-t3.xxxx) + unity_4LightPosX0;
    //Instruction 64812
    //ADD
    t1 = (-t3.yyyy) + unity_4LightPosY0;
    //Instruction 64813
    //ADD
    t3 = (-t3.zzzz) + unity_4LightPosZ0;
    //Instruction 64814
    //MUL
    t4 = t5.yyyy * t1;
    //Instruction 64815
    //MUL
    t1 = t1 * t1;
    //Instruction 64816
    //MAD
    t1 = t0 * t0 + t1;
    //Instruction 64817
    //MAD
    t0 = t0 * t5.xxxx + t4;
    //Instruction 64818
    //MAD
    t0 = t3 * t5.wwww + t0;
    //Instruction 64819
    //MAD
    t1 = t3 * t3 + t1;
    //Instruction 64820
    //RSQ
    t3 = inversesqrt(t1);
    //Instruction 64821
    //MAD
    t1 = t1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 64822
    //DIV
    t1 = vec4(1.0, 1.0, 1.0, 1.0) / t1;
    //Instruction 64823
    //MUL
    t0 = t0 * t3;
    //Instruction 64824
    //MAX
    t0 = max(t0, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 64825
    //MUL
    t0 = t1 * t0;
    //Instruction 64826
    //MUL
    t1.xyz = t0.yyy * unity_LightColor[1].xyz;
    //Instruction 64827
    //MAD
    t1.xyz = unity_LightColor[0].xyz * t0.xxx + t1.xyz;
    //Instruction 64828
    //MAD
    t1.xyz = unity_LightColor[2].xyz * t0.zzz + t1.xyz;
    //Instruction 64829
    //MAD
    t1.xyz = unity_LightColor[3].xyz * t0.www + t1.xyz;
    //Instruction 64830
    //MUL
    t16_8.x = t5.y * t5.y;
    //Instruction 64831
    //MAD
    t16_8.x = t5.x * t5.x + (-t16_8.x);
    //Instruction 64832
    //MUL
    t16_0 = t5.ywzx * t5;
    //Instruction 64833
    //DP4
    t16_9.x = dot(unity_SHBr, t16_0);
    //Instruction 64834
    //DP4
    t16_9.y = dot(unity_SHBg, t16_0);
    //Instruction 64835
    //DP4
    t16_9.z = dot(unity_SHBb, t16_0);
    //Instruction 64836
    //MAD
    t16_8.xyz = unity_SHC.xyz * t16_8.xxx + t16_9.xyz;
    //Instruction 64837
    //ADD
    t1.xyz = t1.xyz + t16_8.xyz;
    //Instruction 64838
    //MOV
    vs_TEXCOORD6.xyz = t1.xyz;
    //Instruction 64839
    //MUL
    t0 = t2.yyyy * _Object2World[1];
    //Instruction 64840
    //MAD
    t0 = _Object2World[0] * t2.xxxx + t0;
    //Instruction 64841
    //MAD
    t0 = _Object2World[2] * t2.wwww + t0;
    //Instruction 64842
    //ADD
    t0 = t0 + _Object2World[3];
    //Instruction 64843
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 64844
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 64845
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 64846
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 64847
    //MOV
    vs_TEXCOORD7 = t0;
    //Instruction 64848
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec4 vs_TEXCOORD7;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump float t16_6;
mediump vec3 t16_9;
mediump float t16_21;
void main()
{
    //Instruction 64621
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    //Instruction 64622
    //FRC
    t16_6 = fract(t16_0.y);
    //Instruction 64623
    //MOV
    t1.x = t16_0.x;
    //Instruction 64624
    //MAD
    t1.y = t16_6 * 0.062500 + unity_LODFade.y;
    //Instruction 64625
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 64626
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 64627
    //LT
    tb1 = t16_1<0.0;
    //Instruction 64628
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 64629
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    //Instruction 64630
    //MAD
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 64631
    //LT
    tb1 = t10_2.x<0.0;
    //Instruction 64632
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 64633
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 64634
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 64635
    //ADD
    t16_9.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 64636
    //MAD
    t16_9.xyz = vs_TEXCOORD4.zzz * t16_9.xyz + t10_0.xyz;
    //Instruction 64637
    //MAX
    t16_4.x = max(t16_9.z, t16_9.y);
    //Instruction 64638
    //MAX
    t16_4.x = max(t16_9.x, t16_4.x);
    //Instruction 64639
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 64640
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 64641
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_9.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 64642
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD3.xyz;
    //Instruction 64643
    //SAMPLE_C_LZ
    vec3 txVec74 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
    t16_21 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec74, 0.0);
    //Instruction 64644
    //ADD
    t16_4.x = (-_LightShadowData.x) + 1.0;
    //Instruction 64645
    //MAD
    t16_21 = t16_21 * t16_4.x + _LightShadowData.x;
    //Instruction 64646
    //MUL
    t16_4.xyz = vec3(t16_21) * _LightColor0.xyz;
    //Instruction 64647
    //MUL
    t16_4.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 64648
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 64649
    //MAD
    t10_2.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 64650
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    //Instruction 64651
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    //Instruction 64652
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    //Instruction 64653
    //MOV
    t0.w = 1.0;
    //Instruction 64654
    //DP4
    t16_5.x = dot(unity_SHAr, t0);
    //Instruction 64655
    //DP4
    t16_5.y = dot(unity_SHAg, t0);
    //Instruction 64656
    //DP4
    t16_5.z = dot(unity_SHAb, t0);
    //Instruction 64657
    //DP3
    t16_21 = dot(t0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 64658
    //MAX
    t16_21 = max(t16_21, 0.0);
    //Instruction 64659
    //ADD
    t16_5.xyz = t16_5.xyz + vs_TEXCOORD6.xyz;
    //Instruction 64660
    //MUL
    t16_3.xyz = t16_3.xyz * t16_5.xyz;
    //Instruction 64661
    //MAD
    t16_3.xyz = t16_4.xyz * vec3(t16_21) + t16_3.xyz;
    //Instruction 64662
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 64663
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 64664
    //RET
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "D