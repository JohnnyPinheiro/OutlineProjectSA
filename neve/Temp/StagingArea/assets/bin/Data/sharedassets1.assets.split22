orm highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec4 tmpvar_8;
  lowp vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10.xy = tmpvar_3.xy;
  tmpvar_9.w = _Color.w;
  tmpvar_9.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].x;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].y;
  tmpvar_11 = clamp (((
    fract(((tmpvar_12 + tmpvar_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_10.z = tmpvar_11;
  highp vec4 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_1;
  tmpvar_15 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = tmpvar_1.xyz;
  FinalPosition_18 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_20 == 5.0)) {
    highp vec3 vPos_23;
    vPos_23 = tmpvar_19;
    highp float fOffset_24;
    fOffset_24 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_24 = 0.75;
    };
    highp vec4 tmpvar_25;
    tmpvar_25.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_25.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_24);
    highp vec4 tmpvar_26;
    tmpvar_26 = abs(((
      fract((tmpvar_25 + 0.5))
     * 2.0) - 1.0));
    vPos_23 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_26 * tmpvar_26)
       * 
        (3.0 - (2.0 * tmpvar_26))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_15 = tmpvar_2;
    FinalPosition_18 = vPos_23;
  };
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_27;
    vPos_27 = FinalPosition_18;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_28;
      vPos_28 = FinalPosition_18;
      highp float fTime_29;
      highp float fAdherenceScale_30;
      highp vec3 vWindVector_31;
      vWindVector_31 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_29 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_32;
      highp float fOscillation_33;
      fOscillation_33 = 1.0;
      highp float fAmount_34;
      highp float fTarget_35;
      highp vec4 tmpvar_36;
      tmpvar_36.x = (fTime_29 + _glesMultiTexCoord0.w);
      tmpvar_36.y = ((fTime_29 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_36.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_29 + _glesMultiTexCoord0.w));
      tmpvar_36.w = ((fTime_29 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      vOscillations_32 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      highp float tmpvar_38;
      tmpvar_38 = (vOscillations_32.y * vOscillations_32.z);
      fTarget_35 = 1.0;
      fAmount_34 = tmpvar_38;
      if ((tmpvar_38 < 0.0)) {
        fTarget_35 = -1.0;
        fAmount_34 = -(tmpvar_38);
      };
      fOscillation_33 = (((
        mix (mix (tmpvar_38, fTarget_35, fAmount_34), fTarget_35, fAmount_34)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_32.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_33 = (fOscillation_33 * (1.0 + (vOscillations_32.w * _ST_WindBranchWhip.x)));
      vPos_28 = (FinalPosition_18 + ((vWindVector_31 * fOscillation_33) * _ST_WindBranch.y));
      highp vec4 tmpvar_39;
      tmpvar_39.zw = vec2(0.0, 0.0);
      tmpvar_39.x = ((fTime_29 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_39.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_40;
      highp vec4 tmpvar_41;
      tmpvar_41 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      tmpvar_40 = (((
        (tmpvar_41 * tmpvar_41)
       * 
        (3.0 - (2.0 * tmpvar_41))
      ) - 0.5) * 2.0);
      fAdherenceScale_30 = (1.0 - ((tmpvar_40.x * tmpvar_40.y) * (
        (tmpvar_40.x * tmpvar_40.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_30 = (fAdherenceScale_30 + ((vOscillations_32.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_28 = (vPos_28 + ((
        ((vRotatedBranchAnchor_16 - vPos_28) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_30) * _glesMultiTexCoord0.z));
      vPos_27 = vPos_28;
    } else {
      highp vec3 vPos_42;
      vPos_42 = vPos_27;
      highp float fTime_43;
      highp vec3 vWindVector_44;
      vWindVector_44 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_43 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_45;
      highp float fOscillation_46;
      fOscillation_46 = 1.0;
      highp float fAmount_47;
      highp float fTarget_48;
      highp vec4 tmpvar_49;
      tmpvar_49.w = 0.0;
      tmpvar_49.x = (fTime_43 + _glesMultiTexCoord0.w);
      tmpvar_49.y = ((fTime_43 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_49.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_43 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_50;
      tmpvar_50 = abs(((
        fract((tmpvar_49 + 0.5))
       * 2.0) - 1.0));
      vOscillations_45 = (((
        (tmpvar_50 * tmpvar_50)
       * 
        (3.0 - (2.0 * tmpvar_50))
      ) - 0.5) * 2.0);
      highp float tmpvar_51;
      tmpvar_51 = (vOscillations_45.y * vOscillations_45.z);
      fTarget_48 = 1.0;
      fAmount_47 = tmpvar_51;
      if ((tmpvar_51 < 0.0)) {
        fTarget_48 = -1.0;
        fAmount_47 = -(tmpvar_51);
      };
      fOscillation_46 = (((
        mix (mix (tmpvar_51, fTarget_48, fAmount_47), fTarget_48, fAmount_47)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_45.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_42 = (vPos_27 + ((vWindVector_44 * fOscillation_46) * _ST_WindBranch.y));
      vPos_27 = vPos_42;
    };
    FinalPosition_18 = vPos_27;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_52;
    vPos_52 = FinalPosition_18;
    highp float fMoveAmount_53;
    highp float fAdjust_54;
    highp float fLength_55;
    fLength_55 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_56;
    tmpvar_56 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_54 = tmpvar_56;
    if ((tmpvar_56 != 0.0)) {
      fAdjust_54 = pow (tmpvar_56, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_57;
    tmpvar_57.zw = vec2(0.0, 0.0);
    tmpvar_57.x = (tmpvar_12 + _ST_WindGlobal.x);
    tmpvar_57.y = (tmpvar_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_58;
    highp vec4 tmpvar_59;
    tmpvar_59 = abs(((
      fract((tmpvar_57 + 0.5))
     * 2.0) - 1.0));
    tmpvar_58 = (((
      (tmpvar_59 * tmpvar_59)
     * 
      (3.0 - (2.0 * tmpvar_59))
    ) - 0.5) * 2.0);
    fMoveAmount_53 = ((_ST_WindGlobal.y * (tmpvar_58.x + 
      (tmpvar_58.y * tmpvar_58.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_53 = (fMoveAmount_53 * fAdjust_54);
    vPos_52.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * fMoveAmount_53));
    vPos_52 = (normalize(vPos_52) * fLength_55);
    FinalPosition_18 = vPos_52;
  };
  tmpvar_14.xyz = FinalPosition_18;
  highp vec4 hPos_60;
  hPos_60 = (glstate_matrix_mvp * tmpvar_14);
  mediump vec3 screenPos_61;
  highp vec4 o_62;
  highp vec4 tmpvar_63;
  tmpvar_63 = (hPos_60 * 0.5);
  highp vec2 tmpvar_64;
  tmpvar_64.x = tmpvar_63.x;
  tmpvar_64.y = (tmpvar_63.y * _ProjectionParams.x);
  o_62.xy = (tmpvar_64 + tmpvar_63.w);
  o_62.zw = hPos_60.zw;
  highp vec3 tmpvar_65;
  tmpvar_65 = o_62.xyw;
  screenPos_61 = tmpvar_65;
  screenPos_61.xy = (screenPos_61.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_9;
  highp vec3 tmpvar_66;
  tmpvar_66 = (_Object2World * tmpvar_14).xyz;
  highp vec4 v_67;
  v_67.x = _World2Object[0].x;
  v_67.y = _World2Object[1].x;
  v_67.z = _World2Object[2].x;
  v_67.w = _World2Object[3].x;
  highp vec4 v_68;
  v_68.x = _World2Object[0].y;
  v_68.y = _World2Object[1].y;
  v_68.z = _World2Object[2].y;
  v_68.w = _World2Object[3].y;
  highp vec4 v_69;
  v_69.x = _World2Object[0].z;
  v_69.y = _World2Object[1].z;
  v_69.z = _World2Object[2].z;
  v_69.w = _World2Object[3].z;
  highp vec3 tmpvar_70;
  tmpvar_70 = normalize(((
    (v_67.xyz * tmpvar_15.x)
   + 
    (v_68.xyz * tmpvar_15.y)
  ) + (v_69.xyz * tmpvar_15.z)));
  worldNormal_4 = tmpvar_70;
  tmpvar_5 = worldNormal_4;
  lowp vec4 tmpvar_71;
  tmpvar_71.w = 1.0;
  tmpvar_71.xyz = worldNormal_4;
  mediump vec4 normal_72;
  normal_72 = tmpvar_71;
  mediump vec3 x2_73;
  mediump vec4 tmpvar_74;
  tmpvar_74 = (normal_72.xyzz * normal_72.yzzx);
  x2_73.x = dot (unity_SHBr, tmpvar_74);
  x2_73.y = dot (unity_SHBg, tmpvar_74);
  x2_73.z = dot (unity_SHBb, tmpvar_74);
  highp vec3 lightColor0_75;
  lightColor0_75 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_76;
  lightColor1_76 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_77;
  lightColor2_77 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_78;
  lightColor3_78 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_79;
  lightAttenSq_79 = unity_4LightAtten0;
  highp vec3 normal_80;
  normal_80 = worldNormal_4;
  highp vec3 col_81;
  highp vec4 ndotl_82;
  highp vec4 lengthSq_83;
  highp vec4 tmpvar_84;
  tmpvar_84 = (unity_4LightPosX0 - tmpvar_66.x);
  highp vec4 tmpvar_85;
  tmpvar_85 = (unity_4LightPosY0 - tmpvar_66.y);
  highp vec4 tmpvar_86;
  tmpvar_86 = (unity_4LightPosZ0 - tmpvar_66.z);
  lengthSq_83 = (tmpvar_84 * tmpvar_84);
  lengthSq_83 = (lengthSq_83 + (tmpvar_85 * tmpvar_85));
  lengthSq_83 = (lengthSq_83 + (tmpvar_86 * tmpvar_86));
  ndotl_82 = (tmpvar_84 * normal_80.x);
  ndotl_82 = (ndotl_82 + (tmpvar_85 * normal_80.y));
  ndotl_82 = (ndotl_82 + (tmpvar_86 * normal_80.z));
  highp vec4 tmpvar_87;
  tmpvar_87 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_82 * inversesqrt(lengthSq_83)));
  ndotl_82 = tmpvar_87;
  highp vec4 tmpvar_88;
  tmpvar_88 = (tmpvar_87 * (1.0/((1.0 + 
    (lengthSq_83 * lightAttenSq_79)
  ))));
  col_81 = (lightColor0_75 * tmpvar_88.x);
  col_81 = (col_81 + (lightColor1_76 * tmpvar_88.y));
  col_81 = (col_81 + (lightColor2_77 * tmpvar_88.z));
  col_81 = (col_81 + (lightColor3_78 * tmpvar_88.w));
  tmpvar_7 = ((x2_73 + (unity_SHC.xyz * 
    ((normal_72.x * normal_72.x) - (normal_72.y * normal_72.y))
  )) + col_81);
  tmpvar_8 = (unity_World2Shadow[0] * (_Object2World * tmpvar_14));
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_66;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_10;
  xlv_TEXCOORD4 = screenPos_61;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_13.x = tmpvar_14.x;
  projUV_13.y = ((fract(tmpvar_14.y) * 0.0625) + unity_LODFade.y);
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_16;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_17;
  x_17 = (tmpvar_10 - _Cutoff);
  if ((x_17 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_18;
  tmpvar_18 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_18.x, max (tmpvar_18.y, tmpvar_18.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_18 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_19 = tmpvar_20;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_19;
  mediump vec3 normalWorld_21;
  normalWorld_21 = tmpvar_5;
  mediump vec3 tmpvar_22;
  mediump vec3 tmpvar_23;
  mediump vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = normalWorld_21;
  mediump vec3 x1_25;
  x1_25.x = dot (unity_SHAr, tmpvar_24);
  x1_25.y = dot (unity_SHAg, tmpvar_24);
  x1_25.z = dot (unity_SHAb, tmpvar_24);
  tmpvar_23 = (xlv_TEXCOORD5 + x1_25);
  tmpvar_22 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_22;
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_28 = tmpvar_29;
  c_27.xyz = ((tmpvar_9 * tmpvar_22) * diff_28);
  c_27.w = tmpvar_10;
  c_26.w = c_27.w;
  c_26.xyz = (c_27.xyz + (tmpvar_9 * tmpvar_23));
  c_4.xyz = c_26.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 == 5.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    highp float fOffset_23;
    fOffset_23 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_23 = 0.75;
    };
    highp vec4 tmpvar_24;
    tmpvar_24.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_24.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_23);
    highp vec4 tmpvar_25;
    tmpvar_25 = abs(((
      fract((tmpvar_24 + 0.5))
     * 2.0) - 1.0));
    vPos_22 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_14 = tmpvar_2;
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_26;
    vPos_26 = FinalPosition_17;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_27;
      vPos_27 = FinalPosition_17;
      highp float fTime_28;
      highp float fAdherenceScale_29;
      highp vec3 vWindVector_30;
      vWindVector_30 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_28 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_31;
      highp float fOscillation_32;
      fOscillation_32 = 1.0;
      highp float fAmount_33;
      highp float fTarget_34;
      highp vec4 tmpvar_35;
      tmpvar_35.x = (fTime_28 + _glesMultiTexCoord0.w);
      tmpvar_35.y = ((fTime_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_35.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_28 + _glesMultiTexCoord0.w));
      tmpvar_35.w = ((fTime_28 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      vOscillations_31 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      highp float tmpvar_37;
      tmpvar_37 = (vOscillations_31.y * vOscillations_31.z);
      fTarget_34 = 1.0;
      fAmount_33 = tmpvar_37;
      if ((tmpvar_37 < 0.0)) {
        fTarget_34 = -1.0;
        fAmount_33 = -(tmpvar_37);
      };
      fOscillation_32 = (((
        mix (mix (tmpvar_37, fTarget_34, fAmount_33), fTarget_34, fAmount_33)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_31.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_32 = (fOscillation_32 * (1.0 + (vOscillations_31.w * _ST_WindBranchWhip.x)));
      vPos_27 = (FinalPosition_17 + ((vWindVector_30 * fOscillation_32) * _ST_WindBranch.y));
      highp vec4 tmpvar_38;
      tmpvar_38.zw = vec2(0.0, 0.0);
      tmpvar_38.x = ((fTime_28 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_38.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_39;
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      tmpvar_39 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      fAdherenceScale_29 = (1.0 - ((tmpvar_39.x * tmpvar_39.y) * (
        (tmpvar_39.x * tmpvar_39.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_29 = (fAdherenceScale_29 + ((vOscillations_31.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_27 = (vPos_27 + ((
        ((vRotatedBranchAnchor_15 - vPos_27) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_29) * _glesMultiTexCoord0.z));
      vPos_26 = vPos_27;
    } else {
      highp vec3 vPos_41;
      vPos_41 = vPos_26;
      highp float fTime_42;
      highp vec3 vWindVector_43;
      vWindVector_43 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_42 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_44;
      highp float fOscillation_45;
      fOscillation_45 = 1.0;
      highp float fAmount_46;
      highp float fTarget_47;
      highp vec4 tmpvar_48;
      tmpvar_48.w = 0.0;
      tmpvar_48.x = (fTime_42 + _glesMultiTexCoord0.w);
      tmpvar_48.y = ((fTime_42 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_48.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_42 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_49;
      tmpvar_49 = abs(((
        fract((tmpvar_48 + 0.5))
       * 2.0) - 1.0));
      vOscillations_44 = (((
        (tmpvar_49 * tmpvar_49)
       * 
        (3.0 - (2.0 * tmpvar_49))
      ) - 0.5) * 2.0);
      highp float tmpvar_50;
      tmpvar_50 = (vOscillations_44.y * vOscillations_44.z);
      fTarget_47 = 1.0;
      fAmount_46 = tmpvar_50;
      if ((tmpvar_50 < 0.0)) {
        fTarget_47 = -1.0;
        fAmount_46 = -(tmpvar_50);
      };
      fOscillation_45 = (((
        mix (mix (tmpvar_50, fTarget_47, fAmount_46), fTarget_47, fAmount_46)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_44.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_41 = (vPos_26 + ((vWindVector_43 * fOscillation_45) * _ST_WindBranch.y));
      vPos_26 = vPos_41;
    };
    FinalPosition_17 = vPos_26;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_51;
    vPos_51 = FinalPosition_17;
    highp float fMoveAmount_52;
    highp float fAdjust_53;
    highp float fLength_54;
    fLength_54 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_55;
    tmpvar_55 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_53 = tmpvar_55;
    if ((tmpvar_55 != 0.0)) {
      fAdjust_53 = pow (tmpvar_55, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_56;
    tmpvar_56.zw = vec2(0.0, 0.0);
    tmpvar_56.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_56.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_57;
    highp vec4 tmpvar_58;
    tmpvar_58 = abs(((
      fract((tmpvar_56 + 0.5))
     * 2.0) - 1.0));
    tmpvar_57 = (((
      (tmpvar_58 * tmpvar_58)
     * 
      (3.0 - (2.0 * tmpvar_58))
    ) - 0.5) * 2.0);
    fMoveAmount_52 = ((_ST_WindGlobal.y * (tmpvar_57.x + 
      (tmpvar_57.y * tmpvar_57.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_52 = (fMoveAmount_52 * fAdjust_53);
    vPos_51.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_52));
    vPos_51 = (normalize(vPos_51) * fLength_54);
    FinalPosition_17 = vPos_51;
  };
  tmpvar_13.xyz = FinalPosition_17;
  highp vec4 hPos_59;
  hPos_59 = (glstate_matrix_mvp * tmpvar_13);
  mediump vec3 screenPos_60;
  highp vec4 o_61;
  highp vec4 tmpvar_62;
  tmpvar_62 = (hPos_59 * 0.5);
  highp vec2 tmpvar_63;
  tmpvar_63.x = tmpvar_62.x;
  tmpvar_63.y = (tmpvar_62.y * _ProjectionParams.x);
  o_61.xy = (tmpvar_63 + tmpvar_62.w);
  o_61.zw = hPos_59.zw;
  highp vec3 tmpvar_64;
  tmpvar_64 = o_61.xyw;
  screenPos_60 = tmpvar_64;
  screenPos_60.xy = (screenPos_60.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_8;
  highp vec4 v_65;
  v_65.x = _World2Object[0].x;
  v_65.y = _World2Object[1].x;
  v_65.z = _World2Object[2].x;
  v_65.w = _World2Object[3].x;
  highp vec4 v_66;
  v_66.x = _World2Object[0].y;
  v_66.y = _World2Object[1].y;
  v_66.z = _World2Object[2].y;
  v_66.w = _World2Object[3].y;
  highp vec4 v_67;
  v_67.x = _World2Object[0].z;
  v_67.y = _World2Object[1].z;
  v_67.z = _World2Object[2].z;
  v_67.w = _World2Object[3].z;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(((
    (v_65.xyz * tmpvar_14.x)
   + 
    (v_66.xyz * tmpvar_14.y)
  ) + (v_67.xyz * tmpvar_14.z)));
  worldNormal_4 = tmpvar_68;
  tmpvar_5 = worldNormal_4;
  lowp vec4 tmpvar_69;
  tmpvar_69.w = 1.0;
  tmpvar_69.xyz = worldNormal_4;
  mediump vec4 normal_70;
  normal_70 = tmpvar_69;
  mediump vec3 x2_71;
  mediump vec4 tmpvar_72;
  tmpvar_72 = (normal_70.xyzz * normal_70.yzzx);
  x2_71.x = dot (unity_SHBr, tmpvar_72);
  x2_71.y = dot (unity_SHBg, tmpvar_72);
  x2_71.z = dot (unity_SHBb, tmpvar_72);
  tmpvar_7 = (unity_World2Shadow[0] * (_Object2World * tmpvar_13));
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = screenPos_60;
  xlv_TEXCOORD5 = (x2_71 + (unity_SHC.xyz * (
    (normal_70.x * normal_70.x)
   - 
    (normal_70.y * normal_70.y)
  )));
  xlv_TEXCOORD6 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_13.x = tmpvar_14.x;
  projUV_13.y = ((fract(tmpvar_14.y) * 0.0625) + unity_LODFade.y);
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_16;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_17;
  x_17 = (tmpvar_10 - _Cutoff);
  if ((x_17 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_18;
  tmpvar_18 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_18.x, max (tmpvar_18.y, tmpvar_18.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_18 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp float shadow_19;
  shadow_19 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_19;
  mediump vec3 normalWorld_20;
  normalWorld_20 = tmpvar_5;
  mediump vec3 tmpvar_21;
  mediump vec3 tmpvar_22;
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = normalWorld_20;
  mediump vec3 x1_24;
  x1_24.x = dot (unity_SHAr, tmpvar_23);
  x1_24.y = dot (unity_SHAg, tmpvar_23);
  x1_24.z = dot (unity_SHAb, tmpvar_23);
  tmpvar_22 = (xlv_TEXCOORD5 + x1_24);
  tmpvar_21 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_21;
  lowp vec4 c_25;
  lowp vec4 c_26;
  lowp float diff_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_27 = tmpvar_28;
  c_26.xyz = ((tmpvar_9 * tmpvar_21) * diff_27);
  c_26.w = tmpvar_10;
  c_25.w = c_26.w;
  c_25.xyz = (c_26.xyz + (tmpvar_9 * tmpvar_22));
  c_4.xyz = c_25.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec3 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
highp vec4 t6;
mediump vec3 t16_7;
highp vec2 t8;
bool tb8;
highp float t11;
highp vec2 t16;
highp vec2 t20;
highp vec2 t22;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
highp float t29;
mediump float t16_31;
void main()
{
    //Instruction 20572
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 20573
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 20574
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 20575
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 20576
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 20577
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 20578
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 20579
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 20580
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 20581
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 20582
    //LT
    tb8 = 0.0<t16_2.x;
    //Instruction 20583
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 20584
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 20585
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 20586
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 20587
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 20588
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 20589
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 20590
    //EQ
    tb25 = t16_2.x==5.000000;
    //Instruction 20591
    //LT
    tb3 = in_TEXCOORD0.x<0.500000;
    //Instruction 20592
    //AND
    t3.x = tb3 ? 0.750000 : float(0.0);
    //Instruction 20593
    //ADD
    t11 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 20594
    //MAD
    t3.x = t11 * _ST_WindFrondRipple.z + t3.x;
    //Instruction 20595
    //ADD
    t3.x = t3.x + 0.500000;
    //Instruction 20596
    //FRC
    t3.x = fract(t3.x);
    //Instruction 20597
    //MAD
    t3.x = t3.x * 2.000000 + -1.0;
    //Instruction 20598
    //MUL
    t11 = abs(t3.x) * abs(t3.x);
    //Instruction 20599
    //MAD
    t3.x = -abs(t3.x) * 2.000000 + 3.000000;
    //Instruction 20600
    //MAD
    t3.x = t11 * t3.x + -0.500000;
    //Instruction 20601
    //MUL
    t3.x = t3.x * in_TEXCOORD2.y;
    //Instruction 20602
    //DP2
    t3.x = dot(_ST_WindFrondRipple.yy, t3.xx);
    //Instruction 20603
    //MAD
    t3.xyz = t3.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    //Instruction 20604
    //MOVC
    t3.xyz = (bool(tb25)) ? t3.xyz : in_POSITION0.xyz;
    //Instruction 20605
    //GE
    tb27 = t16_2.x>=3.000000;
    //Instruction 20606
    //IF
    if(tb27){
        //Instruction 20607
        //IF
        if(tb25){
            //Instruction 20608
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 20609
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 20610
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 20611
            //DP3
            t25 = dot(t4.xyz, t4.xyz);
            //Instruction 20612
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 20613
            //MUL
            t4.xyz = vec3(t25) * t4.xyz;
            //Instruction 20614
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 20615
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 20616
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 20617
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 20618
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 20619
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 20620
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 20621
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 20622
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 20623
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 20624
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 20625
            //FRC
            t2 = fract(t2);
            //Instruction 20626
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 20627
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 20628
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 20629
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 20630
            //ADD
            t2 = t2 + t2;
            //Instruction 20631
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 20632
            //LT
            tb27 = t6.w<0.0;
            //Instruction 20633
            //MOV
            t6.y = (-t6.w);
            //Instruction 20634
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 20635
            //MOVC
            t6.xy = (bool(tb27)) ? t6.xy : t6.zw;
            //Instruction 20636
            //MAD
            t27 = (-t2.y) * t2.z + t6.x;
            //Instruction 20637
            //MAD
            t27 = t6.y * t27 + t6.w;
            //Instruction 20638
            //ADD
            t28 = (-t27) + t6.x;
            //Instruction 20639
            //MAD
            t27 = t6.y * t28 + t27;
            //Instruction 20640
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 20641
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 20642
            //ADD
            t29 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 20643
            //MUL
            t29 = t2.x * t29;
            //Instruction 20644
            //MAD
            t27 = t27 * t28 + t29;
            //Instruction 20645
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 20646
            //MUL
            t27 = t27 * t28;
            //Instruction 20647
            //MUL
            t5.xyz = vec3(t27) * t5.xyz;
            //Instruction 20648
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 20649
            //MAD
            t6.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 20650
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 20651
            //MAD
            t6.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 20652
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 20653
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 20654
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 20655
            //MUL
            t22.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 20656
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 20657
            //MAD
            t6.xy = t22.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 20658
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 20659
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 20660
            //MUL
            t25 = t6.x * t6.y;
            //Instruction 20661
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 20662
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 20663
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 20664
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 20665
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 20666
            //MUL
            t4.xyz = vec3(t25) * t4.xyz;
            //Instruction 20667
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 20668
        //ELSE
        } else {
            //Instruction 20669
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 20670
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 20671
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 20672
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 20673
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 20674
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 20675
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 20676
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 20677
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 20678
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 20679
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 20680
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 20681
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 20682
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 20683
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 20684
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 20685
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 20686
            //LT
            tb0 = t2.w<0.0;
            //Instruction 20687
            //MOV
            t2.y = (-t2.w);
            //Instruction 20688
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 20689
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 20690
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 20691
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 20692
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 20693
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 20694
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 20695
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 20696
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 20697
            //MUL
            t27 = t27 * t5.x;
            //Instruction 20698
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 20699
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 20700
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 20701
        //ENDIF
        }
        //Instruction 20702
    //ENDIF
    }
    //Instruction 20703
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 20704
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 20705
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 20706
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 20707
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 20708
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 20709
    //NE
    tb27 = t25!=0.0;
    //Instruction 20710
    //LOG
    t4.x = log2(t25);
    //Instruction 20711
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 20712
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 20713
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 20714
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 20715
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 20716
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 20717
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 20718
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 20719
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 20720
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 20721
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 20722
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 20723
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 20724
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 20725
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 20726
    //MUL
    t25 = t25 * t27;
    //Instruction 20727
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 20728
    //MOV
    t4.y = t3.y;
    //Instruction 20729
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 20730
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 20731
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 20732
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 20733
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 20734
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 20735
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 20736
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 20737
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 20738
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 20739
    //MUL
    t24 = t3.y * _ProjectionParams.x;
    //Instruction 20740
    //MUL
    t4.w = t24 * 0.500000;
    //Instruction 20741
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 20742
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 20743
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 20744
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 20745
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 20746
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 20747
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 20748
    //MUL
    t4.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 20749
    //MAD
    t4.xyz = _Object2World[0].xyz * t0.xxx + t4.xyz;
    //Instruction 20750
    //MAD
    t4.xyz = _Object2World[2].xyz * t0.zzz + t4.xyz;
    //Instruction 20751
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t4.xyz;
    //Instruction 20752
    //MOV
    t4.x = _World2Object[0].x;
    //Instruction 20753
    //MOV
    t4.y = _World2Object[1].x;
    //Instruction 20754
    //MOV
    t4.z = _World2Object[2].x;
    //Instruction 20755
    //MOV
    t5.x = _World2Object[0].y;
    //Instruction 20756
    //MOV
    t5.y = _World2Object[1].y;
    //Instruction 20757
    //MOV
    t5.z = _World2Object[2].y;
    //Instruction 20758
    //MUL
    t5.xyz = t5.xyz * in_NORMAL0.yyy;
    //Instruction 20759
    //MAD
    t4.xyz = t4.xyz * in_NORMAL0.xxx + t5.xyz;
    //Instruction 20760
    //MOV
    t5.x = _World2Object[0].z;
    //Instruction 20761
    //MOV
    t5.y = _World2Object[1].z;
    //Instruction 20762
    //MOV
    t5.z = _World2Object[2].z;
    //Instruction 20763
    //MAD
    t4.xyz = t5.xyz * in_NORMAL0.zzz + t4.xyz;
    //Instruction 20764
    //DP3
    t24 = dot(t4.xyz, t4.xyz);
    //Instruction 20765
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 20766
    //MUL
    t4.xyz = vec3(t24) * t4.xyz;
    //Instruction 20767
    //MUL
    t16_2 = t4.yzzx * t4.xyzz;
    //Instruction 20768
    //DP4
    t16_7.x = dot(unity_SHBr, t16_2);
    //Instruction 20769
    //DP4
    t16_7.y = dot(unity_SHBg, t16_2);
    //Instruction 20770
    //DP4
    t16_7.z = dot(unity_SHBb, t16_2);
    //Instruction 20771
    //MUL
    t16_31 = t4.y * t4.y;
    //Instruction 20772
    //MAD
    t16_31 = t4.x * t4.x + (-t16_31);
    //Instruction 20773
    //MAD
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(t16_31) + t16_7.xyz;
    //Instruction 20774
    //MUL
    t2 = t0.yyyy * _Object2World[1];
    //Instruction 20775
    //MAD
    t2 = _Object2World[0] * t0.xxxx + t2;
    //Instruction 20776
    //MAD
    t0 = _Object2World[2] * t0.zzzz + t2;
    //Instruction 20777
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 20778
    //MUL
    t2 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 20779
    //MAD
    t2 = unity_World2Shadow[0][0] * t0.xxxx + t2;
    //Instruction 20780
    //MAD
    t2 = unity_World2Shadow[0][2] * t0.zzzz + t2;
    //Instruction 20781
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t2;
    //Instruction 20782
    //MOV
    vs_TEXCOORD0.xyz = t4.xyz;
    //Instruction 20783
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 20784
    //MOV
    vs_TEXCOORD6 = t0;
    //Instruction 20785
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 20786
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 20787
    //MOV
    vs_TEXCOORD4.xyz = t3.xyz;
    //Instruction 20788
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump float t16_6;
mediump vec3 t16_9;
mediump float t16_21;
void main()
{
    //Instruction 20532
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 20533
    //FRC
    t16_6 = fract(t16_0.y);
    //Instruction 20534
    //MOV
    t1.x = t16_0.x;
    //Instruction 20535
    //MAD
    t1.y = t16_6 * 0.062500 + unity_LODFade.y;
    //Instruction 20536
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 20537
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 20538
    //LT
    tb1 = t16_1<0.0;
    //Instruction 20539
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 20540
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 20541
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 20542
    //LT
    tb1 = t10_2<0.0;
    //Instruction 20543
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 20544
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 20545
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 20546
    //ADD
    t16_9.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 20547
    //MAD
    t16_9.xyz = vs_TEXCOORD3.zzz * t16_9.xyz + t10_0.xyz;
    //Instruction 20548
    //MAX
    t16_4.x = max(t16_9.z, t16_9.y);
    //Instruction 20549
    //MAX
    t16_4.x = max(t16_9.x, t16_4.x);
    //Instruction 20550
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 20551
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 20552
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_9.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 20553
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD2.xyz;
    //Instruction 20554
    //SAMPLE_C_LZ
    vec3 txVec57 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_21 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec57, 0.0);
    //Instruction 20555
    //ADD
    t16_4.x = (-_LightShadowData.x) + 1.0;
    //Instruction 20556
    //MAD
    t16_21 = t16_21 * t16_4.x + _LightShadowData.x;
    //Instruction 20557
    //MUL
    t16_4.xyz = vec3(t16_21) * _LightColor0.xyz;
    //Instruction 20558
    //MUL
    t16_4.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 20559
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 20560
    //MOV
    t16_0.w = 1.0;
    //Instruction 20561
    //DP4
    t16_5.x = dot(unity_SHAr, t16_0);
    //Instruction 20562
    //DP4
    t16_5.y = dot(unity_SHAg, t16_0);
    //Instruction 20563
    //DP4
    t16_5.z = dot(unity_SHAb, t16_0);
    //Instruction 20564
    //ADD
    t16_5.xyz = t16_5.xyz + vs_TEXCOORD5.xyz;
    //Instruction 20565
    //MUL
    t16_3.xyz = t16_3.xyz * t16_5.xyz;
    //Instruction 20566
    //DP3
    t16_21 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 20567
    //MAX
    t16_21 = max(t16_21, 0.0);
    //Instruction 20568
    //MAD
    t16_3.xyz = t16_4.xyz * vec3(t16_21) + t16_3.xyz;
    //Instruction 20569
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 20570
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 20571
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec4 tmpvar_8;
  lowp vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10.xy = tmpvar_3.xy;
  tmpvar_9.w = _Color.w;
  tmpvar_9.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].x;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].y;
  tmpvar_11 = clamp (((
    fract(((tmpvar_12 + tmpvar_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_10.z = tmpvar_11;
  highp vec4 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_1;
  tmpvar_15 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = tmpvar_1.xyz;
  FinalPosition_18 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_20 == 5.0)) {
    highp vec3 vPos_23;
    vPos_23 = tmpvar_19;
    highp float fOffset_24;
    fOffset_24 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_24 = 0.75;
    };
    highp vec4 tmpvar_25;
    tmpvar_25.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_25.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_24);
    highp vec4 tmpvar_26;
    tmpvar_26 = abs(((
      fract((tmpvar_25 + 0.5))
     * 2.0) - 1.0));
    vPos_23 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_26 * tmpvar_26)
       * 
        (3.0 - (2.0 * tmpvar_26))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_15 = tmpvar_2;
    FinalPosition_18 = vPos_23;
  };
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_27;
    vPos_27 = FinalPosition_18;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_28;
      vPos_28 = FinalPosition_18;
      highp float fTime_29;
      highp float fAdherenceScale_30;
      highp vec3 vWindVector_31;
      vWindVector_31 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_29 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_32;
      highp float fOscillation_33;
      fOscillation_33 = 1.0;
      highp float fAmount_34;
      highp float fTarget_35;
      highp vec4 tmpvar_36;
      tmpvar_36.x = (fTime_29 + _glesMultiTexCoord0.w);
      tmpvar_36.y = ((fTime_29 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_36.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_29 + _glesMultiTexCoord0.w));
      tmpvar_36.w = ((fTime_29 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      vOscillations_32 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      highp float tmpvar_38;
      tmpvar_38 = (vOscillations_32.y * vOscillations_32.z);
      fTarget_35 = 1.0;
      fAmount_34 = tmpvar_38;
      if ((tmpvar_38 < 0.0)) {
        fTarget_35 = -1.0;
        fAmount_34 = -(tmpvar_38);
      };
      fOscillation_33 = (((
        mix (mix (tmpvar_38, fTarget_35, fAmount_34), fTarget_35, fAmount_34)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_32.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_33 = (fOscillation_33 * (1.0 + (vOscillations_32.w * _ST_WindBranchWhip.x)));
      vPos_28 = (FinalPosition_18 + ((vWindVector_31 * fOscillation_33) * _ST_WindBranch.y));
      highp vec4 tmpvar_39;
      tmpvar_39.zw = vec2(0.0, 0.0);
      tmpvar_39.x = ((fTime_29 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_39.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_40;
      highp vec4 tmpvar_41;
      tmpvar_41 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      tmpvar_40 = (((
        (tmpvar_41 * tmpvar_41)
       * 
        (3.0 - (2.0 * tmpvar_41))
      ) - 0.5) * 2.0);
      fAdherenceScale_30 = (1.0 - ((tmpvar_40.x * tmpvar_40.y) * (
        (tmpvar_40.x * tmpvar_40.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_30 = (fAdherenceScale_30 + ((vOscillations_32.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_28 = (vPos_28 + ((
        ((vRotatedBranchAnchor_16 - vPos_28) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_30) * _glesMultiTexCoord0.z));
      vPos_27 = vPos_28;
    } else {
      highp vec3 vPos_42;
      vPos_42 = vPos_27;
      highp float fTime_43;
      highp vec3 vWindVector_44;
      vWindVector_44 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_43 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_45;
      highp float fOscillation_46;
      fOscillation_46 = 1.0;
      highp float fAmount_47;
      highp float fTarget_48;
      highp vec4 tmpvar_49;
      tmpvar_49.w = 0.0;
      tmpvar_49.x = (fTime_43 + _glesMultiTexCoord0.w);
      tmpvar_49.y = ((fTime_43 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_49.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_43 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_50;
      tmpvar_50 = abs(((
        fract((tmpvar_49 + 0.5))
       * 2.0) - 1.0));
      vOscillations_45 = (((
        (tmpvar_50 * tmpvar_50)
       * 
        (3.0 - (2.0 * tmpvar_50))
      ) - 0.5) * 2.0);
      highp float tmpvar_51;
      tmpvar_51 = (vOscillations_45.y * vOscillations_45.z);
      fTarget_48 = 1.0;
      fAmount_47 = tmpvar_51;
      if ((tmpvar_51 < 0.0)) {
        fTarget_48 = -1.0;
        fAmount_47 = -(tmpvar_51);
      };
      fOscillation_46 = (((
        mix (mix (tmpvar_51, fTarget_48, fAmount_47), fTarget_48, fAmount_47)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_45.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_42 = (vPos_27 + ((vWindVector_44 * fOscillation_46) * _ST_WindBranch.y));
      vPos_27 = vPos_42;
    };
    FinalPosition_18 = vPos_27;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_52;
    vPos_52 = FinalPosition_18;
    highp float fMoveAmount_53;
    highp float fAdjust_54;
    highp float fLength_55;
    fLength_55 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_56;
    tmpvar_56 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_54 = tmpvar_56;
    if ((tmpvar_56 != 0.0)) {
      fAdjust_54 = pow (tmpvar_56, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_57;
    tmpvar_57.zw = vec2(0.0, 0.0);
    tmpvar_57.x = (tmpvar_12 + _ST_WindGlobal.x);
    tmpvar_57.y = (tmpvar_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_58;
    highp vec4 tmpvar_59;
    tmpvar_59 = abs(((
      fract((tmpvar_57 + 0.5))
     * 2.0) - 1.0));
    tmpvar_58 = (((
      (tmpvar_59 * tmpvar_59)
     * 
      (3.0 - (2.0 * tmpvar_59))
    ) - 0.5) * 2.0);
    fMoveAmount_53 = ((_ST_WindGlobal.y * (tmpvar_58.x + 
      (tmpvar_58.y * tmpvar_58.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_53 = (fMoveAmount_53 * fAdjust_54);
    vPos_52.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * fMoveAmount_53));
    vPos_52 = (normalize(vPos_52) * fLength_55);
    FinalPosition_18 = vPos_52;
  };
  tmpvar_14.xyz = FinalPosition_18;
  highp vec4 hPos_60;
  hPos_60 = (glstate_matrix_mvp * tmpvar_14);
  mediump vec3 screenPos_61;
  highp vec4 o_62;
  highp vec4 tmpvar_63;
  tmpvar_63 = (hPos_60 * 0.5);
  highp vec2 tmpvar_64;
  tmpvar_64.x = tmpvar_63.x;
  tmpvar_64.y = (tmpvar_63.y * _ProjectionParams.x);
  o_62.xy = (tmpvar_64 + tmpvar_63.w);
  o_62.zw = hPos_60.zw;
  highp vec3 tmpvar_65;
  tmpvar_65 = o_62.xyw;
  screenPos_61 = tmpvar_65;
  screenPos_61.xy = (screenPos_61.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_9;
  highp vec3 tmpvar_66;
  tmpvar_66 = (_Object2World * tmpvar_14).xyz;
  highp vec4 v_67;
  v_67.x = _World2Object[0].x;
  v_67.y = _World2Object[1].x;
  v_67.z = _World2Object[2].x;
  v_67.w = _World2Object[3].x;
  highp vec4 v_68;
  v_68.x = _World2Object[0].y;
  v_68.y = _World2Object[1].y;
  v_68.z = _World2Object[2].y;
  v_68.w = _World2Object[3].y;
  highp vec4 v_69;
  v_69.x = _World2Object[0].z;
  v_69.y = _World2Object[1].z;
  v_69.z = _World2Object[2].z;
  v_69.w = _World2Object[3].z;
  highp vec3 tmpvar_70;
  tmpvar_70 = normalize(((
    (v_67.xyz * tmpvar_15.x)
   + 
    (v_68.xyz * tmpvar_15.y)
  ) + (v_69.xyz * tmpvar_15.z)));
  worldNormal_4 = tmpvar_70;
  tmpvar_5 = worldNormal_4;
  lowp vec4 tmpvar_71;
  tmpvar_71.w = 1.0;
  tmpvar_71.xyz = worldNormal_4;
  mediump vec4 normal_72;
  normal_72 = tmpvar_71;
  mediump vec3 x2_73;
  mediump vec4 tmpvar_74;
  tmpvar_74 = (normal_72.xyzz * normal_72.yzzx);
  x2_73.x = dot (unity_SHBr, tmpvar_74);
  x2_73.y = dot (unity_SHBg, tmpvar_74);
  x2_73.z = dot (unity_SHBb, tmpvar_74);
  highp vec3 lightColor0_75;
  lightColor0_75 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_76;
  lightColor1_76 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_77;
  lightColor2_77 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_78;
  lightColor3_78 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_79;
  lightAttenSq_79 = unity_4LightAtten0;
  highp vec3 normal_80;
  normal_80 = worldNormal_4;
  highp vec3 col_81;
  highp vec4 ndotl_82;
  highp vec4 lengthSq_83;
  highp vec4 tmpvar_84;
  tmpvar_84 = (unity_4LightPosX0 - tmpvar_66.x);
  highp vec4 tmpvar_85;
  tmpvar_85 = (unity_4LightPosY0 - tmpvar_66.y);
  highp vec4 tmpvar_86;
  tmpvar_86 = (unity_4LightPosZ0 - tmpvar_66.z);
  lengthSq_83 = (tmpvar_84 * tmpvar_84);
  lengthSq_83 = (lengthSq_83 + (tmpvar_85 * tmpvar_85));
  lengthSq_83 = (lengthSq_83 + (tmpvar_86 * tmpvar_86));
  ndotl_82 = (tmpvar_84 * normal_80.x);
  ndotl_82 = (ndotl_82 + (tmpvar_85 * normal_80.y));
  ndotl_82 = (ndotl_82 + (tmpvar_86 * normal_80.z));
  highp vec4 tmpvar_87;
  tmpvar_87 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_82 * inversesqrt(lengthSq_83)));
  ndotl_82 = tmpvar_87;
  highp vec4 tmpvar_88;
  tmpvar_88 = (tmpvar_87 * (1.0/((1.0 + 
    (lengthSq_83 * lightAttenSq_79)
  ))));
  col_81 = (lightColor0_75 * tmpvar_88.x);
  col_81 = (col_81 + (lightColor1_76 * tmpvar_88.y));
  col_81 = (col_81 + (lightColor2_77 * tmpvar_88.z));
  col_81 = (col_81 + (lightColor3_78 * tmpvar_88.w));
  tmpvar_7 = ((x2_73 + (unity_SHC.xyz * 
    ((normal_72.x * normal_72.x) - (normal_72.y * normal_72.y))
  )) + col_81);
  tmpvar_8 = (unity_World2Shadow[0] * (_Object2World * tmpvar_14));
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_66;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_10;
  xlv_TEXCOORD4 = screenPos_61;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_13.x = tmpvar_14.x;
  projUV_13.y = ((fract(tmpvar_14.y) * 0.0625) + unity_LODFade.y);
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_16;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_17;
  x_17 = (tmpvar_10 - _Cutoff);
  if ((x_17 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_18;
  tmpvar_18 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_18.x, max (tmpvar_18.y, tmpvar_18.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_18 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp float shadow_19;
  shadow_19 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_19;
  mediump vec3 normalWorld_20;
  normalWorld_20 = tmpvar_5;
  mediump vec3 tmpvar_21;
  mediump vec3 tmpvar_22;
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = normalWorld_20;
  mediump vec3 x1_24;
  x1_24.x = dot (unity_SHAr, tmpvar_23);
  x1_24.y = dot (unity_SHAg, tmpvar_23);
  x1_24.z = dot (unity_SHAb, tmpvar_23);
  tmpvar_22 = (xlv_TEXCOORD5 + x1_24);
  tmpvar_21 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_21;
  lowp vec4 c_25;
  lowp vec4 c_26;
  lowp float diff_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_27 = tmpvar_28;
  c_26.xyz = ((tmpvar_9 * tmpvar_21) * diff_27);
  c_26.w = tmpvar_10;
  c_25.w = c_26.w;
  c_25.xyz = (c_26.xyz + (tmpvar_9 * tmpvar_22));
  c_4.xyz = c_25.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec3 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
highp vec4 t6;
mediump vec3 t16_7;
highp vec4 t8;
highp vec4 t9;
highp vec2 t10;
bool tb10;
highp float t13;
highp vec2 t20;
highp vec2 t24;
highp vec2 t26;
highp float t30;
highp float t31;
bool tb31;
highp float t33;
bool tb33;
highp float t34;
highp float t35;
mediump float t16_37;
void main()
{
    //Instruction 21173
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 21174
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 21175
    //ADD
    t10.x = t0.x + _Object2World[3].z;
    //Instruction 21176
    //ADD
    t20.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 21177
    //ADD
    t10.y = t20.x + in_NORMAL0.x;
    //Instruction 21178
    //FRC
    t10.xy = fract(t10.xy);
    //Instruction 21179
    //MAD
    t10.x = t10.y * 0.500000 + t10.x;
    //Instruction 21180
    //ADD
    t10.x = t10.x + -0.300000;
    //Instruction 21181
    //MUL
    t1.z = t10.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 21182
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 21183
    //LT
    tb10 = 0.0<t16_2.x;
    //Instruction 21184
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 21185
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 21186
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 21187
    //DP3
    t20.x = dot(t3.xyz, t3.xyz);
    //Instruction 21188
    //RSQ
    t20.x = inversesqrt(t20.x);
    //Instruction 21189
    //MUL
    t20.xy = t20.xx * t3.xz;
    //Instruction 21190
    //AND
    t20.xy = mix(vec2(0.0, 0.0), t20.xy, bvec2(tb10));
    //Instruction 21191
    //EQ
    tb31 = t16_2.x==5.000000;
    //Instruction 21192
    //LT
    tb3 = in_TEXCOORD0.x<0.500000;
    //Instruction 21193
    //AND
    t3.x = tb3 ? 0.750000 : float(0.0);
    //Instruction 21194
    //ADD
    t13 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 21195
    //MAD
    t3.x = t13 * _ST_WindFrondRipple.z + t3.x;
    //Instruction 21196
    //ADD
    t3.x = t3.x + 0.500000;
    //Instruction 21197
    //FRC
    t3.x = fract(t3.x);
    //Instruction 21198
    //MAD
    t3.x = t3.x * 2.000000 + -1.0;
    //Instruction 21199
    //MUL
    t13 = abs(t3.x) * abs(t3.x);
    //Instruction 21200
    //MAD
    t3.x = -abs(t3.x) * 2.000000 + 3.000000;
    //Instruction 21201
    //MAD
    t3.x = t13 * t3.x + -0.500000;
    //Instruction 21202
    //MUL
    t3.x = t3.x * in_TEXCOORD2.y;
    //Instruction 21203
    //DP2
    t3.x = dot(_ST_WindFrondRipple.yy, t3.xx);
    //Instruction 21204
    //MAD
    t3.xyz = t3.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    //Instruction 21205
    //MOVC
    t3.xyz = (bool(tb31)) ? t3.xyz : in_POSITION0.xyz;
    //Instruction 21206
    //GE
    tb33 = t16_2.x>=3.000000;
    //Instruction 21207
    //IF
    if(tb33){
        //Instruction 21208
        //IF
        if(tb31){
            //Instruction 21209
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 21210
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 21211
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 21212
            //DP3
            t31 = dot(t4.xyz, t4.xyz);
            //Instruction 21213
            //RSQ
            t31 = inversesqrt(t31);
            //Instruction 21214
            //MUL
            t4.xyz = vec3(t31) * t4.xyz;
            //Instruction 21215
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 21216
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 21217
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 21218
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 21219
            //ADD
            t31 = t0.x + _ST_WindBranch.x;
            //Instruction 21220
            //ADD
            t2.x = t31 + in_TEXCOORD0.w;
            //Instruction 21221
            //MAD
            t2.y = t31 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 21222
            //MUL
            t33 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 21223
            //MUL
            t2.z = t33 * 0.500000;
            //Instruction 21224
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 21225
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 21226
            //FRC
            t2 = fract(t2);
            //Instruction 21227
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 21228
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 21229
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 21230
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 21231
            //ADD
            t2 = t2 + t2;
            //Instruction 21232
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 21233
            //LT
            tb33 = t6.w<0.0;
            //Instruction 21234
            //MOV
            t6.y = (-t6.w);
            //Instruction 21235
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 21236
            //MOVC
            t6.xy = (bool(tb33)) ? t6.xy : t6.zw;
            //Instruction 21237
            //MAD
            t33 = (-t2.y) * t2.z + t6.x;
            //Instruction 21238
            //MAD
            t33 = t6.y * t33 + t6.w;
            //Instruction 21239
            //ADD
            t34 = (-t33) + t6.x;
            //Instruction 21240
            //MAD
            t33 = t6.y * t34 + t33;
            //Instruction 21241
            //MUL
            t33 = t33 * _ST_WindBranchTwitch.x;
            //Instruction 21242
            //ADD
            t34 = (-_ST_WindVector.w) + 1.0;
            //Instruction 21243
            //ADD
            t35 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 21244
            //MUL
            t35 = t2.x * t35;
            //Instruction 21245
            //MAD
            t33 = t33 * t34 + t35;
            //Instruction 21246
            //MAD
            t34 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 21247
            //MUL
            t33 = t33 * t34;
            //Instruction 21248
            //MUL
            t5.xyz = vec3(t33) * t5.xyz;
            //Instruction 21249
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 21250
            //MAD
            t6.x = t31 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 21251
            //MUL
            t31 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 21252
            //MAD
            t6.y = t31 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 21253
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 21254
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 21255
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 21256
            //MUL
            t26.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 21257
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 21258
            //MAD
            t6.xy = t26.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 21259
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 21260
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 21261
            //MUL
            t31 = t6.x * t6.y;
            //Instruction 21262
            //MAD
            t31 = (-t31) * _ST_WindTurbulences.x + 1.0;
            //Instruction 21263
            //MUL
            t33 = t2.w * _ST_WindVector.w;
            //Instruction 21264
            //MAD
            t31 = t33 * _ST_WindBranchWhip.x + t31;
            //Instruction 21265
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 21266
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 21267
            //MUL
            t4.xyz = vec3(t31) * t4.xyz;
            //Instruction 21268
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 21269
        //ELSE
        } else {
            //Instruction 21270
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 21271
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 21272
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 21273
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 21274
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 21275
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 21276
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 21277
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 21278
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 21279
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 21280
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 21281
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 21282
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 21283
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 21284
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 21285
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 21286
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 21287
            //LT
            tb0 = t2.w<0.0;
            //Instruction 21288
            //MOV
            t2.y = (-t2.w);
            //Instruction 21289
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 21290
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 21291
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 21292
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 21293
            //ADD
            t31 = (-t0.x) + t6.x;
            //Instruction 21294
            //MAD
            t0.x = t6.y * t31 + t0.x;
            //Instruction 21295
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 21296
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 21297
            //ADD
            t33 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 21298
            //MUL
            t33 = t33 * t5.x;
            //Instruction 21299
            //MAD
            t0.x = t0.x * t31 + t33;
            //Instruction 21300
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 21301
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 21302
        //ENDIF
        }
        //Instruction 21303
    //ENDIF
    }
    //Instruction 21304
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 21305
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 21306
    //DIV
    t31 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 21307
    //MAD
    t31 = (-t31) * 0.250000 + t3.y;
    //Instruction 21308
    //MAX
    t31 = max(t31, 0.0);
    //Instruction 21309
    //MUL
    t31 = t31 * _ST_WindGlobal.z;
    //Instruction 21310
    //NE
    tb33 = t31!=0.0;
    //Instruction 21311
    //LOG
    t4.x = log2(t31);
    //Instruction 21312
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 21313
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 21314
    //MOVC
    t31 = (tb33) ? t4.x : t31;
    //Instruction 21315
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 21316
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 21317
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 21318
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 21319
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 21320
    //MUL
    t24.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 21321
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 21322
    //MAD
    t4.xy = t24.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 21323
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 21324
    //MAD
    t33 = t4.y * t4.y + t4.x;
    //Instruction 21325
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 21326
    //MAD
    t33 = _ST_WindGlobal.y * t33 + t4.x;
    //Instruction 21327
    //MUL
    t31 = t31 * t33;
    //Instruction 21328
    //MAD
    t4.xz = t20.xy * vec2(t31) + t3.xz;
    //Instruction 21329
    //MOV
    t4.y = t3.y;
    //Instruction 21330
    //DP3
    t20.x = dot(t4.xyz, t4.xyz);
    //Instruction 21331
    //RSQ
    t20.x = inversesqrt(t20.x);
    //Instruction 21332
    //MUL
    t4.xyz = t20.xxx * t4.xyz;
    //Instruction 21333
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 21334
    //MOVC
    t0.xyz = (bool(tb10)) ? t0.xzw : t3.xyz;
    //Instruction 21335
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 21336
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 21337
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 21338
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 21339
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 21340
    //MUL
    t30 = t3.y * _ProjectionParams.x;
    //Instruction 21341
    //MUL
    t4.w = t30 * 0.500000;
    //Instruction 21342
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 21343
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 21344
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 21345
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 21346
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 21347
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 21348
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 21349
    //MUL
    t4.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 21350
    //MAD
    t4.xyz = _Object2World[0].xyz * t0.xxx + t4.xyz;
    //Instruction 21351
    //MAD
    t4.xyz = _Object2World[2].xyz * t0.zzz + t4.xyz;
    //Instruction 21352
    //MAD
    t4.xyz = _Object2World[3].xyz * in_POSITION0.www + t4.xyz;
    //Instruction 21353
    //MOV
    t5.x = _World2Object[0].x;
    //Instruction 21354
    //MOV
    t5.y = _World2Object[1].x;
    //Instruction 21355
    //MOV
    t5.z = _World2Object[2].x;
    //Instruction 21356
    //MOV
    t6.x = _World2Object[0].y;
    //Instruction 21357
    //MOV
    t6.y = _World2Object[1].y;
    //Instruction 21358
    //MOV
    t6.z = _World2Object[2].y;
    //Instruction 21359
    //MUL
    t6.xyz = t6.xyz * in_NORMAL0.yyy;
    //Instruction 21360
    //MAD
    t5.xyz = t5.xyz * in_NORMAL0.xxx + t6.xyz;
    //Instruction 21361
    //MOV
    t6.x = _World2Object[0].z;
    //Instruction 21362
    //MOV
    t6.y = _World2Object[1].z;
    //Instruction 21363
    //MOV
    t6.z = _World2Object[2].z;
    //Instruction 21364
    //MAD
    t5.xyz = t6.xyz * in_NORMAL0.zzz + t5.xyz;
    //Instruction 21365
    //DP3
    t30 = dot(t5.xyz, t5.xyz);
    //Instruction 21366
    //RSQ
    t30 = inversesqrt(t30);
    //Instruction 21367
    //MUL
    t5.xyz = vec3(t30) * t5.xyz;
    //Instruction 21368
    //MUL
    t16_2 = t5.yzzx * t5.xyzz;
    //Instruction 21369
    //DP4
    t16_7.x = dot(unity_SHBr, t16_2);
    //Instruction 21370
    //DP4
    t16_7.y = dot(unity_SHBg, t16_2);
    //Instruction 21371
    //DP4
    t16_7.z = dot(unity_SHBb, t16_2);
    //Instruction 21372
    //MUL
    t16_37 = t5.y * t5.y;
    //Instruction 21373
    //MAD
    t16_37 = t5.x * t5.x + (-t16_37);
    //Instruction 21374
    //MAD
    t16_7.xyz = unity_SHC.xyz * vec3(t16_37) + t16_7.xyz;
    //Instruction 21375
    //ADD
    t2 = (-t4.xxxx) + unity_4LightPosX0;
    //Instruction 21376
    //ADD
    t6 = (-t4.yyyy) + unity_4LightPosY0;
    //Instruction 21377
    //ADD
    t8 = (-t4.zzzz) + unity_4LightPosZ0;
    //Instruction 21378
    //MUL
    t9 = t6 * t6;
    //Instruction 21379
    //MAD
    t9 = t2 * t2 + t9;
    //Instruction 21380
    //MAD
    t9 = t8 * t8 + t9;
    //Instruction 21381
    //MUL
    t6 = t5.yyyy * t6;
    //Instruction 21382
    //MAD
    t2 = t2 * t5.xxxx + t6;
    //Instruction 21383
    //MAD
    t2 = t8 * t5.zzzz + t2;
    //Instruction 21384
    //RSQ
    t6 = inversesqrt(t9);
    //Instruction 21385
    //MUL
    t2 = t2 * t6;
    //Instruction 21386
    //MAX
    t2 = max(t2, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 21387
    //MAD
    t6 = t9 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 21388
    //DIV
    t6 = vec4(1.0, 1.0, 1.0, 1.0) / t6;
    //Instruction 21389
    //MUL
    t2 = t2 * t6;
    //Instruction 21390
    //MUL
    t6.xyz = t2.yyy * unity_LightColor[1].xyz;
    //Instruction 21391
    //MAD
    t6.xyz = unity_LightColor[0].xyz * t2.xxx + t6.xyz;
    //Instruction 21392
    //MAD
    t6.xyz = unity_LightColor[2].xyz * t2.zzz + t6.xyz;
    //Instruction 21393
    //MAD
    t6.xyz = unity_LightColor[3].xyz * t2.www + t6.xyz;
    //Instruction 21394
    //ADD
    t6.xyz = t6.xyz + t16_7.xyz;
    //Instruction 21395
    //MUL
    t2 = t0.yyyy * _Object2World[1];
    //Instruction 21396
    //MAD
    t2 = _Object2World[0] * t0.xxxx + t2;
    //Instruction 21397
    //MAD
    t0 = _Object2World[2] * t0.zzzz + t2;
    //Instruction 21398
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 21399
    //MUL
    t2 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 21400
    //MAD
    t2 = unity_World2Shadow[0][0] * t0.xxxx + t2;
    //Instruction 21401
    //MAD
    t2 = unity_World2Shadow[0][2] * t0.zzzz + t2;
    //Instruction 21402
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t2;
    //Instruction 21403
    //MOV
    vs_TEXCOORD0.xyz = t5.xyz;
    //Instruction 21404
    //MOV
    vs_TEXCOORD1.xyz = t4.xyz;
    //Instruction 21405
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 21406
    //MOV
    vs_TEXCOORD6 = t0;
    //Instruction 21407
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 21408
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 21409
    //MOV
    vs_TEXCOORD4.xyz = t3.xyz;
    //Instruction 21410
    //MOV
    vs_TEXCOORD5.xyz = t6.xyz;
    //Instruction 21411
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump float t16_6;
mediump vec3 t16_9;
mediump float t16_21;
void main()
{
    //Instruction 21133
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 21134
    //FRC
    t16_6 = fract(t16_0.y);
    //Instruction 21135
    //MOV
    t1.x = t16_0.x;
    //Instruction 21136
    //MAD
    t1.y = t16_6 * 0.062500 + unity_LODFade.y;
    //Instruction 21137
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 21138
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 21139
    //LT
    tb1 = t16_1<0.0;
    //Instruction 21140
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 21141
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 21142
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 21143
    //LT
    tb1 = t10_2<0.0;
    //Instruction 21144
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 21145
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 21146
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 21147
    //ADD
    t16_9.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 21148
    //MAD
    t16_9.xyz = vs_TEXCOORD3.zzz * t16_9.xyz + t10_0.xyz;
    //Instruction 21149
    //MAX
    t16_4.x = max(t16_9.z, t16_9.y);
    //Instruction 21150
    //MAX
    t16_4.x = max(t16_9.x, t16_4.x);
    //Instruction 21151
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 21152
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 21153
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_9.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 21154
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD2.xyz;
    //Instruction 21155
    //SAMPLE_C_LZ
    vec3 txVec46 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_21 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec46, 0.0);
    //Instruction 21156
    //ADD
    t16_4.x = (-_LightShadowData.x) + 1.0;
    //Instruction 21157
    //MAD
    t16_21 = t16_21 * t16_4.x + _LightShadowData.x;
    //Instruction 21158
    //MUL
    t16_4.xyz = vec3(t16_21) * _LightColor0.xyz;
    //Instruction 21159
    //MUL
    t16_4.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 21160
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 21161
    //MOV
    t16_0.w = 1.0;
    //Instruction 21162
    //DP4
    t16_5.x = dot(unity_SHAr, t16_0);
    //Instruction 21163
    //DP4
    t16_5.y = dot(unity_SHAg, t16_0);
    //Instruction 21164
    //DP4
    t16_5.z = dot(unity_SHAb, t16_0);
    //Instruction 21165
    //ADD
    t16_5.xyz = t16_5.xyz + vs_TEXCOORD5.xyz;
    //Instruction 21166
    //MUL
    t16_3.xyz = t16_3.xyz * t16_5.xyz;
    //Instruction 21167
    //DP3
    t16_21 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 21168
    //MAX
    t16_21 = max(t16_21, 0.0);
    //Instruction 21169
    //MAD
    t16_3.xyz = t16_4.xyz * vec3(t16_21) + t16_3.xyz;
    //Instruction 21170
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 21171
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 21172
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_4;
  lowp vec3 worldTangent_5;
  lowp vec3 worldNormal_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 == 5.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    highp float fOffset_23;
    fOffset_23 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_23 = 0.75;
    };
    highp vec4 tmpvar_24;
    tmpvar_24.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_24.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_23);
    highp vec4 tmpvar_25;
    tmpvar_25 = abs(((
      fract((tmpvar_24 + 0.5))
     * 2.0) - 1.0));
    vPos_22 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_14 = tmpvar_2;
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_26;
    vPos_26 = FinalPosition_17;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_27;
      vPos_27 = FinalPosition_17;
      highp float fTime_28;
      highp float fAdherenceScale_29;
      highp vec3 vWindVector_30;
      vWindVector_30 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_28 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_31;
      highp float fOscillation_32;
      fOscillation_32 = 1.0;
      highp float fAmount_33;
      highp float fTarget_34;
      highp vec4 tmpvar_35;
      tmpvar_35.x = (fTime_28 + _glesMultiTexCoord0.w);
      tmpvar_35.y = ((fTime_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_35.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_28 + _glesMultiTexCoord0.w));
      tmpvar_35.w = ((fTime_28 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      vOscillations_31 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      highp float tmpvar_37;
      tmpvar_37 = (vOscillations_31.y * vOscillations_31.z);
      fTarget_34 = 1.0;
      fAmount_33 = tmpvar_37;
      if ((tmpvar_37 < 0.0)) {
        fTarget_34 = -1.0;
        fAmount_33 = -(tmpvar_37);
      };
      fOscillation_32 = (((
        mix (mix (tmpvar_37, fTarget_34, fAmount_33), fTarget_34, fAmount_33)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_31.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_32 = (fOscillation_32 * (1.0 + (vOscillations_31.w * _ST_WindBranchWhip.x)));
      vPos_27 = (FinalPosition_17 + ((vWindVector_30 * fOscillation_32) * _ST_WindBranch.y));
      highp vec4 tmpvar_38;
      tmpvar_38.zw = vec2(0.0, 0.0);
      tmpvar_38.x = ((fTime_28 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_38.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_39;
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      tmpvar_39 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      fAdherenceScale_29 = (1.0 - ((tmpvar_39.x * tmpvar_39.y) * (
        (tmpvar_39.x * tmpvar_39.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_29 = (fAdherenceScale_29 + ((vOscillations_31.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_27 = (vPos_27 + ((
        ((vRotatedBranchAnchor_15 - vPos_27) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_29) * _glesMultiTexCoord0.z));
      vPos_26 = vPos_27;
    } else {
      highp vec3 vPos_41;
      vPos_41 = vPos_26;
      highp float fTime_42;
      highp vec3 vWindVector_43;
      vWindVector_43 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_42 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_44;
      highp float fOscillation_45;
      fOscillation_45 = 1.0;
      highp float fAmount_46;
      highp float fTarget_47;
      highp vec4 tmpvar_48;
      tmpvar_48.w = 0.0;
      tmpvar_48.x = (fTime_42 + _glesMultiTexCoord0.w);
      tmpvar_48.y = ((fTime_42 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_48.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_42 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_49;
      tmpvar_49 = abs(((
        fract((tmpvar_48 + 0.5))
       * 2.0) - 1.0));
      vOscillations_44 = (((
        (tmpvar_49 * tmpvar_49)
       * 
        (3.0 - (2.0 * tmpvar_49))
      ) - 0.5) * 2.0);
      highp float tmpvar_50;
      tmpvar_50 = (vOscillations_44.y * vOscillations_44.z);
      fTarget_47 = 1.0;
      fAmount_46 = tmpvar_50;
      if ((tmpvar_50 < 0.0)) {
        fTarget_47 = -1.0;
        fAmount_46 = -(tmpvar_50);
      };
      fOscillation_45 = (((
        mix (mix (tmpvar_50, fTarget_47, fAmount_46), fTarget_47, fAmount_46)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_44.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_41 = (vPos_26 + ((vWindVector_43 * fOscillation_45) * _ST_WindBranch.y));
      vPos_26 = vPos_41;
    };
    FinalPosition_17 = vPos_26;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_51;
    vPos_51 = FinalPosition_17;
    highp float fMoveAmount_52;
    highp float fAdjust_53;
    highp float fLength_54;
    fLength_54 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_55;
    tmpvar_55 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_53 = tmpvar_55;
    if ((tmpvar_55 != 0.0)) {
      fAdjust_53 = pow (tmpvar_55, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_56;
    tmpvar_56.zw = vec2(0.0, 0.0);
    tmpvar_56.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_56.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_57;
    highp vec4 tmpvar_58;
    tmpvar_58 = abs(((
      fract((tmpvar_56 + 0.5))
     * 2.0) - 1.0));
    tmpvar_57 = (((
      (tmpvar_58 * tmpvar_58)
     * 
      (3.0 - (2.0 * tmpvar_58))
    ) - 0.5) * 2.0);
    fMoveAmount_52 = ((_ST_WindGlobal.y * (tmpvar_57.x + 
      (tmpvar_57.y * tmpvar_57.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_52 = (fMoveAmount_52 * fAdjust_53);
    vPos_51.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_52));
    vPos_51 = (normalize(vPos_51) * fLength_54);
    FinalPosition_17 = vPos_51;
  };
  tmpvar_13.xyz = FinalPosition_17;
  highp vec4 hPos_59;
  hPos_59 = (glstate_matrix_mvp * tmpvar_13);
  mediump vec3 screenPos_60;
  highp vec4 o_61;
  highp vec4 tmpvar_62;
  tmpvar_62 = (hPos_59 * 0.5);
  highp vec2 tmpvar_63;
  tmpvar_63.x = tmpvar_62.x;
  tmpvar_63.y = (tmpvar_62.y * _ProjectionParams.x);
  o_61.xy = (tmpvar_63 + tmpvar_62.w);
  o_61.zw = hPos_59.zw;
  highp vec3 tmpvar_64;
  tmpvar_64 = o_61.xyw;
  screenPos_60 = tmpvar_64;
  screenPos_60.xy = (screenPos_60.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7 = tmpvar_8;
  highp vec3 tmpvar_65;
  tmpvar_65 = (_Object2World * tmpvar_13).xyz;
  highp vec4 v_66;
  v_66.x = _World2Object[0].x;
  v_66.y = _World2Object[1].x;
  v_66.z = _World2Object[2].x;
  v_66.w = _World2Object[3].x;
  highp vec4 v_67;
  v_67.x = _World2Object[0].y;
  v_67.y = _World2Object[1].y;
  v_67.z = _World2Object[2].y;
  v_67.w = _World2Object[3].y;
  highp vec4 v_68;
  v_68.x = _World2Object[0].z;
  v_68.y = _World2Object[1].z;
  v_68.z = _World2Object[2].z;
  v_68.w = _World2Object[3].z;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize(((
    (v_66.xyz * tmpvar_14.x)
   + 
    (v_67.xyz * tmpvar_14.y)
  ) + (v_68.xyz * tmpvar_14.z)));
  worldNormal_6 = tmpvar_69;
  highp mat3 tmpvar_70;
  tmpvar_70[0] = _Object2World[0].xyz;
  tmpvar_70[1] = _Object2World[1].xyz;
  tmpvar_70[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_71;
  tmpvar_71 = normalize((tmpvar_70 * _glesTANGENT.xyz));
  worldTangent_5 = tmpvar_71;
  lowp vec3 tmpvar_72;
  tmpvar_72 = ((worldNormal_6.yzx * worldTangent_5.zxy) - (worldNormal_6.zxy * worldTangent_5.yzx));
  highp vec3 tmpvar_73;
  tmpvar_73 = (tmpvar_72 * _glesTANGENT.w);
  worldBinormal_4 = tmpvar_73;
  highp vec4 tmpvar_74;
  tmpvar_74.x = worldTangent_5.x;
  tmpvar_74.y = worldBinormal_4.x;
  tmpvar_74.z = worldNormal_6.x;
  tmpvar_74.w = tmpvar_65.x;
  highp vec4 tmpvar_75;
  tmpvar_75.x = worldTangent_5.y;
  tmpvar_75.y = worldBinormal_4.y;
  tmpvar_75.z = worldNormal_6.y;
  tmpvar_75.w = tmpvar_65.y;
  highp vec4 tmpvar_76;
  tmpvar_76.x = worldTangent_5.z;
  tmpvar_76.y = worldBinormal_4.z;
  tmpvar_76.z = worldNormal_6.z;
  tmpvar_76.w = tmpvar_65.z;
  lowp vec4 tmpvar_77;
  tmpvar_77.w = 1.0;
  tmpvar_77.xyz = worldNormal_6;
  mediump vec4 normal_78;
  normal_78 = tmpvar_77;
  mediump vec3 x2_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = (normal_78.xyzz * normal_78.yzzx);
  x2_79.x = dot (unity_SHBr, tmpvar_80);
  x2_79.y = dot (unity_SHBg, tmpvar_80);
  x2_79.z = dot (unity_SHBb, tmpvar_80);
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_74;
  xlv_TEXCOORD1 = tmpvar_75;
  xlv_TEXCOORD2 = tmpvar_76;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = screenPos_60;
  xlv_TEXCOORD6 = (x2_79 + (unity_SHC.xyz * (
    (normal_78.x * normal_78.x)
   - 
    (normal_78.y * normal_78.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_16;
  x_16 = (tmpvar_9 - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_17.x, max (tmpvar_17.y, tmpvar_17.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_17 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_18;
  tmpvar_18 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD0.xyz, tmpvar_18);
  worldN_3.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD1.xyz, tmpvar_18);
  worldN_3.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (xlv_TEXCOORD2.xyz, tmpvar_18);
  worldN_3.z = tmpvar_21;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_22;
  normalWorld_22 = worldN_3;
  mediump vec3 tmpvar_23;
  mediump vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = normalWorld_22;
  mediump vec3 x1_25;
  x1_25.x = dot (unity_SHAr, tmpvar_24);
  x1_25.y = dot (unity_SHAg, tmpvar_24);
  x1_25.z = dot (unity_SHAb, tmpvar_24);
  tmpvar_23 = (xlv_TEXCOORD6 + x1_25);
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_28 = tmpvar_29;
  c_27.xyz = ((tmpvar_8 * tmpvar_1) * diff_28);
  c_27.w = tmpvar_9;
  c_26.w = c_27.w;
  c_26.xyz = (c_27.xyz + (tmpvar_8 * tmpvar_23));
  c_4.xyz = c_26.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
highp vec4 t6;
mediump vec4 t16_6;
lowp vec3 t10_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp float t12;
highp vec2 t18;
highp vec2 t22;
highp vec2 t24;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
highp float t32;
mediump float t16_35;
void main()
{
    //Instruction 21271
    //MUL
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 21272
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 21273
    //ADD
    t9.x = t0.x + _Object2World[3].z;
    //Instruction 21274
    //ADD
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 21275
    //ADD
    t9.y = t18.x + in_NORMAL0.x;
    //Instruction 21276
    //FRC
    t9.xy = fract(t9.xy);
    //Instruction 21277
    //MAD
    t9.x = t9.y * 0.500000 + t9.x;
    //Instruction 21278
    //ADD
    t9.x = t9.x + -0.300000;
    //Instruction 21279
    //MUL
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 21280
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 21281
    //LT
    tb9 = 0.0<t16_2;
    //Instruction 21282
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 21283
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 21284
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 21285
    //DP3
    t18.x = dot(t3.xyz, t3.xyz);
    //Instruction 21286
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 21287
    //MUL
    t18.xy = t18.xx * t3.xz;
    //Instruction 21288
    //AND
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, bvec2(tb9));
    //Instruction 21289
    //EQ
    tb28 = t16_2==5.000000;
    //Instruction 21290
    //LT
    tb3 = in_TEXCOORD0.x<0.500000;
    //Instruction 21291
    //AND
    t3.x = tb3 ? 0.750000 : float(0.0);
    //Instruction 21292
    //ADD
    t12 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 21293
    //MAD
    t3.x = t12 * _ST_WindFrondRipple.z + t3.x;
    //Instruction 21294
    //ADD
    t3.x = t3.x + 0.500000;
    //Instruction 21295
    //FRC
    t3.x = fract(t3.x);
    //Instruction 21296
    //MAD
    t3.x = t3.x * 2.000000 + -1.0;
    //Instruction 21297
    //MUL
    t12 = abs(t3.x) * abs(t3.x);
    //Instruction 21298
    //MAD
    t3.x = -abs(t3.x) * 2.000000 + 3.000000;
    //Instruction 21299
    //MAD
    t3.x = t12 * t3.x + -0.500000;
    //Instruction 21300
    //MUL
    t3.x = t3.x * in_TEXCOORD2.y;
    //Instruction 21301
    //DP2
    t3.x = dot(_ST_WindFrondRipple.yy, t3.xx);
    //Instruction 21302
    //MAD
    t3.xyz = t3.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    //Instruction 21303
    //MOVC
    t3.xyz = (bool(tb28)) ? t3.xyz : in_POSITION0.xyz;
    //Instruction 21304
    //GE
    tb30 = t16_2>=3.000000;
    //Instruction 21305
    //IF
    if(tb30){
        //Instruction 21306
        //IF
        if(tb28){
            //Instruction 21307
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 21308
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 21309
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 21310
            //DP3
            t28 = dot(t4.xyz, t4.xyz);
            //Instruction 21311
            //RSQ
            t28 = inversesqrt(t28);
            //Instruction 21312
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 21313
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 21314
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 21315
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 21316
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 21317
            //ADD
            t28 = t0.x + _ST_WindBranch.x;
            //Instruction 21318
            //ADD
            t2.x = t28 + in_TEXCOORD0.w;
            //Instruction 21319
            //MAD
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 21320
            //MUL
            t30 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 21321
            //MUL
            t2.z = t30 * 0.500000;
            //Instruction 21322
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 21323
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 21324
            //FRC
            t2 = fract(t2);
            //Instruction 21325
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 21326
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 21327
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 21328
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 21329
            //ADD
            t2 = t2 + t2;
            //Instruction 21330
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 21331
            //LT
            tb30 = t6.w<0.0;
            //Instruction 21332
            //MOV
            t6.y = (-t6.w);
            //Instruction 21333
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 21334
            //MOVC
            t6.xy = (bool(tb30)) ? t6.xy : t6.zw;
            //Instruction 21335
            //MAD
            t30 = (-t2.y) * t2.z + t6.x;
            //Instruction 21336
            //MAD
            t30 = t6.y * t30 + t6.w;
            //Instruction 21337
            //ADD
            t31 = (-t30) + t6.x;
            //Instruction 21338
            //MAD
            t30 = t6.y * t31 + t30;
            //Instruction 21339
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 21340
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 21341
            //ADD
            t32 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 21342
            //MUL
            t32 = t2.x * t32;
            //Instruction 21343
            //MAD
            t30 = t30 * t31 + t32;
            //Instruction 21344
            //MAD
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 21345
            //MUL
            t30 = t30 * t31;
            //Instruction 21346
            //MUL
            t5.xyz = vec3(t30) * t5.xyz;
            //Instruction 21347
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 21348
            //MAD
            t6.x = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 21349
            //MUL
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 21350
            //MAD
            t6.y = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 21351
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 21352
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 21353
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 21354
            //MUL
            t24.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 21355
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 21356
            //MAD
            t6.xy = t24.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 21357
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 21358
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 21359
            //MUL
            t28 = t6.x * t6.y;
            //Instruction 21360
            //MAD
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            //Instruction 21361
            //MUL
            t30 = t2.w * _ST_WindVector.w;
            //Instruction 21362
            //MAD
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            //Instruction 21363
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 21364
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 21365
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 21366
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 21367
        //ELSE
        } else {
            //Instruction 21368
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 21369
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 21370
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 21371
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 21372
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 21373
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 21374
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 21375
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 21376
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 21377
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 21378
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 21379
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 21380
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 21381
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 21382
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 21383
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 21384
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 21385
            //LT
            tb0 = t2.w<0.0;
            //Instruction 21386
            //MOV
            t2.y = (-t2.w);
            //Instruction 21387
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 21388
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 21389
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 21390
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 21391
            //ADD
            t28 = (-t0.x) + t6.x;
            //Instruction 21392
            //MAD
            t0.x = t6.y * t28 + t0.x;
            //Instruction 21393
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 21394
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 21395
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 21396
            //MUL
            t30 = t30 * t5.x;
            //Instruction 21397
            //MAD
            t0.x = t0.x * t28 + t30;
            //Instruction 21398
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 21399
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 21400
        //ENDIF
        }
        //Instruction 21401
    //ENDIF
    }
    //Instruction 21402
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 21403
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 21404
    //DIV
    t28 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 21405
    //MAD
    t28 = (-t28) * 0.250000 + t3.y;
    //Instruction 21406
    //MAX
    t28 = max(t28, 0.0);
    //Instruction 21407
    //MUL
    t28 = t28 * _ST_WindGlobal.z;
    //Instruction 21408
    //NE
    tb30 = t28!=0.0;
    //Instruction 21409
    //LOG
    t4.x = log2(t28);
    //Instruction 21410
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 21411
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 21412
    //MOVC
    t28 = (tb30) ? t4.x : t28;
    //Instruction 21413
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 21414
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 21415
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 21416
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 21417
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 21418
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 21419
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 21420
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 21421
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 21422
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 21423
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 21424
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 21425
    //MUL
    t28 = t28 * t30;
    //Instruction 21426
    //MAD
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    //Instruction 21427
    //MOV
    t4.y = t3.y;
    //Instruction 21428
    //DP3
    t18.x = dot(t4.xyz, t4.xyz);
    //Instruction 21429
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 21430
    //MUL
    t4.xyz = t18.xxx * t4.xyz;
    //Instruction 21431
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 21432
    //MOVC
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    //Instruction 21433
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 21434
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 21435
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 21436
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 21437
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 21438
    //MUL
    t27 = t3.y * _ProjectionParams.x;
    //Instruction 21439
    //MUL
    t4.w = t27 * 0.500000;
    //Instruction 21440
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 21441
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 21442
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 21443
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 21444
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 21445
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 21446
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 21447
    //MUL
    t4.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 21448
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t4.xyz;
    //Instruction 21449
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 21450
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 21451
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 21452
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 21453
    //MOV
    t2.zw = _World2Object[2].xx;
    //Instruction 21454
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 21455
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 21456
    //MOV
    t4.zw = _World2Object[2].yy;
    //Instruction 21457
    //MUL
    t4 = t4 * in_NORMAL0.yyyy;
    //Instruction 21458
    //MAD
    t2 = t2 * in_NORMAL0.xxxx + t4;
    //Instruction 21459
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 21460
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 21461
    //MOV
    t4.zw = _World2Object[2].zz;
    //Instruction 21462
    //MAD
    t2 = t4 * in_NORMAL0.zzzz + t2;
    //Instruction 21463
    //DP3
    t27 = dot(t2.xyw, t2.xyw);
    //Instruction 21464
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 21465
    //MUL
    t2 = vec4(t27) * t2;
    //Instruction 21466
    //MUL
    t4.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 21467
    //MAD
    t4.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t4.xyz;
    //Instruction 21468
    //MAD
    t4.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t4.xyz;
    //Instruction 21469
    //DP3
    t27 = dot(t4.xyz, t4.xyz);
    //Instruction 21470
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 21471
    //MUL
    t4.xyz = vec3(t27) * t4.xyz;
    //Instruction 21472
    //MUL
    t10_7.xyz = t2.wxy * t4.xyz;
    //Instruction 21473
    //MAD
    t10_7.xyz = t2.ywx * t4.yzx + (-t10_7.xyz);
    //Instruction 21474
    //MUL
    t5.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 21475
    //MUL
    t16_6 = t2.ywzx * t2;
    //Instruction 21476
    //DP4
    t16_8.x = dot(unity_SHBr, t16_6);
    //Instruction 21477
    //DP4
    t16_8.y = dot(unity_SHBg, t16_6);
    //Instruction 21478
    //DP4
    t16_8.z = dot(unity_SHBb, t16_6);
    //Instruction 21479
    //MUL
    t16_35 = t2.y * t2.y;
    //Instruction 21480
    //MAD
    t16_35 = t2.x * t2.x + (-t16_35);
    //Instruction 21481
    //MAD
    vs_TEXCOORD6.xyz = unity_SHC.xyz * vec3(t16_35) + t16_8.xyz;
    //Instruction 21482
    //MOV
    vs_TEXCOORD0.x = t4.z;
    //Instruction 21483
    //MOV
    vs_TEXCOORD0.y = t5.x;
    //Instruction 21484
    //MOV
    vs_TEXCOORD0.z = t2.x;
    //Instruction 21485
    //MOV
    vs_TEXCOORD0.w = t0.x;
    //Instruction 21486
    //MOV
    vs_TEXCOORD1.x = t4.x;
    //Instruction 21487
    //MOV
    vs_TEXCOORD1.y = t5.y;
    //Instruction 21488
    //MOV
    vs_TEXCOORD1.z = t2.y;
    //Instruction 21489
    //MOV
    vs_TEXCOORD1.w = t0.y;
    //Instruction 21490
    //MOV
    vs_TEXCOORD2.x = t4.y;
    //Instruction 21491
    //MOV
    vs_TEXCOORD2.y = t5.z;
    //Instruction 21492
    //MOV
    vs_TEXCOORD2.z = t2.w;
    //Instruction 21493
    //MOV
    vs_TEXCOORD2.w = t0.z;
    //Instruction 21494
    //MOV
    vs_TEXCOORD3.w = _Color.w;
    //Instruction 21495
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 21496
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 21497
    //MOV
    vs_TEXCOORD5.xyz = t3.xyz;
    //Instruction 21498
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump float t16_6;
mediump vec3 t16_9;
mediump float t16_21;
void main()
{
    //Instruction 21231
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    //Instruction 21232
    //FRC
    t16_6 = fract(t16_0.y);
    //Instruction 21233
    //MOV
    t1.x = t16_0.x;
    //Instruction 21234
    //MAD
    t1.y = t16_6 * 0.062500 + unity_LODFade.y;
    //Instruction 21235
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 21236
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 21237
    //LT
    tb1 = t16_1<0.0;
    //Instruction 21238
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 21239
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    //Instruction 21240
    //MAD
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 21241
    //LT
    tb1 = t10_2.x<0.0;
    //Instruction 21242
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 21243
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 21244
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 21245
    //ADD
    t16_9.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 21246
    //MAD
    t16_9.xyz = vs_TEXCOORD4.zzz * t16_9.xyz + t10_0.xyz;
    //Instruction 21247
    //MAX
    t16_4.x = max(t16_9.z, t16_9.y);
    //Instruction 21248
    //MAX
    t16_4.x = max(t16_9.x, t16_4.x);
    //Instruction 21249
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 21250
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 21251
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_9.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 21252
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD3.xyz;
    //Instruction 21253
    //MUL
    t16_4.xyz = t16_3.xyz * _LightColor0.xyz;
    //Instruction 21254
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 21255
    //MAD
    t10_2.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 21256
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    //Instruction 21257
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    //Instruction 21258
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    //Instruction 21259
    //MOV
    t0.w = 1.0;
    //Instruction 21260
    //DP4
    t16_5.x = dot(unity_SHAr, t0);
    //Instruction 21261
    //DP4
    t16_5.y = dot(unity_SHAg, t0);
    //Instruction 21262
    //DP4
    t16_5.z = dot(unity_SHAb, t0);
    //Instruction 21263
    //DP3
    t16_21 = dot(t0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 21264
    //MAX
    t16_21 = max(t16_21, 0.0);
    //Instruction 21265
    //ADD
    t16_5.xyz = t16_5.xyz + vs_TEXCOORD6.xyz;
    //Instruction 21266
    //MUL
    t16_3.xyz = t16_3.xyz * t16_5.xyz;
    //Instruction 21267
    //MAD
    t16_3.xyz = t16_4.xyz * vec3(t16_21) + t16_3.xyz;
    //Instruction 21268
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 21269
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 21270
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_4;
  lowp vec3 worldTangent_5;
  lowp vec3 worldNormal_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  lowp vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10.xy = tmpvar_3.xy;
  tmpvar_9.w = _Color.w;
  tmpvar_9.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].x;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].y;
  tmpvar_11 = clamp (((
    fract(((tmpvar_12 + tmpvar_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_10.z = tmpvar_11;
  highp vec4 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_1;
  tmpvar_15 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = tmpvar_1.xyz;
  FinalPosition_18 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_20 == 5.0)) {
    highp vec3 vPos_23;
    vPos_23 = tmpvar_19;
    highp float fOffset_24;
    fOffset_24 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_24 = 0.75;
    };
    highp vec4 tmpvar_25;
    tmpvar_25.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_25.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_24);
    highp vec4 tmpvar_26;
    tmpvar_26 = abs(((
      fract((tmpvar_25 + 0.5))
     * 2.0) - 1.0));
    vPos_23 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_26 * tmpvar_26)
       * 
        (3.0 - (2.0 * tmpvar_26))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_15 = tmpvar_2;
    FinalPosition_18 = vPos_23;
  };
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_27;
    vPos_27 = FinalPosition_18;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_28;
      vPos_28 = FinalPosition_18;
      highp float fTime_29;
      highp float fAdherenceScale_30;
      highp vec3 vWindVector_31;
      vWindVector_31 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_29 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_32;
      highp float fOscillation_33;
      fOscillation_33 = 1.0;
      highp float fAmount_34;
      highp float fTarget_35;
      highp vec4 tmpvar_36;
      tmpvar_36.x = (fTime_29 + _glesMultiTexCoord0.w);
      tmpvar_36.y = ((fTime_29 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_36.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_29 + _glesMultiTexCoord0.w));
      tmpvar_36.w = ((fTime_29 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      vOscillations_32 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      highp float tmpvar_38;
      tmpvar_38 = (vOscillations_32.y * vOscillations_32.z);
      fTarget_35 = 1.0;
      fAmount_34 = tmpvar_38;
      if ((tmpvar_38 < 0.0)) {
        fTarget_35 = -1.0;
        fAmount_34 = -(tmpvar_38);
      };
      fOscillation_33 = (((
        mix (mix (tmpvar_38, fTarget_35, fAmount_34), fTarget_35, fAmount_34)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_32.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_33 = (fOscillation_33 * (1.0 + (vOscillations_32.w * _ST_WindBranchWhip.x)));
      vPos_28 = (FinalPosition_18 + ((vWindVector_31 * fOscillation_33) * _ST_WindBranch.y));
      highp vec4 tmpvar_39;
      tmpvar_39.zw = vec2(0.0, 0.0);
      tmpvar_39.x = ((fTime_29 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_39.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_40;
      highp vec4 tmpvar_41;
      tmpvar_41 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      tmpvar_40 = (((
        (tmpvar_41 * tmpvar_41)
       * 
        (3.0 - (2.0 * tmpvar_41))
      ) - 0.5) * 2.0);
      fAdherenceScale_30 = (1.0 - ((tmpvar_40.x * tmpvar_40.y) * (
        (tmpvar_40.x * tmpvar_40.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_30 = (fAdherenceScale_30 + ((vOscillations_32.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_28 = (vPos_28 + ((
        ((vRotatedBranchAnchor_16 - vPos_28) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_30) * _glesMultiTexCoord0.z));
      vPos_27 = vPos_28;
    } else {
      highp vec3 vPos_42;
      vPos_42 = vPos_27;
      highp float fTime_43;
      highp vec3 vWindVector_44;
      vWindVector_44 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_43 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_45;
      highp float fOscillation_46;
      fOscillation_46 = 1.0;
      highp float fAmount_47;
      highp float fTarget_48;
      highp vec4 tmpvar_49;
      tmpvar_49.w = 0.0;
      tmpvar_49.x = (fTime_43 + _glesMultiTexCoord0.w);
      tmpvar_49.y = ((fTime_43 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_49.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_43 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_50;
      tmpvar_50 = abs(((
        fract((tmpvar_49 + 0.5))
       * 2.0) - 1.0));
      vOscillations_45 = (((
        (tmpvar_50 * tmpvar_50)
       * 
        (3.0 - (2.0 * tmpvar_50))
      ) - 0.5) * 2.0);
      highp float tmpvar_51;
      tmpvar_51 = (vOscillations_45.y * vOscillations_45.z);
      fTarget_48 = 1.0;
      fAmount_47 = tmpvar_51;
      if ((tmpvar_51 < 0.0)) {
        fTarget_48 = -1.0;
        fAmount_47 = -(tmpvar_51);
      };
      fOscillation_46 = (((
        mix (mix (tmpvar_51, fTarget_48, fAmount_47), fTarget_48, fAmount_47)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_45.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_42 = (vPos_27 + ((vWindVector_44 * fOscillation_46) * _ST_WindBranch.y));
      vPos_27 = vPos_42;
    };
    FinalPosition_18 = vPos_27;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_52;
    vPos_52 = FinalPosition_18;
    highp float fMoveAmount_53;
    highp float fAdjust_54;
    highp float fLength_55;
    fLength_55 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_56;
    tmpvar_56 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_54 = tmpvar_56;
    if ((tmpvar_56 != 0.0)) {
      fAdjust_54 = pow (tmpvar_56, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_57;
    tmpvar_57.zw = vec2(0.0, 0.0);
    tmpvar_57.x = (tmpvar_12 + _ST_WindGlobal.x);
    tmpvar_57.y = (tmpvar_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_58;
    highp vec4 tmpvar_59;
    tmpvar_59 = abs(((
      fract((tmpvar_57 + 0.5))
     * 2.0) - 1.0));
    tmpvar_58 = (((
      (tmpvar_59 * tmpvar_59)
     * 
      (3.0 - (2.0 * tmpvar_59))
    ) - 0.5) * 2.0);
    fMoveAmount_53 = ((_ST_WindGlobal.y * (tmpvar_58.x + 
      (tmpvar_58.y * tmpvar_58.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_53 = (fMoveAmount_53 * fAdjust_54);
    vPos_52.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * fMoveAmount_53));
    vPos_52 = (normalize(vPos_52) * fLength_55);
    FinalPosition_18 = vPos_52;
  };
  tmpvar_14.xyz = FinalPosition_18;
  highp vec4 hPos_60;
  hPos_60 = (glstate_matrix_mvp * tmpvar_14);
  mediump vec3 screenPos_61;
  highp vec4 o_62;
  highp vec4 tmpvar_63;
  tmpvar_63 = (hPos_60 * 0.5);
  highp vec2 tmpvar_64;
  tmpvar_64.x = tmpvar_63.x;
  tmpvar_64.y = (tmpvar_63.y * _ProjectionParams.x);
  o_62.xy = (tmpvar_64 + tmpvar_63.w);
  o_62.zw = hPos_60.zw;
  highp vec3 tmpvar_65;
  tmpvar_65 = o_62.xyw;
  screenPos_61 = tmpvar_65;
  screenPos_61.xy = (screenPos_61.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7 = tmpvar_9;
  highp vec3 tmpvar_66;
  tmpvar_66 = (_Object2World * tmpvar_14).xyz;
  highp vec4 v_67;
  v_67.x = _World2Object[0].x;
  v_67.y = _World2Object[1].x;
  v_67.z = _World2Object[2].x;
  v_67.w = _World2Object[3].x;
  highp vec4 v_68;
  v_68.x = _World2Object[0].y;
  v_68.y = _World2Object[1].y;
  v_68.z = _World2Object[2].y;
  v_68.w = _World2Object[3].y;
  highp vec4 v_69;
  v_69.x = _World2Object[0].z;
  v_69.y = _World2Object[1].z;
  v_69.z = _World2Object[2].z;
  v_69.w = _World2Object[3].z;
  highp vec3 tmpvar_70;
  tmpvar_70 = normalize(((
    (v_67.xyz * tmpvar_15.x)
   + 
    (v_68.xyz * tmpvar_15.y)
  ) + (v_69.xyz * tmpvar_15.z)));
  worldNormal_6 = tmpvar_70;
  highp mat3 tmpvar_71;
  tmpvar_71[0] = _Object2World[0].xyz;
  tmpvar_71[1] = _Object2World[1].xyz;
  tmpvar_71[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_72;
  tmpvar_72 = normalize((tmpvar_71 * _glesTANGENT.xyz));
  worldTangent_5 = tmpvar_72;
  lowp vec3 tmpvar_73;
  tmpvar_73 = ((worldNormal_6.yzx * worldTangent_5.zxy) - (worldNormal_6.zxy * worldTangent_5.yzx));
  highp vec3 tmpvar_74;
  tmpvar_74 = (tmpvar_73 * _glesTANGENT.w);
  worldBinormal_4 = tmpvar_74;
  highp vec4 tmpvar_75;
  tmpvar_75.x = worldTangent_5.x;
  tmpvar_75.y = worldBinormal_4.x;
  tmpvar_75.z = worldNormal_6.x;
  tmpvar_75.w = tmpvar_66.x;
  highp vec4 tmpvar_76;
  tmpvar_76.x = worldTangent_5.y;
  tmpvar_76.y = worldBinormal_4.y;
  tmpvar_76.z = worldNormal_6.y;
  tmpvar_76.w = tmpvar_66.y;
  highp vec4 tmpvar_77;
  tmpvar_77.x = worldTangent_5.z;
  tmpvar_77.y = worldBinormal_4.z;
  tmpvar_77.z = worldNormal_6.z;
  tmpvar_77.w = tmpvar_66.z;
  lowp vec4 tmpvar_78;
  tmpvar_78.w = 1.0;
  tmpvar_78.xyz = worldNormal_6;
  mediump vec4 normal_79;
  normal_79 = tmpvar_78;
  mediump vec3 x2_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (normal_79.xyzz * normal_79.yzzx);
  x2_80.x = dot (unity_SHBr, tmpvar_81);
  x2_80.y = dot (unity_SHBg, tmpvar_81);
  x2_80.z = dot (unity_SHBb, tmpvar_81);
  tmpvar_8 = (unity_World2Shadow[0] * (_Object2World * tmpvar_14));
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_75;
  xlv_TEXCOORD1 = tmpvar_76;
  xlv_TEXCOORD2 = tmpvar_77;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = screenPos_61;
  xlv_TEXCOORD6 = (x2_80 + (unity_SHC.xyz * (
    (normal_79.x * normal_79.x)
   - 
    (normal_79.y * normal_79.y)
  )));
  xlv_TEXCOORD7 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_13.x = tmpvar_14.x;
  projUV_13.y = ((fract(tmpvar_14.y) * 0.0625) + unity_LODFade.y);
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_12 = tmpvar_16;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_17;
  x_17 = (tmpvar_10 - _Cutoff);
  if ((x_17 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_18;
  tmpvar_18 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_18.x, max (tmpvar_18.y, tmpvar_18.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_18 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_19;
  tmpvar_19 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7).x > 
    (xlv_TEXCOORD7.z / xlv_TEXCOORD7.w)
  )), _LightShadowData.x);
  tmpvar_20 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (xlv_TEXCOORD0.xyz, tmpvar_19);
  worldN_4.x = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = dot (xlv_TEXCOORD1.xyz, tmpvar_19);
  worldN_4.y = tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = dot (xlv_TEXCOORD2.xyz, tmpvar_19);
  worldN_4.z = tmpvar_24;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_20;
  mediump vec3 normalWorld_25;
  normalWorld_25 = worldN_4;
  mediump vec3 tmpvar_26;
  mediump vec3 tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = normalWorld_25;
  mediump vec3 x1_29;
  x1_29.x = dot (unity_SHAr, tmpvar_28);
  x1_29.y = dot (unity_SHAg, tmpvar_28);
  x1_29.z = dot (unity_SHAb, tmpvar_28);
  tmpvar_27 = (xlv_TEXCOORD6 + x1_29);
  tmpvar_26 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_26;
  lowp vec4 c_30;
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_32 = tmpvar_33;
  c_31.xyz = ((tmpvar_9 * tmpvar_26) * diff_32);
  c_31.w = tmpvar_10;
  c_30.w = c_31.w;
  c_30.xyz = (c_31.xyz + (tmpvar_9 * tmpvar_27));
  c_5.xyz = c_30.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_4;
  lowp vec3 worldTangent_5;
  lowp vec3 worldNormal_6;
  mediump vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  lowp vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10.xy = tmpvar_3.xy;
  tmpvar_9.w = _Color.w;
  tmpvar_9.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].x;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].y;
  tmpvar_11 = clamp (((
    fract(((tmpvar_12 + tmpvar_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_10.z = tmpvar_11;
  highp vec4 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_1;
  tmpvar_15 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = tmpvar_1.xyz;
  FinalPosition_18 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_20 == 5.0)) {
    highp vec3 vPos_23;
    vPos_23 = tmpvar_19;
    highp float fOffset_24;
    fOffset_24 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_24 = 0.75;
    };
    highp vec4 tmpvar_25;
    tmpvar_25.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_25.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_24);
    highp vec4 tmpvar_26;
    tmpvar_26 = abs(((
      fract((tmpvar_25 + 0.5))
     * 2.0) - 1.0));
    vPos_23 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_26 * tmpvar_26)
       * 
        (3.0 - (2.0 * tmpvar_26))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_15 = tmpvar_2;
    FinalPosition_18 = vPos_23;
  };
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_27;
    vPos_27 = FinalPosition_18;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_28;
      vPos_28 = FinalPosition_18;
      highp float fTime_29;
      highp float fAdherenceScale_30;
      highp vec3 vWindVector_31;
      vWindVector_31 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_29 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_32;
      highp float fOscillation_33;
      fOscillation_33 = 1.0;
      highp float fAmount_34;
      highp float fTarget_35;
      highp vec4 tmpvar_36;
      tmpvar_36.x = (fTime_29 + _glesMultiTexCoord0.w);
      tmpvar_36.y = ((fTime_29 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_36.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_29 + _glesMultiTexCoord0.w));
      tmpvar_36.w = ((fTime_29 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      vOscillations_32 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      highp float tmpvar_38;
      tmpvar_38 = (vOscillations_32.y * vOscillations_32.z);
      fTarget_35 = 1.0;
      fAmount_34 = tmpvar_38;
      if ((tmpvar_38 < 0.0)) {
        fTarget_35 = -1.0;
        fAmount_34 = -(tmpvar_38);
      };
      fOscillation_33 = (((
        mix (mix (tmpvar_38, fTarget_35, fAmount_34), fTarget_35, fAmount_34)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_32.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_33 = (fOscillation_33 * (1.0 + (vOscillations_32.w * _ST_WindBranchWhip.x)));
      vPos_28 = (FinalPosition_18 + ((vWindVector_31 * fOscillation_33) * _ST_WindBranch.y));
      highp vec4 tmpvar_39;
      tmpvar_39.zw = vec2(0.0, 0.0);
      tmpvar_39.x = ((fTime_29 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_39.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_40;
      highp vec4 tmpvar_41;
      tmpvar_41 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      tmpvar_40 = (((
        (tmpvar_41 * tmpvar_41)
       * 
        (3.0 - (2.0 * tmpvar_41))
      ) - 0.5) * 2.0);
      fAdherenceScale_30 = (1.0 - ((tmpvar_40.x * tmpvar_40.y) * (
        (tmpvar_40.x * tmpvar_40.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_30 = (fAdherenceScale_30 + ((vOscillations_32.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_28 = (vPos_28 + ((
        ((vRotatedBranchAnchor_16 - vPos_28) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_30) * _glesMultiTexCoord0.z));
      vPos_27 = vPos_28;
    } else {
      highp vec3 vPos_42;
      vPos_42 = vPos_27;
      highp float fTime_43;
      highp vec3 vWindVector_44;
      vWindVector_44 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_43 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_45;
      highp float fOscillation_46;
      fOscillation_46 = 1.0;
      highp float fAmount_47;
      highp float fTarget_48;
      highp vec4 tmpvar_49;
      tmpvar_49.w = 0.0;
      tmpvar_49.x = (fTime_43 + _glesMultiTexCoord0.w);
      tmpvar_49.y = ((fTime_43 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_49.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_43 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_50;
      tmpvar_50 = abs(((
        fract((tmpvar_49 + 0.5))
       * 2.0) - 1.0));
      vOscillations_45 = (((
        (tmpvar_50 * tmpvar_50)
       * 
        (3.0 - (2.0 * tmpvar_50))
      ) - 0.5) * 2.0);
      highp float tmpvar_51;
      tmpvar_51 = (vOscillations_45.y * vOscillations_45.z);
      fTarget_48 = 1.0;
      fAmount_47 = tmpvar_51;
      if ((tmpvar_51 < 0.0)) {
        fTarget_48 = -1.0;
        fAmount_47 = -(tmpvar_51);
      };
      fOscillation_46 = (((
        mix (mix (tmpvar_51, fTarget_48, fAmount_47), fTarget_48, fAmount_47)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_45.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_42 = (vPos_27 + ((vWindVector_44 * fOscillation_46) * _ST_WindBranch.y));
      vPos_27 = vPos_42;
    };
    FinalPosition_18 = vPos_27;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_52;
    vPos_52 = FinalPosition_18;
    highp float fMoveAmount_53;
    highp float fAdjust_54;
    highp float fLength_55;
    fLength_55 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_56;
    tmpvar_56 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_54 = tmpvar_56;
    if ((tmpvar_56 != 0.0)) {
      fAdjust_54 = pow (tmpvar_56, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_57;
    tmpvar_57.zw = vec2(0.0, 0.0);
    tmpvar_57.x = (tmpvar_12 + _ST_WindGlobal.x);
    tmpvar_57.y = (tmpvar_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_58;
    highp vec4 tmpvar_59;
    tmpvar_59 = abs(((
      fract((tmpvar_57 + 0.5))
     * 2.0) - 1.0));
    tmpvar_58 = (((
      (tmpvar_59 * tmpvar_59)
     * 
      (3.0 - (2.0 * tmpvar_59))
    ) - 0.5) * 2.0);
    fMoveAmount_53 = ((_ST_WindGlobal.y * (tmpvar_58.x + 
      (tmpvar_58.y * tmpvar_58.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_53 = (fMoveAmount_53 * fAdjust_54);
    vPos_52.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * fMoveAmount_53));
    vPos_52 = (normalize(vPos_52) * fLength_55);
    FinalPosition_18 = vPos_52;
  };
  tmpvar_14.xyz = FinalPosition_18;
  highp vec4 hPos_60;
  hPos_60 = (glstate_matrix_mvp * tmpvar_14);
  mediump vec3 screenPos_61;
  highp vec4 o_62;
  highp vec4 tmpvar_63;
  tmpvar_63 = (hPos_60 * 0.5);
  highp vec2 tmpvar_64;
  tmpvar_64.x = tmpvar_63.x;
  tmpvar_64.y = (tmpvar_63.y * _ProjectionParams.x);
  o_62.xy = (tmpvar_64 + tmpvar_63.w);
  o_62.zw = hPos_60.zw;
  highp vec3 tmpvar_65;
  tmpvar_65 = o_62.xyw;
  screenPos_61 = tmpvar_65;
  screenPos_61.xy = (screenPos_61.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7 = tmpvar_9;
  highp vec3 tmpvar_66;
  tmpvar_66 = (_Object2World * tmpvar_14).xyz;
  highp vec4 v_67;
  v_67.x = _World2Object[0].x;
  v_67.y = _World2Object[1].x;
  v_67.z = _World2Object[2].x;
  v_67.w = _World2Object[3].x;
  highp vec4 v_68;
  v_68.x = _World2Object[0].y;
  v_68.y = _World2Object[1].y;
  v_68.z = _World2Object[2].y;
  v_68.w = _World2Object[3].y;
  highp vec4 v_69;
  v_69.x = _World2Object[0].z;
  v_69.y = _World2Object[1].z;
  v_69.z = _World2Object[2].z;
  v_69.w = _World2Object[3].z;
  highp vec3 tmpvar_70;
  tmpvar_70 = normalize(((
    (v_67.xyz * tmpvar_15.x)
   + 
    (v_68.xyz * tmpvar_15.y)
  ) + (v_69.xyz * tmpvar_15.z)));
  worldNormal_6 = tmpvar_70;
  highp mat3 tmpvar_71;
  tmpvar_71[0] = _Object2World[0].xyz;
  tmpvar_71[1] = _Object2World[1].xyz;
  tmpvar_71[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_72;
  tmpvar_72 = normalize((tmpvar_71 * _glesTANGENT.xyz));
  worldTangent_5 = tmpvar_72;
  lowp vec3 tmpvar_73;
  tmpvar_73 = ((worldNormal_6.yzx * worldTangent_5.zxy) - (worldNormal_6.zxy * worldTangent_5.yzx));
  highp vec3 tmpvar_74;
  tmpvar_74 = (tmpvar_73 * _glesTANGENT.w);
  worldBinormal_4 = tmpvar_74;
  highp vec4 tmpvar_75;
  tmpvar_75.x = worldTangent_5.x;
  tmpvar_75.y = worldBinormal_4.x;
  tmpvar_75.z = worldNormal_6.x;
  tmpvar_75.w = tmpvar_66.x;
  highp vec4 tmpvar_76;
  tmpvar_76.x = worldTangent_5.y;
  tmpvar_76.y = worldBinormal_4.y;
  tmpvar_76.z = worldNormal_6.y;
  tmpvar_76.w = tmpvar_66.y;
  highp vec4 tmpvar_77;
  tmpvar_77.x = worldTangent_5.z;
  tmpvar_77.y = worldBinormal_4.z;
  tmpvar_77.z = worldNormal_6.z;
  tmpvar_77.w = tmpvar_66.z;
  lowp vec4 tmpvar_78;
  tmpvar_78.w = 1.0;
  tmpvar_78.xyz = worldNormal_6;
  mediump vec4 normal_79;
  normal_79 = tmpvar_78;
  mediump vec3 x2_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (normal_79.xyzz * normal_79.yzzx);
  x2_80.x = dot (unity_SHBr, tmpvar_81);
  x2_80.y = dot (unity_SHBg, tmpvar_81);
  x2_80.z = dot (unity_SHBb, tmpvar_81);
  highp vec3 lightColor0_82;
  lightColor0_82 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_83;
  lightColor1_83 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_84;
  lightColor2_84 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_85;
  lightColor3_85 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_86;
  lightAttenSq_86 = unity_4LightAtten0;
  highp vec3 normal_87;
  normal_87 = worldNormal_6;
  highp vec3 col_88;
  highp vec4 ndotl_89;
  highp vec4 lengthSq_90;
  highp vec4 tmpvar_91;
  tmpvar_91 = (unity_4LightPosX0 - tmpvar_66.x);
  highp vec4 tmpvar_92;
  tmpvar_92 = (unity_4LightPosY0 - tmpvar_66.y);
  highp vec4 tmpvar_93;
  tmpvar_93 = (unity_4LightPosZ0 - tmpvar_66.z);
  lengthSq_90 = (tmpvar_91 * tmpvar_91);
  lengthSq_90 = (lengthSq_90 + (tmpvar_92 * tmpvar_92));
  lengthSq_90 = (lengthSq_90 + (tmpvar_93 * tmpvar_93));
  ndotl_89 = (tmpvar_91 * normal_87.x);
  ndotl_89 = (ndotl_89 + (tmpvar_92 * normal_87.y));
  ndotl_89 = (ndotl_89 + (tmpvar_93 * normal_87.z));
  highp vec4 tmpvar_94;
  tmpvar_94 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_89 * inversesqrt(lengthSq_90)));
  ndotl_89 = tmpvar_94;
  highp vec4 tmpvar_95;
  tmpvar_95 = (tmpvar_94 * (1.0/((1.0 + 
    (lengthSq_90 * lightAttenSq_86)
  ))));
  col_88 = (lightColor0_82 * tmpvar_95.x);
  col_88 = (col_88 + (lightColor1_83 * tmpvar_95.y));
  col_88 = (col_88 + (lightColor2_84 * tmpvar_95.z));
  col_88 = (col_88 + (lightColor3_85 * tmpvar_95.w));
  tmpvar_8 = ((x2_80 + (unity_SHC.xyz * 
    ((normal_79.x * normal_79.x) - (normal_79.y * normal_79.y))
  )) + col_88);
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_75;
  xlv_TEXCOORD1 = tmpvar_76;
  xlv_TEXCOORD2 = tmpvar_77;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = screenPos_61;
  xlv_TEXCOORD6 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_16;
  x_16 = (tmpvar_9 - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_17.x, max (tmpvar_17.y, tmpvar_17.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_17 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_18;
  tmpvar_18 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD0.xyz, tmpvar_18);
  worldN_3.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD1.xyz, tmpvar_18);
  worldN_3.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (xlv_TEXCOORD2.xyz, tmpvar_18);
  worldN_3.z = tmpvar_21;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_22;
  normalWorld_22 = worldN_3;
  mediump vec3 tmpvar_23;
  mediump vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = normalWorld_22;
  mediump vec3 x1_25;
  x1_25.x = dot (unity_SHAr, tmpvar_24);
  x1_25.y = dot (unity_SHAg, tmpvar_24);
  x1_25.z = dot (unity_SHAb, tmpvar_24);
  tmpvar_23 = (xlv_TEXCOORD6 + x1_25);
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_28 = tmpvar_29;
  c_27.xyz = ((tmpvar_8 * tmpvar_1) * diff_28);
  c_27.w = tmpvar_9;
  c_26.w = c_27.w;
  c_26.xyz = (c_27.xyz + (tmpvar_8 * tmpvar_23));
  c_4.xyz = c_26.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
highp vec4 t6;
mediump vec4 t16_6;
highp vec4 t7;
lowp vec3 t10_7;
mediump vec3 t16_8;
highp vec4 t9;
highp vec4 t10;
highp vec2 t11;
bool tb11;
highp float t14;
highp vec2 t22;
highp vec2 t26;
highp vec2 t28;
highp float t33;
highp float t34;
bool tb34;
highp float t36;
bool tb36;
highp float t37;
highp float t38;
mediump float t16_41;
void main()
{
    //Instruction 21539
    //MUL
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 21540
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 21541
    //ADD
    t11.x = t0.x + _Object2World[3].z;
    //Instruction 21542
    //ADD
    t22.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 21543
    //ADD
    t11.y = t22.x + in_NORMAL0.x;
    //Instruction 21544
    //FRC
    t11.xy = fract(t11.xy);
    //Instruction 21545
    //MAD
    t11.x = t11.y * 0.500000 + t11.x;
    //Instruction 21546
    //ADD
    t11.x = t11.x + -0.300000;
    //Instruction 21547
    //MUL
    t1.z = t11.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 21548
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 21549
    //LT
    tb11 = 0.0<t16_2;
    //Instruction 21550
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 21551
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 21552
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 21553
    //DP3
    t22.x = dot(t3.xyz, t3.xyz);
    //Instruction 21554
    //RSQ
    t22.x = inversesqrt(t22.x);
    //Instruction 21555
    //MUL
    t22.xy = t22.xx * t3.xz;
    //Instruction 21556
    //AND
    t22.xy = mix(vec2(0.0, 0.0), t22.xy, bvec2(tb11));
    //Instruction 21557
    //EQ
    tb34 = t16_2==5.000000;
    //Instruction 21558
    //LT
    tb3 = in_TEXCOORD0.x<0.500000;
    //Instruction 21559
    //AND
    t3.x = tb3 ? 0.750000 : float(0.0);
    //Instruction 21560
    //ADD
    t14 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 21561
    //MAD
    t3.x = t14 * _ST_WindFrondRipple.z + t3.x;
    //Instruction 21562
    //ADD
    t3.x = t3.x + 0.500000;
    //Instruction 21563
    //FRC
    t3.x = fract(t3.x);
    //Instruction 21564
    //MAD
    t3.x = t3.x * 2.000000 + -1.0;
    //Instruction 21565
    //MUL
    t14 = abs(t3.x) * abs(t3.x);
    //Instruction 21566
    //MAD
    t3.x = -abs(t3.x) * 2.000000 + 3.000000;
    //Instruction 21567
    //MAD
    t3.x = t14 * t3.x + -0.500000;
    //Instruction 21568
    //MUL
    t3.x = t3.x * in_TEXCOORD2.y;
    //Instruction 21569
    //DP2
    t3.x = dot(_ST_WindFrondRipple.yy, t3.xx);
    //Instruction 21570
    //MAD
    t3.xyz = t3.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    //Instruction 21571
    //MOVC
    t3.xyz = (bool(tb34)) ? t3.xyz : in_POSITION0.xyz;
    //Instruction 21572
    //GE
    tb36 = t16_2>=3.000000;
    //Instruction 21573
    //IF
    if(tb36){
        //Instruction 21574
        //IF
        if(tb34){
            //Instruction 21575
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 21576
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 21577
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 21578
            //DP3
            t34 = dot(t4.xyz, t4.xyz);
            //Instruction 21579
            //RSQ
            t34 = inversesqrt(t34);
            //Instruction 21580
            //MUL
            t4.xyz = vec3(t34) * t4.xyz;
            //Instruction 21581
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 21582
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 21583
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 21584
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 21585
            //ADD
            t34 = t0.x + _ST_WindBranch.x;
            //Instruction 21586
            //ADD
            t2.x = t34 + in_TEXCOORD0.w;
            //Instruction 21587
            //MAD
            t2.y = t34 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 21588
            //MUL
            t36 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 21589
            //MUL
            t2.z = t36 * 0.500000;
            //Instruction 21590
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 21591
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 21592
            //FRC
            t2 = fract(t2);
            //Instruction 21593
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 21594
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 21595
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 21596
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 21597
            //ADD
            t2 = t2 + t2;
            //Instruction 21598
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 21599
            //LT
            tb36 = t6.w<0.0;
            //Instruction 21600
            //MOV
            t6.y = (-t6.w);
            //Instruction 21601
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 21602
            //MOVC
            t6.xy = (bool(tb36)) ? t6.xy : t6.zw;
            //Instruction 21603
            //MAD
            t36 = (-t2.y) * t2.z + t6.x;
            //Instruction 21604
            //MAD
            t36 = t6.y * t36 + t6.w;
            //Instruction 21605
            //ADD
            t37 = (-t36) + t6.x;
            //Instruction 21606
            //MAD
            t36 = t6.y * t37 + t36;
            //Instruction 21607
            //MUL
            t36 = t36 * _ST_WindBranchTwitch.x;
            //Instruction 21608
            //ADD
            t37 = (-_ST_WindVector.w) + 1.0;
            //Instruction 21609
            //ADD
            t38 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 21610
            //MUL
            t38 = t2.x * t38;
            //Instruction 21611
            //MAD
            t36 = t36 * t37 + t38;
            //Instruction 21612
            //MAD
            t37 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 21613
            //MUL
            t36 = t36 * t37;
            //Instruction 21614
            //MUL
            t5.xyz = vec3(t36) * t5.xyz;
            //Instruction 21615
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 21616
            //MAD
            t6.x = t34 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 21617
            //MUL
            t34 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 21618
            //MAD
            t6.y = t34 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 21619
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 21620
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 21621
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 21622
            //MUL
            t28.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 21623
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 21624
            //MAD
            t6.xy = t28.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 21625
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 21626
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 21627
            //MUL
            t34 = t6.x * t6.y;
            //Instruction 21628
            //MAD
            t34 = (-t34) * _ST_WindTurbulences.x + 1.0;
            //Instruction 21629
            //MUL
            t36 = t2.w * _ST_WindVector.w;
            //Instruction 21630
            //MAD
            t34 = t36 * _ST_WindBranchWhip.x + t34;
            //Instruction 21631
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 21632
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 21633
            //MUL
            t4.xyz = vec3(t34) * t4.xyz;
            //Instruction 21634
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 21635
        //ELSE
        } else {
            //Instruction 21636
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 21637
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 21638
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 21639
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 21640
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 21641
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 21642
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 21643
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 21644
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 21645
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 21646
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 21647
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 21648
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 21649
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 21650
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 21651
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 21652
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 21653
            //LT
            tb0 = t2.w<0.0;
            //Instruction 21654
            //MOV
            t2.y = (-t2.w);
            //Instruction 21655
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 21656
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 21657
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 21658
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 21659
            //ADD
            t34 = (-t0.x) + t6.x;
            //Instruction 21660
            //MAD
            t0.x = t6.y * t34 + t0.x;
            //Instruction 21661
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 21662
            //ADD
            t34 = (-_ST_WindVector.w) + 1.0;
            //Instruction 21663
            //ADD
            t36 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 21664
            //MUL
            t36 = t36 * t5.x;
            //Instruction 21665
            //MAD
            t0.x = t0.x * t34 + t36;
            //Instruction 21666
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 21667
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 21668
        //ENDIF
        }
        //Instruction 21669
    //ENDIF
    }
    //Instruction 21670
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 21671
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 21672
    //DIV
    t34 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 21673
    //MAD
    t34 = (-t34) * 0.250000 + t3.y;
    //Instruction 21674
    //MAX
    t34 = max(t34, 0.0);
    //Instruction 21675
    //MUL
    t34 = t34 * _ST_WindGlobal.z;
    //Instruction 21676
    //NE
    tb36 = t34!=0.0;
    //Instruction 21677
    //LOG
    t4.x = log2(t34);
    //Instruction 21678
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 21679
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 21680
    //MOVC
    t34 = (tb36) ? t4.x : t34;
    //Instruction 21681
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 21682
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 21683
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 21684
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 21685
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 21686
    //MUL
    t26.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 21687
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 21688
    //MAD
    t4.xy = t26.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 21689
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 21690
    //MAD
    t36 = t4.y * t4.y + t4.x;
    //Instruction 21691
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 21692
    //MAD
    t36 = _ST_WindGlobal.y * t36 + t4.x;
    //Instruction 21693
    //MUL
    t34 = t34 * t36;
    //Instruction 21694
    //MAD
    t4.xz = t22.xy * vec2(t34) + t3.xz;
    //Instruction 21695
    //MOV
    t4.y = t3.y;
    //Instruction 21696
    //DP3
    t22.x = dot(t4.xyz, t4.xyz);
    //Instruction 21697
    //RSQ
    t22.x = inversesqrt(t22.x);
    //Instruction 21698
    //MUL
    t4.xyz = t22.xxx * t4.xyz;
    //Instruction 21699
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 21700
    //MOVC
    t0.xyz = (bool(tb11)) ? t0.xzw : t3.xyz;
    //Instruction 21701
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 21702
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 21703
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 21704
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 21705
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 21706
    //MUL
    t33 = t3.y * _ProjectionParams.x;
    //Instruction 21707
    //MUL
    t4.w = t33 * 0.500000;
    //Instruction 21708
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 21709
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 21710
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 21711
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 21712
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 21713
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 21714
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 21715
    //MUL
    t4.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 21716
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t4.xyz;
    //Instruction 21717
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 21718
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 21719
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 21720
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 21721
    //MOV
    t2.zw = _World2Object[2].xx;
    //Instruction 21722
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 21723
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 21724
    //MOV
    t4.zw = _World2Object[2].yy;
    //Instruction 21725
    //MUL
    t4 = t4 * in_NORMAL0.yyyy;
    //Instruction 21726
    //MAD
    t2 = t2 * in_NORMAL0.xxxx + t4;
    //Instruction 21727
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 21728
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 21729
    //MOV
    t4.zw = _World2Object[2].zz;
    //Instruction 21730
    //MAD
    t2 = t4 * in_NORMAL0.zzzz + t2;
    //Instruction 21731
    //DP3
    t33 = dot(t2.xyw, t2.xyw);
    //Instruction 21732
    //RSQ
    t33 = inversesqrt(t33);
    //Instruction 21733
    //MUL
    t2 = vec4(t33) * t2;
    //Instruction 21734
    //MUL
    t4.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 21735
    //MAD
    t4.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t4.xyz;
    //Instruction 21736
    //MAD
    t4.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t4.xyz;
    //Instruction 21737
    //DP3
    t33 = dot(t4.xyz, t4.xyz);
    //Instruction 21738
    //RSQ
    t33 = inversesqrt(t33);
    //Instruction 21739
    //MUL
    t4.xyz = vec3(t33) * t4.xyz;
    //Instruction 21740
    //MUL
    t10_7.xyz = t2.wxy * t4.xyz;
    //Instruction 21741
    //MAD
    t10_7.xyz = t2.ywx * t4.yzx + (-t10_7.xyz);
    //Instruction 21742
    //MUL
    t5.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 21743
    //MUL
    t16_6 = t2.ywzx * t2;
    //Instruction 21744
    //DP4
    t16_8.x = dot(unity_SHBr, t16_6);
    //Instruction 21745
    //DP4
    t16_8.y = dot(unity_SHBg, t16_6);
    //Instruction 21746
    //DP4
    t16_8.z = dot(unity_SHBb, t16_6);
    //Instruction 21747
    //MUL
    t16_41 = t2.y * t2.y;
    //Instruction 21748
    //MAD
    t16_41 = t2.x * t2.x + (-t16_41);
    //Instruction 21749
    //MAD
    t16_8.xyz = unity_SHC.xyz * vec3(t16_41) + t16_8.xyz;
    //Instruction 21750
    //ADD
    t6 = (-t0.xxxx) + unity_4LightPosX0;
    //Instruction 21751
    //ADD
    t7 = (-t0.yyyy) + unity_4LightPosY0;
    //Instruction 21752
    //ADD
    t9 = (-t0.zzzz) + unity_4LightPosZ0;
    //Instruction 21753
    //MUL
    t10 = t7 * t7;
    //Instruction 21754
    //MAD
    t10 = t6 * t6 + t10;
    //Instruction 21755
    //MAD
    t10 = t9 * t9 + t10;
    //Instruction 21756
    //MUL
    t7 = t2.yyyy * t7;
    //Instruction 21757
    //MAD
    t6 = t6 * t2.xxxx + t7;
    //Instruction 21758
    //MAD
    t6 = t9 * t2.wwww + t6;
    //Instruction 21759
    //RSQ
    t7 = inversesqrt(t10);
    //Instruction 21760
    //MUL
    t6 = t6 * t7;
    //Instruction 21761
    //MAX
    t6 = max(t6, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 21762
    //MAD
    t7 = t10 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 21763
    //DIV
    t7 = vec4(1.0, 1.0, 1.0, 1.0) / t7;
    //Instruction 21764
    //MUL
    t6 = t6 * t7;
    //Instruction 21765
    //MUL
    t9.xyz = t6.yyy * unity_LightColor[1].xyz;
    //Instruction 21766
    //MAD
    t9.xyz = unity_LightColor[0].xyz * t6.xxx + t9.xyz;
    //Instruction 21767
    //MAD
    t9.xyz = unity_LightColor[2].xyz * t6.zzz + t9.xyz;
    //Instruction 21768
    //MAD
    t9.xyz = unity_LightColor[3].xyz * t6.www + t9.xyz;
    //Instruction 21769
    //ADD
    t9.xyz = t16_8.xyz + t9.xyz;
    //Instruction 21770
    //MOV
    vs_TEXCOORD0.x = t4.z;
    //Instruction 21771
    //MOV
    vs_TEXCOORD0.y = t5.x;
    //Instruction 21772
    //MOV
    vs_TEXCOORD0.z = t2.x;
    //Instruction 21773
    //MOV
    vs_TEXCOORD0.w = t0.x;
    //Instruction 21774
    //MOV
    vs_TEXCOORD1.x = t4.x;
    //Instruction 21775
    //MOV
    vs_TEXCOORD1.y = t5.y;
    //Instruction 21776
    //MOV
    vs_TEXCOORD1.z = t2.y;
    //Instruction 21777
    //MOV
    vs_TEXCOORD1.w = t0.y;
    //Instruction 21778
    //MOV
    vs_TEXCOORD2.x = t4.y;
    //Instruction 21779
    //MOV
    vs_TEXCOORD2.y = t5.z;
    //Instruction 21780
    //MOV
    vs_TEXCOORD2.z = t2.w;
    //Instruction 21781
    //MOV
    vs_TEXCOORD2.w = t0.z;
    //Instruction 21782
    //MOV
    vs_TEXCOORD3.w = _Color.w;
    //Instruction 21783
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 21784
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 21785
    //MOV
    vs_TEXCOORD5.xyz = t3.xyz;
    //Instruction 21786
    //MOV
    vs_TEXCOORD6.xyz = t9.xyz;
    //Instruction 21787
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump float t16_6;
mediump vec3 t16_9;
mediump float t16_21;
void main()
{
    //Instruction 21499
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    //Instruction 21500
    //FRC
    t16_6 = fract(t16_0.y);
    //Instruction 21501
    //MOV
    t1.x = t16_0.x;
    //Instruction 21502
    //MAD
    t1.y = t16_6 * 0.062500 + unity_LODFade.y;
    //Instruction 21503
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 21504
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 21505
    //LT
    tb1 = t16_1<0.0;
    //Instruction 21506
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 21507
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    //Instruction 21508
    //MAD
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 21509
    //LT
    tb1 = t10_2.x<0.0;
    //Instruction 21510
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 21511
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 21512
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 21513
    //ADD
    t16_9.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 21514
    //MAD
    t16_9.xyz = vs_TEXCOORD4.zzz * t16_9.xyz + t10_0.xyz;
    //Instruction 21515
    //MAX
    t16_4.x = max(t16_9.z, t16_9.y);
    //Instruction 21516
    //MAX
    t16_4.x = max(t16_9.x, t16_4.x);
    //Instruction 21517
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 21518
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 21519
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_9.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 21520
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD3.xyz;
    //Instruction 21521
    //MUL
    t16_4.xyz = t16_3.xyz * _LightColor0.xyz;
    //Instruction 21522
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 21523
    //MAD
    t10_2.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 21524
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    //Instruction 21525
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    //Instruction 21526
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    //Instruction 21527
    //MOV
    t0.w = 1.0;
    //Instruction 21528
    //DP4
    t16_5.x = dot(unity_SHAr, t0);
    //Instruction 21529
    //DP4
    t16_5.y = dot(unity_SHAg, t0);
    //Instruction 21530
    //DP4
    t16_5.z = dot(unity_SHAb, t0);
    //Instruction 21531
    //DP3
    t16_21 = dot(t0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 21532
    //MAX
    t16_21 = max(t16_21, 0.0);
    //Instruction 21533
    //ADD
    t16_5.xyz = t16_5.xyz + vs_TEXCOORD6.xyz;
    //Instruction 21534
    //MUL
    t16_3.xyz = t16_3.xyz * t16_5.xyz;
    //Instruction 21535
    //MAD
    t16_3.xyz = t16_4.xyz * vec3(t16_21) + t16_3.xyz;
    //Instruction 21536
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 21537
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 21538
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_4;
  lowp vec3 worldTangent_5;
  lowp vec3 worldNormal_6;
  mediump vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec4 tmpvar_9;
  lowp vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  tmpvar_11.xy = tmpvar_3.xy;
  tmpvar_10.w = _Color.w;
  tmpvar_10.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].x;
  highp float tmpvar_14;
  tmpvar_14 = _Object2World[3].y;
  tmpvar_12 = clamp (((
    fract(((tmpvar_13 + tmpvar_14) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_11.z = tmpvar_12;
  highp vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_15 = tmpvar_1;
  tmpvar_16 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = tmpvar_1.xyz;
  FinalPosition_19 = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = (_WindQuality * _WindEnabled);
  if ((tmpvar_21 > 0.0)) {
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_22 * _ST_WindVector.xyz));
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_23 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_21 == 5.0)) {
    highp vec3 vPos_24;
    vPos_24 = tmpvar_20;
    highp float fOffset_25;
    fOffset_25 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_25 = 0.75;
    };
    highp vec4 tmpvar_26;
    tmpvar_26.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_26.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_25);
    highp vec4 tmpvar_27;
    tmpvar_27 = abs(((
      fract((tmpvar_26 + 0.5))
     * 2.0) - 1.0));
    vPos_24 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_16 = tmpvar_2;
    FinalPosition_19 = vPos_24;
  };
  if ((tmpvar_21 >= 3.0)) {
    highp vec3 vPos_28;
    vPos_28 = FinalPosition_19;
    if ((tmpvar_21 == 5.0)) {
      highp vec3 vPos_29;
      vPos_29 = FinalPosition_19;
      highp float fTime_30;
      highp float fAdherenceScale_31;
      highp vec3 vWindVector_32;
      vWindVector_32 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_30 = (_ST_WindBranch.x + (tmpvar_13 + tmpvar_14));
      highp vec4 vOscillations_33;
      highp float fOscillation_34;
      fOscillation_34 = 1.0;
      highp float fAmount_35;
      highp float fTarget_36;
      highp vec4 tmpvar_37;
      tmpvar_37.x = (fTime_30 + _glesMultiTexCoord0.w);
      tmpvar_37.y = ((fTime_30 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_37.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_30 + _glesMultiTexCoord0.w));
      tmpvar_37.w = ((fTime_30 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      vOscillations_33 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      highp float tmpvar_39;
      tmpvar_39 = (vOscillations_33.y * vOscillations_33.z);
      fTarget_36 = 1.0;
      fAmount_35 = tmpvar_39;
      if ((tmpvar_39 < 0.0)) {
        fTarget_36 = -1.0;
        fAmount_35 = -(tmpvar_39);
      };
      fOscillation_34 = (((
        mix (mix (tmpvar_39, fTarget_36, fAmount_35), fTarget_36, fAmount_35)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_33.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_34 = (fOscillation_34 * (1.0 + (vOscillations_33.w * _ST_WindBranchWhip.x)));
      vPos_29 = (FinalPosition_19 + ((vWindVector_32 * fOscillation_34) * _ST_WindBranch.y));
      highp vec4 tmpvar_40;
      tmpvar_40.zw = vec2(0.0, 0.0);
      tmpvar_40.x = ((fTime_30 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_40.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_41;
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_40 + 0.5))
       * 2.0) - 1.0));
      tmpvar_41 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      fAdherenceScale_31 = (1.0 - ((tmpvar_41.x * tmpvar_41.y) * (
        (tmpvar_41.x * tmpvar_41.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_31 = (fAdherenceScale_31 + ((vOscillations_33.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_29 = (vPos_29 + ((
        ((vRotatedBranchAnchor_17 - vPos_29) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_31) * _glesMultiTexCoord0.z));
      vPos_28 = vPos_29;
    } else {
      highp vec3 vPos_43;
      vPos_43 = vPos_28;
      highp float fTime_44;
      highp vec3 vWindVector_45;
      vWindVector_45 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_44 = (_ST_WindBranch.x + (tmpvar_13 + tmpvar_14));
      highp vec4 vOscillations_46;
      highp float fOscillation_47;
      fOscillation_47 = 1.0;
      highp float fAmount_48;
      highp float fTarget_49;
      highp vec4 tmpvar_50;
      tmpvar_50.w = 0.0;
      tmpvar_50.x = (fTime_44 + _glesMultiTexCoord0.w);
      tmpvar_50.y = ((fTime_44 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_50.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_44 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_51;
      tmpvar_51 = abs(((
        fract((tmpvar_50 + 0.5))
       * 2.0) - 1.0));
      vOscillations_46 = (((
        (tmpvar_51 * tmpvar_51)
       * 
        (3.0 - (2.0 * tmpvar_51))
      ) - 0.5) * 2.0);
      highp float tmpvar_52;
      tmpvar_52 = (vOscillations_46.y * vOscillations_46.z);
      fTarget_49 = 1.0;
      fAmount_48 = tmpvar_52;
      if ((tmpvar_52 < 0.0)) {
        fTarget_49 = -1.0;
        fAmount_48 = -(tmpvar_52);
      };
      fOscillation_47 = (((
        mix (mix (tmpvar_52, fTarget_49, fAmount_48), fTarget_49, fAmount_48)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_46.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_43 = (vPos_28 + ((vWindVector_45 * fOscillation_47) * _ST_WindBranch.y));
      vPos_28 = vPos_43;
    };
    FinalPosition_19 = vPos_28;
  };
  if ((tmpvar_21 > 0.0)) {
    highp vec3 vPos_53;
    vPos_53 = FinalPosition_19;
    highp float fMoveAmount_54;
    highp float fAdjust_55;
    highp float fLength_56;
    fLength_56 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_57;
    tmpvar_57 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_55 = tmpvar_57;
    if ((tmpvar_57 != 0.0)) {
      fAdjust_55 = pow (tmpvar_57, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_58;
    tmpvar_58.zw = vec2(0.0, 0.0);
    tmpvar_58.x = (tmpvar_13 + _ST_WindGlobal.x);
    tmpvar_58.y = (tmpvar_14 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_59;
    highp vec4 tmpvar_60;
    tmpvar_60 = abs(((
      fract((tmpvar_58 + 0.5))
     * 2.0) - 1.0));
    tmpvar_59 = (((
      (tmpvar_60 * tmpvar_60)
     * 
      (3.0 - (2.0 * tmpvar_60))
    ) - 0.5) * 2.0);
    fMoveAmount_54 = ((_ST_WindGlobal.y * (tmpvar_59.x + 
      (tmpvar_59.y * tmpvar_59.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_54 = (fMoveAmount_54 * fAdjust_55);
    vPos_53.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * fMoveAmount_54));
    vPos_53 = (normalize(vPos_53) * fLength_56);
    FinalPosition_19 = vPos_53;
  };
  tmpvar_15.xyz = FinalPosition_19;
  highp vec4 hPos_61;
  hPos_61 = (glstate_matrix_mvp * tmpvar_15);
  mediump vec3 screenPos_62;
  highp vec4 o_63;
  highp vec4 tmpvar_64;
  tmpvar_64 = (hPos_61 * 0.5);
  highp vec2 tmpvar_65;
  tmpvar_65.x = tmpvar_64.x;
  tmpvar_65.y = (tmpvar_64.y * _ProjectionParams.x);
  o_63.xy = (tmpvar_65 + tmpvar_64.w);
  o_63.zw = hPos_61.zw;
  highp vec3 tmpvar_66;
  tmpvar_66 = o_63.xyw;
  screenPos_62 = tmpvar_66;
  screenPos_62.xy = (screenPos_62.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7 = tmpvar_10;
  highp vec3 tmpvar_67;
  tmpvar_67 = (_Object2World * tmpvar_15).xyz;
  highp vec4 v_68;
  v_68.x = _World2Object[0].x;
  v_68.y = _World2Object[1].x;
  v_68.z = _World2Object[2].x;
  v_68.w = _World2Object[3].x;
  highp vec4 v_69;
  v_69.x = _World2Object[0].y;
  v_69.y = _World2Object[1].y;
  v_69.z = _World2Object[2].y;
  v_69.w = _World2Object[3].y;
  highp vec4 v_70;
  v_70.x = _World2Object[0].z;
  v_70.y = _World2Object[1].z;
  v_70.z = _World2Object[2].z;
  v_70.w = _World2Object[3].z;
  highp vec3 tmpvar_71;
  tmpvar_71 = normalize(((
    (v_68.xyz * tmpvar_16.x)
   + 
    (v_69.xyz * tmpvar_16.y)
  ) + (v_70.xyz * tmpvar_16.z)));
  worldNormal_6 = tmpvar_71;
  highp mat3 tmpvar_72;
  tmpvar_72[0] = _Object2World[0].xyz;
  tmpvar_72[1] = _Object2World[1].xyz;
  tmpvar_72[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_73;
  tmpvar_73 = normalize((tmpvar_72 * _glesTANGENT.xyz));
  worldTangent_5 = tmpvar_73;
  lowp vec3 tmpvar_74;
  tmpvar_74 = ((worldNormal_6.yzx * worldTangent_5.zxy) - (worldNormal_6.zxy * worldTangent_5.yzx));
  highp vec3 tmpvar_75;
  tmpvar_75 = (tmpvar_74 * _glesTANGENT.w);
  worldBinormal_4 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76.x = worldTangent_5.x;
  tmpvar_76.y = worldBinormal_4.x;
  tmpvar_76.z = worldNormal_6.x;
  tmpvar_76.w = tmpvar_67.x;
  highp vec4 tmpvar_77;
  tmpvar_77.x = worldTangent_5.y;
  tmpvar_77.y = worldBinormal_4.y;
  tmpvar_77.z = worldNormal_6.y;
  tmpvar_77.w = tmpvar_67.y;
  highp vec4 tmpvar_78;
  tmpvar_78.x = worldTangent_5.z;
  tmpvar_78.y = worldBinormal_4.z;
  tmpvar_78.z = worldNormal_6.z;
  tmpvar_78.w = tmpvar_67.z;
  lowp vec4 tmpvar_79;
  tmpvar_79.w = 1.0;
  tmpvar_79.xyz = worldNormal_6;
  mediump vec4 normal_80;
  normal_80 = tmpvar_79;
  mediump vec3 x2_81;
  mediump vec4 tmpvar_82;
  tmpvar_82 = (normal_80.xyzz * normal_80.yzzx);
  x2_81.x = dot (unity_SHBr, tmpvar_82);
  x2_81.y = dot (unity_SHBg, tmpvar_82);
  x2_81.z = dot (unity_SHBb, tmpvar_82);
  highp vec3 lightColor0_83;
  lightColor0_83 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_84;
  lightColor1_84 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_85;
  lightColor2_85 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_86;
  lightColor3_86 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_87;
  lightAttenSq_87 = unity_4LightAtten0;
  highp vec3 normal_88;
  normal_88 = worldNormal_6;
  highp vec3 col_89;
  highp vec4 ndotl_90;
  highp vec4 lengthSq_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = (unity_4LightPosX0 - tmpvar_67.x);
  highp vec4 tmpvar_93;
  tmpvar_93 = (unity_4LightPosY0 - tmpvar_67.y);
  highp vec4 tmpvar_94;
  tmpvar_94 = (unity_4LightPosZ0 - tmpvar_67.z);
  lengthSq_91 = (tmpvar_92 * tmpvar_92);
  lengthSq_91 = (lengthSq_91 + (tmpvar_93 * tmpvar_93));
  lengthSq_91 = (lengthSq_91 + (tmpvar_94 * tmpvar_94));
  ndotl_90 = (tmpvar_92 * normal_88.x);
  ndotl_90 = (ndotl_90 + (tmpvar_93 * normal_88.y));
  ndotl_90 = (ndotl_90 + (tmpvar_94 * normal_88.z));
  highp vec4 tmpvar_95;
  tmpvar_95 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_90 * inversesqrt(lengthSq_91)));
  ndotl_90 = tmpvar_95;
  highp vec4 tmpvar_96;
  tmpvar_96 = (tmpvar_95 * (1.0/((1.0 + 
    (lengthSq_91 * lightAttenSq_87)
  ))));
  col_89 = (lightColor0_83 * tmpvar_96.x);
  col_89 = (col_89 + (lightColor1_84 * tmpvar_96.y));
  col_89 = (col_89 + (lightColor2_85 * tmpvar_96.z));
  col_89 = (col_89 + (lightColor3_86 * tmpvar_96.w));
  tmpvar_8 = ((x2_81 + (unity_SHC.xyz * 
    ((normal_80.x * normal_80.x) - (normal_80.y * normal_80.y))
  )) + col_89);
  tmpvar_9 = (unity_World2Shadow[0] * (_Object2World * tmpvar_15));
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_76;
  xlv_TEXCOORD1 = tmpvar_77;
  xlv_TEXCOORD2 = tmpvar_78;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_11;
  xlv_TEXCOORD5 = screenPos_62;
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD7 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_13.x = tmpvar_14.x;
  projUV_13.y = ((fract(tmpvar_14.y) * 0.0625) + unity_LODFade.y);
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_12 = tmpvar_16;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_17;
  x_17 = (tmpvar_10 - _Cutoff);
  if ((x_17 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_18;
  tmpvar_18 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_18.x, max (tmpvar_18.y, tmpvar_18.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_18 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_19;
  tmpvar_19 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7).x > 
    (xlv_TEXCOORD7.z / xlv_TEXCOORD7.w)
  )), _LightShadowData.x);
  tmpvar_20 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (xlv_TEXCOORD0.xyz, tmpvar_19);
  worldN_4.x = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = dot (xlv_TEXCOORD1.xyz, tmpvar_19);
  worldN_4.y = tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = dot (xlv_TEXCOORD2.xyz, tmpvar_19);
  worldN_4.z = tmpvar_24;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_20;
  mediump vec3 normalWorld_25;
  normalWorld_25 = worldN_4;
  mediump vec3 tmpvar_26;
  mediump vec3 tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = normalWorld_25;
  mediump vec3 x1_29;
  x1_29.x = dot (unity_SHAr, tmpvar_28);
  x1_29.y = dot (unity_SHAg, tmpvar_28);
  x1_29.z = dot (unity_SHAb, tmpvar_28);
  tmpvar_27 = (xlv_TEXCOORD6 + x1_29);
  tmpvar_26 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_26;
  lowp vec4 c_30;
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_32 = tmpvar_33;
  c_31.xyz = ((tmpvar_9 * tmpvar_26) * diff_32);
  c_31.w = tmpvar_10;
  c_30.w = c_31.w;
  c_30.xyz = (c_31.xyz + (tmpvar_9 * tmpvar_27));
  c_5.xyz = c_30.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_4;
  lowp vec3 worldTangent_5;
  lowp vec3 worldNormal_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  lowp vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10.xy = tmpvar_3.xy;
  tmpvar_9.w = _Color.w;
  tmpvar_9.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].x;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].y;
  tmpvar_11 = clamp (((
    fract(((tmpvar_12 + tmpvar_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_10.z = tmpvar_11;
  highp vec4 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_1;
  tmpvar_15 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = tmpvar_1.xyz;
  FinalPosition_18 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_20 == 5.0)) {
    highp vec3 vPos_23;
    vPos_23 = tmpvar_19;
    highp float fOffset_24;
    fOffset_24 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_24 = 0.75;
    };
    highp vec4 tmpvar_25;
    tmpvar_25.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_25.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_24);
    highp vec4 tmpvar_26;
    tmpvar_26 = abs(((
      fract((tmpvar_25 + 0.5))
     * 2.0) - 1.0));
    vPos_23 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_26 * tmpvar_26)
       * 
        (3.0 - (2.0 * tmpvar_26))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_15 = tmpvar_2;
    FinalPosition_18 = vPos_23;
  };
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_27;
    vPos_27 = FinalPosition_18;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_28;
      vPos_28 = FinalPosition_18;
      highp float fTime_29;
      highp float fAdherenceScale_30;
      highp vec3 vWindVector_31;
      vWindVector_31 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_29 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_32;
      highp float fOscillation_33;
      fOscillation_33 = 1.0;
      highp float fAmount_34;
      highp float fTarget_35;
      highp vec4 tmpvar_36;
      tmpvar_36.x = (fTime_29 + _glesMultiTexCoord0.w);
      tmpvar_36.y = ((fTime_29 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_36.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_29 + _glesMultiTexCoord0.w));
      tmpvar_36.w = ((fTime_29 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      vOscillations_32 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      highp float tmpvar_38;
      tmpvar_38 = (vOscillations_32.y * vOscillations_32.z);
      fTarget_35 = 1.0;
      fAmount_34 = tmpvar_38;
      if ((tmpvar_38 < 0.0)) {
        fTarget_35 = -1.0;
        fAmount_34 = -(tmpvar_38);
      };
      fOscillation_33 = (((
        mix (mix (tmpvar_38, fTarget_35, fAmount_34), fTarget_35, fAmount_34)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_32.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_33 = (fOscillation_33 * (1.0 + (vOscillations_32.w * _ST_WindBranchWhip.x)));
      vPos_28 = (FinalPosition_18 + ((vWindVector_31 * fOscillation_33) * _ST_WindBranch.y));
      highp vec4 tmpvar_39;
      tmpvar_39.zw = vec2(0.0, 0.0);
      tmpvar_39.x = ((fTime_29 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_39.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_40;
      highp vec4 tmpvar_41;
      tmpvar_41 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      tmpvar_40 = (((
        (tmpvar_41 * tmpvar_41)
       * 
        (3.0 - (2.0 * tmpvar_41))
      ) - 0.5) * 2.0);
      fAdherenceScale_30 = (1.0 - ((tmpvar_40.x * tmpvar_40.y) * (
        (tmpvar_40.x * tmpvar_40.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_30 = (fAdherenceScale_30 + ((vOscillations_32.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_28 = (vPos_28 + ((
        ((vRotatedBranchAnchor_16 - vPos_28) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_30) * _glesMultiTexCoord0.z));
      vPos_27 = vPos_28;
    } else {
      highp vec3 vPos_42;
      vPos_42 = vPos_27;
      highp float fTime_43;
      highp vec3 vWindVector_44;
      vWindVector_44 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_43 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_45;
      highp float fOscillation_46;
      fOscillation_46 = 1.0;
      highp float fAmount_47;
      highp float fTarget_48;
      highp vec4 tmpvar_49;
      tmpvar_49.w = 0.0;
      tmpvar_49.x = (fTime_43 + _glesMultiTexCoord0.w);
      tmpvar_49.y = ((fTime_43 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_49.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_43 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_50;
      tmpvar_50 = abs(((
        fract((tmpvar_49 + 0.5))
       * 2.0) - 1.0));
      vOscillations_45 = (((
        (tmpvar_50 * tmpvar_50)
       * 
        (3.0 - (2.0 * tmpvar_50))
      ) - 0.5) * 2.0);
      highp float tmpvar_51;
      tmpvar_51 = (vOscillations_45.y * vOscillations_45.z);
      fTarget_48 = 1.0;
      fAmount_47 = tmpvar_51;
      if ((tmpvar_51 < 0.0)) {
        fTarget_48 = -1.0;
        fAmount_47 = -(tmpvar_51);
      };
      fOscillation_46 = (((
        mix (mix (tmpvar_51, fTarget_48, fAmount_47), fTarget_48, fAmount_47)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_45.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_42 = (vPos_27 + ((vWindVector_44 * fOscillation_46) * _ST_WindBranch.y));
      vPos_27 = vPos_42;
    };
    FinalPosition_18 = vPos_27;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_52;
    vPos_52 = FinalPosition_18;
    highp float fMoveAmount_53;
    highp float fAdjust_54;
    highp float fLength_55;
    fLength_55 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_56;
    tmpvar_56 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_54 = tmpvar_56;
    if ((tmpvar_56 != 0.0)) {
      fAdjust_54 = pow (tmpvar_56, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_57;
    tmpvar_57.zw = vec2(0.0, 0.0);
    tmpvar_57.x = (tmpvar_12 + _ST_WindGlobal.x);
    tmpvar_57.y = (tmpvar_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_58;
    highp vec4 tmpvar_59;
    tmpvar_59 = abs(((
      fract((tmpvar_57 + 0.5))
     * 2.0) - 1.0));
    tmpvar_58 = (((
      (tmpvar_59 * tmpvar_59)
     * 
      (3.0 - (2.0 * tmpvar_59))
    ) - 0.5) * 2.0);
    fMoveAmount_53 = ((_ST_WindGlobal.y * (tmpvar_58.x + 
      (tmpvar_58.y * tmpvar_58.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_53 = (fMoveAmount_53 * fAdjust_54);
    vPos_52.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * fMoveAmount_53));
    vPos_52 = (normalize(vPos_52) * fLength_55);
    FinalPosition_18 = vPos_52;
  };
  tmpvar_14.xyz = FinalPosition_18;
  highp vec4 hPos_60;
  hPos_60 = (glstate_matrix_mvp * tmpvar_14);
  mediump vec3 screenPos_61;
  highp vec4 o_62;
  highp vec4 tmpvar_63;
  tmpvar_63 = (hPos_60 * 0.5);
  highp vec2 tmpvar_64;
  tmpvar_64.x = tmpvar_63.x;
  tmpvar_64.y = (tmpvar_63.y * _ProjectionParams.x);
  o_62.xy = (tmpvar_64 + tmpvar_63.w);
  o_62.zw = hPos_60.zw;
  highp vec3 tmpvar_65;
  tmpvar_65 = o_62.xyw;
  screenPos_61 = tmpvar_65;
  screenPos_61.xy = (screenPos_61.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7 = tmpvar_9;
  highp vec3 tmpvar_66;
  tmpvar_66 = (_Object2World * tmpvar_14).xyz;
  highp vec4 v_67;
  v_67.x = _World2Object[0].x;
  v_67.y = _World2Object[1].x;
  v_67.z = _World2Object[2].x;
  v_67.w = _World2Object[3].x;
  highp vec4 v_68;
  v_68.x = _World2Object[0].y;
  v_68.y = _World2Object[1].y;
  v_68.z = _World2Object[2].y;
  v_68.w = _World2Object[3].y;
  highp vec4 v_69;
  v_69.x = _World2Object[0].z;
  v_69.y = _World2Object[1].z;
  v_69.z = _World2Object[2].z;
  v_69.w = _World2Object[3].z;
  highp vec3 tmpvar_70;
  tmpvar_70 = normalize(((
    (v_67.xyz * tmpvar_15.x)
   + 
    (v_68.xyz * tmpvar_15.y)
  ) + (v_69.xyz * tmpvar_15.z)));
  worldNormal_6 = tmpvar_70;
  highp mat3 tmpvar_71;
  tmpvar_71[0] = _Object2World[0].xyz;
  tmpvar_71[1] = _Object2World[1].xyz;
  tmpvar_71[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_72;
  tmpvar_72 = normalize((tmpvar_71 * _glesTANGENT.xyz));
  worldTangent_5 = tmpvar_72;
  lowp vec3 tmpvar_73;
  tmpvar_73 = ((worldNormal_6.yzx * worldTangent_5.zxy) - (worldNormal_6.zxy * worldTangent_5.yzx));
  highp vec3 tmpvar_74;
  tmpvar_74 = (tmpvar_73 * _glesTANGENT.w);
  worldBinormal_4 = tmpvar_74;
  highp vec4 tmpvar_75;
  tmpvar_75.x = worldTangent_5.x;
  tmpvar_75.y = worldBinormal_4.x;
  tmpvar_75.z = worldNormal_6.x;
  tmpvar_75.w = tmpvar_66.x;
  highp vec4 tmpvar_76;
  tmpvar_76.x = worldTangent_5.y;
  tmpvar_76.y = worldBinormal_4.y;
  tmpvar_76.z = worldNormal_6.y;
  tmpvar_76.w = tmpvar_66.y;
  highp vec4 tmpvar_77;
  tmpvar_77.x = worldTangent_5.z;
  tmpvar_77.y = worldBinormal_4.z;
  tmpvar_77.z = worldNormal_6.z;
  tmpvar_77.w = tmpvar_66.z;
  lowp vec4 tmpvar_78;
  tmpvar_78.w = 1.0;
  tmpvar_78.xyz = worldNormal_6;
  mediump vec4 normal_79;
  normal_79 = tmpvar_78;
  mediump vec3 x2_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (normal_79.xyzz * normal_79.yzzx);
  x2_80.x = dot (unity_SHBr, tmpvar_81);
  x2_80.y = dot (unity_SHBg, tmpvar_81);
  x2_80.z = dot (unity_SHBb, tmpvar_81);
  tmpvar_8 = (unity_World2Shadow[0] * (_Object2World * tmpvar_14));
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_75;
  xlv_TEXCOORD1 = tmpvar_76;
  xlv_TEXCOORD2 = tmpvar_77;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = screenPos_61;
  xlv_TEXCOORD6 = (x2_80 + (unity_SHC.xyz * (
    (normal_79.x * normal_79.x)
   - 
    (normal_79.y * normal_79.y)
  )));
  xlv_TEXCOORD7 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_13.x = tmpvar_14.x;
  projUV_13.y = ((fract(tmpvar_14.y) * 0.0625) + unity_LODFade.y);
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_12 = tmpvar_16;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_17;
  x_17 = (tmpvar_10 - _Cutoff);
  if ((x_17 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_18;
  tmpvar_18 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_18.x, max (tmpvar_18.y, tmpvar_18.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_18 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_19;
  tmpvar_19 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float shadow_20;
  shadow_20 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD7.xyz) * (1.0 - _LightShadowData.x)));
  highp float tmpvar_21;
  tmpvar_21 = dot (xlv_TEXCOORD0.xyz, tmpvar_19);
  worldN_4.x = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (xlv_TEXCOORD1.xyz, tmpvar_19);
  worldN_4.y = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = dot (xlv_TEXCOORD2.xyz, tmpvar_19);
  worldN_4.z = tmpvar_23;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_20;
  mediump vec3 normalWorld_24;
  normalWorld_24 = worldN_4;
  mediump vec3 tmpvar_25;
  mediump vec3 tmpvar_26;
  mediump vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = normalWorld_24;
  mediump vec3 x1_28;
  x1_28.x = dot (unity_SHAr, tmpvar_27);
  x1_28.y = dot (unity_SHAg, tmpvar_27);
  x1_28.z = dot (unity_SHAb, tmpvar_27);
  tmpvar_26 = (xlv_TEXCOORD6 + x1_28);
  tmpvar_25 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_25;
  lowp vec4 c_29;
  lowp vec4 c_30;
  lowp float diff_31;
  mediump float tmpvar_32;
  tmpvar_32 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_31 = tmpvar_32;
  c_30.xyz = ((tmpvar_9 * tmpvar_25) * diff_31);
  c_30.w = tmpvar_10;
  c_29.w = c_30.w;
  c_29.xyz = (c_30.xyz + (tmpvar_9 * tmpvar_26));
  c_5.xyz = c_29.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec4 vs_TEXCOORD7;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
bool tb3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
mediump vec4 t16_7;
lowp vec3 t10_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp float t12;
highp vec2 t18;
highp vec2 t22;
highp vec2 t24;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
highp float t32;
mediump float t16_35;
void main()
{
    //Instruction 21832
    //MUL
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 21833
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 21834
    //ADD
    t9.x = t0.x + _Object2World[3].z;
    //Instruction 21835
    //ADD
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 21836
    //ADD
    t9.y = t18.x + in_NORMAL0.x;
    //Instruction 21837
    //FRC
    t9.xy = fract(t9.xy);
    //Instruction 21838
    //MAD
    t9.x = t9.y * 0.500000 + t9.x;
    //Instruction 21839
    //ADD
    t9.x = t9.x + -0.300000;
    //Instruction 21840
    //MUL
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 21841
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 21842
    //LT
    tb9 = 0.0<t16_2;
    //Instruction 21843
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 21844
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 21845
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 21846
    //DP3
    t18.x = dot(t3.xyz, t3.xyz);
    //Instruction 21847
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 21848
    //MUL
    t18.xy = t18.xx * t3.xz;
    //Instruction 21849
    //AND
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, bvec2(tb9));
    //Instruction 21850
    //EQ
    tb28 = t16_2==5.000000;
    //Instruction 21851
    //LT
    tb3 = in_TEXCOORD0.x<0.500000;
    //Instruction 21852
    //AND
    t3.x = tb3 ? 0.750000 : float(0.0);
    //Instruction 21853
    //ADD
    t12 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 21854
    //MAD
    t3.x = t12 * _ST_WindFrondRipple.z + t3.x;
    //Instruction 21855
    //ADD
    t3.x = t3.x + 0.500000;
    //Instruction 21856
    //FRC
    t3.x = fract(t3.x);
    //Instruction 21857
    //MAD
    t3.x = t3.x * 2.000000 + -1.0;
    //Instruction 21858
    //MUL
    t12 = abs(t3.x) * abs(t3.x);
    //Instruction 21859
    //MAD
    t3.x = -abs(t3.x) * 2.000000 + 3.000000;
    //Instruction 21860
    //MAD
    t3.x = t12 * t3.x + -0.500000;
    //Instruction 21861
    //MUL
    t3.x = t3.x * in_TEXCOORD2.y;
    //Instruction 21862
    //DP2
    t3.x = dot(_ST_WindFrondRipple.yy, t3.xx);
    //Instruction 21863
    //MAD
    t3.xyz = t3.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    //Instruction 21864
    //MOVC
    t3.xyz = (bool(tb28)) ? t3.xyz : in_POSITION0.xyz;
    //Instruction 21865
    //GE
    tb30 = t16_2>=3.000000;
    //Instruction 21866
    //IF
    if(tb30){
        //Instruction 21867
        //IF
        if(tb28){
            //Instruction 21868
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 21869
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 21870
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 21871
            //DP3
            t28 = dot(t4.xyz, t4.xyz);
            //Instruction 21872
            //RSQ
            t28 = inversesqrt(t28);
            //Instruction 21873
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 21874
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 21875
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 21876
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 21877
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 21878
            //ADD
            t28 = t0.x + _ST_WindBranch.x;
            //Instruction 21879
            //ADD
            t2.x = t28 + in_TEXCOORD0.w;
            //Instruction 21880
            //MAD
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 21881
            //MUL
            t30 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 21882
            //MUL
            t2.z = t30 * 0.500000;
            //Instruction 21883
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 21884
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 21885
            //FRC
            t2 = fract(t2);
            //Instruction 21886
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 21887
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 21888
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 21889
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 21890
            //ADD
            t2 = t2 + t2;
            //Instruction 21891
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 21892
            //LT
            tb30 = t6.w<0.0;
            //Instruction 21893
            //MOV
            t6.y = (-t6.w);
            //Instruction 21894
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 21895
            //MOVC
            t6.xy = (bool(tb30)) ? t6.xy : t6.zw;
            //Instruction 21896
            //MAD
            t30 = (-t2.y) * t2.z + t6.x;
            //Instruction 21897
            //MAD
            t30 = t6.y * t30 + t6.w;
            //Instruction 21898
            //ADD
            t31 = (-t30) + t6.x;
            //Instruction 21899
            //MAD
            t30 = t6.y * t31 + t30;
            //Instruction 21900
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 21901
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 21902
            //ADD
            t32 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 21903
            //MUL
            t32 = t2.x * t32;
            //Instruction 21904
            //MAD
            t30 = t30 * t31 + t32;
            //Instruction 21905
            //MAD
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 21906
            //MUL
            t30 = t30 * t31;
            //Instruction 21907
            //MUL
            t5.xyz = vec3(t30) * t5.xyz;
            //Instruction 21908
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 21909
            //MAD
            t6.x = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 21910
            //MUL
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 21911
            //MAD
            t6.y = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 21912
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 21913
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 21914
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 21915
            //MUL
            t24.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 21916
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 21917
            //MAD
            t6.xy = t24.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 21918
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 21919
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 21920
            //MUL
            t28 = t6.x * t6.y;
            //Instruction 21921
            //MAD
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            //Instruction 21922
            //MUL
            t30 = t2.w * _ST_WindVector.w;
            //Instruction 21923
            //MAD
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            //Instruction 21924
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 21925
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 21926
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 21927
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 21928
        //ELSE
        } else {
            //Instruction 21929
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 21930
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 21931
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 21932
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 21933
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 21934
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 21935
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 21936
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 21937
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 21938
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 21939
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 21940
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 21941
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 21942
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 21943
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 21944
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 21945
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 21946
            //LT
            tb0 = t2.w<0.0;
            //Instruction 21947
            //MOV
            t2.y = (-t2.w);
            //Instruction 21948
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 21949
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 21950
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 21951
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 21952
            //ADD
            t28 = (-t0.x) + t6.x;
            //Instruction 21953
            //MAD
            t0.x = t6.y * t28 + t0.x;
            //Instruction 21954
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 21955
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 21956
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 21957
            //MUL
            t30 = t30 * t5.x;
            //Instruction 21958
            //MAD
            t0.x = t0.x * t28 + t30;
            //Instruction 21959
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 21960
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 21961
        //ENDIF
        }
        //Instruction 21962
    //ENDIF
    }
    //Instruction 21963
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 21964
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 21965
    //DIV
    t28 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 21966
    //MAD
    t28 = (-t28) * 0.250000 + t3.y;
    //Instruction 21967
    //MAX
    t28 = max(t28, 0.0);
    //Instruction 21968
    //MUL
    t28 = t28 * _ST_WindGlobal.z;
    //Instruction 21969
    //NE
    tb30 = t28!=0.0;
    //Instruction 21970
    //LOG
    t4.x = log2(t28);
    //Instruction 21971
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 21972
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 21973
    //MOVC
    t28 = (tb30) ? t4.x : t28;
    //Instruction 21974
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 21975
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 21976
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 21977
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 21978
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 21979
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 21980
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 21981
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 21982
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 21983
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 21984
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 21985
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 21986
    //MUL
    t28 = t28 * t30;
    //Instruction 21987
    //MAD
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    //Instruction 21988
    //MOV
    t4.y = t3.y;
    //Instruction 21989
    //DP3
    t18.x = dot(t4.xyz, t4.xyz);
    //Instruction 21990
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 21991
    //MUL
    t4.xyz = t18.xxx * t4.xyz;
    //Instruction 21992
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 21993
    //MOVC
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    //Instruction 21994
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 21995
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 21996
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 21997
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 21998
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 21999
    //MUL
    t27 = t3.y * _ProjectionParams.x;
    //Instruction 22000
    //MUL
    t4.w = t27 * 0.500000;
    //Instruction 22001
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 22002
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 22003
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 22004
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 22005
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 22006
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 22007
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 22008
    //MUL
    t4.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 22009
    //MAD
    t4.xyz = _Object2World[0].xyz * t0.xxx + t4.xyz;
    //Instruction 22010
    //MAD
    t4.xyz = _Object2World[2].xyz * t0.zzz + t4.xyz;
    //Instruction 22011
    //MAD
    t4.xyz = _Object2World[3].xyz * in_POSITION0.www + t4.xyz;
    //Instruction 22012
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 22013
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 22014
    //MOV
    t2.zw = _World2Object[2].xx;
    //Instruction 22015
    //MOV
    t5.x = _World2Object[0].y;
    //Instruction 22016
    //MOV
    t5.y = _World2Object[1].y;
    //Instruction 22017
    //MOV
    t5.zw = _World2Object[2].yy;
    //Instruction 22018
    //MUL
    t5 = t5 * in_NORMAL0.yyyy;
    //Instruction 22019
    //MAD
    t2 = t2 * in_NORMAL0.xxxx + t5;
    //Instruction 22020
    //MOV
    t5.x = _World2Object[0].z;
    //Instruction 22021
    //MOV
    t5.y = _World2Object[1].z;
    //Instruction 22022
    //MOV
    t5.zw = _World2Object[2].zz;
    //Instruction 22023
    //MAD
    t2 = t5 * in_NORMAL0.zzzz + t2;
    //Instruction 22024
    //DP3
    t27 = dot(t2.xyw, t2.xyw);
    //Instruction 22025
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 22026
    //MUL
    t2 = vec4(t27) * t2;
    //Instruction 22027
    //MUL
    t5.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 22028
    //MAD
    t5.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t5.xyz;
    //Instruction 22029
    //MAD
    t5.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t5.xyz;
    //Instruction 22030
    //DP3
    t27 = dot(t5.xyz, t5.xyz);
    //Instruction 22031
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 22032
    //MUL
    t5.xyz = vec3(t27) * t5.xyz;
    //Instruction 22033
    //MUL
    t10_7.xyz = t2.wxy * t5.xyz;
    //Instruction 22034
    //MAD
    t10_7.xyz = t2.ywx * t5.yzx + (-t10_7.xyz);
    //Instruction 22035
    //MUL
    t6.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 22036
    //MUL
    t16_7 = t2.ywzx * t2;
    //Instruction 22037
    //DP4
    t16_8.x = dot(unity_SHBr, t16_7);
    //Instruction 22038
    //DP4
    t16_8.y = dot(unity_SHBg, t16_7);
    //Instruction 22039
    //DP4
    t16_8.z = dot(unity_SHBb, t16_7);
    //Instruction 22040
    //MUL
    t16_35 = t2.y * t2.y;
    //Instruction 22041
    //MAD
    t16_35 = t2.x * t2.x + (-t16_35);
    //Instruction 22042
    //MAD
    vs_TEXCOORD6.xyz = unity_SHC.xyz * vec3(t16_35) + t16_8.xyz;
    //Instruction 22043
    //MUL
    t7 = t0.yyyy * _Object2World[1];
    //Instruction 22044
    //MAD
    t7 = _Object2World[0] * t0.xxxx + t7;
    //Instruction 22045
    //MAD
    t0 = _Object2World[2] * t0.zzzz + t7;
    //Instruction 22046
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 22047
    //MUL
    t7 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 22048
    //MAD
    t7 = unity_World2Shadow[0][0] * t0.xxxx + t7;
    //Instruction 22049
    //MAD
    t7 = unity_World2Shadow[0][2] * t0.zzzz + t7;
    //Instruction 22050
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t7;
    //Instruction 22051
    //MOV
    vs_TEXCOORD0.x = t5.z;
    //Instruction 22052
    //MOV
    vs_TEXCOORD0.y = t6.x;
    //Instruction 22053
    //MOV
    vs_TEXCOORD0.z = t2.x;
    //Instruction 22054
    //MOV
    vs_TEXCOORD0.w = t4.x;
    //Instruction 22055
    //MOV
    vs_TEXCOORD1.x = t5.x;
    //Instruction 22056
    //MOV
    vs_TEXCOORD1.y = t6.y;
    //Instruction 22057
    //MOV
    vs_TEXCOORD1.z = t2.y;
    //Instruction 22058
    //MOV
    vs_TEXCOORD1.w = t4.y;
    //Instruction 22059
    //MOV
    vs_TEXCOORD2.x = t5.y;
    //Instruction 22060
    //MOV
    vs_TEXCOORD2.y = t6.z;
    //Instruction 22061
    //MOV
    vs_TEXCOORD2.z = t2.w;
    //Instruction 22062
    //MOV
    vs_TEXCOORD2.w = t4.z;
    //Instruction 22063
    //MOV
    vs_TEXCOORD3.w = _Color.w;
    //Instruction 22064
    //MOV
    vs_TEXCOORD7 = t0;
    //Instruction 22065
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 22066
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 22067
    //MOV
    vs_TEXCOORD5.xyz = t3.xyz;
    //Instruction 22068
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec4 vs_TEXCOORD7;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump float t16_6;
mediump vec3 t16_9;
mediump float t16_21;
void main()
{
    //Instruction 21788
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    //Instruction 21789
    //FRC
    t16_6 = fract(t16_0.y);
    //Instruction 21790
    //MOV
    t1.x = t16_0.x;
    //Instruction 21791
    //MAD
    t1.y = t16_6 * 0.062500 + unity_LODFade.y;
    //Instruction 21792
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 21793
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 21794
    //LT
    tb1 = t16_1<0.0;
    //Instruction 21795
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 21796
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    //Instruction 21797
    //MAD
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 21798
    //LT
    tb1 = t10_2.x<0.0;
    //Instruction 21799
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 21800
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 21801
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 21802
    //ADD
    t16_9.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 21803
    //MAD
    t16_9.xyz = vs_TEXCOORD4.zzz * t16_9.xyz + t10_0.xyz;
    //Instruction 21804
    //MAX
    t16_4.x = max(t16_9.z, t16_9.y);
    //Instruction 21805
    //MAX
    t16_4.x = max(t16_9.x, t16_4.x);
    //Instruction 21806
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 21807
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 21808
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_9.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 21809
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD3.xyz;
    //Instruction 21810
    //SAMPLE_C_LZ
    vec3 txVec50 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
    t16_21 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec50, 0.0);
    //Instruction 21811
    //ADD
    t16_4.x = (-_LightShadowData.x) + 1.0;
    //Instruction 21812
    //MAD
    t16_21 = t16_21 * t16_4.x + _LightShadowData.x;
    //Instruction 21813
    //MUL
    t16_4.xyz = vec3(t16_21) * _LightColor0.xyz;
    //Instruction 21814
    //MUL
    t16_4.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 21815
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 21816
    //MAD
    t10_2.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 21817
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    //Instruction 21818
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    //Instruction 21819
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    //Instruction 21820
    //MOV
    t0.w = 1.0;
    //Instruction 21821
    //DP4
    t16_5.x = dot(unity_SHAr, t0);
    //Instruction 21822
    //DP4
    t16_5.y = dot(unity_SHAg, t0);
    //Instruction 21823
    //DP4
    t16_5.z = dot(unity_SHAb, t0);
    //Instruction 21824
    //DP3
    t16_21 = dot(t0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 21825
    //MAX
    t16_21 = max(t16_21, 0.0);
    //Instruction 21826
    //ADD
    t16_5.xyz = t16_5.xyz + vs_TEXCOORD6.xyz;
    //Instruction 21827
    //MUL
    t16_3.xyz = t16_3.xyz * t16_5.xyz;
    //Instruction 21828
    //MAD
    t16_3.xyz = t16_4.xyz * vec3(t16_21) + t16_3.xyz;
    //Instruction 21829
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 21830
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 21831
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_4;
  lowp vec3 worldTangent_5;
  lowp vec3 worldNormal_6;
  mediump vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec4 tmpvar_9;
  lowp vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  tmpvar_11.xy = tmpvar_3.xy;
  tmpvar_10.w = _Color.w;
  tmpvar_10.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].x;
  highp float tmpvar_14;
  tmpvar_14 = _Object2World[3].y;
  tmpvar_12 = clamp (((
    fract(((tmpvar_13 + tmpvar_14) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_11.z = tmpvar_12;
  highp vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_15 = tmpvar_1;
  tmpvar_16 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = tmpvar_1.xyz;
  FinalPosition_19 = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = (_WindQuality * _WindEnabled);
  if ((tmpvar_21 > 0.0)) {
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_22 * _ST_WindVector.xyz));
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_23 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_21 == 5.0)) {
    highp vec3 vPos_24;
    vPos_24 = tmpvar_20;
    highp float fOffset_25;
    fOffset_25 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_25 = 0.75;
    };
    highp vec4 tmpvar_26;
    tmpvar_26.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_26.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_25);
    highp vec4 tmpvar_27;
    tmpvar_27 = abs(((
      fract((tmpvar_26 + 0.5))
     * 2.0) - 1.0));
    vPos_24 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_16 = tmpvar_2;
    FinalPosition_19 = vPos_24;
  };
  if ((tmpvar_21 >= 3.0)) {
    highp vec3 vPos_28;
    vPos_28 = FinalPosition_19;
    if ((tmpvar_21 == 5.0)) {
      highp vec3 vPos_29;
      vPos_29 = FinalPosition_19;
      highp float fTime_30;
      highp float fAdherenceScale_31;
      highp vec3 vWindVector_32;
      vWindVector_32 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_30 = (_ST_WindBranch.x + (tmpvar_13 + tmpvar_14));
      highp vec4 vOscillations_33;
      highp float fOscillation_34;
      fOscillation_34 = 1.0;
      highp float fAmount_35;
      highp float fTarget_36;
      highp vec4 tmpvar_37;
      tmpvar_37.x = (fTime_30 + _glesMultiTexCoord0.w);
      tmpvar_37.y = ((fTime_30 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_37.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_30 + _glesMultiTexCoord0.w));
      tmpvar_37.w = ((fTime_30 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      vOscillations_33 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      highp float tmpvar_39;
      tmpvar_39 = (vOscillations_33.y * vOscillations_33.z);
      fTarget_36 = 1.0;
      fAmount_35 = tmpvar_39;
      if ((tmpvar_39 < 0.0)) {
        fTarget_36 = -1.0;
        fAmount_35 = -(tmpvar_39);
      };
      fOscillation_34 = (((
        mix (mix (tmpvar_39, fTarget_36, fAmount_35), fTarget_36, fAmount_35)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_33.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_34 = (fOscillation_34 * (1.0 + (vOscillations_33.w * _ST_WindBranchWhip.x)));
      vPos_29 = (FinalPosition_19 + ((vWindVector_32 * fOscillation_34) * _ST_WindBranch.y));
      highp vec4 tmpvar_40;
      tmpvar_40.zw = vec2(0.0, 0.0);
      tmpvar_40.x = ((fTime_30 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_40.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_41;
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_40 + 0.5))
       * 2.0) - 1.0));
      tmpvar_41 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      fAdherenceScale_31 = (1.0 - ((tmpvar_41.x * tmpvar_41.y) * (
        (tmpvar_41.x * tmpvar_41.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_31 = (fAdherenceScale_31 + ((vOscillations_33.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_29 = (vPos_29 + ((
        ((vRotatedBranchAnchor_17 - vPos_29) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_31) * _glesMultiTexCoord0.z));
      vPos_28 = vPos_29;
    } else {
      highp vec3 vPos_43;
      vPos_43 = vPos_28;
      highp float fTime_44;
      highp vec3 vWindVector_45;
      vWindVector_45 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_44 = (_ST_WindBranch.x + (tmpvar_13 + tmpvar_14));
      highp vec4 vOscillations_46;
      highp float fOscillation_47;
      fOscillation_47 = 1.0;
      highp float fAmount_48;
      highp float fTarget_49;
      highp vec4 tmpvar_50;
      tmpvar_50.w = 0.0;
      tmpvar_50.x = (fTime_44 + _glesMultiTexCoord0.w);
      tmpvar_50.y = ((fTime_44 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_50.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_44 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_51;
      tmpvar_51 = abs(((
        fract((tmpvar_50 + 0.5))
       * 2.0) - 1.0));
      vOscillations_46 = (((
        (tmpvar_51 * tmpvar_51)
       * 
        (3.0 - (2.0 * tmpvar_51))
      ) - 0.5) * 2.0);
      highp float tmpvar_52;
      tmpvar_52 = (vOscillations_46.y * vOscillations_46.z);
      fTarget_49 = 1.0;
      fAmount_48 = tmpvar_52;
      if ((tmpvar_52 < 0.0)) {
        fTarget_49 = -1.0;
        fAmount_48 = -(tmpvar_52);
      };
      fOscillation_47 = (((
        mix (mix (tmpvar_52, fTarget_49, fAmount_48), fTarget_49, fAmount_48)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_46.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_43 = (vPos_28 + ((vWindVector_45 * fOscillation_47) * _ST_WindBranch.y));
      vPos_28 = vPos_43;
    };
    FinalPosition_19 = vPos_28;
  };
  if ((tmpvar_21 > 0.0)) {
    highp vec3 vPos_53;
    vPos_53 = FinalPosition_19;
    highp float fMoveAmount_54;
    highp float fAdjust_55;
    highp float fLength_56;
    fLength_56 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_57;
    tmpvar_57 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_55 = tmpvar_57;
    if ((tmpvar_57 != 0.0)) {
      fAdjust_55 = pow (tmpvar_57, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_58;
    tmpvar_58.zw = vec2(0.0, 0.0);
    tmpvar_58.x = (tmpvar_13 + _ST_WindGlobal.x);
    tmpvar_58.y = (tmpvar_14 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_59;
    highp vec4 tmpvar_60;
    tmpvar_60 = abs(((
      fract((tmpvar_58 + 0.5))
     * 2.0) - 1.0));
    tmpvar_59 = (((
      (tmpvar_60 * tmpvar_60)
     * 
      (3.0 - (2.0 * tmpvar_60))
    ) - 0.5) * 2.0);
    fMoveAmount_54 = ((_ST_WindGlobal.y * (tmpvar_59.x + 
      (tmpvar_59.y * tmpvar_59.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_54 = (fMoveAmount_54 * fAdjust_55);
    vPos_53.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * fMoveAmount_54));
    vPos_53 = (normalize(vPos_53) * fLength_56);
    FinalPosition_19 = vPos_53;
  };
  tmpvar_15.xyz = FinalPosition_19;
  highp vec4 hPos_61;
  hPos_61 = (glstate_matrix_mvp * tmpvar_15);
  mediump vec3 screenPos_62;
  highp vec4 o_63;
  highp vec4 tmpvar_64;
  tmpvar_64 = (hPos_61 * 0.5);
  highp vec2 tmpvar_65;
  tmpvar_65.x = tmpvar_64.x;
  tmpvar_65.y = (tmpvar_64.y * _ProjectionParams.x);
  o_63.xy = (tmpvar_65 + tmpvar_64.w);
  o_63.zw = hPos_61.zw;
  highp vec3 tmpvar_66;
  tmpvar_66 = o_63.xyw;
  screenPos_62 = tmpvar_66;
  screenPos_62.xy = (screenPos_62.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7 = tmpvar_10;
  highp vec3 tmpvar_67;
  tmpvar_67 = (_Object2World * tmpvar_15).xyz;
  highp vec4 v_68;
  v_68.x = _World2Object[0].x;
  v_68.y = _World2Object[1].x;
  v_68.z = _World2Object[2].x;
  v_68.w = _World2Object[3].x;
  highp vec4 v_69;
  v_69.x = _World2Object[0].y;
  v_69.y = _World2Object[1].y;
  v_69.z = _World2Object[2].y;
  v_69.w = _World2Object[3].y;
  highp vec4 v_70;
  v_70.x = _World2Object[0].z;
  v_70.y = _World2Object[1].z;
  v_70.z = _World2Object[2].z;
  v_70.w = _World2Object[3].z;
  highp vec3 tmpvar_71;
  tmpvar_71 = normalize(((
    (v_68.xyz * tmpvar_16.x)
   + 
    (v_69.xyz * tmpvar_16.y)
  ) + (v_70.xyz * tmpvar_16.z)));
  worldNormal_6 = tmpvar_71;
  highp mat3 tmpvar_72;
  tmpvar_72[0] = _Object2World[0].xyz;
  tmpvar_72[1] = _Object2World[1].xyz;
  tmpvar_72[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_73;
  tmpvar_73 = normalize((tmpvar_72 * _glesTANGENT.xyz));
  worldTangent_5 = tmpvar_73;
  lowp vec3 tmpvar_74;
  tmpvar_74 = ((worldNormal_6.yzx * worldTangent_5.zxy) - (worldNormal_6.zxy * worldTangent_5.yzx));
  highp vec3 tmpvar_75;
  tmpvar_75 = (tmpvar_74 * _glesTANGENT.w);
  worldBinormal_4 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76.x = worldTangent_5.x;
  tmpvar_76.y = worldBinormal_4.x;
  tmpvar_76.z = worldNormal_6.x;
  tmpvar_76.w = tmpvar_67.x;
  highp vec4 tmpvar_77;
  tmpvar_77.x = worldTangent_5.y;
  tmpvar_77.y = worldBinormal_4.y;
  tmpvar_77.z = worldNormal_6.y;
  tmpvar_77.w = tmpvar_67.y;
  highp vec4 tmpvar_78;
  tmpvar_78.x = worldTangent_5.z;
  tmpvar_78.y = worldBinormal_4.z;
  tmpvar_78.z = worldNormal_6.z;
  tmpvar_78.w = tmpvar_67.z;
  lowp vec4 tmpvar_79;
  tmpvar_79.w = 1.0;
  tmpvar_79.xyz = worldNormal_6;
  mediump vec4 normal_80;
  normal_80 = tmpvar_79;
  mediump vec3 x2_81;
  mediump vec4 tmpvar_82;
  tmpvar_82 = (normal_80.xyzz * normal_80.yzzx);
  x2_81.x = dot (unity_SHBr, tmpvar_82);
  x2_81.y = dot (unity_SHBg, tmpvar_82);
  x2_81.z = dot (unity_SHBb, tmpvar_82);
  highp vec3 lightColor0_83;
  lightColor0_83 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_84;
  lightColor1_84 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_85;
  lightColor2_85 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_86;
  lightColor3_86 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_87;
  lightAttenSq_87 = unity_4LightAtten0;
  highp vec3 normal_88;
  normal_88 = worldNormal_6;
  highp vec3 col_89;
  highp vec4 ndotl_90;
  highp vec4 lengthSq_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = (unity_4LightPosX0 - tmpvar_67.x);
  highp vec4 tmpvar_93;
  tmpvar_93 = (unity_4LightPosY0 - tmpvar_67.y);
  highp vec4 tmpvar_94;
  tmpvar_94 = (unity_4LightPosZ0 - tmpvar_67.z);
  lengthSq_91 = (tmpvar_92 * tmpvar_92);
  lengthSq_91 = (lengthSq_91 + (tmpvar_93 * tmpvar_93));
  lengthSq_91 = (lengthSq_91 + (tmpvar_94 * tmpvar_94));
  ndotl_90 = (tmpvar_92 * normal_88.x);
  ndotl_90 = (ndotl_90 + (tmpvar_93 * normal_88.y));
  ndotl_90 = (ndotl_90 + (tmpvar_94 * normal_88.z));
  highp vec4 tmpvar_95;
  tmpvar_95 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_90 * inversesqrt(lengthSq_91)));
  ndotl_90 = tmpvar_95;
  highp vec4 tmpvar_96;
  tmpvar_96 = (tmpvar_95 * (1.0/((1.0 + 
    (lengthSq_91 * lightAttenSq_87)
  ))));
  col_89 = (lightColor0_83 * tmpvar_96.x);
  col_89 = (col_89 + (lightColor1_84 * tmpvar_96.y));
  col_89 = (col_89 + (lightColor2_85 * tmpvar_96.z));
  col_89 = (col_89 + (lightColor3_86 * tmpvar_96.w));
  tmpvar_8 = ((x2_81 + (unity_SHC.xyz * 
    ((normal_80.x * normal_80.x) - (normal_80.y * normal_80.y))
  )) + col_89);
  tmpvar_9 = (unity_World2Shadow[0] * (_Object2World * tmpvar_15));
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_76;
  xlv_TEXCOORD1 = tmpvar_77;
  xlv_TEXCOORD2 = tmpvar_78;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_11;
  xlv_TEXCOORD5 = screenPos_62;
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD7 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_13.x = tmpvar_14.x;
  projUV_13.y = ((fract(tmpvar_14.y) * 0.0625) + unity_LODFade.y);
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_12 = tmpvar_16;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_17;
  x_17 = (tmpvar_10 - _Cutoff);
  if ((x_17 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_18;
  tmpvar_18 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_18.x, max (tmpvar_18.y, tmpvar_18.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_18 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_19;
  tmpvar_19 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float shadow_20;
  shadow_20 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD7.xyz) * (1.0 - _LightShadowData.x)));
  highp float tmpvar_21;
  tmpvar_21 = dot (xlv_TEXCOORD0.xyz, tmpvar_19);
  worldN_4.x = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (xlv_TEXCOORD1.xyz, tmpvar_19);
  worldN_4.y = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = dot (xlv_TEXCOORD2.xyz, tmpvar_19);
  worldN_4.z = tmpvar_23;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_20;
  mediump vec3 normalWorld_24;
  normalWorld_24 = worldN_4;
  mediump vec3 tmpvar_25;
  mediump vec3 tmpvar_26;
  mediump vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = normalWorld_24;
  mediump vec3 x1_28;
  x1_28.x = dot (unity_SHAr, tmpvar_27);
  x1_28.y = dot (unity_SHAg, tmpvar_27);
  x1_28.z = dot (unity_SHAb, tmpvar_27);
  tmpvar_26 = (xlv_TEXCOORD6 + x1_28);
  tmpvar_25 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_25;
  lowp vec4 c_29;
  lowp vec4 c_30;
  lowp float diff_31;
  mediump float tmpvar_32;
  tmpvar_32 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_31 = tmpvar_32;
  c_30.xyz = ((tmpvar_9 * tmpvar_25) * diff_31);
  c_30.w = tmpvar_10;
  c_29.w = c_30.w;
  c_29.xyz = (c_30.xyz + (tmpvar_9 * tmpvar_26));
  c_5.xyz = c_29.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec4 vs_TEXCOORD7;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
bool tb3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
mediump vec4 t16_7;
lowp vec3 t10_7;
mediump vec3 t16_8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec2 t12;
bool tb12;
highp float t15;
highp vec2 t24;
highp vec2 t28;
highp vec2 t30;
highp float t36;
highp float t37;
bool tb37;
highp float t39;
bool tb39;
highp float t40;
highp float t41;
mediump float t16_44;
void main()
{
    //Instruction 20833
    //MUL
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 20834
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 20835
    //ADD
    t12.x = t0.x + _Object2World[3].z;
    //Instruction 20836
    //ADD
    t24.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 20837
    //ADD
    t12.y = t24.x + in_NORMAL0.x;
    //Instruction 20838
    //FRC
    t12.xy = fract(t12.xy);
    //Instruction 20839
    //MAD
    t12.x = t12.y * 0.500000 + t12.x;
    //Instruction 20840
    //ADD
    t12.x = t12.x + -0.300000;
    //Instruction 20841
    //MUL
    t1.z = t12.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 20842
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 20843
    //LT
    tb12 = 0.0<t16_2;
    //Instruction 20844
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 20845
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 20846
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 20847
    //DP3
    t24.x = dot(t3.xyz, t3.xyz);
    //Instruction 20848
    //RSQ
    t24.x = inversesqrt(t24.x);
    //Instruction 20849
    //MUL
    t24.xy = t24.xx * t3.xz;
    //Instruction 20850
    //AND
    t24.xy = mix(vec2(0.0, 0.0), t24.xy, bvec2(tb12));
    //Instruction 20851
    //EQ
    tb37 = t16_2==5.000000;
    //Instruction 20852
    //LT
    tb3 = in_TEXCOORD0.x<0.500000;
    //Instruction 20853
    //AND
    t3.x = tb3 ? 0.750000 : float(0.0);
    //Instruction 20854
    //ADD
    t15 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 20855
    //MAD
    t3.x = t15 * _ST_WindFrondRipple.z + t3.x;
    //Instruction 20856
    //ADD
    t3.x = t3.x + 0.500000;
    //Instruction 20857
    //FRC
    t3.x = fract(t3.x);
    //Instruction 20858
    //MAD
    t3.x = t3.x * 2.000000 + -1.0;
    //Instruction 20859
    //MUL
    t15 = abs(t3.x) * abs(t3.x);
    //Instruction 20860
    //MAD
    t3.x = -abs(t3.x) * 2.000000 + 3.000000;
    //Instruction 20861
    //MAD
    t3.x = t15 * t3.x + -0.500000;
    //Instruction 20862
    //MUL
    t3.x = t3.x * in_TEXCOORD2.y;
    //Instruction 20863
    //DP2
    t3.x = dot(_ST_WindFrondRipple.yy, t3.xx);
    //Instruction 20864
    //MAD
    t3.xyz = t3.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    //Instruction 20865
    //MOVC
    t3.xyz = (bool(tb37)) ? t3.xyz : in_POSITION0.xyz;
    //Instruction 20866
    //GE
    tb39 = t16_2>=3.000000;
    //Instruction 20867
    //IF
    if(tb39){
        //Instruction 20868
        //IF
        if(tb37){
            //Instruction 20869
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 20870
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 20871
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 20872
            //DP3
            t37 = dot(t4.xyz, t4.xyz);
            //Instruction 20873
            //RSQ
            t37 = inversesqrt(t37);
            //Instruction 20874
            //MUL
            t4.xyz = vec3(t37) * t4.xyz;
            //Instruction 20875
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 20876
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 20877
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 20878
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 20879
            //ADD
            t37 = t0.x + _ST_WindBranch.x;
            //Instruction 20880
            //ADD
            t2.x = t37 + in_TEXCOORD0.w;
            //Instruction 20881
            //MAD
            t2.y = t37 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 20882
            //MUL
            t39 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 20883
            //MUL
            t2.z = t39 * 0.500000;
            //Instruction 20884
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 20885
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 20886
            //FRC
            t2 = fract(t2);
            //Instruction 20887
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 20888
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 20889
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 20890
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 20891
            //ADD
            t2 = t2 + t2;
            //Instruction 20892
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 20893
            //LT
            tb39 = t6.w<0.0;
            //Instruction 20894
            //MOV
            t6.y = (-t6.w);
            //Instruction 20895
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 20896
            //MOVC
            t6.xy = (bool(tb39)) ? t6.xy : t6.zw;
            //Instruction 20897
            //MAD
            t39 = (-t2.y) * t2.z + t6.x;
            //Instruction 20898
            //MAD
            t39 = t6.y * t39 + t6.w;
            //Instruction 20899
            //ADD
            t40 = (-t39) + t6.x;
            //Instruction 20900
            //MAD
            t39 = t6.y * t40 + t39;
            //Instruction 20901
            //MUL
            t39 = t39 * _ST_WindBranchTwitch.x;
            //Instruction 20902
            //ADD
            t40 = (-_ST_WindVector.w) + 1.0;
            //Instruction 20903
            //ADD
            t41 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 20904
            //MUL
            t41 = t2.x * t41;
            //Instruction 20905
            //MAD
            t39 = t39 * t40 + t41;
            //Instruction 20906
            //MAD
            t40 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 20907
            //MUL
            t39 = t39 * t40;
            //Instruction 20908
            //MUL
            t5.xyz = vec3(t39) * t5.xyz;
            //Instruction 20909
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 20910
            //MAD
            t6.x = t37 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 20911
            //MUL
            t37 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 20912
            //MAD
            t6.y = t37 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 20913
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 20914
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 20915
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 20916
            //MUL
            t30.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 20917
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 20918
            //MAD
            t6.xy = t30.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 20919
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 20920
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 20921
            //MUL
            t37 = t6.x * t6.y;
            //Instruction 20922
            //MAD
            t37 = (-t37) * _ST_WindTurbulences.x + 1.0;
            //Instruction 20923
            //MUL
            t39 = t2.w * _ST_WindVector.w;
            //Instruction 20924
            //MAD
            t37 = t39 * _ST_WindBranchWhip.x + t37;
            //Instruction 20925
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 20926
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 20927
            //MUL
            t4.xyz = vec3(t37) * t4.xyz;
            //Instruction 20928
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 20929
        //ELSE
        } else {
            //Instruction 20930
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 20931
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 20932
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 20933
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 20934
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 20935
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 20936
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 20937
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 20938
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 20939
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 20940
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 20941
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 20942
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 20943
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 20944
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 20945
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 20946
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 20947
            //LT
            tb0 = t2.w<0.0;
            //Instruction 20948
            //MOV
            t2.y = (-t2.w);
            //Instruction 20949
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 20950
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 20951
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 20952
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 20953
            //ADD
            t37 = (-t0.x) + t6.x;
            //Instruction 20954
            //MAD
            t0.x = t6.y * t37 + t0.x;
            //Instruction 20955
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 20956
            //ADD
            t37 = (-_ST_WindVector.w) + 1.0;
            //Instruction 20957
            //ADD
            t39 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 20958
            //MUL
            t39 = t39 * t5.x;
            //Instruction 20959
            //MAD
            t0.x = t0.x * t37 + t39;
            //Instruction 20960
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 20961
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 20962
        //ENDIF
        }
        //Instruction 20963
    //ENDIF
    }
    //Instruction 20964
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 20965
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 20966
    //DIV
    t37 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 20967
    //MAD
    t37 = (-t37) * 0.250000 + t3.y;
    //Instruction 20968
    //MAX
    t37 = max(t37, 0.0);
    //Instruction 20969
    //MUL
    t37 = t37 * _ST_WindGlobal.z;
    //Instruction 20970
    //NE
    tb39 = t37!=0.0;
    //Instruction 20971
    //LOG
    t4.x = log2(t37);
    //Instruction 20972
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 20973
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 20974
    //MOVC
    t37 = (tb39) ? t4.x : t37;
    //Instruction 20975
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 20976
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 20977
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 20978
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 20979
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 20980
    //MUL
    t28.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 20981
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 20982
    //MAD
    t4.xy = t28.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 20983
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 20984
    //MAD
    t39 = t4.y * t4.y + t4.x;
    //Instruction 20985
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 20986
    //MAD
    t39 = _ST_WindGlobal.y * t39 + t4.x;
    //Instruction 20987
    //MUL
    t37 = t37 * t39;
    //Instruction 20988
    //MAD
    t4.xz = t24.xy * vec2(t37) + t3.xz;
    //Instruction 20989
    //MOV
    t4.y = t3.y;
    //Instruction 20990
    //DP3
    t24.x = dot(t4.xyz, t4.xyz);
    //Instruction 20991
    //RSQ
    t24.x = inversesqrt(t24.x);
    //Instruction 20992
    //MUL
    t4.xyz = t24.xxx * t4.xyz;
    //Instruction 20993
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 20994
    //MOVC
    t0.xyz = (bool(tb12)) ? t0.xzw : t3.xyz;
    //Instruction 20995
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 20996
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 20997
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 20998
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 20999
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 21000
    //MUL
    t36 = t3.y * _ProjectionParams.x;
    //Instruction 21001
    //MUL
    t4.w = t36 * 0.500000;
    //Instruction 21002
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 21003
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 21004
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 21005
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 21006
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 21007
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 21008
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 21009
    //MUL
    t4.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 21010
    //MAD
    t4.xyz = _Object2World[0].xyz * t0.xxx + t4.xyz;
    //Instruction 21011
    //MAD
    t4.xyz = _Object2World[2].xyz * t0.zzz + t4.xyz;
    //Instruction 21012
    //MAD
    t4.xyz = _Object2World[3].xyz * in_POSITION0.www + t4.xyz;
    //Instruction 21013
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 21014
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 21015
    //MOV
    t2.zw = _World2Object[2].xx;
    //Instruction 21016
    //MOV
    t5.x = _World2Object[0].y;
    //Instruction 21017
    //MOV
    t5.y = _World2Object[1].y;
    //Instruction 21018
    //MOV
    t5.zw = _World2Object[2].yy;
    //Instruction 21019
    //MUL
    t5 = t5 * in_NORMAL0.yyyy;
    //Instruction 21020
    //MAD
    t2 = t2 * in_NORMAL0.xxxx + t5;
    //Instruction 21021
    //MOV
    t5.x = _World2Object[0].z;
    //Instruction 21022
    //MOV
    t5.y = _World2Object[1].z;
    //Instruction 21023
    //MOV
    t5.zw = _World2Object[2].zz;
    //Instruction 21024
    //MAD
    t2 = t5 * in_NORMAL0.zzzz + t2;
    //Instruction 21025
    //DP3
    t36 = dot(t2.xyw, t2.xyw);
    //Instruction 21026
    //RSQ
    t36 = inversesqrt(t36);
    //Instruction 21027
    //MUL
    t2 = vec4(t36) * t2;
    //Instruction 21028
    //MUL
    t5.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 21029
    //MAD
    t5.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t5.xyz;
    //Instruction 21030
    //MAD
    t5.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t5.xyz;
    //Instruction 21031
    //DP3
    t36 = dot(t5.xyz, t5.xyz);
    //Instruction 21032
    //RSQ
    t36 = inversesqrt(t36);
    //Instruction 21033
    //MUL
    t5.xyz = vec3(t36) * t5.xyz;
    //Instruction 21034
    //MUL
    t10_7.xyz = t2.wxy * t5.xyz;
    //Instruction 21035
    //MAD
    t10_7.xyz = t2.ywx * t5.yzx + (-t10_7.xyz);
    //Instruction 21036
    //MUL
    t6.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 21037
    //MUL
    t16_7 = t2.ywzx * t2;
    //Instruction 21038
    //DP4
    t16_8.x = dot(unity_SHBr, t16_7);
    //Instruction 21039
    //DP4
    t16_8.y = dot(unity_SHBg, t16_7);
    //Instruction 21040
    //DP4
    t16_8.z = dot(unity_SHBb, t16_7);
    //Instruction 21041
    //MUL
    t16_44 = t2.y * t2.y;
    //Instruction 21042
    //MAD
    t16_44 = t2.x * t2.x + (-t16_44);
    //Instruction 21043
    //MAD
    t16_8.xyz = unity_SHC.xyz * vec3(t16_44) + t16_8.xyz;
    //Instruction 21044
    //ADD
    t7 = (-t4.xxxx) + unity_4LightPosX0;
    //Instruction 21045
    //ADD
    t9 = (-t4.yyyy) + unity_4LightPosY0;
    //Instruction 21046
    //ADD
    t10 = (-t4.zzzz) + unity_4LightPosZ0;
    //Instruction 21047
    //MUL
    t11 = t9 * t9;
    //Instruction 21048
    //MAD
    t11 = t7 * t7 + t11;
    //Instruction 21049
    //MAD
    t11 = t10 * t10 + t11;
    //Instruction 21050
    //MUL
    t9 = t2.yyyy * t9;
    //Instruction 21051
    //MAD
    t7 = t7 * t2.xxxx + t9;
    //Instruction 21052
    //MAD
    t7 = t10 * t2.wwww + t7;
    //Instruction 21053
    //RSQ
    t9 = inversesqrt(t11);
    //Instruction 21054
    //MUL
    t7 = t7 * t9;
    //Instruction 21055
    //MAX
    t7 = max(t7, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 21056
    //MAD
    t9 = t11 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 21057
    //DIV
    t9 = vec4(1.0, 1.0, 1.0, 1.0) / t9;
    //Instruction 21058
    //MUL
    t7 = t7 * t9;
    //Instruction 21059
    //MUL
    t9.xyz = t7.yyy * unity_LightColor[1].xyz;
    //Instruction 21060
    //MAD
    t9.xyz = unity_LightColor[0].xyz * t7.xxx + t9.xyz;
    //Instruction 21061
    //MAD
    t9.xyz = unity_LightColor[2].xyz * t7.zzz + t9.xyz;
    //Instruction 21062
    //MAD
    t9.xyz = unity_LightColor[3].xyz * t7.www + t9.xyz;
    //Instruction 21063
    //ADD
    t9.xyz = t16_8.xyz + t9.xyz;
    //Instruction 21064
    //MUL
    t7 = t0.yyyy * _Object2World[1];
    //Instruction 21065
    //MAD
    t7 = _Object2World[0] * t0.xxxx + t7;
    //Instruction 21066
    //MAD
    t0 = _Object2World[2] * t0.zzzz + t7;
    //Instruction 21067
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 21068
    //MUL
    t7 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 21069
    //MAD
    t7 = unity_World2Shadow[0][0] * t0.xxxx + t7;
    //Instruction 21070
    //MAD
    t7 = unity_World2Shadow[0][2] * t0.zzzz + t7;
    //Instruction 21071
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t7;
    //Instruction 21072
    //MOV
    vs_TEXCOORD0.x = t5.z;
    //Instruction 21073
    //MOV
    vs_TEXCOORD0.y = t6.x;
    //Instruction 21074
    //MOV
    vs_TEXCOORD0.z = t2.x;
    //Instruction 21075
    //MOV
    vs_TEXCOORD0.w = t4.x;
    //Instruction 21076
    //MOV
    vs_TEXCOORD1.x = t5.x;
    //Instruction 21077
    //MOV
    vs_TEXCOORD1.y = t6.y;
    //Instruction 21078
    //MOV
    vs_TEXCOORD1.z = t2.y;
    //Instruction 21079
    //MOV
    vs_TEXCOORD1.w = t4.y;
    //Instruction 21080
    //MOV
    vs_TEXCOORD2.x = t5.y;
    //Instruction 21081
    //MOV
    vs_TEXCOORD2.y = t6.z;
    //Instruction 21082
    //MOV
    vs_TEXCOORD2.z = t2.w;
    //Instruction 21083
    //MOV
    vs_TEXCOORD2.w = t4.z;
    //Instruction 21084
    //MOV
    vs_TEXCOORD3.w = _Color.w;
    //Instruction 21085
    //MOV
    vs_TEXCOORD7 = t0;
    //Instruction 21086
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 21087
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 21088
    //MOV
    vs_TEXCOORD5.xyz = t3.xyz;
    //Instruction 21089
    //MOV
    vs_TEXCOORD6.xyz = t9.xyz;
    //Instruction 21090
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec4 vs_TEXCOORD7;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump float t16_6;
mediump vec3 t16_9;
mediump float t16_21;
void main()
{
    //Instruction 20789
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    //Instruction 20790
    //FRC
    t16_6 = fract(t16_0.y);
    //Instruction 20791
    //MOV
    t1.x = t16_0.x;
    //Instruction 20792
    //MAD
    t1.y = t16_6 * 0.062500 + unity_LODFade.y;
    //Instruction 20793
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 20794
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 20795
    //LT
    tb1 = t16_1<0.0;
    //Instruction 20796
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 20797
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    //Instruction 20798
    //MAD
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 20799
    //LT
    tb1 = t10_2.x<0.0;
    //Instruction 20800
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 20801
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 20802
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 20803
    //ADD
    t16_9.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 20804
    //MAD
    t16_9.xyz = vs_TEXCOORD4.zzz * t16_9.xyz + t10_0.xyz;
    //Instruction 20805
    //MAX
    t16_4.x = max(t16_9.z, t16_9.y);
    //Instruction 20806
    //MAX
    t16_4.x = max(t16_9.x, t16_4.x);
    //Instruction 20807
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 20808
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 20809
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_9.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 20810
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD3.xyz;
    //Instruction 20811
    //SAMPLE_C_LZ
    vec3 txVec58 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
    t16_21 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec58, 0.0);
    //Instruction 20812
    //ADD
    t16_4.x = (-_LightShadowData.x) + 1.0;
    //Instruction 20813
    //MAD
    t16_21 = t16_21 * t16_4.x + _LightShadowData.x;
    //Instruction 20814
    //MUL
    t16_4.xyz = vec3(t16_21) * _LightColor0.xyz;
    //Instruction 20815
    //MUL
    t16_4.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 20816
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 20817
    //MAD
    t10_2.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 20818
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    //Instruction 20819
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    //Instruction 20820
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    //Instruction 20821
    //MOV
    t0.w = 1.0;
    //Instruction 20822
    //DP4
    t16_5.x = dot(unity_SHAr, t0);
    //Instruction 20823
    //DP4
    t16_5.y = dot(unity_SHAg, t0);
    //Instruction 20824
    //DP4
    t16_5.z = dot(unity_SHAb, t0);
    //Instruction 20825
    //DP3
    t16_21 = dot(t0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 20826
    //MAX
    t16_21 = max(t16_21, 0.0);
    //Instruction 20827
    //ADD
    t16_5.xyz = t16_5.xyz + vs_TEXCOORD6.xyz;
    //Instruction 20828
    //MUL
    t16_3.xyz = t16_3.xyz * t16_5.xyz;
    //Instruction 20829
    //MAD
    t16_3.xyz = t16_4.xyz * vec3(t16_21) + t16_3.xyz;
    //Instruction 20830
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 20831
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 20832
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_3.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = tmpvar_1;
  tmpvar_10 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_11;
  highp vec3 vRotatedWindVector_12;
  highp vec3 FinalPosition_13;
  FinalPosition_13 = tmpvar_1.xyz;
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  mediump float tmpvar_15;
  tmpvar_15 = (_WindQuality * _WindEnabled);
  if ((tmpvar_15 > 0.0)) {
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedWindVector_12 = normalize((tmpvar_16 * _ST_WindVector.xyz));
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_11 = (normalize((tmpvar_17 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_13 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_15 > 1.0) && (tmpvar_15 < 5.0))) {
    highp float tmpvar_18;
    tmpvar_18 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_19;
    isBestWind_19 = (tmpvar_15 == 4.0);
    bool bLeaf2_20;
    bLeaf2_20 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_21;
    vPos_21 = FinalPosition_13;
    highp vec3 vDirection_22;
    vDirection_22 = tmpvar_2;
    highp float tmpvar_23;
    if (bLeaf2_20) {
      tmpvar_23 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_23 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_24;
    if (bLeaf2_20) {
      tmpvar_24 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_24 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_25;
    highp vec4 tmpvar_26;
    tmpvar_26.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_26.x = (tmpvar_23 + tmpvar_18);
    highp vec4 tmpvar_27;
    tmpvar_27 = abs(((
      fract((tmpvar_26 + 0.5))
     * 2.0) - 1.0));
    vPos_25 = (FinalPosition_13 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_24 * (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_22 = tmpvar_2;
    vPos_21 = vPos_25;
    if (isBestWind_19) {
      highp vec3 tmpvar_28;
      tmpvar_28 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_29;
      if (bLeaf2_20) {
        tmpvar_29 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_29 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_30;
      if (bLeaf2_20) {
        tmpvar_30 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_30 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_31;
      if (bLeaf2_20) {
        tmpvar_31 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_31 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_32;
      if (bLeaf2_20) {
        tmpvar_32 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_33;
      if (bLeaf2_20) {
        tmpvar_33 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_33 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_34;
      if (bLeaf2_20) {
        tmpvar_34 = bool(1);
      } else {
        tmpvar_34 = bool(1);
      };
      highp float fTwitch_35;
      highp vec3 vAxis_36;
      highp float fOsc_37;
      highp vec3 vOriginPos_38;
      highp vec3 tmpvar_39;
      tmpvar_39 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_40;
      tmpvar_40 = ((tmpvar_39.x + tmpvar_39.y) + tmpvar_39.z);
      highp vec4 tmpvar_41;
      tmpvar_41.x = (tmpvar_29 + tmpvar_40);
      tmpvar_41.y = ((tmpvar_29 * 0.75) - tmpvar_40);
      tmpvar_41.z = ((tmpvar_29 * 0.01) + tmpvar_40);
      tmpvar_41.w = (tmpvar_29 + tmpvar_40);
      highp vec4 tmpvar_42;
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      tmpvar_42 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      vOriginPos_38 = vPos_25;
      highp float tmpvar_44;
      tmpvar_44 = sqrt(dot (vPos_25, vPos_25));
      highp float fAngle_45;
      fAngle_45 = ((_glesMultiTexCoord2.x * tmpvar_31) * (tmpvar_42.x + (tmpvar_42.y * tmpvar_42.y)));
      highp vec2 vSinCos_46;
      vSinCos_46.x = sin(fAngle_45);
      vSinCos_46.y = cos(fAngle_45);
      highp float tmpvar_47;
      tmpvar_47 = (1.0 - vSinCos_46.y);
      highp mat3 tmpvar_48;
      tmpvar_48[0].x = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.x) + vSinCos_46.y);
      tmpvar_48[0].y = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.y) + (vSinCos_46.x * tmpvar_28.z));
      tmpvar_48[0].z = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.z) - (vSinCos_46.x * tmpvar_28.y));
      tmpvar_48[1].x = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.y) - (vSinCos_46.x * tmpvar_28.z));
      tmpvar_48[1].y = (((tmpvar_47 * tmpvar_28.y) * tmpvar_28.y) + vSinCos_46.y);
      tmpvar_48[1].z = (((tmpvar_47 * tmpvar_28.y) * tmpvar_28.z) + (vSinCos_46.x * tmpvar_28.x));
      tmpvar_48[2].x = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.z) + (vSinCos_46.x * tmpvar_28.y));
      tmpvar_48[2].y = (((tmpvar_47 * tmpvar_28.y) * tmpvar_28.z) - (vSinCos_46.x * tmpvar_28.x));
      tmpvar_48[2].z = (((tmpvar_47 * tmpvar_28.z) * tmpvar_28.z) + vSinCos_46.y);
      highp vec3 tmpvar_49;
      tmpvar_49 = ((tmpvar_28.yzx * vRotatedWindVector_12.zxy) - (tmpvar_28.zxy * vRotatedWindVector_12.yzx));
      vAxis_36.xz = tmpvar_49.xz;
      highp float tmpvar_50;
      tmpvar_50 = clamp (dot (vRotatedWindVector_12, tmpvar_28), -1.0, 1.0);
      vAxis_36.y = (tmpvar_49.y + tmpvar_50);
      highp vec3 tmpvar_51;
      tmpvar_51 = normalize(vAxis_36);
      vAxis_36 = tmpvar_51;
      highp float tmpvar_52;
      tmpvar_52 = (1.570796 - (sign(tmpvar_50) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_50))) * (1.570796 + (abs(tmpvar_50) * (-0.2146018 + 
          (abs(tmpvar_50) * (0.08656672 + (abs(tmpvar_50) * -0.03102955)))
        ))))
      )));
      fOsc_37 = (tmpvar_42.y - (tmpvar_42.x * tmpvar_42.x));
      fTwitch_35 = 0.0;
      if (tmpvar_34) {
        highp float fTime_53;
        fTime_53 = (tmpvar_33.z + tmpvar_40);
        highp vec4 tmpvar_54;
        tmpvar_54.zw = vec2(0.0, 0.0);
        tmpvar_54.x = fTime_53;
        tmpvar_54.y = (0.87 * fTime_53);
        highp vec4 tmpvar_55;
        highp vec4 tmpvar_56;
        tmpvar_56 = abs(((
          fract((tmpvar_54 + 0.5))
         * 2.0) - 1.0));
        tmpvar_55 = (((
          (tmpvar_56 * tmpvar_56)
         * 
          (3.0 - (2.0 * tmpvar_56))
        ) - 0.5) * 2.0);
        fTwitch_35 = (tmpvar_33.x * pow (clamp (
          ((((tmpvar_55.x * tmpvar_55.y) * tmpvar_55.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_33.y));
      };
      highp float fAngle_57;
      fAngle_57 = (_glesMultiTexCoord2.x * ((
        (tmpvar_52 * tmpvar_32)
       + 
        (fOsc_37 * tmpvar_30)
      ) + fTwitch_35));
      highp vec2 vSinCos_58;
      vSinCos_58.x = sin(fAngle_57);
      vSinCos_58.y = cos(fAngle_57);
      highp float tmpvar_59;
      tmpvar_59 = (1.0 - vSinCos_58.y);
      highp mat3 tmpvar_60;
      tmpvar_60[0].x = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.x) + vSinCos_58.y);
      tmpvar_60[0].y = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.y) + (vSinCos_58.x * tmpvar_51.z));
      tmpvar_60[0].z = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.z) - (vSinCos_58.x * tmpvar_51.y));
      tmpvar_60[1].x = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.y) - (vSinCos_58.x * tmpvar_51.z));
      tmpvar_60[1].y = (((tmpvar_59 * tmpvar_51.y) * tmpvar_51.y) + vSinCos_58.y);
      tmpvar_60[1].z = (((tmpvar_59 * tmpvar_51.y) * tmpvar_51.z) + (vSinCos_58.x * tmpvar_51.x));
      tmpvar_60[2].x = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.z) + (vSinCos_58.x * tmpvar_51.y));
      tmpvar_60[2].y = (((tmpvar_59 * tmpvar_51.y) * tmpvar_51.z) - (vSinCos_58.x * tmpvar_51.x));
      tmpvar_60[2].z = (((tmpvar_59 * tmpvar_51.z) * tmpvar_51.z) + vSinCos_58.y);
      highp mat3 tmpvar_61;
      tmpvar_61 = (tmpvar_48 * tmpvar_60);
      vOriginPos_38 = (normalize((tmpvar_61 * vPos_25)) * tmpvar_44);
      vDirection_22 = (tmpvar_61 * _glesNormal);
      vPos_21 = vOriginPos_38;
    };
    tmpvar_10 = vDirection_22;
    FinalPosition_13 = vPos_21;
  };
  FinalPosition_13 = (FinalPosition_13 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_15 >= 3.0)) {
    highp vec3 vPos_62;
    vPos_62 = FinalPosition_13;
    if ((tmpvar_15 == 5.0)) {
      highp vec3 vPos_63;
      vPos_63 = FinalPosition_13;
      highp float fTime_64;
      highp float fAdherenceScale_65;
      highp vec3 vWindVector_66;
      vWindVector_66 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_64 = (_ST_WindBranch.x + (tmpvar_14.x + tmpvar_14.y));
      highp vec4 vOscillations_67;
      highp float fOscillation_68;
      fOscillation_68 = 1.0;
      highp float fAmount_69;
      highp float fTarget_70;
      highp vec4 tmpvar_71;
      tmpvar_71.x = (fTime_64 + _glesMultiTexCoord0.w);
      tmpvar_71.y = ((fTime_64 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_71.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_64 + _glesMultiTexCoord0.w));
      tmpvar_71.w = ((fTime_64 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_72;
      tmpvar_72 = abs(((
        fract((tmpvar_71 + 0.5))
       * 2.0) - 1.0));
      vOscillations_67 = (((
        (tmpvar_72 * tmpvar_72)
       * 
        (3.0 - (2.0 * tmpvar_72))
      ) - 0.5) * 2.0);
      highp float tmpvar_73;
      tmpvar_73 = (vOscillations_67.y * vOscillations_67.z);
      fTarget_70 = 1.0;
      fAmount_69 = tmpvar_73;
      if ((tmpvar_73 < 0.0)) {
        fTarget_70 = -1.0;
        fAmount_69 = -(tmpvar_73);
      };
      fOscillation_68 = (((
        mix (mix (tmpvar_73, fTarget_70, fAmount_69), fTarget_70, fAmount_69)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_67.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_68 = (fOscillation_68 * (1.0 + (vOscillations_67.w * _ST_WindBranchWhip.x)));
      vPos_63 = (FinalPosition_13 + ((vWindVector_66 * fOscillation_68) * _ST_WindBranch.y));
      highp vec4 tmpvar_74;
      tmpvar_74.zw = vec2(0.0, 0.0);
      tmpvar_74.x = ((fTime_64 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_74.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_75;
      highp vec4 tmpvar_76;
      tmpvar_76 = abs(((
        fract((tmpvar_74 + 0.5))
       * 2.0) - 1.0));
      tmpvar_75 = (((
        (tmpvar_76 * tmpvar_76)
       * 
        (3.0 - (2.0 * tmpvar_76))
      ) - 0.5) * 2.0);
      fAdherenceScale_65 = (1.0 - ((tmpvar_75.x * tmpvar_75.y) * (
        (tmpvar_75.x * tmpvar_75.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_65 = (fAdherenceScale_65 + ((vOscillations_67.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_63 = (vPos_63 + ((
        ((vRotatedBranchAnchor_11 - vPos_63) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_65) * _glesMultiTexCoord0.z));
      vPos_62 = vPos_63;
    } else {
      highp vec3 vPos_77;
      vPos_77 = vPos_62;
      highp float fTime_78;
      highp vec3 vWindVector_79;
      vWindVector_79 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_78 = (_ST_WindBranch.x + (tmpvar_14.x + tmpvar_14.y));
      highp vec4 vOscillations_80;
      highp float fOscillation_81;
      fOscillation_81 = 1.0;
      highp float fAmount_82;
      highp float fTarget_83;
      highp vec4 tmpvar_84;
      tmpvar_84.w = 0.0;
      tmpvar_84.x = (fTime_78 + _glesMultiTexCoord0.w);
      tmpvar_84.y = ((fTime_78 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_84.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_78 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_85;
      tmpvar_85 = abs(((
        fract((tmpvar_84 + 0.5))
       * 2.0) - 1.0));
      vOscillations_80 = (((
        (tmpvar_85 * tmpvar_85)
       * 
        (3.0 - (2.0 * tmpvar_85))
      ) - 0.5) * 2.0);
      highp float tmpvar_86;
      tmpvar_86 = (vOscillations_80.y * vOscillations_80.z);
      fTarget_83 = 1.0;
      fAmount_82 = tmpvar_86;
      if ((tmpvar_86 < 0.0)) {
        fTarget_83 = -1.0;
        fAmount_82 = -(tmpvar_86);
      };
      fOscillation_81 = (((
        mix (mix (tmpvar_86, fTarget_83, fAmount_82), fTarget_83, fAmount_82)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_80.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_77 = (vPos_62 + ((vWindVector_79 * fOscillation_81) * _ST_WindBranch.y));
      vPos_62 = vPos_77;
    };
    FinalPosition_13 = vPos_62;
  };
  if ((tmpvar_15 > 0.0)) {
    highp vec3 vPos_87;
    vPos_87 = FinalPosition_13;
    highp float fMoveAmount_88;
    highp float fAdjust_89;
    highp float fLength_90;
    fLength_90 = sqrt(dot (FinalPosition_13, FinalPosition_13));
    highp float tmpvar_91;
    tmpvar_91 = (max ((FinalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_89 = tmpvar_91;
    if ((tmpvar_91 != 0.0)) {
      fAdjust_89 = pow (tmpvar_91, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_92;
    tmpvar_92.zw = vec2(0.0, 0.0);
    tmpvar_92.x = (tmpvar_14.x + _ST_WindGlobal.x);
    tmpvar_92.y = (tmpvar_14.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_93;
    highp vec4 tmpvar_94;
    tmpvar_94 = abs(((
      fract((tmpvar_92 + 0.5))
     * 2.0) - 1.0));
    tmpvar_93 = (((
      (tmpvar_94 * tmpvar_94)
     * 
      (3.0 - (2.0 * tmpvar_94))
    ) - 0.5) * 2.0);
    fMoveAmount_88 = ((_ST_WindGlobal.y * (tmpvar_93.x + 
      (tmpvar_93.y * tmpvar_93.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_88 = (fMoveAmount_88 * fAdjust_89);
    vPos_87.xz = (FinalPosition_13.xz + (vRotatedWindVector_12.xz * fMoveAmount_88));
    vPos_87 = (normalize(vPos_87) * fLength_90);
    FinalPosition_13 = vPos_87;
  };
  tmpvar_9.xyz = FinalPosition_13;
  highp vec4 hPos_95;
  hPos_95 = (glstate_matrix_mvp * tmpvar_9);
  mediump vec3 screenPos_96;
  highp vec4 o_97;
  highp vec4 tmpvar_98;
  tmpvar_98 = (hPos_95 * 0.5);
  highp vec2 tmpvar_99;
  tmpvar_99.x = tmpvar_98.x;
  tmpvar_99.y = (tmpvar_98.y * _ProjectionParams.x);
  o_97.xy = (tmpvar_99 + tmpvar_98.w);
  o_97.zw = hPos_95.zw;
  highp vec3 tmpvar_100;
  tmpvar_100 = o_97.xyw;
  screenPos_96 = tmpvar_100;
  screenPos_96.xy = (screenPos_96.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_7;
  highp vec4 v_101;
  v_101.x = _World2Object[0].x;
  v_101.y = _World2Object[1].x;
  v_101.z = _World2Object[2].x;
  v_101.w = _World2Object[3].x;
  highp vec4 v_102;
  v_102.x = _World2Object[0].y;
  v_102.y = _World2Object[1].y;
  v_102.z = _World2Object[2].y;
  v_102.w = _World2Object[3].y;
  highp vec4 v_103;
  v_103.x = _World2Object[0].z;
  v_103.y = _World2Object[1].z;
  v_103.z = _World2Object[2].z;
  v_103.w = _World2Object[3].z;
  highp vec3 tmpvar_104;
  tmpvar_104 = normalize(((
    (v_101.xyz * tmpvar_10.x)
   + 
    (v_102.xyz * tmpvar_10.y)
  ) + (v_103.xyz * tmpvar_10.z)));
  worldNormal_4 = tmpvar_104;
  tmpvar_5 = worldNormal_4;
  lowp vec4 tmpvar_105;
  tmpvar_105.w = 1.0;
  tmpvar_105.xyz = worldNormal_4;
  mediump vec4 normal_106;
  normal_106 = tmpvar_105;
  mediump vec3 x2_107;
  mediump vec4 tmpvar_108;
  tmpvar_108 = (normal_106.xyzz * normal_106.yzzx);
  x2_107.x = dot (unity_SHBr, tmpvar_108);
  x2_107.y = dot (unity_SHBg, tmpvar_108);
  x2_107.z = dot (unity_SHBb, tmpvar_108);
  gl_Position = (glstate_matrix_mvp * tmpvar_9);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_9).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = screenPos_96;
  xlv_TEXCOORD5 = (x2_107 + (unity_SHC.xyz * (
    (normal_106.x * normal_106.x)
   - 
    (normal_106.y * normal_106.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_11.x = tmpvar_12.x;
  projUV_11.y = ((fract(tmpvar_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_14;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_15;
  x_15 = (tmpvar_9 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_16;
  normalWorld_16 = tmpvar_4;
  mediump vec3 tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = normalWorld_16;
  mediump vec3 x1_19;
  x1_19.x = dot (unity_SHAr, tmpvar_18);
  x1_19.y = dot (unity_SHAg, tmpvar_18);
  x1_19.z = dot (unity_SHAb, tmpvar_18);
  tmpvar_17 = (xlv_TEXCOORD5 + x1_19);
  lowp vec4 c_20;
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_22 = tmpvar_23;
  c_21.xyz = ((tmpvar_8 * tmpvar_1) * diff_22);
  c_21.w = tmpvar_9;
  c_20.w = c_21.w;
  c_20.xyz = (c_21.xyz + (tmpvar_8 * tmpvar_17));
  c_3.xyz = c_20.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
highp vec3 t1;
bvec2 tb1;
highp vec4 t2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
mediump vec3 t16_14;
highp vec3 t16;
highp int ti16;
highp vec3 t17;
bool tb17;
highp vec3 t22;
highp float t31;
bool tb31;
highp vec2 t34;
highp float t35;
highp vec2 t36;
highp float t46;
bool tb46;
highp float t47;
bool tb47;
highp float t48;
bool tb48;
highp float t49;
mediump float t16_59;
void main()
{
    //Instruction 21439
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 21440
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 21441
    //LT
    tb1.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), t16_0.xxxx).xy;
    //Instruction 21442
    //MUL
    t2.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 21443
    //MAD
    t2.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t2.xyz;
    //Instruction 21444
    //MAD
    t2.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t2.xyz;
    //Instruction 21445
    //DP3
    t31 = dot(t2.xyz, t2.xyz);
    //Instruction 21446
    //RSQ
    t31 = inversesqrt(t31);
    //Instruction 21447
    //MUL
    t2.xyz = vec3(t31) * t2.xyz;
    //Instruction 21448
    //AND
    t2.xyz = mix(vec3(0.0, 0.0, 0.0), t2.xyz, tb1.xxx);
    //Instruction 21449
    //ADD
    t3.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 21450
    //LT
    tb31 = t16_0.x<5.000000;
    //Instruction 21451
    //AND
    ti16 = int(uint(tb31) & uint(tb1.y));
    //Instruction 21452
    //IF
    if((uint(ti16))!=uint(0u)){
        //Instruction 21453
        //ADD
        t16.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 21454
        //EQ
        tb31 = t16_0.x==4.000000;
        //Instruction 21455
        //LT
        tb46 = 0.0<in_TEXCOORD2.w;
        //Instruction 21456
        //MOVC
        t4.xy = (bool(tb46)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 21457
        //ADD
        t16.x = t16.x + t4.x;
        //Instruction 21458
        //ADD
        t16.x = t16.x + 0.500000;
        //Instruction 21459
        //FRC
        t16.x = fract(t16.x);
        //Instruction 21460
        //MAD
        t16.x = t16.x * 2.000000 + -1.0;
        //Instruction 21461
        //MUL
        t47 = abs(t16.x) * abs(t16.x);
        //Instruction 21462
        //MAD
        t16.x = -abs(t16.x) * 2.000000 + 3.000000;
        //Instruction 21463
        //MAD
        t16.x = t47 * t16.x + -0.500000;
        //Instruction 21464
        //DP2
        t16.x = dot(t16.xx, t4.yy);
        //Instruction 21465
        //MUL
        t4.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 21466
        //FRC
        t4.xyz = fract(t4.xyz);
        //Instruction 21467
        //MAD
        t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 21468
        //MUL
        t4.xyz = t16.xxx * t4.xyz;
        //Instruction 21469
        //MAD
        t3.xyz = t4.xyz * in_TEXCOORD2.xxx + t3.xyz;
        //Instruction 21470
        //IF
        if(tb31){
            //Instruction 21471
            //MUL
            t4 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 21472
            //FRC
            t4 = fract(t4);
            //Instruction 21473
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 21474
            //MOVC
            t5 = (bool(tb46)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 21475
            //MOVC
            t16.xyz = (bool(tb46)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 21476
            //MUL
            t47 = t4.w * 3.000000;
            //Instruction 21477
            //MAD
            t6.y = t4.w * 3.000000 + t5.x;
            //Instruction 21478
            //MAD
            t6.x = t5.x * 0.750000 + (-t47);
            //Instruction 21479
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 21480
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 21481
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 21482
            //MUL
            t36.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 21483
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 21484
            //MAD
            t6.xy = t36.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 21485
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 21486
            //DP3
            t47 = dot(t3.xyz, t3.xyz);
            //Instruction 21487
            //SQRT
            t47 = sqrt(t47);
            //Instruction 21488
            //MAD
            t48 = t6.x * t6.x + t6.y;
            //Instruction 21489
            //MUL
            t5.x = t5.z * in_TEXCOORD2.x;
            //Instruction 21490
            //MUL
            t48 = t48 * t5.x;
            //Instruction 21491
            //SINCOS
            t5.x = sin(t48);
            t7.x = cos(t48);
            //Instruction 21492
            //ADD
            t48 = (-t7.x) + 1.0;
            //Instruction 21493
            //MUL
            t8 = t4.xxxy * vec4(t48);
            //Instruction 21494
            //MUL
            t22.xyz = t4.zxy * t5.xxx;
            //Instruction 21495
            //MAD
            t9.xy = t8.zy * t4.zy + t22.zx;
            //Instruction 21496
            //MAD
            t10.xy = t8.xw * t4.xy + t7.xx;
            //Instruction 21497
            //MAD
            t9.z = t8.w * t4.z + (-t22.y);
            //Instruction 21498
            //MAD
            t11.xy = t8.yz * t4.yz + (-t22.xz);
            //Instruction 21499
            //MAD
            t11.z = t8.w * t4.z + t22.y;
            //Instruction 21500
            //MUL
            t5.x = t4.z * t4.z;
            //Instruction 21501
            //MAD
            t11.w = t5.x * t48 + t7.x;
            //Instruction 21502
            //MUL
            t7.xyz = t2.yzx * t4.zxy;
            //Instruction 21503
            //MAD
            t7.xyz = t4.yzx * t2.zxy + (-t7.xyz);
            //Instruction 21504
            //DP3
            t17.x = dot(t2.xyz, t4.xyz);
            //Instruction 21505
            //MAX
            t17.x = max(t17.x, -1.0);
            //Instruction 21506
            //MIN
            t17.x = min(t17.x, 1.0);
            //Instruction 21507
            //ADD
            t7.w = t17.x + t7.y;
            //Instruction 21508
            //DP3
            t48 = dot(t7.xzw, t7.xzw);
            //Instruction 21509
            //RSQ
            t48 = inversesqrt(t48);
            //Instruction 21510
            //MUL
            t4.xyz = vec3(t48) * t7.zxw;
            //Instruction 21511
            //ADD
            t48 = -abs(t17.x) + 1.0;
            //Instruction 21512
            //SQRT
            t48 = sqrt(t48);
            //Instruction 21513
            //MAD
            t5.x = abs(t17.x) * -0.018729 + 0.074261;
            //Instruction 21514
            //MAD
            t5.x = t5.x * abs(t17.x) + -0.212114;
            //Instruction 21515
            //MAD
            t5.x = t5.x * abs(t17.x) + 1.570729;
            //Instruction 21516
            //MUL
            t35 = t48 * t5.x;
            //Instruction 21517
            //MAD
            t35 = t35 * -2.000000 + 3.141593;
            //Instruction 21518
            //LT
            tb17 = t17.x<(-t17.x);
            //Instruction 21519
            //AND
            t17.x = tb17 ? t35 : float(0.0);
            //Instruction 21520
            //MAD
            t17.x = t5.x * t48 + t17.x;
            //Instruction 21521
            //MAD
            t48 = (-t6.y) * t6.y + t6.x;
            //Instruction 21522
            //MAD
            t6.x = t4.w * 3.000000 + t16.z;
            //Instruction 21523
            //MUL
            t6.y = t6.x * 0.870000;
            //Instruction 21524
            //ADD
            t5.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 21525
            //FRC
            t5.xz = fract(t5.xz);
            //Instruction 21526
            //MAD
            t5.xz = t5.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 21527
            //MUL
            t6.xy = abs(t5.xz) * abs(t5.xz);
            //Instruction 21528
            //MAD
            t5.xz = -abs(t5.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 21529
            //MAD
            t5.xz = t6.xy * t5.xz + vec2(-0.500000, -0.500000);
            //Instruction 21530
            //ADD
            t5.xz = t5.xz + t5.xz;
            //Instruction 21531
            //MUL
            t46 = t5.z * t5.z;
            //Instruction 21532
            //MAD
            t46 = t46 * t5.x + 1.0;
            //Instruction 21533
            //MUL
            t46 = t46 * 0.500000;
            t46 = clamp(t46, 0.0, 1.0);
            //Instruction 21534
            //LOG
            t46 = log2(t46);
            //Instruction 21535
            //MUL
            t31 = t46 * t16.y;
            //Instruction 21536
            //EXP
            t31 = exp2(t31);
            //Instruction 21537
            //MUL
            t46 = t5.y * t48;
            //Instruction 21538
            //MAD
            t46 = t17.x * t5.w + t46;
            //Instruction 21539
            //MAD
            t16.x = t16.x * t31 + t46;
            //Instruction 21540
            //MUL
            t16.x = t16.x * in_TEXCOORD2.x;
            //Instruction 21541
            //SINCOS
            t5.x = sin(t16.x);
            t6.x = cos(t16.x);
            //Instruction 21542
            //ADD
            t16.x = (-t6.x) + 1.0;
            //Instruction 21543
            //MUL
            t7 = vec4(t4.y * t16.x, t4.y * t16.x, t4.y * t16.x, t4.z * t16.x);
            //Instruction 21544
            //MUL
            t5.xyz = t4.xyz * t5.xxx;
            //Instruction 21545
            //MAD
            t8.xy = t7.zy * t4.xz + t5.zx;
            //Instruction 21546
            //MAD
            t12.xy = t7.xw * t4.yz + t6.xx;
            //Instruction 21547
            //MAD
            t8.z = t7.w * t4.x + (-t5.y);
            //Instruction 21548
            //MAD
            t13.xy = t7.yz * t4.zx + (-t5.xz);
            //Instruction 21549
            //MAD
            t13.z = t7.w * t4.x + t5.y;
            //Instruction 21550
            //MUL
            t31 = t4.x * t4.x;
            //Instruction 21551
            //MAD
            t8.w = t31 * t16.x + t6.x;
            //Instruction 21552
            //MOV
            t10.z = t11.x;
            //Instruction 21553
            //MOV
            t10.w = t9.x;
            //Instruction 21554
            //MOV
            t12.z = t8.y;
            //Instruction 21555
            //MOV
            t12.w = t13.y;
            //Instruction 21556
            //DP3
            t4.x = dot(t10.xzw, t12.xzw);
            //Instruction 21557
            //MOV
            t13.w = t12.y;
            //Instruction 21558
            //DP3
            t4.y = dot(t10.xwz, t13.xzw);
            //Instruction 21559
            //DP3
            t4.z = dot(t10.xzw, t8.xzw);
            //Instruction 21560
            //MOV
            t9.w = t10.y;
            //Instruction 21561
            //DP3
            t5.x = dot(t9.ywz, t12.xzw);
            //Instruction 21562
            //DP3
            t5.y = dot(t9.yzw, t13.xzw);
            //Instruction 21563
            //DP3
            t5.z = dot(t9.ywz, t8.xzw);
            //Instruction 21564
            //DP3
            t6.x = dot(t11.yzw, t12.xzw);
            //Instruction 21565
            //DP3
            t6.y = dot(t11.ywz, t13.xzw);
            //Instruction 21566
            //DP3
            t6.z = dot(t11.yzw, t8.xzw);
            //Instruction 21567
            //DP3
            t16.x = dot(t4.xyz, in_NORMAL0.xyz);
            //Instruction 21568
            //DP3
            t16.y = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 21569
            //DP3
            t16.z = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 21570
            //DP3
            t4.x = dot(t4.xyz, t3.xyz);
            //Instruction 21571
            //DP3
            t4.y = dot(t5.xyz, t3.xyz);
            //Instruction 21572
            //DP3
            t4.z = dot(t6.xyz, t3.xyz);
            //Instruction 21573
            //DP3
            t17.x = dot(t4.xyz, t4.xyz);
            //Instruction 21574
            //RSQ
            t17.x = inversesqrt(t17.x);
            //Instruction 21575
            //MUL
            t4.xyz = t17.xxx * t4.xyz;
            //Instruction 21576
            //MUL
            t3.xyz = vec3(t47) * t4.xyz;
            //Instruction 21577
        //ELSE
        } else {
            //Instruction 21578
            //MOV
            t16.xyz = in_NORMAL0.xyz;
            //Instruction 21579
        //ENDIF
        }
        //Instruction 21580
    //ELSE
    } else {
        //Instruction 21581
        //MOV
        t16.xyz = in_NORMAL0.xyz;
        //Instruction 21582
    //ENDIF
    }
    //Instruction 21583
    //ADD
    t3.xyz = t3.xyz + in_TEXCOORD1.xyz;
    //Instruction 21584
    //GE
    tb17 = t16_0.x>=3.000000;
    //Instruction 21585
    //IF
    if(tb17){
        //Instruction 21586
        //EQ
        tb17 = t16_0.x==5.000000;
        //Instruction 21587
        //IF
        if(tb17){
            //Instruction 21588
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 21589
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 21590
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 21591
            //DP3
            t17.x = dot(t4.xyz, t4.xyz);
            //Instruction 21592
            //RSQ
            t17.x = inversesqrt(t17.x);
            //Instruction 21593
            //MUL
            t4.xyz = t17.xxx * t4.xyz;
            //Instruction 21594
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 21595
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 21596
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 21597
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 21598
            //ADD
            t17.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 21599
            //ADD
            t17.x = t17.x + _ST_WindBranch.x;
            //Instruction 21600
            //ADD
            t0.x = t17.x + in_TEXCOORD0.w;
            //Instruction 21601
            //MAD
            t0.y = t17.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 21602
            //MUL
            t47 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 21603
            //MUL
            t0.z = t47 * 0.500000;
            //Instruction 21604
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 21605
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 21606
            //FRC
            t0 = fract(t0);
            //Instruction 21607
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 21608
            //MUL
            t6 = abs(t0) * abs(t0);
            //Instruction 21609
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 21610
            //MAD
            t0 = t6 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 21611
            //ADD
            t0 = t0 + t0;
            //Instruction 21612
            //MUL
            t6.w = t0.z * t0.y;
            //Instruction 21613
            //LT
            tb47 = t6.w<0.0;
            //Instruction 21614
            //MOV
            t6.y = (-t6.w);
            //Instruction 21615
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 21616
            //MOVC
            t6.xy = (bool(tb47)) ? t6.xy : t6.zw;
            //Instruction 21617
            //MAD
            t47 = (-t0.y) * t0.z + t6.x;
            //Instruction 21618
            //MAD
            t47 = t6.y * t47 + t6.w;
            //Instruction 21619
            //ADD
            t48 = (-t47) + t6.x;
            //Instruction 21620
            //MAD
            t47 = t6.y * t48 + t47;
            //Instruction 21621
            //MUL
            t47 = t47 * _ST_WindBranchTwitch.x;
            //Instruction 21622
            //ADD
            t48 = (-_ST_WindVector.w) + 1.0;
            //Instruction 21623
            //ADD
            t49 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 21624
            //MUL
            t49 = t0.x * t49;
            //Instruction 21625
            //MAD
            t47 = t47 * t48 + t49;
            //Instruction 21626
            //MAD
            t48 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 21627
            //MUL
            t47 = t47 * t48;
            //Instruction 21628
            //MUL
            t5.xyz = vec3(t47) * t5.xyz;
            //Instruction 21629
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 21630
            //MAD
            t6.x = t17.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 21631
            //MUL
            t17.x = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 21632
            //MAD
            t6.y = t17.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 21633
            //ADD
            t17.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 21634
            //FRC
            t17.xz = fract(t17.xz);
            //Instruction 21635
            //MAD
            t17.xz = t17.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 21636
            //MUL
            t6.xy = abs(t17.xz) * abs(t17.xz);
            //Instruction 21637
            //MAD
            t17.xz = -abs(t17.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 21638
            //MAD
            t17.xz = t6.xy * t17.xz + vec2(-0.500000, -0.500000);
            //Instruction 21639
            //ADD
            t17.xz = t17.xz + t17.xz;
            //Instruction 21640
            //MUL
            t17.xz = t17.xz * t17.xz;
            //Instruction 21641
            //MUL
            t17.x = t17.x * t17.z;
            //Instruction 21642
            //MAD
            t17.x = (-t17.x) * _ST_WindTurbulences.x + 1.0;
            //Instruction 21643
            //MUL
            t47 = t0.w * _ST_WindVector.w;
            //Instruction 21644
            //MAD
            t17.x = t47 * _ST_WindBranchWhip.x + t17.x;
            //Instruction 21645
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 21646
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 21647
            //MUL
            t4.xyz = t17.xxx * t4.xyz;
            //Instruction 21648
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 21649
        //ELSE
        } else {
            //Instruction 21650
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 21651
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 21652
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 21653
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 21654
            //ADD
            t17.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 21655
            //ADD
            t17.x = t17.x + _ST_WindBranch.x;
            //Instruction 21656
            //ADD
            t5.x = t17.x + in_TEXCOORD0.w;
            //Instruction 21657
            //MAD
            t5.y = t17.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 21658
            //MUL
            t17.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 21659
            //MUL
            t5.z = t17.x * 0.500000;
            //Instruction 21660
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 21661
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 21662
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 21663
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 21664
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 21665
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 21666
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 21667
            //MUL
            t0.w = t5.z * t5.y;
            //Instruction 21668
            //LT
            tb17 = t0.w<0.0;
            //Instruction 21669
            //MOV
            t0.y = (-t0.w);
            //Instruction 21670
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 21671
            //MOVC
            t17.xz = (bool(tb17)) ? t0.xy : t0.zw;
            //Instruction 21672
            //MAD
            t48 = (-t5.y) * t5.z + t17.x;
            //Instruction 21673
            //MAD
            t48 = t17.z * t48 + t0.w;
            //Instruction 21674
            //ADD
            t17.x = t17.x + (-t48);
            //Instruction 21675
            //MAD
            t17.x = t17.z * t17.x + t48;
            //Instruction 21676
            //MUL
            t17.x = t17.x * _ST_WindBranchTwitch.x;
            //Instruction 21677
            //ADD
            t47 = (-_ST_WindVector.w) + 1.0;
            //Instruction 21678
            //ADD
            t48 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 21679
            //MUL
            t48 = t48 * t5.x;
            //Instruction 21680
            //MAD
            t17.x = t17.x * t47 + t48;
            //Instruction 21681
            //MUL
            t4.xyz = t17.xxx * t4.xyz;
            //Instruction 21682
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 21683
        //ENDIF
        }
        //Instruction 21684
    //ENDIF
    }
    //Instruction 21685
    //DP3
    t17.x = dot(t3.xyz, t3.xyz);
    //Instruction 21686
    //SQRT
    t17.x = sqrt(t17.x);
    //Instruction 21687
    //DIV
    t47 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 21688
    //MAD
    t47 = (-t47) * 0.250000 + t3.y;
    //Instruction 21689
    //MAX
    t47 = max(t47, 0.0);
    //Instruction 21690
    //MUL
    t47 = t47 * _ST_WindGlobal.z;
    //Instruction 21691
    //NE
    tb48 = t47!=0.0;
    //Instruction 21692
    //LOG
    t4.x = log2(t47);
    //Instruction 21693
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 21694
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 21695
    //MOVC
    t47 = (tb48) ? t4.x : t47;
    //Instruction 21696
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 21697
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 21698
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 21699
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 21700
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 21701
    //MUL
    t34.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 21702
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 21703
    //MAD
    t4.xy = t34.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 21704
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 21705
    //MAD
    t48 = t4.y * t4.y + t4.x;
    //Instruction 21706
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 21707
    //MAD
    t48 = _ST_WindGlobal.y * t48 + t4.x;
    //Instruction 21708
    //MUL
    t47 = t47 * t48;
    //Instruction 21709
    //MAD
    t4.xz = t2.xz * vec2(t47) + t3.xz;
    //Instruction 21710
    //MOV
    t4.y = t3.y;
    //Instruction 21711
    //DP3
    t2.x = dot(t4.xyz, t4.xyz);
    //Instruction 21712
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 21713
    //MUL
    t2.xzw = t2.xxx * t4.xyz;
    //Instruction 21714
    //MUL
    t2.xyz = t17.xxx * t2.xzw;
    //Instruction 21715
    //MOVC
    t2.xyz = (tb1.x) ? t2.xyz : t3.xyz;
    //Instruction 21716
    //MUL
    t3.xyz = t2.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 21717
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t2.xxx + t3.xyz;
    //Instruction 21718
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t2.zzz + t3.xyz;
    //Instruction 21719
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 21720
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 21721
    //MUL
    t1.x = t3.y * _ProjectionParams.x;
    //Instruction 21722
    //MUL
    t4.w = t1.x * 0.500000;
    //Instruction 21723
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 21724
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 21725
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 21726
    //MUL
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 21727
    //MAD
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    //Instruction 21728
    //MAD
    t0 = glstate_matrix_mvp[2] * t2.zzzz + t0;
    //Instruction 21729
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 21730
    //MUL
    t4.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 21731
    //MAD
    t2.xyw = _Object2World[0].xyz * t2.xxx + t4.xyz;
    //Instruction 21732
    //MAD
    t2.xyz = _Object2World[2].xyz * t2.zzz + t2.xyw;
    //Instruction 21733
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t2.xyz;
    //Instruction 21734
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 21735
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 21736
    //MOV
    t2.z = _World2Object[2].x;
    //Instruction 21737
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 21738
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 21739
    //MOV
    t4.z = _World2Object[2].y;
    //Instruction 21740
    //MUL
    t4.xyz = t16.yyy * t4.xyz;
    //Instruction 21741
    //MAD
    t1.xyz = t2.xyz * t16.xxx + t4.xyz;
    //Instruction 21742
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 21743
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 21744
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 21745
    //MAD
    t1.xyz = t2.xyz * t16.zzz + t1.xyz;
    //Instruction 21746
    //DP3
    t46 = dot(t1.xyz, t1.xyz);
    //Instruction 21747
    //RSQ
    t46 = inversesqrt(t46);
    //Instruction 21748
    //MUL
    t1.xyz = vec3(t46) * t1.xyz;
    //Instruction 21749
    //MUL
    t16_0 = t1.yzzx * t1.xyzz;
    //Instruction 21750
    //DP4
    t16_14.x = dot(unity_SHBr, t16_0);
    //Instruction 21751
    //DP4
    t16_14.y = dot(unity_SHBg, t16_0);
    //Instruction 21752
    //DP4
    t16_14.z = dot(unity_SHBb, t16_0);
    //Instruction 21753
    //MUL
    t16_59 = t1.y * t1.y;
    //Instruction 21754
    //MAD
    t16_59 = t1.x * t1.x + (-t16_59);
    //Instruction 21755
    //MAD
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(t16_59) + t16_14.xyz;
    //Instruction 21756
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 21757
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 21758
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 21759
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 21760
    //MOV
    vs_TEXCOORD4.xyz = t3.xyz;
    //Instruction 21761
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
mediump float t16_18;
void main()
{
    //Instruction 21412
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 21413
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 21414
    //MOV
    t1.x = t16_0.x;
    //Instruction 21415
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 21416
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 21417
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 21418
    //LT
    tb1 = t16_1<0.0;
    //Instruction 21419
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 21420
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 21421
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 21422
    //MUL
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 21423
    //LT
    tb1 = t10_2<0.0;
    //Instruction 21424
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 21425
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 21426
    //MOV
    t16_0.w = 1.0;
    //Instruction 21427
    //DP4
    t16_4.x = dot(unity_SHAr, t16_0);
    //Instruction 21428
    //DP4
    t16_4.y = dot(unity_SHAg, t16_0);
    //Instruction 21429
    //DP4
    t16_4.z = dot(unity_SHAb, t16_0);
    //Instruction 21430
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD5.xyz;
    //Instruction 21431
    //MUL
    t16_4.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 21432
    //MUL
    t16_3.xyz = t16_3.xyz * _LightColor0.xyz;
    //Instruction 21433
    //DP3
    t16_18 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 21434
    //MAX
    t16_18 = max(t16_18, 0.0);
    //Instruction 21435
    //MAD
    t16_3.xyz = t16_3.xyz * vec3(t16_18) + t16_4.xyz;
    //Instruction 21436
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 21437
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 21438
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_1;
  tmpvar_11 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  FinalPosition_14 = tmpvar_1.xyz;
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_14 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_16 > 1.0) && (tmpvar_16 < 5.0))) {
    highp float tmpvar_19;
    tmpvar_19 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_20;
    isBestWind_20 = (tmpvar_16 == 4.0);
    bool bLeaf2_21;
    bLeaf2_21 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_22;
    vPos_22 = FinalPosition_14;
    highp vec3 vDirection_23;
    vDirection_23 = tmpvar_2;
    highp float tmpvar_24;
    if (bLeaf2_21) {
      tmpvar_24 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_24 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_25;
    if (bLeaf2_21) {
      tmpvar_25 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_25 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_26;
    highp vec4 tmpvar_27;
    tmpvar_27.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_27.x = (tmpvar_24 + tmpvar_19);
    highp vec4 tmpvar_28;
    tmpvar_28 = abs(((
      fract((tmpvar_27 + 0.5))
     * 2.0) - 1.0));
    vPos_26 = (FinalPosition_14 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_25 * (((
        (tmpvar_28 * tmpvar_28)
       * 
        (3.0 - (2.0 * tmpvar_28))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_23 = tmpvar_2;
    vPos_22 = vPos_26;
    if (isBestWind_20) {
      highp vec3 tmpvar_29;
      tmpvar_29 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_30;
      if (bLeaf2_21) {
        tmpvar_30 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_30 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_31;
      if (bLeaf2_21) {
        tmpvar_31 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_31 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_32;
      if (bLeaf2_21) {
        tmpvar_32 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_33;
      if (bLeaf2_21) {
        tmpvar_33 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_34;
      if (bLeaf2_21) {
        tmpvar_34 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_34 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_35;
      if (bLeaf2_21) {
        tmpvar_35 = bool(1);
      } else {
        tmpvar_35 = bool(1);
      };
      highp float fTwitch_36;
      highp vec3 vAxis_37;
      highp float fOsc_38;
      highp vec3 vOriginPos_39;
      highp vec3 tmpvar_40;
      tmpvar_40 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_41;
      tmpvar_41 = ((tmpvar_40.x + tmpvar_40.y) + tmpvar_40.z);
      highp vec4 tmpvar_42;
      tmpvar_42.x = (tmpvar_30 + tmpvar_41);
      tmpvar_42.y = ((tmpvar_30 * 0.75) - tmpvar_41);
      tmpvar_42.z = ((tmpvar_30 * 0.01) + tmpvar_41);
      tmpvar_42.w = (tmpvar_30 + tmpvar_41);
      highp vec4 tmpvar_43;
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      tmpvar_43 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      vOriginPos_39 = vPos_26;
      highp float tmpvar_45;
      tmpvar_45 = sqrt(dot (vPos_26, vPos_26));
      highp float fAngle_46;
      fAngle_46 = ((_glesMultiTexCoord2.x * tmpvar_32) * (tmpvar_43.x + (tmpvar_43.y * tmpvar_43.y)));
      highp vec2 vSinCos_47;
      vSinCos_47.x = sin(fAngle_46);
      vSinCos_47.y = cos(fAngle_46);
      highp float tmpvar_48;
      tmpvar_48 = (1.0 - vSinCos_47.y);
      highp mat3 tmpvar_49;
      tmpvar_49[0].x = (((tmpvar_48 * tmpvar_29.x) * tmpvar_29.x) + vSinCos_47.y);
      tmpvar_49[0].y = (((tmpvar_48 * tmpvar_29.x) * tmpvar_29.y) + (vSinCos_47.x * tmpvar_29.z));
      tmpvar_49[0].z = (((tmpvar_48 * tmpvar_29.x) * tmpvar_29.z) - (vSinCos_47.x * tmpvar_29.y));
      tmpvar_49[1].x = (((tmpvar_48 * tmpvar_29.x) * tmpvar_29.y) - (vSinCos_47.x * tmpvar_29.z));
      tmpvar_49[1].y = (((tmpvar_48 * tmpvar_29.y) * tmpvar_29.y) + vSinCos_47.y);
      tmpvar_49[1].z = (((tmpvar_48 * tmpvar_29.y) * tmpvar_29.z) + (vSinCos_47.x * tmpvar_29.x));
      tmpvar_49[2].x = (((tmpvar_48 * tmpvar_29.x) * tmpvar_29.z) + (vSinCos_47.x * tmpvar_29.y));
      tmpvar_49[2].y = (((tmpvar_48 * tmpvar_29.y) * tmpvar_29.z) - (vSinCos_47.x * tmpvar_29.x));
      tmpvar_49[2].z = (((tmpvar_48 * tmpvar_29.z) * tmpvar_29.z) + vSinCos_47.y);
      highp vec3 tmpvar_50;
      tmpvar_50 = ((tmpvar_29.yzx * vRotatedWindVector_13.zxy) - (tmpvar_29.zxy * vRotatedWindVector_13.yzx));
      vAxis_37.xz = tmpvar_50.xz;
      highp float tmpvar_51;
      tmpvar_51 = clamp (dot (vRotatedWindVector_13, tmpvar_29), -1.0, 1.0);
      vAxis_37.y = (tmpvar_50.y + tmpvar_51);
      highp vec3 tmpvar_52;
      tmpvar_52 = normalize(vAxis_37);
      vAxis_37 = tmpvar_52;
      highp float tmpvar_53;
      tmpvar_53 = (1.570796 - (sign(tmpvar_51) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_51))) * (1.570796 + (abs(tmpvar_51) * (-0.2146018 + 
          (abs(tmpvar_51) * (0.08656672 + (abs(tmpvar_51) * -0.03102955)))
        ))))
      )));
      fOsc_38 = (tmpvar_43.y - (tmpvar_43.x * tmpvar_43.x));
      fTwitch_36 = 0.0;
      if (tmpvar_35) {
        highp float fTime_54;
        fTime_54 = (tmpvar_34.z + tmpvar_41);
        highp vec4 tmpvar_55;
        tmpvar_55.zw = vec2(0.0, 0.0);
        tmpvar_55.x = fTime_54;
        tmpvar_55.y = (0.87 * fTime_54);
        highp vec4 tmpvar_56;
        highp vec4 tmpvar_57;
        tmpvar_57 = abs(((
          fract((tmpvar_55 + 0.5))
         * 2.0) - 1.0));
        tmpvar_56 = (((
          (tmpvar_57 * tmpvar_57)
         * 
          (3.0 - (2.0 * tmpvar_57))
        ) - 0.5) * 2.0);
        fTwitch_36 = (tmpvar_34.x * pow (clamp (
          ((((tmpvar_56.x * tmpvar_56.y) * tmpvar_56.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_34.y));
      };
      highp float fAngle_58;
      fAngle_58 = (_glesMultiTexCoord2.x * ((
        (tmpvar_53 * tmpvar_33)
       + 
        (fOsc_38 * tmpvar_31)
      ) + fTwitch_36));
      highp vec2 vSinCos_59;
      vSinCos_59.x = sin(fAngle_58);
      vSinCos_59.y = cos(fAngle_58);
      highp float tmpvar_60;
      tmpvar_60 = (1.0 - vSinCos_59.y);
      highp mat3 tmpvar_61;
      tmpvar_61[0].x = (((tmpvar_60 * tmpvar_52.x) * tmpvar_52.x) + vSinCos_59.y);
      tmpvar_61[0].y = (((tmpvar_60 * tmpvar_52.x) * tmpvar_52.y) + (vSinCos_59.x * tmpvar_52.z));
      tmpvar_61[0].z = (((tmpvar_60 * tmpvar_52.x) * tmpvar_52.z) - (vSinCos_59.x * tmpvar_52.y));
      tmpvar_61[1].x = (((tmpvar_60 * tmpvar_52.x) * tmpvar_52.y) - (vSinCos_59.x * tmpvar_52.z));
      tmpvar_61[1].y = (((tmpvar_60 * tmpvar_52.y) * tmpvar_52.y) + vSinCos_59.y);
      tmpvar_61[1].z = (((tmpvar_60 * tmpvar_52.y) * tmpvar_52.z) + (vSinCos_59.x * tmpvar_52.x));
      tmpvar_61[2].x = (((tmpvar_60 * tmpvar_52.x) * tmpvar_52.z) + (vSinCos_59.x * tmpvar_52.y));
      tmpvar_61[2].y = (((tmpvar_60 * tmpvar_52.y) * tmpvar_52.z) - (vSinCos_59.x * tmpvar_52.x));
      tmpvar_61[2].z = (((tmpvar_60 * tmpvar_52.z) * tmpvar_52.z) + vSinCos_59.y);
      highp mat3 tmpvar_62;
      tmpvar_62 = (tmpvar_49 * tmpvar_61);
      vOriginPos_39 = (normalize((tmpvar_62 * vPos_26)) * tmpvar_45);
      vDirection_23 = (tmpvar_62 * _glesNormal);
      vPos_22 = vOriginPos_39;
    };
    tmpvar_11 = vDirection_23;
    FinalPosition_14 = vPos_22;
  };
  FinalPosition_14 = (FinalPosition_14 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_63;
    vPos_63 = FinalPosition_14;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_64;
      vPos_64 = FinalPosition_14;
      highp float fTime_65;
      highp float fAdherenceScale_66;
      highp vec3 vWindVector_67;
      vWindVector_67 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_65 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_68;
      highp float fOscillation_69;
      fOscillation_69 = 1.0;
      highp float fAmount_70;
      highp float fTarget_71;
      highp vec4 tmpvar_72;
      tmpvar_72.x = (fTime_65 + _glesMultiTexCoord0.w);
      tmpvar_72.y = ((fTime_65 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_72.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_65 + _glesMultiTexCoord0.w));
      tmpvar_72.w = ((fTime_65 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_73;
      tmpvar_73 = abs(((
        fract((tmpvar_72 + 0.5))
       * 2.0) - 1.0));
      vOscillations_68 = (((
        (tmpvar_73 * tmpvar_73)
       * 
        (3.0 - (2.0 * tmpvar_73))
      ) - 0.5) * 2.0);
      highp float tmpvar_74;
      tmpvar_74 = (vOscillations_68.y * vOscillations_68.z);
      fTarget_71 = 1.0;
      fAmount_70 = tmpvar_74;
      if ((tmpvar_74 < 0.0)) {
        fTarget_71 = -1.0;
        fAmount_70 = -(tmpvar_74);
      };
      fOscillation_69 = (((
        mix (mix (tmpvar_74, fTarget_71, fAmount_70), fTarget_71, fAmount_70)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_68.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_69 = (fOscillation_69 * (1.0 + (vOscillations_68.w * _ST_WindBranchWhip.x)));
      vPos_64 = (FinalPosition_14 + ((vWindVector_67 * fOscillation_69) * _ST_WindBranch.y));
      highp vec4 tmpvar_75;
      tmpvar_75.zw = vec2(0.0, 0.0);
      tmpvar_75.x = ((fTime_65 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_75.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_76;
      highp vec4 tmpvar_77;
      tmpvar_77 = abs(((
        fract((tmpvar_75 + 0.5))
       * 2.0) - 1.0));
      tmpvar_76 = (((
        (tmpvar_77 * tmpvar_77)
       * 
        (3.0 - (2.0 * tmpvar_77))
      ) - 0.5) * 2.0);
      fAdherenceScale_66 = (1.0 - ((tmpvar_76.x * tmpvar_76.y) * (
        (tmpvar_76.x * tmpvar_76.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_66 = (fAdherenceScale_66 + ((vOscillations_68.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_64 = (vPos_64 + ((
        ((vRotatedBranchAnchor_12 - vPos_64) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_66) * _glesMultiTexCoord0.z));
      vPos_63 = vPos_64;
    } else {
      highp vec3 vPos_78;
      vPos_78 = vPos_63;
      highp float fTime_79;
      highp vec3 vWindVector_80;
      vWindVector_80 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_79 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_81;
      highp float fOscillation_82;
      fOscillation_82 = 1.0;
      highp float fAmount_83;
      highp float fTarget_84;
      highp vec4 tmpvar_85;
      tmpvar_85.w = 0.0;
      tmpvar_85.x = (fTime_79 + _glesMultiTexCoord0.w);
      tmpvar_85.y = ((fTime_79 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_85.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_79 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_86;
      tmpvar_86 = abs(((
        fract((tmpvar_85 + 0.5))
       * 2.0) - 1.0));
      vOscillations_81 = (((
        (tmpvar_86 * tmpvar_86)
       * 
        (3.0 - (2.0 * tmpvar_86))
      ) - 0.5) * 2.0);
      highp float tmpvar_87;
      tmpvar_87 = (vOscillations_81.y * vOscillations_81.z);
      fTarget_84 = 1.0;
      fAmount_83 = tmpvar_87;
      if ((tmpvar_87 < 0.0)) {
        fTarget_84 = -1.0;
        fAmount_83 = -(tmpvar_87);
      };
      fOscillation_82 = (((
        mix (mix (tmpvar_87, fTarget_84, fAmount_83), fTarget_84, fAmount_83)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_81.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_78 = (vPos_63 + ((vWindVector_80 * fOscillation_82) * _ST_WindBranch.y));
      vPos_63 = vPos_78;
    };
    FinalPosition_14 = vPos_63;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_88;
    vPos_88 = FinalPosition_14;
    highp float fMoveAmount_89;
    highp float fAdjust_90;
    highp float fLength_91;
    fLength_91 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_92;
    tmpvar_92 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_90 = tmpvar_92;
    if ((tmpvar_92 != 0.0)) {
      fAdjust_90 = pow (tmpvar_92, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_93;
    tmpvar_93.zw = vec2(0.0, 0.0);
    tmpvar_93.x = (tmpvar_15.x + _ST_WindGlobal.x);
    tmpvar_93.y = (tmpvar_15.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_94;
    highp vec4 tmpvar_95;
    tmpvar_95 = abs(((
      fract((tmpvar_93 + 0.5))
     * 2.0) - 1.0));
    tmpvar_94 = (((
      (tmpvar_95 * tmpvar_95)
     * 
      (3.0 - (2.0 * tmpvar_95))
    ) - 0.5) * 2.0);
    fMoveAmount_89 = ((_ST_WindGlobal.y * (tmpvar_94.x + 
      (tmpvar_94.y * tmpvar_94.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_89 = (fMoveAmount_89 * fAdjust_90);
    vPos_88.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * fMoveAmount_89));
    vPos_88 = (normalize(vPos_88) * fLength_91);
    FinalPosition_14 = vPos_88;
  };
  tmpvar_10.xyz = FinalPosition_14;
  highp vec4 hPos_96;
  hPos_96 = (glstate_matrix_mvp * tmpvar_10);
  mediump vec3 screenPos_97;
  highp vec4 o_98;
  highp vec4 tmpvar_99;
  tmpvar_99 = (hPos_96 * 0.5);
  highp vec2 tmpvar_100;
  tmpvar_100.x = tmpvar_99.x;
  tmpvar_100.y = (tmpvar_99.y * _ProjectionParams.x);
  o_98.xy = (tmpvar_100 + tmpvar_99.w);
  o_98.zw = hPos_96.zw;
  highp vec3 tmpvar_101;
  tmpvar_101 = o_98.xyw;
  screenPos_97 = tmpvar_101;
  screenPos_97.xy = (screenPos_97.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_8;
  highp vec4 v_102;
  v_102.x = _World2Object[0].x;
  v_102.y = _World2Object[1].x;
  v_102.z = _World2Object[2].x;
  v_102.w = _World2Object[3].x;
  highp vec4 v_103;
  v_103.x = _World2Object[0].y;
  v_103.y = _World2Object[1].y;
  v_103.z = _World2Object[2].y;
  v_103.w = _World2Object[3].y;
  highp vec4 v_104;
  v_104.x = _World2Object[0].z;
  v_104.y = _World2Object[1].z;
  v_104.z = _World2Object[2].z;
  v_104.w = _World2Object[3].z;
  highp vec3 tmpvar_105;
  tmpvar_105 = normalize(((
    (v_102.xyz * tmpvar_11.x)
   + 
    (v_103.xyz * tmpvar_11.y)
  ) + (v_104.xyz * tmpvar_11.z)));
  worldNormal_4 = tmpvar_105;
  tmpvar_5 = worldNormal_4;
  lowp vec4 tmpvar_106;
  tmpvar_106.w = 1.0;
  tmpvar_106.xyz = worldNormal_4;
  mediump vec4 normal_107;
  normal_107 = tmpvar_106;
  mediump vec3 x2_108;
  mediump vec4 tmpvar_109;
  tmpvar_109 = (normal_107.xyzz * normal_107.yzzx);
  x2_108.x = dot (unity_SHBr, tmpvar_109);
  x2_108.y = dot (unity_SHBg, tmpvar_109);
  x2_108.z = dot (unity_SHBb, tmpvar_109);
  tmpvar_7 = (unity_World2Shadow[0] * (_Object2World * tmpvar_10));
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = screenPos_97;
  xlv_TEXCOORD5 = (x2_108 + (unity_SHC.xyz * (
    (normal_107.x * normal_107.x)
   - 
    (normal_107.y * normal_107.y)
  )));
  xlv_TEXCOORD6 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_16;
  x_16 = (tmpvar_10 - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp float tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_17 = tmpvar_18;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_17;
  mediump vec3 normalWorld_19;
  normalWorld_19 = tmpvar_5;
  mediump vec3 tmpvar_20;
  mediump vec3 tmpvar_21;
  mediump vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = normalWorld_19;
  mediump vec3 x1_23;
  x1_23.x = dot (unity_SHAr, tmpvar_22);
  x1_23.y = dot (unity_SHAg, tmpvar_22);
  x1_23.z = dot (unity_SHAb, tmpvar_22);
  tmpvar_21 = (xlv_TEXCOORD5 + x1_23);
  tmpvar_20 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_20;
  lowp vec4 c_24;
  lowp vec4 c_25;
  lowp float diff_26;
  mediump float tmpvar_27;
  tmpvar_27 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_26 = tmpvar_27;
  c_25.xyz = ((tmpvar_9 * tmpvar_20) * diff_26);
  c_25.w = tmpvar_10;
  c_24.w = c_25.w;
  c_24.xyz = (c_25.xyz + (tmpvar_9 * tmpvar_21));
  c_4.xyz = c_24.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_1;
  tmpvar_11 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  FinalPosition_14 = tmpvar_1.xyz;
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_14 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_16 > 1.0) && (tmpvar_16 < 5.0))) {
    highp float tmpvar_19;
    tmpvar_19 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_20;
    isBestWind_20 = (tmpvar_16 == 4.0);
    bool bLeaf2_21;
    bLeaf2_21 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_22;
    vPos_22 = FinalPosition_14;
    highp vec3 vDirection_23;
    vDirection_23 = tmpvar_2;
    highp float tmpvar_24;
    if (bLeaf2_21) {
      tmpvar_24 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_24 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_25;
    if (bLeaf2_21) {
      tmpvar_25 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_25 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_26;
    highp vec4 tmpvar_27;
    tmpvar_27.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_27.x = (tmpvar_24 + tmpvar_19);
    highp vec4 tmpvar_28;
    tmpvar_28 = abs(((
      fract((tmpvar_27 + 0.5))
     * 2.0) - 1.0));
    vPos_26 = (FinalPosition_14 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_25 * (((
        (tmpvar_28 * tmpvar_28)
       * 
        (3.0 - (2.0 * tmpvar_28))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_23 = tmpvar_2;
    vPos_22 = vPos_26;
    if (isBestWind_20) {
      highp vec3 tmpvar_29;
      tmpvar_29 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_30;
      if (bLeaf2_21) {
        tmpvar_30 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_30 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_31;
      if (bLeaf2_21) {
        tmpvar_31 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_31 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_32;
      if (bLeaf2_21) {
        tmpvar_32 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_33;
      if (bLeaf2_21) {
        tmpvar_33 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_34;
      if (bLeaf2_21) {
        tmpvar_34 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_34 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_35;
      if (bLeaf2_21) {
        tmpvar_35 = bool(1);
      } else {
        tmpvar_35 = bool(1);
      };
      highp float fTwitch_36;
      highp vec3 vAxis_37;
      highp float fOsc_38;
      highp vec3 vOriginPos_39;
      highp vec3 tmpvar_40;
      tmpvar_40 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_41;
      tmpvar_41 = ((tmpvar_40.x + tmpvar_40.y) + tmpvar_40.z);
      highp vec4 tmpvar_42;
      tmpvar_42.x = (tmpvar_30 + tmpvar_41);
      tmpvar_42.y = ((tmpvar_30 * 0.75) - tmpvar_41);
      tmpvar_42.z = ((tmpvar_30 * 0.01) + tmpvar_41);
      tmpvar_42.w = (tmpvar_30 + tmpvar_41);
      highp vec4 tmpvar_43;
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      tmpvar_43 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      vOriginPos_39 = vPos_26;
      highp float tmpvar_45;
      tmpvar_45 = sqrt(dot (vPos_26, vPos_26));
      highp float fAngle_46;
      fAngle_46 = ((_glesMultiTexCoord2.x * tmpvar_32) * (tmpvar_43.x + (tmpvar_43.y * tmpvar_43.y)));
      highp vec2 vSinCos_47;
      vSinCos_47.x = sin(fAngle_46);
      vSinCos_47.y = cos(fAngle_46);
      highp float tmpvar_48;
      tmpvar_48 = (1.0 - vSinCos_47.y);
      highp mat3 tmpvar_49;
      tmpvar_49[0].x = (((tmpvar_48 * tmpvar_29.x) * tmpvar_29.x) + vSinCos_47.y);
      tmpvar_49[0].y = (((tmpvar_48 * tmpvar_29.x) * tmpvar_29.y) + (vSinCos_47.x * tmpvar_29.z));
      tmpvar_49[0].z = (((tmpvar_48 * tmpvar_29.x) * tmpvar_29.z) - (vSinCos_47.x * tmpvar_29.y));
      tmpvar_49[1].x = (((tmpvar_48 * tmpvar_29.x) * tmpvar_29.y) - (vSinCos_47.x * tmpvar_29.z));
      tmpvar_49[1].y = (((tmpvar_48 * tmpvar_29.y) * tmpvar_29.y) + vSinCos_47.y);
      tmpvar_49[1].z = (((tmpvar_48 * tmpvar_29.y) * tmpvar_29.z) + (vSinCos_47.x * tmpvar_29.x));
      tmpvar_49[2].x = (((tmpvar_48 * tmpvar_29.x) * tmpvar_29.z) + (vSinCos_47.x * tmpvar_29.y));
      tmpvar_49[2].y = (((tmpvar_48 * tmpvar_29.y) * tmpvar_29.z) - (vSinCos_47.x * tmpvar_29.x));
      tmpvar_49[2].z = (((tmpvar_48 * tmpvar_29.z) * tmpvar_29.z) + vSinCos_47.y);
      highp vec3 tmpvar_50;
      tmpvar_50 = ((tmpvar_29.yzx * vRotatedWindVector_13.zxy) - (tmpvar_29.zxy * vRotatedWindVector_13.yzx));
      vAxis_37.xz = tmpvar_50.xz;
      highp float tmpvar_51;
      tmpvar_51 = clamp (dot (vRotatedWindVector_13, tmpvar_29), -1.0, 1.0);
      vAxis_37.y = (tmpvar_50.y + tmpvar_51);
      highp vec3 tmpvar_52;
      tmpvar_52 = normalize(vAxis_37);
      vAxis_37 = tmpvar_52;
      highp float tmpvar_53;
      tmpvar_53 = (1.570796 - (sign(tmpvar_51) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_51))) * (1.570796 + (abs(tmpvar_51) * (-0.2146018 + 
          (abs(tmpvar_51) * (0.08656672 + (abs(tmpvar_51) * -0.03102955)))
        ))))
      )));
      fOsc_38 = (tmpvar_43.y - (tmpvar_43.x * tmpvar_43.x));
      fTwitch_36 = 0.0;
      if (tmpvar_35) {
        highp float fTime_54;
        fTime_54 = (tmpvar_34.z + tmpvar_41);
        highp vec4 tmpvar_55;
        tmpvar_55.zw = vec2(0.0, 0.0);
        tmpvar_55.x = fTime_54;
        tmpvar_55.y = (0.87 * fTime_54);
        highp vec4 tmpvar_56;
        highp vec4 tmpvar_57;
        tmpvar_57 = abs(((
          fract((tmpvar_55 + 0.5))
         * 2.0) - 1.0));
        tmpvar_56 = (((
          (tmpvar_57 * tmpvar_57)
         * 
          (3.0 - (2.0 * tmpvar_57))
        ) - 0.5) * 2.0);
        fTwitch_36 = (tmpvar_34.x * pow (clamp (
          ((((tmpvar_56.x * tmpvar_56.y) * tmpvar_56.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_34.y));
      };
      highp float fAngle_58;
      fAngle_58 = (_glesMultiTexCoord2.x * ((
        (tmpvar_53 * tmpvar_33)
       + 
        (fOsc_38 * tmpvar_31)
      ) + fTwitch_36));
      highp vec2 vSinCos_59;
      vSinCos_59.x = sin(fAngle_58);
      vSinCos_59.y = cos(fAngle_58);
      highp float tmpvar_60;
      tmpvar_60 = (1.0 - vSinCos_59.y);
      highp mat3 tmpvar_61;
      tmpvar_61[0].x = (((tmpvar_60 * tmpvar_52.x) * tmpvar_52.x) + vSinCos_59.y);
      tmpvar_61[0].y = (((tmpvar_60 * tmpvar_52.x) * tmpvar_52.y) + (vSinCos_59.x * tmpvar_52.z));
      tmpvar_61[0].z = (((tmpvar_60 * tmpvar_52.x) * tmpvar_52.z) - (vSinCos_59.x * tmpvar_52.y));
      tmpvar_61[1].x = (((tmpvar_60 * tmpvar_52.x) * tmpvar_52.y) - (vSinCos_59.x * tmpvar_52.z));
      tmpvar_61[1].y = (((tmpvar_60 * tmpvar_52.y) * tmpvar_52.y) + vSinCos_59.y);
      tmpvar_61[1].z = (((tmpvar_60 * tmpvar_52.y) * tmpvar_52.z) + (vSinCos_59.x * tmpvar_52.x));
      tmpvar_61[2].x = (((tmpvar_60 * tmpvar_52.x) * tmpvar_52.z) + (vSinCos_59.x * tmpvar_52.y));
      tmpvar_61[2].y = (((tmpvar_60 * tmpvar_52.y) * tmpvar_52.z) - (vSinCos_59.x * tmpvar_52.x));
      tmpvar_61[2].z = (((tmpvar_60 * tmpvar_52.z) * tmpvar_52.z) + vSinCos_59.y);
      highp mat3 tmpvar_62;
      tmpvar_62 = (tmpvar_49 * tmpvar_61);
      vOriginPos_39 = (normalize((tmpvar_62 * vPos_26)) * tmpvar_45);
      vDirection_23 = (tmpvar_62 * _glesNormal);
      vPos_22 = vOriginPos_39;
    };
    tmpvar_11 = vDirection_23;
    FinalPosition_14 = vPos_22;
  };
  FinalPosition_14 = (FinalPosition_14 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_63;
    vPos_63 = FinalPosition_14;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_64;
      vPos_64 = FinalPosition_14;
      highp float fTime_65;
      highp float fAdherenceScale_66;
      highp vec3 vWindVector_67;
      vWindVector_67 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_65 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_68;
      highp float fOscillation_69;
      fOscillation_69 = 1.0;
      highp float fAmount_70;
      highp float fTarget_71;
      highp vec4 tmpvar_72;
      tmpvar_72.x = (fTime_65 + _glesMultiTexCoord0.w);
      tmpvar_72.y = ((fTime_65 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_72.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_65 + _glesMultiTexCoord0.w));
      tmpvar_72.w = ((fTime_65 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_73;
      tmpvar_73 = abs(((
        fract((tmpvar_72 + 0.5))
       * 2.0) - 1.0));
      vOscillations_68 = (((
        (tmpvar_73 * tmpvar_73)
       * 
        (3.0 - (2.0 * tmpvar_73))
      ) - 0.5) * 2.0);
      highp float tmpvar_74;
      tmpvar_74 = (vOscillations_68.y * vOscillations_68.z);
      fTarget_71 = 1.0;
      fAmount_70 = tmpvar_74;
      if ((tmpvar_74 < 0.0)) {
        fTarget_71 = -1.0;
        fAmount_70 = -(tmpvar_74);
      };
      fOscillation_69 = (((
        mix (mix (tmpvar_74, fTarget_71, fAmount_70), fTarget_71, fAmount_70)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_68.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_69 = (fOscillation_69 * (1.0 + (vOscillations_68.w * _ST_WindBranchWhip.x)));
      vPos_64 = (FinalPosition_14 + ((vWindVector_67 * fOscillation_69) * _ST_WindBranch.y));
      highp vec4 tmpvar_75;
      tmpvar_75.zw = vec2(0.0, 0.0);
      tmpvar_75.x = ((fTime_65 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_75.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_76;
      highp vec4 tmpvar_77;
      tmpvar_77 = abs(((
        fract((tmpvar_75 + 0.5))
       * 2.0) - 1.0));
      tmpvar_76 = (((
        (tmpvar_77 * tmpvar_77)
       * 
        (3.0 - (2.0 * tmpvar_77))
      ) - 0.5) * 2.0);
      fAdherenceScale_66 = (1.0 - ((tmpvar_76.x * tmpvar_76.y) * (
        (tmpvar_76.x * tmpvar_76.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_66 = (fAdherenceScale_66 + ((vOscillations_68.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_64 = (vPos_64 + ((
        ((vRotatedBranchAnchor_12 - vPos_64) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_66) * _glesMultiTexCoord0.z));
      vPos_63 = vPos_64;
    } else {
      highp vec3 vPos_78;
      vPos_78 = vPos_63;
      highp float fTime_79;
      highp vec3 vWindVector_80;
      vWindVector_80 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_79 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_81;
      highp float fOscillation_82;
      fOscillation_82 = 1.0;
      highp float fAmount_83;
      highp float fTarget_84;
      highp vec4 tmpvar_85;
      tmpvar_85.w = 0.0;
      tmpvar_85.x = (fTime_79 + _glesMultiTexCoord0.w);
      tmpvar_85.y = ((fTime_79 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_85.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_79 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_86;
      tmpvar_86 = abs(((
        fract((tmpvar_85 + 0.5))
       * 2.0) - 1.0));
      vOscillations_81 = (((
        (tmpvar_86 * tmpvar_86)
       * 
        (3.0 - (2.0 * tmpvar_86))
      ) - 0.5) * 2.0);
      highp float tmpvar_87;
      tmpvar_87 = (vOscillations_81.y * vOscillations_81.z);
      fTarget_84 = 1.0;
      fAmount_83 = tmpvar_87;
      if ((tmpvar_87 < 0.0)) {
        fTarget_84 = -1.0;
        fAmount_83 = -(tmpvar_87);
      };
      fOscillation_82 = (((
        mix (mix (tmpvar_87, fTarget_84, fAmount_83), fTarget_84, fAmount_83)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_81.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_78 = (vPos_63 + ((vWindVector_80 * fOscillation_82) * _ST_WindBranch.y));
      vPos_63 = vPos_78;
    };
    FinalPosition_14 = vPos_63;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_88;
    vPos_88 = FinalPosition_14;
    highp float fMoveAmount_89;
    highp float fAdjust_90;
    highp float fLength_91;
    fLength_91 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_92;
    tmpvar_92 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_90 = tmpvar_92;
    if ((tmpvar_92 != 0.0)) {
      fAdjust_90 = pow (tmpvar_92, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_93;
    tmpvar_93.zw = vec2(0.0, 0.0);
    tmpvar_93.x = (tmpvar_15.x + _ST_WindGlobal.x);
    tmpvar_93.y = (tmpvar_15.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_94;
    highp vec4 tmpvar_95;
    tmpvar_95 = abs(((
      fract((tmpvar_93 + 0.5))
     * 2.0) - 1.0));
    tmpvar_94 = (((
      (tmpvar_95 * tmpvar_95)
     * 
      (3.0 - (2.0 * tmpvar_95))
    ) - 0.5) * 2.0);
    fMoveAmount_89 = ((_ST_WindGlobal.y * (tmpvar_94.x + 
      (tmpvar_94.y * tmpvar_94.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_89 = (fMoveAmount_89 * fAdjust_90);
    vPos_88.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * fMoveAmount_89));
    vPos_88 = (normalize(vPos_88) * fLength_91);
    FinalPosition_14 = vPos_88;
  };
  tmpvar_10.xyz = FinalPosition_14;
  highp vec4 hPos_96;
  hPos_96 = (glstate_matrix_mvp * tmpvar_10);
  mediump vec3 screenPos_97;
  highp vec4 o_98;
  highp vec4 tmpvar_99;
  tmpvar_99 = (hPos_96 * 0.5);
  highp vec2 tmpvar_100;
  tmpvar_100.x = tmpvar_99.x;
  tmpvar_100.y = (tmpvar_99.y * _ProjectionParams.x);
  o_98.xy = (tmpvar_100 + tmpvar_99.w);
  o_98.zw = hPos_96.zw;
  highp vec3 tmpvar_101;
  tmpvar_101 = o_98.xyw;
  screenPos_97 = tmpvar_101;
  screenPos_97.xy = (screenPos_97.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_8;
  highp vec3 tmpvar_102;
  tmpvar_102 = (_Object2World * tmpvar_10).xyz;
  highp vec4 v_103;
  v_103.x = _World2Object[0].x;
  v_103.y = _World2Object[1].x;
  v_103.z = _World2Object[2].x;
  v_103.w = _World2Object[3].x;
  highp vec4 v_104;
  v_104.x = _World2Object[0].y;
  v_104.y = _World2Object[1].y;
  v_104.z = _World2Object[2].y;
  v_104.w = _World2Object[3].y;
  highp vec4 v_105;
  v_105.x = _World2Object[0].z;
  v_105.y = _World2Object[1].z;
  v_105.z = _World2Object[2].z;
  v_105.w = _World2Object[3].z;
  highp vec3 tmpvar_106;
  tmpvar_106 = normalize(((
    (v_103.xyz * tmpvar_11.x)
   + 
    (v_104.xyz * tmpvar_11.y)
  ) + (v_105.xyz * tmpvar_11.z)));
  worldNormal_4 = tmpvar_106;
  tmpvar_5 = worldNormal_4;
  lowp vec4 tmpvar_107;
  tmpvar_107.w = 1.0;
  tmpvar_107.xyz = worldNormal_4;
  mediump vec4 normal_108;
  normal_108 = tmpvar_107;
  mediump vec3 x2_109;
  mediump vec4 tmpvar_110;
  tmpvar_110 = (normal_108.xyzz * normal_108.yzzx);
  x2_109.x = dot (unity_SHBr, tmpvar_110);
  x2_109.y = dot (unity_SHBg, tmpvar_110);
  x2_109.z = dot (unity_SHBb, tmpvar_110);
  highp vec3 lightColor0_111;
  lightColor0_111 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_112;
  lightColor1_112 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_113;
  lightColor2_113 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_114;
  lightColor3_114 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_115;
  lightAttenSq_115 = unity_4LightAtten0;
  highp vec3 normal_116;
  normal_116 = worldNormal_4;
  highp vec3 col_117;
  highp vec4 ndotl_118;
  highp vec4 lengthSq_119;
  highp vec4 tmpvar_120;
  tmpvar_120 = (unity_4LightPosX0 - tmpvar_102.x);
  highp vec4 tmpvar_121;
  tmpvar_121 = (unity_4LightPosY0 - tmpvar_102.y);
  highp vec4 tmpvar_122;
  tmpvar_122 = (unity_4LightPosZ0 - tmpvar_102.z);
  lengthSq_119 = (tmpvar_120 * tmpvar_120);
  lengthSq_119 = (lengthSq_119 + (tmpvar_121 * tmpvar_121));
  lengthSq_119 = (lengthSq_119 + (tmpvar_122 * tmpvar_122));
  ndotl_118 = (tmpvar_120 * normal_116.x);
  ndotl_118 = (ndotl_118 + (tmpvar_121 * normal_116.y));
  ndotl_118 = (ndotl_118 + (tmpvar_122 * normal_116.z));
  highp vec4 tmpvar_123;
  tmpvar_123 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_118 * inversesqrt(lengthSq_119)));
  ndotl_118 = tmpvar_123;
  highp vec4 tmpvar_124;
  tmpvar_124 = (tmpvar_123 * (1.0/((1.0 + 
    (lengthSq_119 * lightAttenSq_115)
  ))));
  col_117 = (lightColor0_111 * tmpvar_124.x);
  col_117 = (col_117 + (lightColor1_112 * tmpvar_124.y));
  col_117 = (col_117 + (lightColor2_113 * tmpvar_124.z));
  col_117 = (col_117 + (lightColor3_114 * tmpvar_124.w));
  tmpvar_7 = ((x2_109 + (unity_SHC.xyz * 
    ((normal_108.x * normal_108.x) - (normal_108.y * normal_108.y))
  )) + col_117);
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_102;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = screenPos_97;
  xlv_TEXCOORD5 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_11.x = tmpvar_12.x;
  projUV_11.y = ((fract(tmpvar_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_14;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_15;
  x_15 = (tmpvar_9 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_16;
  normalWorld_16 = tmpvar_4;
  mediump vec3 tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = normalWorld_16;
  mediump vec3 x1_19;
  x1_19.x = dot (unity_SHAr, tmpvar_18);
  x1_19.y = dot (unity_SHAg, tmpvar_18);
  x1_19.z = dot (unity_SHAb, tmpvar_18);
  tmpvar_17 = (xlv_TEXCOORD5 + x1_19);
  lowp vec4 c_20;
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_22 = tmpvar_23;
  c_21.xyz = ((tmpvar_8 * tmpvar_1) * diff_22);
  c_21.w = tmpvar_9;
  c_20.w = c_21.w;
  c_20.xyz = (c_21.xyz + (tmpvar_8 * tmpvar_17));
  c_3.xyz = c_20.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
highp vec3 t1;
bvec2 tb1;
highp vec4 t2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
mediump vec3 t16_14;
highp vec3 t16;
highp int ti16;
highp vec3 t17;
bool tb17;
highp vec3 t22;
highp float t31;
bool tb31;
highp vec2 t34;
highp float t35;
highp vec2 t36;
highp float t46;
bool tb46;
highp float t47;
bool tb47;
highp float t48;
bool tb48;
highp float t49;
mediump float t16_59;
void main()
{
    //Instruction 21789
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 21790
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 21791
    //LT
    tb1.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), t16_0.xxxx).xy;
    //Instruction 21792
    //MUL
    t2.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 21793
    //MAD
    t2.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t2.xyz;
    //Instruction 21794
    //MAD
    t2.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t2.xyz;
    //Instruction 21795
    //DP3
    t31 = dot(t2.xyz, t2.xyz);
    //Instruction 21796
    //RSQ
    t31 = inversesqrt(t31);
    //Instruction 21797
    //MUL
    t2.xyz = vec3(t31) * t2.xyz;
    //Instruction 21798
    //AND
    t2.xyz = mix(vec3(0.0, 0.0, 0.0), t2.xyz, tb1.xxx);
    //Instruction 21799
    //ADD
    t3.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 21800
    //LT
    tb31 = t16_0.x<5.000000;
    //Instruction 21801
    //AND
    ti16 = int(uint(tb31) & uint(tb1.y));
    //Instruction 21802
    //IF
    if((uint(ti16))!=uint(0u)){
        //Instruction 21803
        //ADD
        t16.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 21804
        //EQ
        tb31 = t16_0.x==4.000000;
        //Instruction 21805
        //LT
        tb46 = 0.0<in_TEXCOORD2.w;
        //Instruction 21806
        //MOVC
        t4.xy = (bool(tb46)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 21807
        //ADD
        t16.x = t16.x + t4.x;
        //Instruction 21808
        //ADD
        t16.x = t16.x + 0.500000;
        //Instruction 21809
        //FRC
        t16.x = fract(t16.x);
        //Instruction 21810
        //MAD
        t16.x = t16.x * 2.000000 + -1.0;
        //Instruction 21811
        //MUL
        t47 = abs(t16.x) * abs(t16.x);
        //Instruction 21812
        //MAD
        t16.x = -abs(t16.x) * 2.000000 + 3.000000;
        //Instruction 21813
        //MAD
        t16.x = t47 * t16.x + -0.500000;
        //Instruction 21814
        //DP2
        t16.x = dot(t16.xx, t4.yy);
        //Instruction 21815
        //MUL
        t4.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 21816
        //FRC
        t4.xyz = fract(t4.xyz);
        //Instruction 21817
        //MAD
        t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 21818
        //MUL
        t4.xyz = t16.xxx * t4.xyz;
        //Instruction 21819
        //MAD
        t3.xyz = t4.xyz * in_TEXCOORD2.xxx + t3.xyz;
        //Instruction 21820
        //IF
        if(tb31){
            //Instruction 21821
            //MUL
            t4 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 21822
            //FRC
            t4 = fract(t4);
            //Instruction 21823
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 21824
            //MOVC
            t5 = (bool(tb46)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 21825
            //MOVC
            t16.xyz = (bool(tb46)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 21826
            //MUL
            t47 = t4.w * 3.000000;
            //Instruction 21827
            //MAD
            t6.y = t4.w * 3.000000 + t5.x;
            //Instruction 21828
            //MAD
            t6.x = t5.x * 0.750000 + (-t47);
            //Instruction 21829
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 21830
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 21831
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 21832
            //MUL
            t36.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 21833
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 21834
            //MAD
            t6.xy = t36.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 21835
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 21836
            //DP3
            t47 = dot(t3.xyz, t3.xyz);
            //Instruction 21837
            //SQRT
            t47 = sqrt(t47);
            //Instruction 21838
            //MAD
            t48 = t6.x * t6.x + t6.y;
            //Instruction 21839
            //MUL
            t5.x = t5.z * in_TEXCOORD2.x;
            //Instruction 21840
            //MUL
            t48 = t48 * t5.x;
            //Instruction 21841
            //SINCOS
            t5.x = sin(t48);
            t7.x = cos(t48);
            //Instruction 21842
            //ADD
            t48 = (-t7.x) + 1.0;
            //Instruction 21843
            //MUL
            t8 = t4.xxxy * vec4(t48);
            //Instruction 21844
            //MUL
            t22.xyz = t4.zxy * t5.xxx;
            //Instruction 21845
            //MAD
            t9.xy = t8.zy * t4.zy + t22.zx;
            //Instruction 21846
            //MAD
            t10.xy = t8.xw * t4.xy + t7.xx;
            //Instruction 21847
            //MAD
            t9.z = t8.w * t4.z + (-t22.y);
            //Instruction 21848
            //MAD
            t11.xy = t8.yz * t4.yz + (-t22.xz);
            //Instruction 21849
            //MAD
            t11.z = t8.w * t4.z + t22.y;
            //Instruction 21850
            //MUL
            t5.x = t4.z * t4.z;
            //Instruction 21851
            //MAD
            t11.w = t5.x * t48 + t7.x;
            //Instruction 21852
            //MUL
            t7.xyz = t2.yzx * t4.zxy;
            //Instruction 21853
            //MAD
            t7.xyz = t4.yzx * t2.zxy + (-t7.xyz);
            //Instruction 21854
            //DP3
            t17.x = dot(t2.xyz, t4.xyz);
            //Instruction 21855
            //MAX
            t17.x = max(t17.x, -1.0);
            //Instruction 21856
            //MIN
            t17.x = min(t17.x, 1.0);
            //Instruction 21857
            //ADD
            t7.w = t17.x + t7.y;
            //Instruction 21858
            //DP3
            t48 = dot(t7.xzw, t7.xzw);
            //Instruction 21859
            //RSQ
            t48 = inversesqrt(t48);
            //Instruction 21860
            //MUL
            t4.xyz = vec3(t48) * t7.zxw;
            //Instruction 21861
            //ADD
            t48 = -abs(t17.x) + 1.0;
            //Instruction 21862
            //SQRT
            t48 = sqrt(t48);
            //Instruction 21863
            //MAD
            t5.x = abs(t17.x) * -0.018729 + 0.074261;
            //Instruction 21864
            //MAD
            t5.x = t5.x * abs(t17.x) + -0.212114;
            //Instruction 21865
            //MAD
            t5.x = t5.x * abs(t17.x) + 1.570729;
            //Instruction 21866
            //MUL
            t35 = t48 * t5.x;
            //Instruction 21867
            //MAD
            t35 = t35 * -2.000000 + 3.141593;
            //Instruction 21868
            //LT
            tb17 = t17.x<(-t17.x);
            //Instruction 21869
            //AND
            t17.x = tb17 ? t35 : float(0.0);
            //Instruction 21870
            //MAD
            t17.x = t5.x * t48 + t17.x;
            //Instruction 21871
            //MAD
            t48 = (-t6.y) * t6.y + t6.x;
            //Instruction 21872
            //MAD
            t6.x = t4.w * 3.000000 + t16.z;
            //Instruction 21873
            //MUL
            t6.y = t6.x * 0.870000;
            //Instruction 21874
            //ADD
            t5.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 21875
            //FRC
            t5.xz = fract(t5.xz);
            //Instruction 21876
            //MAD
            t5.xz = t5.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 21877
            //MUL
            t6.xy = abs(t5.xz) * abs(t5.xz);
            //Instruction 21878
            //MAD
            t5.xz = -abs(t5.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 21879
            //MAD
            t5.xz = t6.xy * t5.xz + vec2(-0.500000, -0.500000);
            //Instruction 21880
            //ADD
            t5.xz = t5.xz + t5.xz;
            //Instruction 21881
            //MUL
            t46 = t5.z * t5.z;
            //Instruction 21882
            //MAD
            t46 = t46 * t5.x + 1.0;
            //Instruction 21883
            //MUL
            t46 = t46 * 0.500000;
            t46 = clamp(t46, 0.0, 1.0);
            //Instruction 21884
            //LOG
            t46 = log2(t46);
            //Instruction 21885
            //MUL
            t31 = t46 * t16.y;
            //Instruction 21886
            //EXP
            t31 = exp2(t31);
            //Instruction 21887
            //MUL
            t46 = t5.y * t48;
            //Instruction 21888
            //MAD
            t46 = t17.x * t5.w + t46;
            //Instruction 21889
            //MAD
            t16.x = t16.x * t31 + t46;
            //Instruction 21890
            //MUL
            t16.x = t16.x * in_TEXCOORD2.x;
            //Instruction 21891
            //SINCOS
            t5.x = sin(t16.x);
            t6.x = cos(t16.x);
            //Instruction 21892
            //ADD
            t16.x = (-t6.x) + 1.0;
            //Instruction 21893
            //MUL
            t7 = vec4(t4.y * t16.x, t4.y * t16.x, t4.y * t16.x, t4.z * t16.x);
            //Instruction 21894
            //MUL
            t5.xyz = t4.xyz * t5.xxx;
            //Instruction 21895
            //MAD
            t8.xy = t7.zy * t4.xz + t5.zx;
            //Instruction 21896
            //MAD
            t12.xy = t7.xw * t4.yz + t6.xx;
            //Instruction 21897
            //MAD
            t8.z = t7.w * t4.x + (-t5.y);
            //Instruction 21898
            //MAD
            t13.xy = t7.yz * t4.zx + (-t5.xz);
            //Instruction 21899
            //MAD
            t13.z = t7.w * t4.x + t5.y;
            //Instruction 21900
            //MUL
            t31 = t4.x * t4.x;
            //Instruction 21901
            //MAD
            t8.w = t31 * t16.x + t6.x;
            //Instruction 21902
            //MOV
            t10.z = t11.x;
            //Instruction 21903
            //MOV
            t10.w = t9.x;
            //Instruction 21904
            //MOV
            t12.z = t8.y;
            //Instruction 21905
            //MOV
            t12.w = t13.y;
            //Instruction 21906
            //DP3
            t4.x = dot(t10.xzw, t12.xzw);
            //Instruction 21907
            //MOV
            t13.w = t12.y;
            //Instruction 21908
            //DP3
            t4.y = dot(t10.xwz, t13.xzw);
            //Instruction 21909
            //DP3
            t4.z = dot(t10.xzw, t8.xzw);
            //Instruction 21910
            //MOV
            t9.w = t10.y;
            //Instruction 21911
            //DP3
            t5.x = dot(t9.ywz, t12.xzw);
            //Instruction 21912
            //DP3
            t5.y = dot(t9.yzw, t13.xzw);
            //Instruction 21913
            //DP3
            t5.z = dot(t9.ywz, t8.xzw);
            //Instruction 21914
            //DP3
            t6.x = dot(t11.yzw, t12.xzw);
            //Instruction 21915
            //DP3
            t6.y = dot(t11.ywz, t13.xzw);
            //Instruction 21916
            //DP3
            t6.z = dot(t11.yzw, t8.xzw);
            //Instruction 21917
            //DP3
            t16.x = dot(t4.xyz, in_NORMAL0.xyz);
            //Instruction 21918
            //DP3
            t16.y = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 21919
            //DP3
            t16.z = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 21920
            //DP3
            t4.x = dot(t4.xyz, t3.xyz);
            //Instruction 21921
            //DP3
            t4.y = dot(t5.xyz, t3.xyz);
            //Instruction 21922
            //DP3
            t4.z = dot(t6.xyz, t3.xyz);
            //Instruction 21923
            //DP3
            t17.x = dot(t4.xyz, t4.xyz);
            //Instruction 21924
            //RSQ
            t17.x = inversesqrt(t17.x);
            //Instruction 21925
            //MUL
            t4.xyz = t17.xxx * t4.xyz;
            //Instruction 21926
            //MUL
            t3.xyz = vec3(t47) * t4.xyz;
            //Instruction 21927
        //ELSE
        } else {
            //Instruction 21928
            //MOV
            t16.xyz = in_NORMAL0.xyz;
            //Instruction 21929
        //ENDIF
        }
        //Instruction 21930
    //ELSE
    } else {
        //Instruction 21931
        //MOV
        t16.xyz = in_NORMAL0.xyz;
        //Instruction 21932
    //ENDIF
    }
    //Instruction 21933
    //ADD
    t3.xyz = t3.xyz + in_TEXCOORD1.xyz;
    //Instruction 21934
    //GE
    tb17 = t16_0.x>=3.000000;
    //Instruction 21935
    //IF
    if(tb17){
        //Instruction 21936
        //EQ
        tb17 = t16_0.x==5.000000;
        //Instruction 21937
        //IF
        if(tb17){
            //Instruction 21938
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 21939
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 21940
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 21941
            //DP3
            t17.x = dot(t4.xyz, t4.xyz);
            //Instruction 21942
            //RSQ
            t17.x = inversesqrt(t17.x);
            //Instruction 21943
            //MUL
            t4.xyz = t17.xxx * t4.xyz;
            //Instruction 21944
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 21945
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 21946
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 21947
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 21948
            //ADD
            t17.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 21949
            //ADD
            t17.x = t17.x + _ST_WindBranch.x;
            //Instruction 21950
            //ADD
            t0.x = t17.x + in_TEXCOORD0.w;
            //Instruction 21951
            //MAD
            t0.y = t17.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 21952
            //MUL
            t47 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 21953
            //MUL
            t0.z = t47 * 0.500000;
            //Instruction 21954
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 21955
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 21956
            //FRC
            t0 = fract(t0);
            //Instruction 21957
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 21958
            //MUL
            t6 = abs(t0) * abs(t0);
            //Instruction 21959
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 21960
            //MAD
            t0 = t6 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 21961
            //ADD
            t0 = t0 + t0;
            //Instruction 21962
            //MUL
            t6.w = t0.z * t0.y;
            //Instruction 21963
            //LT
            tb47 = t6.w<0.0;
            //Instruction 21964
            //MOV
            t6.y = (-t6.w);
            //Instruction 21965
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 21966
            //MOVC
            t6.xy = (bool(tb47)) ? t6.xy : t6.zw;
            //Instruction 21967
            //MAD
            t47 = (-t0.y) * t0.z + t6.x;
            //Instruction 21968
            //MAD
            t47 = t6.y * t47 + t6.w;
            //Instruction 21969
            //ADD
            t48 = (-t47) + t6.x;
            //Instruction 21970
            //MAD
            t47 = t6.y * t48 + t47;
            //Instruction 21971
            //MUL
            t47 = t47 * _ST_WindBranchTwitch.x;
            //Instruction 21972
            //ADD
            t48 = (-_ST_WindVector.w) + 1.0;
            //Instruction 21973
            //ADD
            t49 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 21974
            //MUL
            t49 = t0.x * t49;
            //Instruction 21975
            //MAD
            t47 = t47 * t48 + t49;
            //Instruction 21976
            //MAD
            t48 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 21977
            //MUL
            t47 = t47 * t48;
            //Instruction 21978
            //MUL
            t5.xyz = vec3(t47) * t5.xyz;
            //Instruction 21979
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 21980
            //MAD
            t6.x = t17.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 21981
            //MUL
            t17.x = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 21982
            //MAD
            t6.y = t17.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 21983
            //ADD
            t17.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 21984
            //FRC
            t17.xz = fract(t17.xz);
            //Instruction 21985
            //MAD
            t17.xz = t17.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 21986
            //MUL
            t6.xy = abs(t17.xz) * abs(t17.xz);
            //Instruction 21987
            //MAD
            t17.xz = -abs(t17.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 21988
            //MAD
            t17.xz = t6.xy * t17.xz + vec2(-0.500000, -0.500000);
            //Instruction 21989
            //ADD
            t17.xz = t17.xz + t17.xz;
            //Instruction 21990
            //MUL
            t17.xz = t17.xz * t17.xz;
            //Instruction 21991
            //MUL
            t17.x = t17.x * t17.z;
            //Instruction 21992
            //MAD
            t17.x = (-t17.x) * _ST_WindTurbulences.x + 1.0;
            //Instruction 21993
            //MUL
            t47 = t0.w * _ST_WindVector.w;
            //Instruction 21994
            //MAD
            t17.x = t47 * _ST_WindBranchWhip.x + t17.x;
            //Instruction 21995
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 21996
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 21997
            //MUL
            t4.xyz = t17.xxx * t4.xyz;
            //Instruction 21998
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 21999
        //ELSE
        } else {
            //Instruction 22000
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 22001
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 22002
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 22003
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 22004
            //ADD
            t17.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 22005
            //ADD
            t17.x = t17.x + _ST_WindBranch.x;
            //Instruction 22006
            //ADD
            t5.x = t17.x + in_TEXCOORD0.w;
            //Instruction 22007
            //MAD
            t5.y = t17.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 22008
            //MUL
            t17.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 22009
            //MUL
            t5.z = t17.x * 0.500000;
            //Instruction 22010
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 22011
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 22012
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 22013
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 22014
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 22015
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 22016
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 22017
            //MUL
            t0.w = t5.z * t5.y;
            //Instruction 22018
            //LT
            tb17 = t0.w<0.0;
            //Instruction 22019
            //MOV
            t0.y = (-t0.w);
            //Instruction 22020
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 22021
            //MOVC
            t17.xz = (bool(tb17)) ? t0.xy : t0.zw;
            //Instruction 22022
            //MAD
            t48 = (-t5.y) * t5.z + t17.x;
            //Instruction 22023
            //MAD
            t48 = t17.z * t48 + t0.w;
            //Instruction 22024
            //ADD
            t17.x = t17.x + (-t48);
            //Instruction 22025
            //MAD
            t17.x = t17.z * t17.x + t48;
            //Instruction 22026
            //MUL
            t17.x = t17.x * _ST_WindBranchTwitch.x;
            //Instruction 22027
            //ADD
            t47 = (-_ST_WindVector.w) + 1.0;
            //Instruction 22028
            //ADD
            t48 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 22029
            //MUL
            t48 = t48 * t5.x;
            //Instruction 22030
            //MAD
            t17.x = t17.x * t47 + t48;
            //Instruction 22031
            //MUL
            t4.xyz = t17.xxx * t4.xyz;
            //Instruction 22032
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 22033
        //ENDIF
        }
        //Instruction 22034
    //ENDIF
    }
    //Instruction 22035
    //DP3
    t17.x = dot(t3.xyz, t3.xyz);
    //Instruction 22036
    //SQRT
    t17.x = sqrt(t17.x);
    //Instruction 22037
    //DIV
    t47 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 22038
    //MAD
    t47 = (-t47) * 0.250000 + t3.y;
    //Instruction 22039
    //MAX
    t47 = max(t47, 0.0);
    //Instruction 22040
    //MUL
    t47 = t47 * _ST_WindGlobal.z;
    //Instruction 22041
    //NE
    tb48 = t47!=0.0;
    //Instruction 22042
    //LOG
    t4.x = log2(t47);
    //Instruction 22043
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 22044
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 22045
    //MOVC
    t47 = (tb48) ? t4.x : t47;
    //Instruction 22046
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 22047
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 22048
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 22049
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 22050
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 22051
    //MUL
    t34.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 22052
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 22053
    //MAD
    t4.xy = t34.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 22054
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 22055
    //MAD
    t48 = t4.y * t4.y + t4.x;
    //Instruction 22056
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 22057
    //MAD
    t48 = _ST_WindGlobal.y * t48 + t4.x;
    //Instruction 22058
    //MUL
    t47 = t47 * t48;
    //Instruction 22059
    //MAD
    t4.xz = t2.xz * vec2(t47) + t3.xz;
    //Instruction 22060
    //MOV
    t4.y = t3.y;
    //Instruction 22061
    //DP3
    t2.x = dot(t4.xyz, t4.xyz);
    //Instruction 22062
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 22063
    //MUL
    t2.xzw = t2.xxx * t4.xyz;
    //Instruction 22064
    //MUL
    t2.xyz = t17.xxx * t2.xzw;
    //Instruction 22065
    //MOVC
    t2.xyz = (tb1.x) ? t2.xyz : t3.xyz;
    //Instruction 22066
    //MUL
    t3.xyz = t2.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 22067
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t2.xxx + t3.xyz;
    //Instruction 22068
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t2.zzz + t3.xyz;
    //Instruction 22069
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 22070
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 22071
    //MUL
    t1.x = t3.y * _ProjectionParams.x;
    //Instruction 22072
    //MUL
    t4.w = t1.x * 0.500000;
    //Instruction 22073
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 22074
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 22075
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 22076
    //MUL
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 22077
    //MAD
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    //Instruction 22078
    //MAD
    t0 = glstate_matrix_mvp[2] * t2.zzzz + t0;
    //Instruction 22079
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 22080
    //MUL
    t4.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 22081
    //MAD
    t2.xyw = _Object2World[0].xyz * t2.xxx + t4.xyz;
    //Instruction 22082
    //MAD
    t2.xyz = _Object2World[2].xyz * t2.zzz + t2.xyw;
    //Instruction 22083
    //MAD
    t2.xyz = _Object2World[3].xyz * in_POSITION0.www + t2.xyz;
    //Instruction 22084
    //MOV
    t4.x = _World2Object[0].x;
    //Instruction 22085
    //MOV
    t4.y = _World2Object[1].x;
    //Instruction 22086
    //MOV
    t4.z = _World2Object[2].x;
    //Instruction 22087
    //MOV
    t5.x = _World2Object[0].y;
    //Instruction 22088
    //MOV
    t5.y = _World2Object[1].y;
    //Instruction 22089
    //MOV
    t5.z = _World2Object[2].y;
    //Instruction 22090
    //MUL
    t5.xyz = t16.yyy * t5.xyz;
    //Instruction 22091
    //MAD
    t1.xyz = t4.xyz * t16.xxx + t5.xyz;
    //Instruction 22092
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 22093
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 22094
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 22095
    //MAD
    t1.xyz = t4.xyz * t16.zzz + t1.xyz;
    //Instruction 22096
    //DP3
    t46 = dot(t1.xyz, t1.xyz);
    //Instruction 22097
    //RSQ
    t46 = inversesqrt(t46);
    //Instruction 22098
    //MUL
    t1.xyz = vec3(t46) * t1.xyz;
    //Instruction 22099
    //MUL
    t16_0 = t1.yzzx * t1.xyzz;
    //Instruction 22100
    //DP4
    t16_14.x = dot(unity_SHBr, t16_0);
    //Instruction 22101
    //DP4
    t16_14.y = dot(unity_SHBg, t16_0);
    //Instruction 22102
    //DP4
    t16_14.z = dot(unity_SHBb, t16_0);
    //Instruction 22103
    //MUL
    t16_59 = t1.y * t1.y;
    //Instruction 22104
    //MAD
    t16_59 = t1.x * t1.x + (-t16_59);
    //Instruction 22105
    //MAD
    t16_14.xyz = unity_SHC.xyz * vec3(t16_59) + t16_14.xyz;
    //Instruction 22106
    //ADD
    t0 = (-t2.xxxx) + unity_4LightPosX0;
    //Instruction 22107
    //ADD
    t4 = (-t2.yyyy) + unity_4LightPosY0;
    //Instruction 22108
    //ADD
    t5 = (-t2.zzzz) + unity_4LightPosZ0;
    //Instruction 22109
    //MUL
    t6 = t4 * t4;
    //Instruction 22110
    //MAD
    t6 = t0 * t0 + t6;
    //Instruction 22111
    //MAD
    t6 = t5 * t5 + t6;
    //Instruction 22112
    //MUL
    t4 = t1.yyyy * t4;
    //Instruction 22113
    //MAD
    t0 = t0 * t1.xxxx + t4;
    //Instruction 22114
    //MAD
    t0 = t5 * t1.zzzz + t0;
    //Instruction 22115
    //RSQ
    t4 = inversesqrt(t6);
    //Instruction 22116
    //MUL
    t0 = t0 * t4;
    //Instruction 22117
    //MAX
    t0 = max(t0, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 22118
    //MAD
    t4 = t6 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 22119
    //DIV
    t4 = vec4(1.0, 1.0, 1.0, 1.0) / t4;
    //Instruction 22120
    //MUL
    t0 = t0 * t4;
    //Instruction 22121
    //MUL
    t4.xyz = t0.yyy * unity_LightColor[1].xyz;
    //Instruction 22122
    //MAD
    t4.xyz = unity_LightColor[0].xyz * t0.xxx + t4.xyz;
    //Instruction 22123
    //MAD
    t4.xyz = unity_LightColor[2].xyz * t0.zzz + t4.xyz;
    //Instruction 22124
    //MAD
    t4.xyz = unity_LightColor[3].xyz * t0.www + t4.xyz;
    //Instruction 22125
    //ADD
    t4.xyz = t4.xyz + t16_14.xyz;
    //Instruction 22126
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 22127
    //MOV
    vs_TEXCOORD1.xyz = t2.xyz;
    //Instruction 22128
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 22129
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 22130
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 22131
    //MOV
    vs_TEXCOORD4.xyz = t3.xyz;
    //Instruction 22132
    //MOV
    vs_TEXCOORD5.xyz = t4.xyz;
    //Instruction 22133
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
mediump float t16_18;
void main()
{
    //Instruction 21762
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 21763
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 21764
    //MOV
    t1.x = t16_0.x;
    //Instruction 21765
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 21766
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 21767
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 21768
    //LT
    tb1 = t16_1<0.0;
    //Instruction 21769
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 21770
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 21771
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 21772
    //MUL
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 21773
    //LT
    tb1 = t10_2<0.0;
    //Instruction 21774
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 21775
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 21776
    //MOV
    t16_0.w = 1.0;
    //Instruction 21777
    //DP4
    t16_4.x = dot(unity_SHAr, t16_0);
    //Instruction 21778
    //DP4
    t16_4.y = dot(unity_SHAg, t16_0);
    //Instruction 21779
    //DP4
    t16_4.z = dot(unity_SHAb, t16_0);
    //Instruction 21780
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD5.xyz;
    //Instruction 21781
    //MUL
    t16_4.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 21782
    //MUL
    t16_3.xyz = t16_3.xyz * _LightColor0.xyz;
    //Instruction 21783
    //DP3
    t16_18 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 21784
    //MAX
    t16_18 = max(t16_18, 0.0);
    //Instruction 21785
    //MAD
    t16_3.xyz = t16_3.xyz * vec3(t16_18) + t16_4.xyz;
    //Instruction 21786
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 21787
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 21788
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec4 tmpvar_8;
  lowp vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10.xy = tmpvar_3.xy;
  tmpvar_9.w = _Color.w;
  tmpvar_9.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_1;
  tmpvar_12 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  FinalPosition_15 = tmpvar_1.xyz;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_15 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_17 > 1.0) && (tmpvar_17 < 5.0))) {
    highp float tmpvar_20;
    tmpvar_20 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_21;
    isBestWind_21 = (tmpvar_17 == 4.0);
    bool bLeaf2_22;
    bLeaf2_22 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_23;
    vPos_23 = FinalPosition_15;
    highp vec3 vDirection_24;
    vDirection_24 = tmpvar_2;
    highp float tmpvar_25;
    if (bLeaf2_22) {
      tmpvar_25 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_25 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_26;
    if (bLeaf2_22) {
      tmpvar_26 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_26 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_27;
    highp vec4 tmpvar_28;
    tmpvar_28.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_28.x = (tmpvar_25 + tmpvar_20);
    highp vec4 tmpvar_29;
    tmpvar_29 = abs(((
      fract((tmpvar_28 + 0.5))
     * 2.0) - 1.0));
    vPos_27 = (FinalPosition_15 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_26 * (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_24 = tmpvar_2;
    vPos_23 = vPos_27;
    if (isBestWind_21) {
      highp vec3 tmpvar_30;
      tmpvar_30 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_31;
      if (bLeaf2_22) {
        tmpvar_31 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_31 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_32;
      if (bLeaf2_22) {
        tmpvar_32 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_33;
      if (bLeaf2_22) {
        tmpvar_33 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_34;
      if (bLeaf2_22) {
        tmpvar_34 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_35;
      if (bLeaf2_22) {
        tmpvar_35 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_35 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_36;
      if (bLeaf2_22) {
        tmpvar_36 = bool(1);
      } else {
        tmpvar_36 = bool(1);
      };
      highp float fTwitch_37;
      highp vec3 vAxis_38;
      highp float fOsc_39;
      highp vec3 vOriginPos_40;
      highp vec3 tmpvar_41;
      tmpvar_41 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_42;
      tmpvar_42 = ((tmpvar_41.x + tmpvar_41.y) + tmpvar_41.z);
      highp vec4 tmpvar_43;
      tmpvar_43.x = (tmpvar_31 + tmpvar_42);
      tmpvar_43.y = ((tmpvar_31 * 0.75) - tmpvar_42);
      tmpvar_43.z = ((tmpvar_31 * 0.01) + tmpvar_42);
      tmpvar_43.w = (tmpvar_31 + tmpvar_42);
      highp vec4 tmpvar_44;
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      tmpvar_44 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      vOriginPos_40 = vPos_27;
      highp float tmpvar_46;
      tmpvar_46 = sqrt(dot (vPos_27, vPos_27));
      highp float fAngle_47;
      fAngle_47 = ((_glesMultiTexCoord2.x * tmpvar_33) * (tmpvar_44.x + (tmpvar_44.y * tmpvar_44.y)));
      highp vec2 vSinCos_48;
      vSinCos_48.x = sin(fAngle_47);
      vSinCos_48.y = cos(fAngle_47);
      highp float tmpvar_49;
      tmpvar_49 = (1.0 - vSinCos_48.y);
      highp mat3 tmpvar_50;
      tmpvar_50[0].x = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.x) + vSinCos_48.y);
      tmpvar_50[0].y = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.y) + (vSinCos_48.x * tmpvar_30.z));
      tmpvar_50[0].z = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.z) - (vSinCos_48.x * tmpvar_30.y));
      tmpvar_50[1].x = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.y) - (vSinCos_48.x * tmpvar_30.z));
      tmpvar_50[1].y = (((tmpvar_49 * tmpvar_30.y) * tmpvar_30.y) + vSinCos_48.y);
      tmpvar_50[1].z = (((tmpvar_49 * tmpvar_30.y) * tmpvar_30.z) + (vSinCos_48.x * tmpvar_30.x));
      tmpvar_50[2].x = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.z) + (vSinCos_48.x * tmpvar_30.y));
      tmpvar_50[2].y = (((tmpvar_49 * tmpvar_30.y) * tmpvar_30.z) - (vSinCos_48.x * tmpvar_30.x));
      tmpvar_50[2].z = (((tmpvar_49 * tmpvar_30.z) * tmpvar_30.z) + vSinCos_48.y);
      highp vec3 tmpvar_51;
      tmpvar_51 = ((tmpvar_30.yzx * vRotatedWindVector_14.zxy) - (tmpvar_30.zxy * vRotatedWindVector_14.yzx));
      vAxis_38.xz = tmpvar_51.xz;
      highp float tmpvar_52;
      tmpvar_52 = clamp (dot (vRotatedWindVector_14, tmpvar_30), -1.0, 1.0);
      vAxis_38.y = (tmpvar_51.y + tmpvar_52);
      highp vec3 tmpvar_53;
      tmpvar_53 = normalize(vAxis_38);
      vAxis_38 = tmpvar_53;
      highp float tmpvar_54;
      tmpvar_54 = (1.570796 - (sign(tmpvar_52) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_52))) * (1.570796 + (abs(tmpvar_52) * (-0.2146018 + 
          (abs(tmpvar_52) * (0.08656672 + (abs(tmpvar_52) * -0.03102955)))
        ))))
      )));
      fOsc_39 = (tmpvar_44.y - (tmpvar_44.x * tmpvar_44.x));
      fTwitch_37 = 0.0;
      if (tmpvar_36) {
        highp float fTime_55;
        fTime_55 = (tmpvar_35.z + tmpvar_42);
        highp vec4 tmpvar_56;
        tmpvar_56.zw = vec2(0.0, 0.0);
        tmpvar_56.x = fTime_55;
        tmpvar_56.y = (0.87 * fTime_55);
        highp vec4 tmpvar_57;
        highp vec4 tmpvar_58;
        tmpvar_58 = abs(((
          fract((tmpvar_56 + 0.5))
         * 2.0) - 1.0));
        tmpvar_57 = (((
          (tmpvar_58 * tmpvar_58)
         * 
          (3.0 - (2.0 * tmpvar_58))
        ) - 0.5) * 2.0);
        fTwitch_37 = (tmpvar_35.x * pow (clamp (
          ((((tmpvar_57.x * tmpvar_57.y) * tmpvar_57.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_35.y));
      };
      highp float fAngle_59;
      fAngle_59 = (_glesMultiTexCoord2.x * ((
        (tmpvar_54 * tmpvar_34)
       + 
        (fOsc_39 * tmpvar_32)
      ) + fTwitch_37));
      highp vec2 vSinCos_60;
      vSinCos_60.x = sin(fAngle_59);
      vSinCos_60.y = cos(fAngle_59);
      highp float tmpvar_61;
      tmpvar_61 = (1.0 - vSinCos_60.y);
      highp mat3 tmpvar_62;
      tmpvar_62[0].x = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.x) + vSinCos_60.y);
      tmpvar_62[0].y = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.y) + (vSinCos_60.x * tmpvar_53.z));
      tmpvar_62[0].z = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.z) - (vSinCos_60.x * tmpvar_53.y));
      tmpvar_62[1].x = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.y) - (vSinCos_60.x * tmpvar_53.z));
      tmpvar_62[1].y = (((tmpvar_61 * tmpvar_53.y) * tmpvar_53.y) + vSinCos_60.y);
      tmpvar_62[1].z = (((tmpvar_61 * tmpvar_53.y) * tmpvar_53.z) + (vSinCos_60.x * tmpvar_53.x));
      tmpvar_62[2].x = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.z) + (vSinCos_60.x * tmpvar_53.y));
      tmpvar_62[2].y = (((tmpvar_61 * tmpvar_53.y) * tmpvar_53.z) - (vSinCos_60.x * tmpvar_53.x));
      tmpvar_62[2].z = (((tmpvar_61 * tmpvar_53.z) * tmpvar_53.z) + vSinCos_60.y);
      highp mat3 tmpvar_63;
      tmpvar_63 = (tmpvar_50 * tmpvar_62);
      vOriginPos_40 = (normalize((tmpvar_63 * vPos_27)) * tmpvar_46);
      vDirection_24 = (tmpvar_63 * _glesNormal);
      vPos_23 = vOriginPos_40;
    };
    tmpvar_12 = vDirection_24;
    FinalPosition_15 = vPos_23;
  };
  FinalPosition_15 = (FinalPosition_15 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_64;
    vPos_64 = FinalPosition_15;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_65;
      vPos_65 = FinalPosition_15;
      highp float fTime_66;
      highp float fAdherenceScale_67;
      highp vec3 vWindVector_68;
      vWindVector_68 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_66 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_69;
      highp float fOscillation_70;
      fOscillation_70 = 1.0;
      highp float fAmount_71;
      highp float fTarget_72;
      highp vec4 tmpvar_73;
      tmpvar_73.x = (fTime_66 + _glesMultiTexCoord0.w);
      tmpvar_73.y = ((fTime_66 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_73.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_66 + _glesMultiTexCoord0.w));
      tmpvar_73.w = ((fTime_66 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_74;
      tmpvar_74 = abs(((
        fract((tmpvar_73 + 0.5))
       * 2.0) - 1.0));
      vOscillations_69 = (((
        (tmpvar_74 * tmpvar_74)
       * 
        (3.0 - (2.0 * tmpvar_74))
      ) - 0.5) * 2.0);
      highp float tmpvar_75;
      tmpvar_75 = (vOscillations_69.y * vOscillations_69.z);
      fTarget_72 = 1.0;
      fAmount_71 = tmpvar_75;
      if ((tmpvar_75 < 0.0)) {
        fTarget_72 = -1.0;
        fAmount_71 = -(tmpvar_75);
      };
      fOscillation_70 = (((
        mix (mix (tmpvar_75, fTarget_72, fAmount_71), fTarget_72, fAmount_71)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_69.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_70 = (fOscillation_70 * (1.0 + (vOscillations_69.w * _ST_WindBranchWhip.x)));
      vPos_65 = (FinalPosition_15 + ((vWindVector_68 * fOscillation_70) * _ST_WindBranch.y));
      highp vec4 tmpvar_76;
      tmpvar_76.zw = vec2(0.0, 0.0);
      tmpvar_76.x = ((fTime_66 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_76.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_77;
      highp vec4 tmpvar_78;
      tmpvar_78 = abs(((
        fract((tmpvar_76 + 0.5))
       * 2.0) - 1.0));
      tmpvar_77 = (((
        (tmpvar_78 * tmpvar_78)
       * 
        (3.0 - (2.0 * tmpvar_78))
      ) - 0.5) * 2.0);
      fAdherenceScale_67 = (1.0 - ((tmpvar_77.x * tmpvar_77.y) * (
        (tmpvar_77.x * tmpvar_77.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_67 = (fAdherenceScale_67 + ((vOscillations_69.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_65 = (vPos_65 + ((
        ((vRotatedBranchAnchor_13 - vPos_65) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_67) * _glesMultiTexCoord0.z));
      vPos_64 = vPos_65;
    } else {
      highp vec3 vPos_79;
      vPos_79 = vPos_64;
      highp float fTime_80;
      highp vec3 vWindVector_81;
      vWindVector_81 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_80 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_82;
      highp float fOscillation_83;
      fOscillation_83 = 1.0;
      highp float fAmount_84;
      highp float fTarget_85;
      highp vec4 tmpvar_86;
      tmpvar_86.w = 0.0;
      tmpvar_86.x = (fTime_80 + _glesMultiTexCoord0.w);
      tmpvar_86.y = ((fTime_80 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_86.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_80 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_87;
      tmpvar_87 = abs(((
        fract((tmpvar_86 + 0.5))
       * 2.0) - 1.0));
      vOscillations_82 = (((
        (tmpvar_87 * tmpvar_87)
       * 
        (3.0 - (2.0 * tmpvar_87))
      ) - 0.5) * 2.0);
      highp float tmpvar_88;
      tmpvar_88 = (vOscillations_82.y * vOscillations_82.z);
      fTarget_85 = 1.0;
      fAmount_84 = tmpvar_88;
      if ((tmpvar_88 < 0.0)) {
        fTarget_85 = -1.0;
        fAmount_84 = -(tmpvar_88);
      };
      fOscillation_83 = (((
        mix (mix (tmpvar_88, fTarget_85, fAmount_84), fTarget_85, fAmount_84)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_82.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_79 = (vPos_64 + ((vWindVector_81 * fOscillation_83) * _ST_WindBranch.y));
      vPos_64 = vPos_79;
    };
    FinalPosition_15 = vPos_64;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_89;
    vPos_89 = FinalPosition_15;
    highp float fMoveAmount_90;
    highp float fAdjust_91;
    highp float fLength_92;
    fLength_92 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_93;
    tmpvar_93 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_91 = tmpvar_93;
    if ((tmpvar_93 != 0.0)) {
      fAdjust_91 = pow (tmpvar_93, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_94;
    tmpvar_94.zw = vec2(0.0, 0.0);
    tmpvar_94.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_94.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_95;
    highp vec4 tmpvar_96;
    tmpvar_96 = abs(((
      fract((tmpvar_94 + 0.5))
     * 2.0) - 1.0));
    tmpvar_95 = (((
      (tmpvar_96 * tmpvar_96)
     * 
      (3.0 - (2.0 * tmpvar_96))
    ) - 0.5) * 2.0);
    fMoveAmount_90 = ((_ST_WindGlobal.y * (tmpvar_95.x + 
      (tmpvar_95.y * tmpvar_95.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_90 = (fMoveAmount_90 * fAdjust_91);
    vPos_89.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * fMoveAmount_90));
    vPos_89 = (normalize(vPos_89) * fLength_92);
    FinalPosition_15 = vPos_89;
  };
  tmpvar_11.xyz = FinalPosition_15;
  highp vec4 hPos_97;
  hPos_97 = (glstate_matrix_mvp * tmpvar_11);
  mediump vec3 screenPos_98;
  highp vec4 o_99;
  highp vec4 tmpvar_100;
  tmpvar_100 = (hPos_97 * 0.5);
  highp vec2 tmpvar_101;
  tmpvar_101.x = tmpvar_100.x;
  tmpvar_101.y = (tmpvar_100.y * _ProjectionParams.x);
  o_99.xy = (tmpvar_101 + tmpvar_100.w);
  o_99.zw = hPos_97.zw;
  highp vec3 tmpvar_102;
  tmpvar_102 = o_99.xyw;
  screenPos_98 = tmpvar_102;
  screenPos_98.xy = (screenPos_98.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_9;
  highp vec3 tmpvar_103;
  tmpvar_103 = (_Object2World * tmpvar_11).xyz;
  highp vec4 v_104;
  v_104.x = _World2Object[0].x;
  v_104.y = _World2Object[1].x;
  v_104.z = _World2Object[2].x;
  v_104.w = _World2Object[3].x;
  highp vec4 v_105;
  v_105.x = _World2Object[0].y;
  v_105.y = _World2Object[1].y;
  v_105.z = _World2Object[2].y;
  v_105.w = _World2Object[3].y;
  highp vec4 v_106;
  v_106.x = _World2Object[0].z;
  v_106.y = _World2Object[1].z;
  v_106.z = _World2Object[2].z;
  v_106.w = _World2Object[3].z;
  highp vec3 tmpvar_107;
  tmpvar_107 = normalize(((
    (v_104.xyz * tmpvar_12.x)
   + 
    (v_105.xyz * tmpvar_12.y)
  ) + (v_106.xyz * tmpvar_12.z)));
  worldNormal_4 = tmpvar_107;
  tmpvar_5 = worldNormal_4;
  lowp vec4 tmpvar_108;
  tmpvar_108.w = 1.0;
  tmpvar_108.xyz = worldNormal_4;
  mediump vec4 normal_109;
  normal_109 = tmpvar_108;
  mediump vec3 x2_110;
  mediump vec4 tmpvar_111;
  tmpvar_111 = (normal_109.xyzz * normal_109.yzzx);
  x2_110.x = dot (unity_SHBr, tmpvar_111);
  x2_110.y = dot (unity_SHBg, tmpvar_111);
  x2_110.z = dot (unity_SHBb, tmpvar_111);
  highp vec3 lightColor0_112;
  lightColor0_112 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_113;
  lightColor1_113 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_114;
  lightColor2_114 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_115;
  lightColor3_115 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_116;
  lightAttenSq_116 = unity_4LightAtten0;
  highp vec3 normal_117;
  normal_117 = worldNormal_4;
  highp vec3 col_118;
  highp vec4 ndotl_119;
  highp vec4 lengthSq_120;
  highp vec4 tmpvar_121;
  tmpvar_121 = (unity_4LightPosX0 - tmpvar_103.x);
  highp vec4 tmpvar_122;
  tmpvar_122 = (unity_4LightPosY0 - tmpvar_103.y);
  highp vec4 tmpvar_123;
  tmpvar_123 = (unity_4LightPosZ0 - tmpvar_103.z);
  lengthSq_120 = (tmpvar_121 * tmpvar_121);
  lengthSq_120 = (lengthSq_120 + (tmpvar_122 * tmpvar_122));
  lengthSq_120 = (lengthSq_120 + (tmpvar_123 * tmpvar_123));
  ndotl_119 = (tmpvar_121 * normal_117.x);
  ndotl_119 = (ndotl_119 + (tmpvar_122 * normal_117.y));
  ndotl_119 = (ndotl_119 + (tmpvar_123 * normal_117.z));
  highp vec4 tmpvar_124;
  tmpvar_124 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_119 * inversesqrt(lengthSq_120)));
  ndotl_119 = tmpvar_124;
  highp vec4 tmpvar_125;
  tmpvar_125 = (tmpvar_124 * (1.0/((1.0 + 
    (lengthSq_120 * lightAttenSq_116)
  ))));
  col_118 = (lightColor0_112 * tmpvar_125.x);
  col_118 = (col_118 + (lightColor1_113 * tmpvar_125.y));
  col_118 = (col_118 + (lightColor2_114 * tmpvar_125.z));
  col_118 = (col_118 + (lightColor3_115 * tmpvar_125.w));
  tmpvar_7 = ((x2_110 + (unity_SHC.xyz * 
    ((normal_109.x * normal_109.x) - (normal_109.y * normal_109.y))
  )) + col_118);
  tmpvar_8 = (unity_World2Shadow[0] * (_Object2World * tmpvar_11));
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_103;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_10;
  xlv_TEXCOORD4 = screenPos_98;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_16;
  x_16 = (tmpvar_10 - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp float tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_17 = tmpvar_18;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_17;
  mediump vec3 normalWorld_19;
  normalWorld_19 = tmpvar_5;
  mediump vec3 tmpvar_20;
  mediump vec3 tmpvar_21;
  mediump vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = normalWorld_19;
  mediump vec3 x1_23;
  x1_23.x = dot (unity_SHAr, tmpvar_22);
  x1_23.y = dot (unity_SHAg, tmpvar_22);
  x1_23.z = dot (unity_SHAb, tmpvar_22);
  tmpvar_21 = (xlv_TEXCOORD5 + x1_23);
  tmpvar_20 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_20;
  lowp vec4 c_24;
  lowp vec4 c_25;
  lowp float diff_26;
  mediump float tmpvar_27;
  tmpvar_27 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_26 = tmpvar_27;
  c_25.xyz = ((tmpvar_9 * tmpvar_20) * diff_26);
  c_25.w = tmpvar_10;
  c_24.w = c_25.w;
  c_24.xyz = (c_25.xyz + (tmpvar_9 * tmpvar_21));
  c_4.xyz = c_24.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_1;
  tmpvar_11 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  FinalPosition_14 = tmpvar_1.xyz;
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_14 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_16 > 1.0) && (tmpvar_16 < 5.0))) {
    highp float tmpvar_19;
    tmpvar_19 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_20;
    isBestWind_20 = (tmpvar_16 == 4.0);
    bool bLeaf2_21;
    bLeaf2_21 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_22;
    vPos_22 = FinalPosition_14;
    highp vec3 vDirection_23;
    vDirection_23 = tmpvar_2;
    highp float tmpvar_24;
    if (bLeaf2_21) {
      tmpvar_24 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_24 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_25;
    if (bLeaf2_21) {
      tmpvar_25 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_25 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_26;
    highp vec4 tmpvar_27;
    tmpvar_27.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_27.x = (tmpvar_24 + tmpvar_19);
    highp vec4 tmpvar_28;
    tmpvar_28 = abs(((
      fract((tmpvar_27 + 0.5))
     * 2.0) - 1.0));
    vPos_26 = (FinalPosition_14 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_25 * (((
        (tmpvar_28 * tmpvar_28)
       * 
        (3.0 - (2.0 * tmpvar_28))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_23 = tmpvar_2;
    vPos_22 = vPos_26;
    if (isBestWind_20) {
      highp vec3 tmpvar_29;
      tmpvar_29 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_30;
      if (bLeaf2_21) {
        tmpvar_30 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_30 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_31;
      if (bLeaf2_21) {
        tmpvar_31 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_31 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_32;
      if (bLeaf2_21) {
        tmpvar_32 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_33;
      if (bLeaf2_21) {
        tmpvar_33 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_34;
      if (bLeaf2_21) {
        tmpvar_34 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_34 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_35;
      if (bLeaf2_21) {
        tmpvar_35 = bool(1);
      } else {
        tmpvar_35 = bool(1);
      };
      highp float fTwitch_36;
      highp vec3 vAxis_37;
      highp float fOsc_38;
      highp vec3 vOriginPos_39;
      highp vec3 tmpvar_40;
      tmpvar_40 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_41;
      tmpvar_41 = ((tmpvar_40.x + tmpvar_40.y) + tmpvar_40.z);
      highp vec4 tmpvar_42;
      tmpvar_42.x = (tmpvar_30 + tmpvar_41);
      tmpvar_42.y = ((tmpvar_30 * 0.75) - tmpvar_41);
      tmpvar_42.z = ((tmpvar_30 * 0.01) + tmpvar_41);
      tmpvar_42.w = (tmpvar_30 + tmpvar_41);
      highp vec4 tmpvar_43;
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      tmpvar_43 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      vOriginPos_39 = vPos_26;
      highp float tmpvar_45;
      tmpvar_45 = sqrt(dot (vPos_26, vPos_26));
      highp float fAngle_46;
      fAngle_46 = ((_glesMultiTexCoord2.x * tmpvar_32) * (tmpvar_43.x + (tmpvar_43.y * tmpvar_43.y)));
      highp vec2 vSinCos_47;
      vSinCos_47.x = sin(fAngle_46);
      vSinCos_47.y = cos(fAngle_46);
      highp float tmpvar_48;
      tmpvar_48 = (1.0 - vSinCos_47.y);
      highp mat3 tmpvar_49;
      tmpvar_49[0].x = (((tmpvar_48 * tmpvar_29.x) * tmpvar_29.x) + vSinCos_47.y);
      tmpvar_49[0].y = (((tmpvar_48 * tmpvar_29.x) * tmpvar_29.y) + (vSinCos_47.x * tmpvar_29.z));
      tmpvar_49[0].z = (((tmpvar_48 * tmpvar_29.x) * tmpvar_29.z) - (vSinCos_47.x * tmpvar_29.y));
      tmpvar_49[1].x = (((tmpvar_48 * tmpvar_29.x) * tmpvar_29.y) - (vSinCos_47.x * tmpvar_29.z));
      tmpvar_49[1].y = (((tmpvar_48 * tmpvar_29.y) * tmpvar_29.y) + vSinCos_47.y);
      tmpvar_49[1].z = (((tmpvar_48 * tmpvar_29.y) * tmpvar_29.z) + (vSinCos_47.x * tmpvar_29.x));
      tmpvar_49[2].x = (((tmpvar_48 * tmpvar_29.x) * tmpvar_29.z) + (vSinCos_47.x * tmpvar_29.y));
      tmpvar_49[2].y = (((tmpvar_48 * tmpvar_29.y) * tmpvar_29.z) - (vSinCos_47.x * tmpvar_29.x));
      tmpvar_49[2].z = (((tmpvar_48 * tmpvar_29.z) * tmpvar_29.z) + vSinCos_47.y);
      highp vec3 tmpvar_50;
      tmpvar_50 = ((tmpvar_29.yzx * vRotatedWindVector_13.zxy) - (tmpvar_29.zxy * vRotatedWindVector_13.yzx));
      vAxis_37.xz = tmpvar_50.xz;
      highp float tmpvar_51;
      tmpvar_51 = clamp (dot (vRotatedWindVector_13, tmpvar_29), -1.0, 1.0);
      vAxis_37.y = (tmpvar_50.y + tmpvar_51);
      highp vec3 tmpvar_52;
      tmpvar_52 = normalize(vAxis_37);
      vAxis_37 = tmpvar_52;
      highp float tmpvar_53;
      tmpvar_53 = (1.570796 - (sign(tmpvar_51) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_51))) * (1.570796 + (abs(tmpvar_51) * (-0.2146018 + 
          (abs(tmpvar_51) * (0.08656672 + (abs(tmpvar_51) * -0.03102955)))
        ))))
      )));
      fOsc_38 = (tmpvar_43.y - (tmpvar_43.x * tmpvar_43.x));
      fTwitch_36 = 0.0;
      if (tmpvar_35) {
        highp float fTime_54;
        fTime_54 = (tmpvar_34.z + tmpvar_41);
        highp vec4 tmpvar_55;
        tmpvar_55.zw = vec2(0.0, 0.0);
        tmpvar_55.x = fTime_54;
        tmpvar_55.y = (0.87 * fTime_54);
        highp vec4 tmpvar_56;
        highp vec4 tmpvar_57;
        tmpvar_57 = abs(((
          fract((tmpvar_55 + 0.5))
         * 2.0) - 1.0));
        tmpvar_56 = (((
          (tmpvar_57 * tmpvar_57)
         * 
          (3.0 - (2.0 * tmpvar_57))
        ) - 0.5) * 2.0);
        fTwitch_36 = (tmpvar_34.x * pow (clamp (
          ((((tmpvar_56.x * tmpvar_56.y) * tmpvar_56.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_34.y));
      };
      highp float fAngle_58;
      fAngle_58 = (_glesMultiTexCoord2.x * ((
        (tmpvar_53 * tmpvar_33)
       + 
        (fOsc_38 * tmpvar_31)
      ) + fTwitch_36));
      highp vec2 vSinCos_59;
      vSinCos_59.x = sin(fAngle_58);
      vSinCos_59.y = cos(fAngle_58);
      highp float tmpvar_60;
      tmpvar_60 = (1.0 - vSinCos_59.y);
      highp mat3 tmpvar_61;
      tmpvar_61[0].x = (((tmpvar_60 * tmpvar_52.x) * tmpvar_52.x) + vSinCos_59.y);
      tmpvar_61[0].y = (((tmpvar_60 * tmpvar_52.x) * tmpvar_52.y) + (vSinCos_59.x * tmpvar_52.z));
      tmpvar_61[0].z = (((tmpvar_60 * tmpvar_52.x) * tmpvar_52.z) - (vSinCos_59.x * tmpvar_52.y));
      tmpvar_61[1].x = (((tmpvar_60 * tmpvar_52.x) * tmpvar_52.y) - (vSinCos_59.x * tmpvar_52.z));
      tmpvar_61[1].y = (((tmpvar_60 * tmpvar_52.y) * tmpvar_52.y) + vSinCos_59.y);
      tmpvar_61[1].z = (((tmpvar_60 * tmpvar_52.y) * tmpvar_52.z) + (vSinCos_59.x * tmpvar_52.x));
      tmpvar_61[2].x = (((tmpvar_60 * tmpvar_52.x) * tmpvar_52.z) + (vSinCos_59.x * tmpvar_52.y));
      tmpvar_61[2].y = (((tmpvar_60 * tmpvar_52.y) * tmpvar_52.z) - (vSinCos_59.x * tmpvar_52.x));
      tmpvar_61[2].z = (((tmpvar_60 * tmpvar_52.z) * tmpvar_52.z) + vSinCos_59.y);
      highp mat3 tmpvar_62;
      tmpvar_62 = (tmpvar_49 * tmpvar_61);
      vOriginPos_39 = (normalize((tmpvar_62 * vPos_26)) * tmpvar_45);
      vDirection_23 = (tmpvar_62 * _glesNormal);
      vPos_22 = vOriginPos_39;
    };
    tmpvar_11 = vDirection_23;
    FinalPosition_14 = vPos_22;
  };
  FinalPosition_14 = (FinalPosition_14 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_63;
    vPos_63 = FinalPosition_14;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_64;
      vPos_64 = FinalPosition_14;
      highp float fTime_65;
      highp float fAdherenceScale_66;
      highp vec3 vWindVector_67;
      vWindVector_67 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_65 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_68;
      highp float fOscillation_69;
      fOscillation_69 = 1.0;
      highp float fAmount_70;
      highp float fTarget_71;
      highp vec4 tmpvar_72;
      tmpvar_72.x = (fTime_65 + _glesMultiTexCoord0.w);
      tmpvar_72.y = ((fTime_65 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_72.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_65 + _glesMultiTexCoord0.w));
      tmpvar_72.w = ((fTime_65 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_73;
      tmpvar_73 = abs(((
        fract((tmpvar_72 + 0.5))
       * 2.0) - 1.0));
      vOscillations_68 = (((
        (tmpvar_73 * tmpvar_73)
       * 
        (3.0 - (2.0 * tmpvar_73))
      ) - 0.5) * 2.0);
      highp float tmpvar_74;
      tmpvar_74 = (vOscillations_68.y * vOscillations_68.z);
      fTarget_71 = 1.0;
      fAmount_70 = tmpvar_74;
      if ((tmpvar_74 < 0.0)) {
        fTarget_71 = -1.0;
        fAmount_70 = -(tmpvar_74);
      };
      fOscillation_69 = (((
        mix (mix (tmpvar_74, fTarget_71, fAmount_70), fTarget_71, fAmount_70)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_68.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_69 = (fOscillation_69 * (1.0 + (vOscillations_68.w * _ST_WindBranchWhip.x)));
      vPos_64 = (FinalPosition_14 + ((vWindVector_67 * fOscillation_69) * _ST_WindBranch.y));
      highp vec4 tmpvar_75;
      tmpvar_75.zw = vec2(0.0, 0.0);
      tmpvar_75.x = ((fTime_65 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_75.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_76;
      highp vec4 tmpvar_77;
      tmpvar_77 = abs(((
        fract((tmpvar_75 + 0.5))
       * 2.0) - 1.0));
      tmpvar_76 = (((
        (tmpvar_77 * tmpvar_77)
       * 
        (3.0 - (2.0 * tmpvar_77))
      ) - 0.5) * 2.0);
      fAdherenceScale_66 = (1.0 - ((tmpvar_76.x * tmpvar_76.y) * (
        (tmpvar_76.x * tmpvar_76.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_66 = (fAdherenceScale_66 + ((vOscillations_68.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_64 = (vPos_64 + ((
        ((vRotatedBranchAnchor_12 - vPos_64) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_66) * _glesMultiTexCoord0.z));
      vPos_63 = vPos_64;
    } else {
      highp vec3 vPos_78;
      vPos_78 = vPos_63;
      highp float fTime_79;
      highp vec3 vWindVector_80;
      vWindVector_80 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_79 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_81;
      highp float fOscillation_82;
      fOscillation_82 = 1.0;
      highp float fAmount_83;
      highp float fTarget_84;
      highp vec4 tmpvar_85;
      tmpvar_85.w = 0.0;
      tmpvar_85.x = (fTime_79 + _glesMultiTexCoord0.w);
      tmpvar_85.y = ((fTime_79 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_85.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_79 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_86;
      tmpvar_86 = abs(((
        fract((tmpvar_85 + 0.5))
       * 2.0) - 1.0));
      vOscillations_81 = (((
        (tmpvar_86 * tmpvar_86)
       * 
        (3.0 - (2.0 * tmpvar_86))
      ) - 0.5) * 2.0);
      highp float tmpvar_87;
      tmpvar_87 = (vOscillations_81.y * vOscillations_81.z);
      fTarget_84 = 1.0;
      fAmount_83 = tmpvar_87;
      if ((tmpvar_87 < 0.0)) {
        fTarget_84 = -1.0;
        fAmount_83 = -(tmpvar_87);
      };
      fOscillation_82 = (((
        mix (mix (tmpvar_87, fTarget_84, fAmount_83), fTarget_84, fAmount_83)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_81.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_78 = (vPos_63 + ((vWindVector_80 * fOscillation_82) * _ST_WindBranch.y));
      vPos_63 = vPos_78;
    };
    FinalPosition_14 = vPos_63;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_88;
    vPos_88 = FinalPosition_14;
    highp float fMoveAmount_89;
    highp float fAdjust_90;
    highp float fLength_91;
    fLength_91 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_92;
    tmpvar_92 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_90 = tmpvar_92;
    if ((tmpvar_92 != 0.0)) {
      fAdjust_90 = pow (tmpvar_92, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_93;
    tmpvar_93.zw = vec2(0.0, 0.0);
    tmpvar_93.x = (tmpvar_15.x + _ST_WindGlobal.x);
    tmpvar_93.y = (tmpvar_15.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_94;
    highp vec4 tmpvar_95;
    tmpvar_95 = abs(((
      fract((tmpvar_93 + 0.5))
     * 2.0) - 1.0));
    tmpvar_94 = (((
      (tmpvar_95 * tmpvar_95)
     * 
      (3.0 - (2.0 * tmpvar_95))
    ) - 0.5) * 2.0);
    fMoveAmount_89 = ((_ST_WindGlobal.y * (tmpvar_94.x + 
      (tmpvar_94.y * tmpvar_94.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_89 = (fMoveAmount_89 * fAdjust_90);
    vPos_88.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * fMoveAmount_89));
    vPos_88 = (normalize(vPos_88) * fLength_91);
    FinalPosition_14 = vPos_88;
  };
  tmpvar_10.xyz = FinalPosition_14;
  highp vec4 hPos_96;
  hPos_96 = (glstate_matrix_mvp * tmpvar_10);
  mediump vec3 screenPos_97;
  highp vec4 o_98;
  highp vec4 tmpvar_99;
  tmpvar_99 = (hPos_96 * 0.5);
  highp vec2 tmpvar_100;
  tmpvar_100.x = tmpvar_99.x;
  tmpvar_100.y = (tmpvar_99.y * _ProjectionParams.x);
  o_98.xy = (tmpvar_100 + tmpvar_99.w);
  o_98.zw = hPos_96.zw;
  highp vec3 tmpvar_101;
  tmpvar_101 = o_98.xyw;
  screenPos_97 = tmpvar_101;
  screenPos_97.xy = (screenPos_97.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_8;
  highp vec4 v_102;
  v_102.x = _World2Object[0].x;
  v_102.y = _World2Object[1].x;
  v_102.z = _World2Object[2].x;
  v_102.w = _World2Object[3].x;
  highp vec4 v_103;
  v_103.x = _World2Object[0].y;
  v_103.y = _World2Object[1].y;
  v_103.z = _World2Object[2].y;
  v_103.w = _World2Object[3].y;
  highp vec4 v_104;
  v_104.x = _World2Object[0].z;
  v_104.y = _World2Object[1].z;
  v_104.z = _World2Object[2].z;
  v_104.w = _World2Object[3].z;
  highp vec3 tmpvar_105;
  tmpvar_105 = normalize(((
    (v_102.xyz * tmpvar_11.x)
   + 
    (v_103.xyz * tmpvar_11.y)
  ) + (v_104.xyz * tmpvar_11.z)));
  worldNormal_4 = tmpvar_105;
  tmpvar_5 = worldNormal_4;
  lowp vec4 tmpvar_106;
  tmpvar_106.w = 1.0;
  tmpvar_106.xyz = worldNormal_4;
  mediump vec4 normal_107;
  normal_107 = tmpvar_106;
  mediump vec3 x2_108;
  mediump vec4 tmpvar_109;
  tmpvar_109 = (normal_107.xyzz * normal_107.yzzx);
  x2_108.x = dot (unity_SHBr, tmpvar_109);
  x2_108.y = dot (unity_SHBg, tmpvar_109);
  x2_108.z = dot (unity_SHBb, tmpvar_109);
  tmpvar_7 = (unity_World2Shadow[0] * (_Object2World * tmpvar_10));
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = screenPos_97;
  xlv_TEXCOORD5 = (x2_108 + (unity_SHC.xyz * (
    (normal_107.x * normal_107.x)
   - 
    (normal_107.y * normal_107.y)
  )));
  xlv_TEXCOORD6 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_16;
  x_16 = (tmpvar_10 - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp float shadow_17;
  shadow_17 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_17;
  mediump vec3 normalWorld_18;
  normalWorld_18 = tmpvar_5;
  mediump vec3 tmpvar_19;
  mediump vec3 tmpvar_20;
  mediump vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = normalWorld_18;
  mediump vec3 x1_22;
  x1_22.x = dot (unity_SHAr, tmpvar_21);
  x1_22.y = dot (unity_SHAg, tmpvar_21);
  x1_22.z = dot (unity_SHAb, tmpvar_21);
  tmpvar_20 = (xlv_TEXCOORD5 + x1_22);
  tmpvar_19 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_19;
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_9 * tmpvar_19) * diff_25);
  c_24.w = tmpvar_10;
  c_23.w = c_24.w;
  c_23.xyz = (c_24.xyz + (tmpvar_9 * tmpvar_20));
  c_4.xyz = c_23.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
highp vec3 t1;
bvec2 tb1;
highp vec4 t2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
mediump vec3 t16_14;
highp vec3 t16;
highp int ti16;
highp vec3 t17;
bool tb17;
highp vec3 t22;
highp float t31;
bool tb31;
highp vec2 t34;
highp float t35;
highp vec2 t36;
highp float t46;
bool tb46;
highp float t47;
bool tb47;
highp float t48;
bool tb48;
highp float t49;
mediump float t16_59;
void main()
{
    //Instruction 22165
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 22166
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 22167
    //LT
    tb1.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), t16_0.xxxx).xy;
    //Instruction 22168
    //MUL
    t2.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 22169
    //MAD
    t2.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t2.xyz;
    //Instruction 22170
    //MAD
    t2.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t2.xyz;
    //Instruction 22171
    //DP3
    t31 = dot(t2.xyz, t2.xyz);
    //Instruction 22172
    //RSQ
    t31 = inversesqrt(t31);
    //Instruction 22173
    //MUL
    t2.xyz = vec3(t31) * t2.xyz;
    //Instruction 22174
    //AND
    t2.xyz = mix(vec3(0.0, 0.0, 0.0), t2.xyz, tb1.xxx);
    //Instruction 22175
    //ADD
    t3.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 22176
    //LT
    tb31 = t16_0.x<5.000000;
    //Instruction 22177
    //AND
    ti16 = int(uint(tb31) & uint(tb1.y));
    //Instruction 22178
    //IF
    if((uint(ti16))!=uint(0u)){
        //Instruction 22179
        //ADD
        t16.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 22180
        //EQ
        tb31 = t16_0.x==4.000000;
        //Instruction 22181
        //LT
        tb46 = 0.0<in_TEXCOORD2.w;
        //Instruction 22182
        //MOVC
        t4.xy = (bool(tb46)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 22183
        //ADD
        t16.x = t16.x + t4.x;
        //Instruction 22184
        //ADD
        t16.x = t16.x + 0.500000;
        //Instruction 22185
        //FRC
        t16.x = fract(t16.x);
        //Instruction 22186
        //MAD
        t16.x = t16.x * 2.000000 + -1.0;
        //Instruction 22187
        //MUL
        t47 = abs(t16.x) * abs(t16.x);
        //Instruction 22188
        //MAD
        t16.x = -abs(t16.x) * 2.000000 + 3.000000;
        //Instruction 22189
        //MAD
        t16.x = t47 * t16.x + -0.500000;
        //Instruction 22190
        //DP2
        t16.x = dot(t16.xx, t4.yy);
        //Instruction 22191
        //MUL
        t4.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 22192
        //FRC
        t4.xyz = fract(t4.xyz);
        //Instruction 22193
        //MAD
        t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 22194
        //MUL
        t4.xyz = t16.xxx * t4.xyz;
        //Instruction 22195
        //MAD
        t3.xyz = t4.xyz * in_TEXCOORD2.xxx + t3.xyz;
        //Instruction 22196
        //IF
        if(tb31){
            //Instruction 22197
            //MUL
            t4 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 22198
            //FRC
            t4 = fract(t4);
            //Instruction 22199
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 22200
            //MOVC
            t5 = (bool(tb46)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 22201
            //MOVC
            t16.xyz = (bool(tb46)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 22202
            //MUL
            t47 = t4.w * 3.000000;
            //Instruction 22203
            //MAD
            t6.y = t4.w * 3.000000 + t5.x;
            //Instruction 22204
            //MAD
            t6.x = t5.x * 0.750000 + (-t47);
            //Instruction 22205
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 22206
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 22207
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 22208
            //MUL
            t36.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 22209
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 22210
            //MAD
            t6.xy = t36.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 22211
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 22212
            //DP3
            t47 = dot(t3.xyz, t3.xyz);
            //Instruction 22213
            //SQRT
            t47 = sqrt(t47);
            //Instruction 22214
            //MAD
            t48 = t6.x * t6.x + t6.y;
            //Instruction 22215
            //MUL
            t5.x = t5.z * in_TEXCOORD2.x;
            //Instruction 22216
            //MUL
            t48 = t48 * t5.x;
            //Instruction 22217
            //SINCOS
            t5.x = sin(t48);
            t7.x = cos(t48);
            //Instruction 22218
            //ADD
            t48 = (-t7.x) + 1.0;
            //Instruction 22219
            //MUL
            t8 = t4.xxxy * vec4(t48);
            //Instruction 22220
            //MUL
            t22.xyz = t4.zxy * t5.xxx;
            //Instruction 22221
            //MAD
            t9.xy = t8.zy * t4.zy + t22.zx;
            //Instruction 22222
            //MAD
            t10.xy = t8.xw * t4.xy + t7.xx;
            //Instruction 22223
            //MAD
            t9.z = t8.w * t4.z + (-t22.y);
            //Instruction 22224
            //MAD
            t11.xy = t8.yz * t4.yz + (-t22.xz);
            //Instruction 22225
            //MAD
            t11.z = t8.w * t4.z + t22.y;
            //Instruction 22226
            //MUL
            t5.x = t4.z * t4.z;
            //Instruction 22227
            //MAD
            t11.w = t5.x * t48 + t7.x;
            //Instruction 22228
            //MUL
            t7.xyz = t2.yzx * t4.zxy;
            //Instruction 22229
            //MAD
            t7.xyz = t4.yzx * t2.zxy + (-t7.xyz);
            //Instruction 22230
            //DP3
            t17.x = dot(t2.xyz, t4.xyz);
            //Instruction 22231
            //MAX
            t17.x = max(t17.x, -1.0);
            //Instruction 22232
            //MIN
            t17.x = min(t17.x, 1.0);
            //Instruction 22233
            //ADD
            t7.w = t17.x + t7.y;
            //Instruction 22234
            //DP3
            t48 = dot(t7.xzw, t7.xzw);
            //Instruction 22235
            //RSQ
            t48 = inversesqrt(t48);
            //Instruction 22236
            //MUL
            t4.xyz = vec3(t48) * t7.zxw;
            //Instruction 22237
            //ADD
            t48 = -abs(t17.x) + 1.0;
            //Instruction 22238
            //SQRT
            t48 = sqrt(t48);
            //Instruction 22239
            //MAD
            t5.x = abs(t17.x) * -0.018729 + 0.074261;
            //Instruction 22240
            //MAD
            t5.x = t5.x * abs(t17.x) + -0.212114;
            //Instruction 22241
            //MAD
            t5.x = t5.x * abs(t17.x) + 1.570729;
            //Instruction 22242
            //MUL
            t35 = t48 * t5.x;
            //Instruction 22243
            //MAD
            t35 = t35 * -2.000000 + 3.141593;
            //Instruction 22244
            //LT
            tb17 = t17.x<(-t17.x);
            //Instruction 22245
            //AND
            t17.x = tb17 ? t35 : float(0.0);
            //Instruction 22246
            //MAD
            t17.x = t5.x * t48 + t17.x;
            //Instruction 22247
            //MAD
            t48 = (-t6.y) * t6.y + t6.x;
            //Instruction 22248
            //MAD
            t6.x = t4.w * 3.000000 + t16.z;
            //Instruction 22249
            //MUL
            t6.y = t6.x * 0.870000;
            //Instruction 22250
            //ADD
            t5.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 22251
            //FRC
            t5.xz = fract(t5.xz);
            //Instruction 22252
            //MAD
            t5.xz = t5.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 22253
            //MUL
            t6.xy = abs(t5.xz) * abs(t5.xz);
            //Instruction 22254
            //MAD
            t5.xz = -abs(t5.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 22255
            //MAD
            t5.xz = t6.xy * t5.xz + vec2(-0.500000, -0.500000);
            //Instruction 22256
            //ADD
            t5.xz = t5.xz + t5.xz;
            //Instruction 22257
            //MUL
            t46 = t5.z * t5.z;
            //Instruction 22258
            //MAD
            t46 = t46 * t5.x + 1.0;
            //Instruction 22259
            //MUL
            t46 = t46 * 0.500000;
            t46 = clamp(t46, 0.0, 1.0);
            //Instruction 22260
            //LOG
            t46 = log2(t46);
            //Instruction 22261
            //MUL
            t31 = t46 * t16.y;
            //Instruction 22262
            //EXP
            t31 = exp2(t31);
            //Instruction 22263
            //MUL
            t46 = t5.y * t48;
            //Instruction 22264
            //MAD
            t46 = t17.x * t5.w + t46;
            //Instruction 22265
            //MAD
            t16.x = t16.x * t31 + t46;
            //Instruction 22266
            //MUL
            t16.x = t16.x * in_TEXCOORD2.x;
            //Instruction 22267
            //SINCOS
            t5.x = sin(t16.x);
            t6.x = cos(t16.x);
            //Instruction 22268
            //ADD
            t16.x = (-t6.x) + 1.0;
            //Instruction 22269
            //MUL
            t7 = vec4(t4.y * t16.x, t4.y * t16.x, t4.y * t16.x, t4.z * t16.x);
            //Instruction 22270
            //MUL
            t5.xyz = t4.xyz * t5.xxx;
            //Instruction 22271
            //MAD
            t8.xy = t7.zy * t4.xz + t5.zx;
            //Instruction 22272
            //MAD
            t12.xy = t7.xw * t4.yz + t6.xx;
            //Instruction 22273
            //MAD
            t8.z = t7.w * t4.x + (-t5.y);
            //Instruction 22274
            //MAD
            t13.xy = t7.yz * t4.zx + (-t5.xz);
            //Instruction 22275
            //MAD
            t13.z = t7.w * t4.x + t5.y;
            //Instruction 22276
            //MUL
            t31 = t4.x * t4.x;
            //Instruction 22277
            //MAD
            t8.w = t31 * t16.x + t6.x;
            //Instruction 22278
            //MOV
            t10.z = t11.x;
            //Instruction 22279
            //MOV
            t10.w = t9.x;
            //Instruction 22280
            //MOV
            t12.z = t8.y;
            //Instruction 22281
            //MOV
            t12.w = t13.y;
            //Instruction 22282
            //DP3
            t4.x = dot(t10.xzw, t12.xzw);
            //Instruction 22283
            //MOV
            t13.w = t12.y;
            //Instruction 22284
            //DP3
            t4.y = dot(t10.xwz, t13.xzw);
            //Instruction 22285
            //DP3
            t4.z = dot(t10.xzw, t8.xzw);
            //Instruction 22286
            //MOV
            t9.w = t10.y;
            //Instruction 22287
            //DP3
            t5.x = dot(t9.ywz, t12.xzw);
            //Instruction 22288
            //DP3
            t5.y = dot(t9.yzw, t13.xzw);
            //Instruction 22289
            //DP3
            t5.z = dot(t9.ywz, t8.xzw);
            //Instruction 22290
            //DP3
            t6.x = dot(t11.yzw, t12.xzw);
            //Instruction 22291
            //DP3
            t6.y = dot(t11.ywz, t13.xzw);
            //Instruction 22292
            //DP3
            t6.z = dot(t11.yzw, t8.xzw);
            //Instruction 22293
            //DP3
            t16.x = dot(t4.xyz, in_NORMAL0.xyz);
            //Instruction 22294
            //DP3
            t16.y = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 22295
            //DP3
            t16.z = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 22296
            //DP3
            t4.x = dot(t4.xyz, t3.xyz);
            //Instruction 22297
            //DP3
            t4.y = dot(t5.xyz, t3.xyz);
            //Instruction 22298
            //DP3
            t4.z = dot(t6.xyz, t3.xyz);
            //Instruction 22299
            //DP3
            t17.x = dot(t4.xyz, t4.xyz);
            //Instruction 22300
            //RSQ
            t17.x = inversesqrt(t17.x);
            //Instruction 22301
            //MUL
            t4.xyz = t17.xxx * t4.xyz;
            //Instruction 22302
            //MUL
            t3.xyz = vec3(t47) * t4.xyz;
            //Instruction 22303
        //ELSE
        } else {
            //Instruction 22304
            //MOV
            t16.xyz = in_NORMAL0.xyz;
            //Instruction 22305
        //ENDIF
        }
        //Instruction 22306
    //ELSE
    } else {
        //Instruction 22307
        //MOV
        t16.xyz = in_NORMAL0.xyz;
        //Instruction 22308
    //ENDIF
    }
    //Instruction 22309
    //ADD
    t3.xyz = t3.xyz + in_TEXCOORD1.xyz;
    //Instruction 22310
    //GE
    tb17 = t16_0.x>=3.000000;
    //Instruction 22311
    //IF
    if(tb17){
        //Instruction 22312
        //EQ
        tb17 = t16_0.x==5.000000;
        //Instruction 22313
        //IF
        if(tb17){
            //Instruction 22314
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 22315
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 22316
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 22317
            //DP3
            t17.x = dot(t4.xyz, t4.xyz);
            //Instruction 22318
            //RSQ
            t17.x = inversesqrt(t17.x);
            //Instruction 22319
            //MUL
            t4.xyz = t17.xxx * t4.xyz;
            //Instruction 22320
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 22321
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 22322
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 22323
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 22324
            //ADD
            t17.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 22325
            //ADD
            t17.x = t17.x + _ST_WindBranch.x;
            //Instruction 22326
            //ADD
            t0.x = t17.x + in_TEXCOORD0.w;
            //Instruction 22327
            //MAD
            t0.y = t17.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 22328
            //MUL
            t47 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 22329
            //MUL
            t0.z = t47 * 0.500000;
            //Instruction 22330
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 22331
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 22332
            //FRC
            t0 = fract(t0);
            //Instruction 22333
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 22334
            //MUL
            t6 = abs(t0) * abs(t0);
            //Instruction 22335
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 22336
            //MAD
            t0 = t6 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 22337
            //ADD
            t0 = t0 + t0;
            //Instruction 22338
            //MUL
            t6.w = t0.z * t0.y;
            //Instruction 22339
            //LT
            tb47 = t6.w<0.0;
            //Instruction 22340
            //MOV
            t6.y = (-t6.w);
            //Instruction 22341
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 22342
            //MOVC
            t6.xy = (bool(tb47)) ? t6.xy : t6.zw;
            //Instruction 22343
            //MAD
            t47 = (-t0.y) * t0.z + t6.x;
            //Instruction 22344
            //MAD
            t47 = t6.y * t47 + t6.w;
            //Instruction 22345
            //ADD
            t48 = (-t47) + t6.x;
            //Instruction 22346
            //MAD
            t47 = t6.y * t48 + t47;
            //Instruction 22347
            //MUL
            t47 = t47 * _ST_WindBranchTwitch.x;
            //Instruction 22348
            //ADD
            t48 = (-_ST_WindVector.w) + 1.0;
            //Instruction 22349
            //ADD
            t49 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 22350
            //MUL
            t49 = t0.x * t49;
            //Instruction 22351
            //MAD
            t47 = t47 * t48 + t49;
            //Instruction 22352
            //MAD
            t48 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 22353
            //MUL
            t47 = t47 * t48;
            //Instruction 22354
            //MUL
            t5.xyz = vec3(t47) * t5.xyz;
            //Instruction 22355
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 22356
            //MAD
            t6.x = t17.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 22357
            //MUL
            t17.x = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 22358
            //MAD
            t6.y = t17.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 22359
            //ADD
            t17.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 22360
            //FRC
            t17.xz = fract(t17.xz);
            //Instruction 22361
            //MAD
            t17.xz = t17.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 22362
            //MUL
            t6.xy = abs(t17.xz) * abs(t17.xz);
            //Instruction 22363
            //MAD
            t17.xz = -abs(t17.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 22364
            //MAD
            t17.xz = t6.xy * t17.xz + vec2(-0.500000, -0.500000);
            //Instruction 22365
            //ADD
            t17.xz = t17.xz + t17.xz;
            //Instruction 22366
            //MUL
            t17.xz = t17.xz * t17.xz;
            //Instruction 22367
            //MUL
            t17.x = t17.x * t17.z;
            //Instruction 22368
            //MAD
            t17.x = (-t17.x) * _ST_WindTurbulences.x + 1.0;
            //Instruction 22369
            //MUL
            t47 = t0.w * _ST_WindVector.w;
            //Instruction 22370
            //MAD
            t17.x = t47 * _ST_WindBranchWhip.x + t17.x;
            //Instruction 22371
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 22372
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 22373
            //MUL
            t4.xyz = t17.xxx * t4.xyz;
            //Instruction 22374
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 22375
        //ELSE
        } else {
            //Instruction 22376
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 22377
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 22378
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 22379
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 22380
            //ADD
            t17.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 22381
            //ADD
            t17.x = t17.x + _ST_WindBranch.x;
            //Instruction 22382
            //ADD
            t5.x = t17.x + in_TEXCOORD0.w;
            //Instruction 22383
            //MAD
            t5.y = t17.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 22384
            //MUL
            t17.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 22385
            //MUL
            t5.z = t17.x * 0.500000;
            //Instruction 22386
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 22387
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 22388
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 22389
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 22390
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 22391
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 22392
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 22393
            //MUL
            t0.w = t5.z * t5.y;
            //Instruction 22394
            //LT
            tb17 = t0.w<0.0;
            //Instruction 22395
            //MOV
            t0.y = (-t0.w);
            //Instruction 22396
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 22397
            //MOVC
            t17.xz = (bool(tb17)) ? t0.xy : t0.zw;
            //Instruction 22398
            //MAD
            t48 = (-t5.y) * t5.z + t17.x;
            //Instruction 22399
            //MAD
            t48 = t17.z * t48 + t0.w;
            //Instruction 22400
            //ADD
            t17.x = t17.x + (-t48);
            //Instruction 22401
            //MAD
            t17.x = t17.z * t17.x + t48;
            //Instruction 22402
            //MUL
            t17.x = t17.x * _ST_WindBranchTwitch.x;
            //Instruction 22403
            //ADD
            t47 = (-_ST_WindVector.w) + 1.0;
            //Instruction 22404
            //ADD
            t48 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 22405
            //MUL
            t48 = t48 * t5.x;
            //Instruction 22406
            //MAD
            t17.x = t17.x * t47 + t48;
            //Instruction 22407
            //MUL
            t4.xyz = t17.xxx * t4.xyz;
            //Instruction 22408
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 22409
        //ENDIF
        }
        //Instruction 22410
    //ENDIF
    }
    //Instruction 22411
    //DP3
    t17.x = dot(t3.xyz, t3.xyz);
    //Instruction 22412
    //SQRT
    t17.x = sqrt(t17.x);
    //Instruction 22413
    //DIV
    t47 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 22414
    //MAD
    t47 = (-t47) * 0.250000 + t3.y;
    //Instruction 22415
    //MAX
    t47 = max(t47, 0.0);
    //Instruction 22416
    //MUL
    t47 = t47 * _ST_WindGlobal.z;
    //Instruction 22417
    //NE
    tb48 = t47!=0.0;
    //Instruction 22418
    //LOG
    t4.x = log2(t47);
    //Instruction 22419
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 22420
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 22421
    //MOVC
    t47 = (tb48) ? t4.x : t47;
    //Instruction 22422
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 22423
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 22424
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 22425
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 22426
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 22427
    //MUL
    t34.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 22428
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 22429
    //MAD
    t4.xy = t34.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 22430
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 22431
    //MAD
    t48 = t4.y * t4.y + t4.x;
    //Instruction 22432
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 22433
    //MAD
    t48 = _ST_WindGlobal.y * t48 + t4.x;
    //Instruction 22434
    //MUL
    t47 = t47 * t48;
    //Instruction 22435
    //MAD
    t4.xz = t2.xz * vec2(t47) + t3.xz;
    //Instruction 22436
    //MOV
    t4.y = t3.y;
    //Instruction 22437
    //DP3
    t2.x = dot(t4.xyz, t4.xyz);
    //Instruction 22438
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 22439
    //MUL
    t2.xzw = t2.xxx * t4.xyz;
    //Instruction 22440
    //MUL
    t2.xyz = t17.xxx * t2.xzw;
    //Instruction 22441
    //MOVC
    t2.xyz = (tb1.x) ? t2.xyz : t3.xyz;
    //Instruction 22442
    //MUL
    t3.xyz = t2.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 22443
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t2.xxx + t3.xyz;
    //Instruction 22444
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t2.zzz + t3.xyz;
    //Instruction 22445
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 22446
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 22447
    //MUL
    t1.x = t3.y * _ProjectionParams.x;
    //Instruction 22448
    //MUL
    t4.w = t1.x * 0.500000;
    //Instruction 22449
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 22450
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 22451
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 22452
    //MUL
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 22453
    //MAD
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    //Instruction 22454
    //MAD
    t0 = glstate_matrix_mvp[2] * t2.zzzz + t0;
    //Instruction 22455
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 22456
    //MUL
    t4.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 22457
    //MAD
    t4.xyz = _Object2World[0].xyz * t2.xxx + t4.xyz;
    //Instruction 22458
    //MAD
    t4.xyz = _Object2World[2].xyz * t2.zzz + t4.xyz;
    //Instruction 22459
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t4.xyz;
    //Instruction 22460
    //MOV
    t4.x = _World2Object[0].x;
    //Instruction 22461
    //MOV
    t4.y = _World2Object[1].x;
    //Instruction 22462
    //MOV
    t4.z = _World2Object[2].x;
    //Instruction 22463
    //MOV
    t5.x = _World2Object[0].y;
    //Instruction 22464
    //MOV
    t5.y = _World2Object[1].y;
    //Instruction 22465
    //MOV
    t5.z = _World2Object[2].y;
    //Instruction 22466
    //MUL
    t5.xyz = t16.yyy * t5.xyz;
    //Instruction 22467
    //MAD
    t1.xyz = t4.xyz * t16.xxx + t5.xyz;
    //Instruction 22468
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 22469
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 22470
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 22471
    //MAD
    t1.xyz = t4.xyz * t16.zzz + t1.xyz;
    //Instruction 22472
    //DP3
    t46 = dot(t1.xyz, t1.xyz);
    //Instruction 22473
    //RSQ
    t46 = inversesqrt(t46);
    //Instruction 22474
    //MUL
    t1.xyz = vec3(t46) * t1.xyz;
    //Instruction 22475
    //MUL
    t16_0 = t1.yzzx * t1.xyzz;
    //Instruction 22476
    //DP4
    t16_14.x = dot(unity_SHBr, t16_0);
    //Instruction 22477
    //DP4
    t16_14.y = dot(unity_SHBg, t16_0);
    //Instruction 22478
    //DP4
    t16_14.z = dot(unity_SHBb, t16_0);
    //Instruction 22479
    //MUL
    t16_59 = t1.y * t1.y;
    //Instruction 22480
    //MAD
    t16_59 = t1.x * t1.x + (-t16_59);
    //Instruction 22481
    //MAD
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(t16_59) + t16_14.xyz;
    //Instruction 22482
    //MUL
    t0 = t2.yyyy * _Object2World[1];
    //Instruction 22483
    //MAD
    t0 = _Object2World[0] * t2.xxxx + t0;
    //Instruction 22484
    //MAD
    t0 = _Object2World[2] * t2.zzzz + t0;
    //Instruction 22485
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 22486
    //MUL
    t2 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 22487
    //MAD
    t2 = unity_World2Shadow[0][0] * t0.xxxx + t2;
    //Instruction 22488
    //MAD
    t2 = unity_World2Shadow[0][2] * t0.zzzz + t2;
    //Instruction 22489
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t2;
    //Instruction 22490
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 22491
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 22492
    //MOV
    vs_TEXCOORD6 = t0;
    //Instruction 22493
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 22494
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 22495
    //MOV
    vs_TEXCOORD4.xyz = t3.xyz;
    //Instruction 22496
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump float t16_6;
mediump float t16_21;
mediump float t16_22;
void main()
{
    //Instruction 22134
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 22135
    //FRC
    t16_6 = fract(t16_0.y);
    //Instruction 22136
    //MOV
    t1.x = t16_0.x;
    //Instruction 22137
    //MAD
    t1.y = t16_6 * 0.062500 + unity_LODFade.y;
    //Instruction 22138
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 22139
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 22140
    //LT
    tb1 = t16_1<0.0;
    //Instruction 22141
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 22142
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 22143
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 22144
    //MUL
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 22145
    //LT
    tb1 = t10_2<0.0;
    //Instruction 22146
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 22147
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 22148
    //MOV
    t16_0.w = 1.0;
    //Instruction 22149
    //DP4
    t16_4.x = dot(unity_SHAr, t16_0);
    //Instruction 22150
    //DP4
    t16_4.y = dot(unity_SHAg, t16_0);
    //Instruction 22151
    //DP4
    t16_4.z = dot(unity_SHAb, t16_0);
    //Instruction 22152
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD5.xyz;
    //Instruction 22153
    //MUL
    t16_4.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 22154
    //SAMPLE_C_LZ
    vec3 txVec47 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_21 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec47, 0.0);
    //Instruction 22155
    //ADD
    t16_22 = (-_LightShadowData.x) + 1.0;
    //Instruction 22156
    //MAD
    t16_21 = t16_21 * t16_22 + _LightShadowData.x;
    //Instruction 22157
    //MUL
    t16_5.xyz = vec3(t16_21) * _LightColor0.xyz;
    //Instruction 22158
    //MUL
    t16_3.xyz = t16_3.xyz * t16_5.xyz;
    //Instruction 22159
    //DP3
    t16_21 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 22160
    //MAX
    t16_21 = max(t16_21, 0.0);
    //Instruction 22161
    //MAD
    t16_3.xyz = t16_3.xyz * vec3(t16_21) + t16_4.xyz;
    //Instruction 22162
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 22163
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 22164
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec4 tmpvar_8;
  lowp vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10.xy = tmpvar_3.xy;
  tmpvar_9.w = _Color.w;
  tmpvar_9.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_1;
  tmpvar_12 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  FinalPosition_15 = tmpvar_1.xyz;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_15 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_17 > 1.0) && (tmpvar_17 < 5.0))) {
    highp float tmpvar_20;
    tmpvar_20 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_21;
    isBestWind_21 = (tmpvar_17 == 4.0);
    bool bLeaf2_22;
    bLeaf2_22 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_23;
    vPos_23 = FinalPosition_15;
    highp vec3 vDirection_24;
    vDirection_24 = tmpvar_2;
    highp float tmpvar_25;
    if (bLeaf2_22) {
      tmpvar_25 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_25 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_26;
    if (bLeaf2_22) {
      tmpvar_26 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_26 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_27;
    highp vec4 tmpvar_28;
    tmpvar_28.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_28.x = (tmpvar_25 + tmpvar_20);
    highp vec4 tmpvar_29;
    tmpvar_29 = abs(((
      fract((tmpvar_28 + 0.5))
     * 2.0) - 1.0));
    vPos_27 = (FinalPosition_15 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_26 * (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_24 = tmpvar_2;
    vPos_23 = vPos_27;
    if (isBestWind_21) {
      highp vec3 tmpvar_30;
      tmpvar_30 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_31;
      if (bLeaf2_22) {
        tmpvar_31 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_31 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_32;
      if (bLeaf2_22) {
        tmpvar_32 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_33;
      if (bLeaf2_22) {
        tmpvar_33 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_34;
      if (bLeaf2_22) {
        tmpvar_34 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_35;
      if (bLeaf2_22) {
        tmpvar_35 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_35 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_36;
      if (bLeaf2_22) {
        tmpvar_36 = bool(1);
      } else {
        tmpvar_36 = bool(1);
      };
      highp float fTwitch_37;
      highp vec3 vAxis_38;
      highp float fOsc_39;
      highp vec3 vOriginPos_40;
      highp vec3 tmpvar_41;
      tmpvar_41 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_42;
      tmpvar_42 = ((tmpvar_41.x + tmpvar_41.y) + tmpvar_41.z);
      highp vec4 tmpvar_43;
      tmpvar_43.x = (tmpvar_31 + tmpvar_42);
      tmpvar_43.y = ((tmpvar_31 * 0.75) - tmpvar_42);
      tmpvar_43.z = ((tmpvar_31 * 0.01) + tmpvar_42);
      tmpvar_43.w = (tmpvar_31 + tmpvar_42);
      highp vec4 tmpvar_44;
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      tmpvar_44 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      vOriginPos_40 = vPos_27;
      highp float tmpvar_46;
      tmpvar_46 = sqrt(dot (vPos_27, vPos_27));
      highp float fAngle_47;
      fAngle_47 = ((_glesMultiTexCoord2.x * tmpvar_33) * (tmpvar_44.x + (tmpvar_44.y * tmpvar_44.y)));
      highp vec2 vSinCos_48;
      vSinCos_48.x = sin(fAngle_47);
      vSinCos_48.y = cos(fAngle_47);
      highp float tmpvar_49;
      tmpvar_49 = (1.0 - vSinCos_48.y);
      highp mat3 tmpvar_50;
      tmpvar_50[0].x = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.x) + vSinCos_48.y);
      tmpvar_50[0].y = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.y) + (vSinCos_48.x * tmpvar_30.z));
      tmpvar_50[0].z = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.z) - (vSinCos_48.x * tmpvar_30.y));
      tmpvar_50[1].x = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.y) - (vSinCos_48.x * tmpvar_30.z));
      tmpvar_50[1].y = (((tmpvar_49 * tmpvar_30.y) * tmpvar_30.y) + vSinCos_48.y);
      tmpvar_50[1].z = (((tmpvar_49 * tmpvar_30.y) * tmpvar_30.z) + (vSinCos_48.x * tmpvar_30.x));
      tmpvar_50[2].x = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.z) + (vSinCos_48.x * tmpvar_30.y));
      tmpvar_50[2].y = (((tmpvar_49 * tmpvar_30.y) * tmpvar_30.z) - (vSinCos_48.x * tmpvar_30.x));
      tmpvar_50[2].z = (((tmpvar_49 * tmpvar_30.z) * tmpvar_30.z) + vSinCos_48.y);
      highp vec3 tmpvar_51;
      tmpvar_51 = ((tmpvar_30.yzx * vRotatedWindVector_14.zxy) - (tmpvar_30.zxy * vRotatedWindVector_14.yzx));
      vAxis_38.xz = tmpvar_51.xz;
      highp float tmpvar_52;
      tmpvar_52 = clamp (dot (vRotatedWindVector_14, tmpvar_30), -1.0, 1.0);
      vAxis_38.y = (tmpvar_51.y + tmpvar_52);
      highp vec3 tmpvar_53;
      tmpvar_53 = normalize(vAxis_38);
      vAxis_38 = tmpvar_53;
      highp float tmpvar_54;
      tmpvar_54 = (1.570796 - (sign(tmpvar_52) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_52))) * (1.570796 + (abs(tmpvar_52) * (-0.2146018 + 
          (abs(tmpvar_52) * (0.08656672 + (abs(tmpvar_52) * -0.03102955)))
        ))))
      )));
      fOsc_39 = (tmpvar_44.y - (tmpvar_44.x * tmpvar_44.x));
      fTwitch_37 = 0.0;
      if (tmpvar_36) {
        highp float fTime_55;
        fTime_55 = (tmpvar_35.z + tmpvar_42);
        highp vec4 tmpvar_56;
        tmpvar_56.zw = vec2(0.0, 0.0);
        tmpvar_56.x = fTime_55;
        tmpvar_56.y = (0.87 * fTime_55);
        highp vec4 tmpvar_57;
        highp vec4 tmpvar_58;
        tmpvar_58 = abs(((
          fract((tmpvar_56 + 0.5))
         * 2.0) - 1.0));
        tmpvar_57 = (((
          (tmpvar_58 * tmpvar_58)
         * 
          (3.0 - (2.0 * tmpvar_58))
        ) - 0.5) * 2.0);
        fTwitch_37 = (tmpvar_35.x * pow (clamp (
          ((((tmpvar_57.x * tmpvar_57.y) * tmpvar_57.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_35.y));
      };
      highp float fAngle_59;
      fAngle_59 = (_glesMultiTexCoord2.x * ((
        (tmpvar_54 * tmpvar_34)
       + 
        (fOsc_39 * tmpvar_32)
      ) + fTwitch_37));
      highp vec2 vSinCos_60;
      vSinCos_60.x = sin(fAngle_59);
      vSinCos_60.y = cos(fAngle_59);
      highp float tmpvar_61;
      tmpvar_61 = (1.0 - vSinCos_60.y);
      highp mat3 tmpvar_62;
      tmpvar_62[0].x = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.x) + vSinCos_60.y);
      tmpvar_62[0].y = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.y) + (vSinCos_60.x * tmpvar_53.z));
      tmpvar_62[0].z = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.z) - (vSinCos_60.x * tmpvar_53.y));
      tmpvar_62[1].x = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.y) - (vSinCos_60.x * tmpvar_53.z));
      tmpvar_62[1].y = (((tmpvar_61 * tmpvar_53.y) * tmpvar_53.y) + vSinCos_60.y);
      tmpvar_62[1].z = (((tmpvar_61 * tmpvar_53.y) * tmpvar_53.z) + (vSinCos_60.x * tmpvar_53.x));
      tmpvar_62[2].x = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.z) + (vSinCos_60.x * tmpvar_53.y));
      tmpvar_62[2].y = (((tmpvar_61 * tmpvar_53.y) * tmpvar_53.z) - (vSinCos_60.x * tmpvar_53.x));
      tmpvar_62[2].z = (((tmpvar_61 * tmpvar_53.z) * tmpvar_53.z) + vSinCos_60.y);
      highp mat3 tmpvar_63;
      tmpvar_63 = (tmpvar_50 * tmpvar_62);
      vOriginPos_40 = (normalize((tmpvar_63 * vPos_27)) * tmpvar_46);
      vDirection_24 = (tmpvar_63 * _glesNormal);
      vPos_23 = vOriginPos_40;
    };
    tmpvar_12 = vDirection_24;
    FinalPosition_15 = vPos_23;
  };
  FinalPosition_15 = (FinalPosition_15 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_64;
    vPos_64 = FinalPosition_15;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_65;
      vPos_65 = FinalPosition_15;
      highp float fTime_66;
      highp float fAdherenceScale_67;
      highp vec3 vWindVector_68;
      vWindVector_68 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_66 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_69;
      highp float fOscillation_70;
      fOscillation_70 = 1.0;
      highp float fAmount_71;
      highp float fTarget_72;
      highp vec4 tmpvar_73;
      tmpvar_73.x = (fTime_66 + _glesMultiTexCoord0.w);
      tmpvar_73.y = ((fTime_66 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_73.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_66 + _glesMultiTexCoord0.w));
      tmpvar_73.w = ((fTime_66 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_74;
      tmpvar_74 = abs(((
        fract((tmpvar_73 + 0.5))
       * 2.0) - 1.0));
      vOscillations_69 = (((
        (tmpvar_74 * tmpvar_74)
       * 
        (3.0 - (2.0 * tmpvar_74))
      ) - 0.5) * 2.0);
      highp float tmpvar_75;
      tmpvar_75 = (vOscillations_69.y * vOscillations_69.z);
      fTarget_72 = 1.0;
      fAmount_71 = tmpvar_75;
      if ((tmpvar_75 < 0.0)) {
        fTarget_72 = -1.0;
        fAmount_71 = -(tmpvar_75);
      };
      fOscillation_70 = (((
        mix (mix (tmpvar_75, fTarget_72, fAmount_71), fTarget_72, fAmount_71)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_69.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_70 = (fOscillation_70 * (1.0 + (vOscillations_69.w * _ST_WindBranchWhip.x)));
      vPos_65 = (FinalPosition_15 + ((vWindVector_68 * fOscillation_70) * _ST_WindBranch.y));
      highp vec4 tmpvar_76;
      tmpvar_76.zw = vec2(0.0, 0.0);
      tmpvar_76.x = ((fTime_66 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_76.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_77;
      highp vec4 tmpvar_78;
      tmpvar_78 = abs(((
        fract((tmpvar_76 + 0.5))
       * 2.0) - 1.0));
      tmpvar_77 = (((
        (tmpvar_78 * tmpvar_78)
       * 
        (3.0 - (2.0 * tmpvar_78))
      ) - 0.5) * 2.0);
      fAdherenceScale_67 = (1.0 - ((tmpvar_77.x * tmpvar_77.y) * (
        (tmpvar_77.x * tmpvar_77.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_67 = (fAdherenceScale_67 + ((vOscillations_69.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_65 = (vPos_65 + ((
        ((vRotatedBranchAnchor_13 - vPos_65) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_67) * _glesMultiTexCoord0.z));
      vPos_64 = vPos_65;
    } else {
      highp vec3 vPos_79;
      vPos_79 = vPos_64;
      highp float fTime_80;
      highp vec3 vWindVector_81;
      vWindVector_81 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_80 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_82;
      highp float fOscillation_83;
      fOscillation_83 = 1.0;
      highp float fAmount_84;
      highp float fTarget_85;
      highp vec4 tmpvar_86;
      tmpvar_86.w = 0.0;
      tmpvar_86.x = (fTime_80 + _glesMultiTexCoord0.w);
      tmpvar_86.y = ((fTime_80 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_86.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_80 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_87;
      tmpvar_87 = abs(((
        fract((tmpvar_86 + 0.5))
       * 2.0) - 1.0));
      vOscillations_82 = (((
        (tmpvar_87 * tmpvar_87)
       * 
        (3.0 - (2.0 * tmpvar_87))
      ) - 0.5) * 2.0);
      highp float tmpvar_88;
      tmpvar_88 = (vOscillations_82.y * vOscillations_82.z);
      fTarget_85 = 1.0;
      fAmount_84 = tmpvar_88;
      if ((tmpvar_88 < 0.0)) {
        fTarget_85 = -1.0;
        fAmount_84 = -(tmpvar_88);
      };
      fOscillation_83 = (((
        mix (mix (tmpvar_88, fTarget_85, fAmount_84), fTarget_85, fAmount_84)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_82.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_79 = (vPos_64 + ((vWindVector_81 * fOscillation_83) * _ST_WindBranch.y));
      vPos_64 = vPos_79;
    };
    FinalPosition_15 = vPos_64;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_89;
    vPos_89 = FinalPosition_15;
    highp float fMoveAmount_90;
    highp float fAdjust_91;
    highp float fLength_92;
    fLength_92 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_93;
    tmpvar_93 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_91 = tmpvar_93;
    if ((tmpvar_93 != 0.0)) {
      fAdjust_91 = pow (tmpvar_93, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_94;
    tmpvar_94.zw = vec2(0.0, 0.0);
    tmpvar_94.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_94.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_95;
    highp vec4 tmpvar_96;
    tmpvar_96 = abs(((
      fract((tmpvar_94 + 0.5))
     * 2.0) - 1.0));
    tmpvar_95 = (((
      (tmpvar_96 * tmpvar_96)
     * 
      (3.0 - (2.0 * tmpvar_96))
    ) - 0.5) * 2.0);
    fMoveAmount_90 = ((_ST_WindGlobal.y * (tmpvar_95.x + 
      (tmpvar_95.y * tmpvar_95.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_90 = (fMoveAmount_90 * fAdjust_91);
    vPos_89.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * fMoveAmount_90));
    vPos_89 = (normalize(vPos_89) * fLength_92);
    FinalPosition_15 = vPos_89;
  };
  tmpvar_11.xyz = FinalPosition_15;
  highp vec4 hPos_97;
  hPos_97 = (glstate_matrix_mvp * tmpvar_11);
  mediump vec3 screenPos_98;
  highp vec4 o_99;
  highp vec4 tmpvar_100;
  tmpvar_100 = (hPos_97 * 0.5);
  highp vec2 tmpvar_101;
  tmpvar_101.x = tmpvar_100.x;
  tmpvar_101.y = (tmpvar_100.y * _ProjectionParams.x);
  o_99.xy = (tmpvar_101 + tmpvar_100.w);
  o_99.zw = hPos_97.zw;
  highp vec3 tmpvar_102;
  tmpvar_102 = o_99.xyw;
  screenPos_98 = tmpvar_102;
  screenPos_98.xy = (screenPos_98.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_9;
  highp vec3 tmpvar_103;
  tmpvar_103 = (_Object2World * tmpvar_11).xyz;
  highp vec4 v_104;
  v_104.x = _World2Object[0].x;
  v_104.y = _World2Object[1].x;
  v_104.z = _World2Object[2].x;
  v_104.w = _World2Object[3].x;
  highp vec4 v_105;
  v_105.x = _World2Object[0].y;
  v_105.y = _World2Object[1].y;
  v_105.z = _World2Object[2].y;
  v_105.w = _World2Object[3].y;
  highp vec4 v_106;
  v_106.x = _World2Object[0].z;
  v_106.y = _World2Object[1].z;
  v_106.z = _World2Object[2].z;
  v_106.w = _World2Object[3].z;
  highp vec3 tmpvar_107;
  tmpvar_107 = normalize(((
    (v_104.xyz * tmpvar_12.x)
   + 
    (v_105.xyz * tmpvar_12.y)
  ) + (v_106.xyz * tmpvar_12.z)));
  worldNormal_4 = tmpvar_107;
  tmpvar_5 = worldNormal_4;
  lowp vec4 tmpvar_108;
  tmpvar_108.w = 1.0;
  tmpvar_108.xyz = worldNormal_4;
  mediump vec4 normal_109;
  normal_109 = tmpvar_108;
  mediump vec3 x2_110;
  mediump vec4 tmpvar_111;
  tmpvar_111 = (normal_109.xyzz * normal_109.yzzx);
  x2_110.x = dot (unity_SHBr, tmpvar_111);
  x2_110.y = dot (unity_SHBg, tmpvar_111);
  x2_110.z = dot (unity_SHBb, tmpvar_111);
  highp vec3 lightColor0_112;
  lightColor0_112 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_113;
  lightColor1_113 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_114;
  lightColor2_114 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_115;
  lightColor3_115 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_116;
  lightAttenSq_116 = unity_4LightAtten0;
  highp vec3 normal_117;
  normal_117 = worldNormal_4;
  highp vec3 col_118;
  highp vec4 ndotl_119;
  highp vec4 lengthSq_120;
  highp vec4 tmpvar_121;
  tmpvar_121 = (unity_4LightPosX0 - tmpvar_103.x);
  highp vec4 tmpvar_122;
  tmpvar_122 = (unity_4LightPosY0 - tmpvar_103.y);
  highp vec4 tmpvar_123;
  tmpvar_123 = (unity_4LightPosZ0 - tmpvar_103.z);
  lengthSq_120 = (tmpvar_121 * tmpvar_121);
  lengthSq_120 = (lengthSq_120 + (tmpvar_122 * tmpvar_122));
  lengthSq_120 = (lengthSq_120 + (tmpvar_123 * tmpvar_123));
  ndotl_119 = (tmpvar_121 * normal_117.x);
  ndotl_119 = (ndotl_119 + (tmpvar_122 * normal_117.y));
  ndotl_119 = (ndotl_119 + (tmpvar_123 * normal_117.z));
  highp vec4 tmpvar_124;
  tmpvar_124 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_119 * inversesqrt(lengthSq_120)));
  ndotl_119 = tmpvar_124;
  highp vec4 tmpvar_125;
  tmpvar_125 = (tmpvar_124 * (1.0/((1.0 + 
    (lengthSq_120 * lightAttenSq_116)
  ))));
  col_118 = (lightColor0_112 * tmpvar_125.x);
  col_118 = (col_118 + (lightColor1_113 * tmpvar_125.y));
  col_118 = (col_118 + (lightColor2_114 * tmpvar_125.z));
  col_118 = (col_118 + (lightColor3_115 * tmpvar_125.w));
  tmpvar_7 = ((x2_110 + (unity_SHC.xyz * 
    ((normal_109.x * normal_109.x) - (normal_109.y * normal_109.y))
  )) + col_118);
  tmpvar_8 = (unity_World2Shadow[0] * (_Object2World * tmpvar_11));
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_103;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_10;
  xlv_TEXCOORD4 = screenPos_98;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_16;
  x_16 = (tmpvar_10 - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp float shadow_17;
  shadow_17 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_17;
  mediump vec3 normalWorld_18;
  normalWorld_18 = tmpvar_5;
  mediump vec3 tmpvar_19;
  mediump vec3 tmpvar_20;
  mediump vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = normalWorld_18;
  mediump vec3 x1_22;
  x1_22.x = dot (unity_SHAr, tmpvar_21);
  x1_22.y = dot (unity_SHAg, tmpvar_21);
  x1_22.z = dot (unity_SHAb, tmpvar_21);
  tmpvar_20 = (xlv_TEXCOORD5 + x1_22);
  tmpvar_19 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_19;
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_9 * tmpvar_19) * diff_25);
  c_24.w = tmpvar_10;
  c_23.w = c_24.w;
  c_23.xyz = (c_24.xyz + (tmpvar_9 * tmpvar_20));
  c_4.xyz = c_23.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
highp vec3 t1;
bvec2 tb1;
highp vec4 t2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
mediump vec3 t16_14;
highp vec3 t16;
highp int ti16;
highp vec3 t17;
bool tb17;
highp vec3 t22;
highp float t31;
bool tb31;
highp vec2 t34;
highp float t35;
highp vec2 t36;
highp float t46;
bool tb46;
highp float t47;
bool tb47;
highp float t48;
bool tb48;
highp float t49;
mediump float t16_59;
void main()
{
    //Instruction 22100
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 22101
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 22102
    //LT
    tb1.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), t16_0.xxxx).xy;
    //Instruction 22103
    //MUL
    t2.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 22104
    //MAD
    t2.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t2.xyz;
    //Instruction 22105
    //MAD
    t2.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t2.xyz;
    //Instruction 22106
    //DP3
    t31 = dot(t2.xyz, t2.xyz);
    //Instruction 22107
    //RSQ
    t31 = inversesqrt(t31);
    //Instruction 22108
    //MUL
    t2.xyz = vec3(t31) * t2.xyz;
    //Instruction 22109
    //AND
    t2.xyz = mix(vec3(0.0, 0.0, 0.0), t2.xyz, tb1.xxx);
    //Instruction 22110
    //ADD
    t3.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 22111
    //LT
    tb31 = t16_0.x<5.000000;
    //Instruction 22112
    //AND
    ti16 = int(uint(tb31) & uint(tb1.y));
    //Instruction 22113
    //IF
    if((uint(ti16))!=uint(0u)){
        //Instruction 22114
        //ADD
        t16.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 22115
        //EQ
        tb31 = t16_0.x==4.000000;
        //Instruction 22116
        //LT
        tb46 = 0.0<in_TEXCOORD2.w;
        //Instruction 22117
        //MOVC
        t4.xy = (bool(tb46)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 22118
        //ADD
        t16.x = t16.x + t4.x;
        //Instruction 22119
        //ADD
        t16.x = t16.x + 0.500000;
        //Instruction 22120
        //FRC
        t16.x = fract(t16.x);
        //Instruction 22121
        //MAD
        t16.x = t16.x * 2.000000 + -1.0;
        //Instruction 22122
        //MUL
        t47 = abs(t16.x) * abs(t16.x);
        //Instruction 22123
        //MAD
        t16.x = -abs(t16.x) * 2.000000 + 3.000000;
        //Instruction 22124
        //MAD
        t16.x = t47 * t16.x + -0.500000;
        //Instruction 22125
        //DP2
        t16.x = dot(t16.xx, t4.yy);
        //Instruction 22126
        //MUL
        t4.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 22127
        //FRC
        t4.xyz = fract(t4.xyz);
        //Instruction 22128
        //MAD
        t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 22129
        //MUL
        t4.xyz = t16.xxx * t4.xyz;
        //Instruction 22130
        //MAD
        t3.xyz = t4.xyz * in_TEXCOORD2.xxx + t3.xyz;
        //Instruction 22131
        //IF
        if(tb31){
            //Instruction 22132
            //MUL
            t4 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 22133
            //FRC
            t4 = fract(t4);
            //Instruction 22134
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 22135
            //MOVC
            t5 = (bool(tb46)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 22136
            //MOVC
            t16.xyz = (bool(tb46)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 22137
            //MUL
            t47 = t4.w * 3.000000;
            //Instruction 22138
            //MAD
            t6.y = t4.w * 3.000000 + t5.x;
            //Instruction 22139
            //MAD
            t6.x = t5.x * 0.750000 + (-t47);
            //Instruction 22140
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 22141
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 22142
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 22143
            //MUL
            t36.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 22144
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 22145
            //MAD
            t6.xy = t36.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 22146
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 22147
            //DP3
            t47 = dot(t3.xyz, t3.xyz);
            //Instruction 22148
            //SQRT
            t47 = sqrt(t47);
            //Instruction 22149
            //MAD
            t48 = t6.x * t6.x + t6.y;
            //Instruction 22150
            //MUL
            t5.x = t5.z * in_TEXCOORD2.x;
            //Instruction 22151
            //MUL
            t48 = t48 * t5.x;
            //Instruction 22152
            //SINCOS
            t5.x = sin(t48);
            t7.x = cos(t48);
            //Instruction 22153
            //ADD
            t48 = (-t7.x) + 1.0;
            //Instruction 22154
            //MUL
            t8 = t4.xxxy * vec4(t48);
            //Instruction 22155
            //MUL
            t22.xyz = t4.zxy * t5.xxx;
            //Instruction 22156
            //MAD
            t9.xy = t8.zy * t4.zy + t22.zx;
            //Instruction 22157
            //MAD
            t10.xy = t8.xw * t4.xy + t7.xx;
            //Instruction 22158
            //MAD
            t9.z = t8.w * t4.z + (-t22.y);
            //Instruction 22159
            //MAD
            t11.xy = t8.yz * t4.yz + (-t22.xz);
            //Instruction 22160
            //MAD
            t11.z = t8.w * t4.z + t22.y;
            //Instruction 22161
            //MUL
            t5.x = t4.z * t4.z;
            //Instruction 22162
            //MAD
            t11.w = t5.x * t48 + t7.x;
            //Instruction 22163
            //MUL
            t7.xyz = t2.yzx * t4.zxy;
            //Instruction 22164
            //MAD
            t7.xyz = t4.yzx * t2.zxy + (-t7.xyz);
            //Instruction 22165
            //DP3
            t17.x = dot(t2.xyz, t4.xyz);
            //Instruction 22166
            //MAX
            t17.x = max(t17.x, -1.0);
            //Instruction 22167
            //MIN
            t17.x = min(t17.x, 1.0);
            //Instruction 22168
            //ADD
            t7.w = t17.x + t7.y;
            //Instruction 22169
            //DP3
            t48 = dot(t7.xzw, t7.xzw);
            //Instruction 22170
            //RSQ
            t48 = inversesqrt(t48);
            //Instruction 22171
            //MUL
            t4.xyz = vec3(t48) * t7.zxw;
            //Instruction 22172
            //ADD
            t48 = -abs(t17.x) + 1.0;
            //Instruction 22173
            //SQRT
            t48 = sqrt(t48);
            //Instruction 22174
            //MAD
            t5.x = abs(t17.x) * -0.018729 + 0.074261;
            //Instruction 22175
            //MAD
            t5.x = t5.x * abs(t17.x) + -0.212114;
            //Instruction 22176
            //MAD
            t5.x = t5.x * abs(t17.x) + 1.570729;
            //Instruction 22177
            //MUL
            t35 = t48 * t5.x;
            //Instruction 22178
            //MAD
            t35 = t35 * -2.000000 + 3.141593;
            //Instruction 22179
            //LT
            tb17 = t17.x<(-t17.x);
            //Instruction 22180
            //AND
            t17.x = tb17 ? t35 : float(0.0);
            //Instruction 22181
            //MAD
            t17.x = t5.x * t48 + t17.x;
            //Instruction 22182
            //MAD
            t48 = (-t6.y) * t6.y + t6.x;
            //Instruction 22183
            //MAD
            t6.x = t4.w * 3.000000 + t16.z;
            //Instruction 22184
            //MUL
            t6.y = t6.x * 0.870000;
            //Instruction 22185
            //ADD
            t5.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 22186
            //FRC
            t5.xz = fract(t5.xz);
            //Instruction 22187
            //MAD
            t5.xz = t5.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 22188
            //MUL
            t6.xy = abs(t5.xz) * abs(t5.xz);
            //Instruction 22189
            //MAD
            t5.xz = -abs(t5.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 22190
            //MAD
            t5.xz = t6.xy * t5.xz + vec2(-0.500000, -0.500000);
            //Instruction 22191
            //ADD
            t5.xz = t5.xz + t5.xz;
            //Instruction 22192
            //MUL
            t46 = t5.z * t5.z;
            //Instruction 22193
            //MAD
            t46 = t46 * t5.x + 1.0;
            //Instruction 22194
            //MUL
            t46 = t46 * 0.500000;
            t46 = clamp(t46, 0.0, 1.0);
            //Instruction 22195
            //LOG
            t46 = log2(t46);
            //Instruction 22196
            //MUL
            t31 = t46 * t16.y;
            //Instruction 22197
            //EXP
            t31 = exp2(t31);
            //Instruction 22198
            //MUL
            t46 = t5.y * t48;
            //Instruction 22199
            //MAD
            t46 = t17.x * t5.w + t46;
            //Instruction 22200
            //MAD
            t16.x = t16.x * t31 + t46;
            //Instruction 22201
            //MUL
            t16.x = t16.x * in_TEXCOORD2.x;
            //Instruction 22202
            //SINCOS
            t5.x = sin(t16.x);
            t6.x = cos(t16.x);
            //Instruction 22203
            //ADD
            t16.x = (-t6.x) + 1.0;
            //Instruction 22204
            //MUL
            t7 = vec4(t4.y * t16.x, t4.y * t16.x, t4.y * t16.x, t4.z * t16.x);
            //Instruction 22205
            //MUL
            t5.xyz = t4.xyz * t5.xxx;
            //Instruction 22206
            //MAD
            t8.xy = t7.zy * t4.xz + t5.zx;
            //Instruction 22207
            //MAD
            t12.xy = t7.xw * t4.yz + t6.xx;
            //Instruction 22208
            //MAD
            t8.z = t7.w * t4.x + (-t5.y);
            //Instruction 22209
            //MAD
            t13.xy = t7.yz * t4.zx + (-t5.xz);
            //Instruction 22210
            //MAD
            t13.z = t7.w * t4.x + t5.y;
            //Instruction 22211
            //MUL
            t31 = t4.x * t4.x;
            //Instruction 22212
            //MAD
            t8.w = t31 * t16.x + t6.x;
            //Instruction 22213
            //MOV
            t10.z = t11.x;
            //Instruction 22214
            //MOV
            t10.w = t9.x;
            //Instruction 22215
            //MOV
            t12.z = t8.y;
            //Instruction 22216
            //MOV
            t12.w = t13.y;
            //Instruction 22217
            //DP3
            t4.x = dot(t10.xzw, t12.xzw);
            //Instruction 22218
            //MOV
            t13.w = t12.y;
            //Instruction 22219
            //DP3
            t4.y = dot(t10.xwz, t13.xzw);
            //Instruction 22220
            //DP3
            t4.z = dot(t10.xzw, t8.xzw);
            //Instruction 22221
            //MOV
            t9.w = t10.y;
            //Instruction 22222
            //DP3
            t5.x = dot(t9.ywz, t12.xzw);
            //Instruction 22223
            //DP3
            t5.y = dot(t9.yzw, t13.xzw);
            //Instruction 22224
            //DP3
            t5.z = dot(t9.ywz, t8.xzw);
            //Instruction 22225
            //DP3
            t6.x = dot(t11.yzw, t12.xzw);
            //Instruction 22226
            //DP3
            t6.y = dot(t11.ywz, t13.xzw);
            //Instruction 22227
            //DP3
            t6.z = dot(t11.yzw, t8.xzw);
            //Instruction 22228
            //DP3
            t16.x = dot(t4.xyz, in_NORMAL0.xyz);
            //Instruction 22229
            //DP3
            t16.y = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 22230
            //DP3
            t16.z = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 22231
            //DP3
            t4.x = dot(t4.xyz, t3.xyz);
            //Instruction 22232
            //DP3
            t4.y = dot(t5.xyz, t3.xyz);
            //Instruction 22233
            //DP3
            t4.z = dot(t6.xyz, t3.xyz);
            //Instruction 22234
            //DP3
            t17.x = dot(t4.xyz, t4.xyz);
            //Instruction 22235
            //RSQ
            t17.x = inversesqrt(t17.x);
            //Instruction 22236
            //MUL
            t4.xyz = t17.xxx * t4.xyz;
            //Instruction 22237
            //MUL
            t3.xyz = vec3(t47) * t4.xyz;
            //Instruction 22238
        //ELSE
        } else {
            //Instruction 22239
            //MOV
            t16.xyz = in_NORMAL0.xyz;
            //Instruction 22240
        //ENDIF
        }
        //Instruction 22241
    //ELSE
    } else {
        //Instruction 22242
        //MOV
        t16.xyz = in_NORMAL0.xyz;
        //Instruction 22243
    //ENDIF
    }
    //Instruction 22244
    //ADD
    t3.xyz = t3.xyz + in_TEXCOORD1.xyz;
    //Instruction 22245
    //GE
    tb17 = t16_0.x>=3.000000;
    //Instruction 22246
    //IF
    if(tb17){
        //Instruction 22247
        //EQ
        tb17 = t16_0.x==5.000000;
        //Instruction 22248
        //IF
        if(tb17){
            //Instruction 22249
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 22250
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 22251
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 22252
            //DP3
            t17.x = dot(t4.xyz, t4.xyz);
            //Instruction 22253
            //RSQ
            t17.x = inversesqrt(t17.x);
            //Instruction 22254
            //MUL
            t4.xyz = t17.xxx * t4.xyz;
            //Instruction 22255
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 22256
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 22257
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 22258
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 22259
            //ADD
            t17.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 22260
            //ADD
            t17.x = t17.x + _ST_WindBranch.x;
            //Instruction 22261
            //ADD
            t0.x = t17.x + in_TEXCOORD0.w;
            //Instruction 22262
            //MAD
            t0.y = t17.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 22263
            //MUL
            t47 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 22264
            //MUL
            t0.z = t47 * 0.500000;
            //Instruction 22265
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 22266
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 22267
            //FRC
            t0 = fract(t0);
            //Instruction 22268
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 22269
            //MUL
            t6 = abs(t0) * abs(t0);
            //Instruction 22270
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 22271
            //MAD
            t0 = t6 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 22272
            //ADD
            t0 = t0 + t0;
            //Instruction 22273
            //MUL
            t6.w = t0.z * t0.y;
            //Instruction 22274
            //LT
            tb47 = t6.w<0.0;
            //Instruction 22275
            //MOV
            t6.y = (-t6.w);
            //Instruction 22276
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 22277
            //MOVC
            t6.xy = (bool(tb47)) ? t6.xy : t6.zw;
            //Instruction 22278
            //MAD
            t47 = (-t0.y) * t0.z + t6.x;
            //Instruction 22279
            //MAD
            t47 = t6.y * t47 + t6.w;
            //Instruction 22280
            //ADD
            t48 = (-t47) + t6.x;
            //Instruction 22281
            //MAD
            t47 = t6.y * t48 + t47;
            //Instruction 22282
            //MUL
            t47 = t47 * _ST_WindBranchTwitch.x;
            //Instruction 22283
            //ADD
            t48 = (-_ST_WindVector.w) + 1.0;
            //Instruction 22284
            //ADD
            t49 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 22285
            //MUL
            t49 = t0.x * t49;
            //Instruction 22286
            //MAD
            t47 = t47 * t48 + t49;
            //Instruction 22287
            //MAD
            t48 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 22288
            //MUL
            t47 = t47 * t48;
            //Instruction 22289
            //MUL
            t5.xyz = vec3(t47) * t5.xyz;
            //Instruction 22290
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 22291
            //MAD
            t6.x = t17.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 22292
            //MUL
            t17.x = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 22293
            //MAD
            t6.y = t17.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 22294
            //ADD
            t17.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 22295
            //FRC
            t17.xz = fract(t17.xz);
            //Instruction 22296
            //MAD
            t17.xz = t17.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 22297
            //MUL
            t6.xy = abs(t17.xz) * abs(t17.xz);
            //Instruction 22298
            //MAD
            t17.xz = -abs(t17.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 22299
            //MAD
            t17.xz = t6.xy * t17.xz + vec2(-0.500000, -0.500000);
            //Instruction 22300
            //ADD
            t17.xz = t17.xz + t17.xz;
            //Instruction 22301
            //MUL
            t17.xz = t17.xz * t17.xz;
            //Instruction 22302
            //MUL
            t17.x = t17.x * t17.z;
            //Instruction 22303
            //MAD
            t17.x = (-t17.x) * _ST_WindTurbulences.x + 1.0;
            //Instruction 22304
            //MUL
            t47 = t0.w * _ST_WindVector.w;
            //Instruction 22305
            //MAD
            t17.x = t47 * _ST_WindBranchWhip.x + t17.x;
            //Instruction 22306
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 22307
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 22308
            //MUL
            t4.xyz = t17.xxx * t4.xyz;
            //Instruction 22309
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 22310
        //ELSE
        } else {
            //Instruction 22311
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 22312
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 22313
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 22314
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 22315
            //ADD
            t17.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 22316
            //ADD
            t17.x = t17.x + _ST_WindBranch.x;
            //Instruction 22317
            //ADD
            t5.x = t17.x + in_TEXCOORD0.w;
            //Instruction 22318
            //MAD
            t5.y = t17.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 22319
            //MUL
            t17.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 22320
            //MUL
            t5.z = t17.x * 0.500000;
            //Instruction 22321
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 22322
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 22323
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 22324
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 22325
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 22326
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 22327
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 22328
            //MUL
            t0.w = t5.z * t5.y;
            //Instruction 22329
            //LT
            tb17 = t0.w<0.0;
            //Instruction 22330
            //MOV
            t0.y = (-t0.w);
            //Instruction 22331
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 22332
            //MOVC
            t17.xz = (bool(tb17)) ? t0.xy : t0.zw;
            //Instruction 22333
            //MAD
            t48 = (-t5.y) * t5.z + t17.x;
            //Instruction 22334
            //MAD
            t48 = t17.z * t48 + t0.w;
            //Instruction 22335
            //ADD
            t17.x = t17.x + (-t48);
            //Instruction 22336
            //MAD
            t17.x = t17.z * t17.x + t48;
            //Instruction 22337
            //MUL
            t17.x = t17.x * _ST_WindBranchTwitch.x;
            //Instruction 22338
            //ADD
            t47 = (-_ST_WindVector.w) + 1.0;
            //Instruction 22339
            //ADD
            t48 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 22340
            //MUL
            t48 = t48 * t5.x;
            //Instruction 22341
            //MAD
            t17.x = t17.x * t47 + t48;
            //Instruction 22342
            //MUL
            t4.xyz = t17.xxx * t4.xyz;
            //Instruction 22343
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 22344
        //ENDIF
        }
        //Instruction 22345
    //ENDIF
    }
    //Instruction 22346
    //DP3
    t17.x = dot(t3.xyz, t3.xyz);
    //Instruction 22347
    //SQRT
    t17.x = sqrt(t17.x);
    //Instruction 22348
    //DIV
    t47 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 22349
    //MAD
    t47 = (-t47) * 0.250000 + t3.y;
    //Instruction 22350
    //MAX
    t47 = max(t47, 0.0);
    //Instruction 22351
    //MUL
    t47 = t47 * _ST_WindGlobal.z;
    //Instruction 22352
    //NE
    tb48 = t47!=0.0;
    //Instruction 22353
    //LOG
    t4.x = log2(t47);
    //Instruction 22354
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 22355
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 22356
    //MOVC
    t47 = (tb48) ? t4.x : t47;
    //Instruction 22357
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 22358
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 22359
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 22360
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 22361
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 22362
    //MUL
    t34.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 22363
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 22364
    //MAD
    t4.xy = t34.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 22365
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 22366
    //MAD
    t48 = t4.y * t4.y + t4.x;
    //Instruction 22367
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 22368
    //MAD
    t48 = _ST_WindGlobal.y * t48 + t4.x;
    //Instruction 22369
    //MUL
    t47 = t47 * t48;
    //Instruction 22370
    //MAD
    t4.xz = t2.xz * vec2(t47) + t3.xz;
    //Instruction 22371
    //MOV
    t4.y = t3.y;
    //Instruction 22372
    //DP3
    t2.x = dot(t4.xyz, t4.xyz);
    //Instruction 22373
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 22374
    //MUL
    t2.xzw = t2.xxx * t4.xyz;
    //Instruction 22375
    //MUL
    t2.xyz = t17.xxx * t2.xzw;
    //Instruction 22376
    //MOVC
    t2.xyz = (tb1.x) ? t2.xyz : t3.xyz;
    //Instruction 22377
    //MUL
    t3.xyz = t2.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 22378
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t2.xxx + t3.xyz;
    //Instruction 22379
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t2.zzz + t3.xyz;
    //Instruction 22380
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 22381
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 22382
    //MUL
    t1.x = t3.y * _ProjectionParams.x;
    //Instruction 22383
    //MUL
    t4.w = t1.x * 0.500000;
    //Instruction 22384
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 22385
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 22386
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 22387
    //MUL
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 22388
    //MAD
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    //Instruction 22389
    //MAD
    t0 = glstate_matrix_mvp[2] * t2.zzzz + t0;
    //Instruction 22390
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 22391
    //MUL
    t4.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 22392
    //MAD
    t4.xyz = _Object2World[0].xyz * t2.xxx + t4.xyz;
    //Instruction 22393
    //MAD
    t4.xyz = _Object2World[2].xyz * t2.zzz + t4.xyz;
    //Instruction 22394
    //MAD
    t4.xyz = _Object2World[3].xyz * in_POSITION0.www + t4.xyz;
    //Instruction 22395
    //MOV
    t5.x = _World2Object[0].x;
    //Instruction 22396
    //MOV
    t5.y = _World2Object[1].x;
    //Instruction 22397
    //MOV
    t5.z = _World2Object[2].x;
    //Instruction 22398
    //MOV
    t6.x = _World2Object[0].y;
    //Instruction 22399
    //MOV
    t6.y = _World2Object[1].y;
    //Instruction 22400
    //MOV
    t6.z = _World2Object[2].y;
    //Instruction 22401
    //MUL
    t6.xyz = t16.yyy * t6.xyz;
    //Instruction 22402
    //MAD
    t1.xyz = t5.xyz * t16.xxx + t6.xyz;
    //Instruction 22403
    //MOV
    t5.x = _World2Object[0].z;
    //Instruction 22404
    //MOV
    t5.y = _World2Object[1].z;
    //Instruction 22405
    //MOV
    t5.z = _World2Object[2].z;
    //Instruction 22406
    //MAD
    t1.xyz = t5.xyz * t16.zzz + t1.xyz;
    //Instruction 22407
    //DP3
    t46 = dot(t1.xyz, t1.xyz);
    //Instruction 22408
    //RSQ
    t46 = inversesqrt(t46);
    //Instruction 22409
    //MUL
    t1.xyz = vec3(t46) * t1.xyz;
    //Instruction 22410
    //MUL
    t16_0 = t1.yzzx * t1.xyzz;
    //Instruction 22411
    //DP4
    t16_14.x = dot(unity_SHBr, t16_0);
    //Instruction 22412
    //DP4
    t16_14.y = dot(unity_SHBg, t16_0);
    //Instruction 22413
    //DP4
    t16_14.z = dot(unity_SHBb, t16_0);
    //Instruction 22414
    //MUL
    t16_59 = t1.y * t1.y;
    //Instruction 22415
    //MAD
    t16_59 = t1.x * t1.x + (-t16_59);
    //Instruction 22416
    //MAD
    t16_14.xyz = unity_SHC.xyz * vec3(t16_59) + t16_14.xyz;
    //Instruction 22417
    //ADD
    t0 = (-t4.xxxx) + unity_4LightPosX0;
    //Instruction 22418
    //ADD
    t5 = (-t4.yyyy) + unity_4LightPosY0;
    //Instruction 22419
    //ADD
    t6 = (-t4.zzzz) + unity_4LightPosZ0;
    //Instruction 22420
    //MUL
    t7 = t5 * t5;
    //Instruction 22421
    //MAD
    t7 = t0 * t0 + t7;
    //Instruction 22422
    //MAD
    t7 = t6 * t6 + t7;
    //Instruction 22423
    //MUL
    t5 = t1.yyyy * t5;
    //Instruction 22424
    //MAD
    t0 = t0 * t1.xxxx + t5;
    //Instruction 22425
    //MAD
    t0 = t6 * t1.zzzz + t0;
    //Instruction 22426
    //RSQ
    t5 = inversesqrt(t7);
    //Instruction 22427
    //MUL
    t0 = t0 * t5;
    //Instruction 22428
    //MAX
    t0 = max(t0, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 22429
    //MAD
    t5 = t7 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 22430
    //DIV
    t5 = vec4(1.0, 1.0, 1.0, 1.0) / t5;
    //Instruction 22431
    //MUL
    t0 = t0 * t5;
    //Instruction 22432
    //MUL
    t5.xyz = t0.yyy * unity_LightColor[1].xyz;
    //Instruction 22433
    //MAD
    t5.xyz = unity_LightColor[0].xyz * t0.xxx + t5.xyz;
    //Instruction 22434
    //MAD
    t5.xyz = unity_LightColor[2].xyz * t0.zzz + t5.xyz;
    //Instruction 22435
    //MAD
    t5.xyz = unity_LightColor[3].xyz * t0.www + t5.xyz;
    //Instruction 22436
    //ADD
    t5.xyz = t5.xyz + t16_14.xyz;
    //Instruction 22437
    //MUL
    t0 = t2.yyyy * _Object2World[1];
    //Instruction 22438
    //MAD
    t0 = _Object2World[0] * t2.xxxx + t0;
    //Instruction 22439
    //MAD
    t0 = _Object2World[2] * t2.zzzz + t0;
    //Instruction 22440
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 22441
    //MUL
    t2 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 22442
    //MAD
    t2 = unity_World2Shadow[0][0] * t0.xxxx + t2;
    //Instruction 22443
    //MAD
    t2 = unity_World2Shadow[0][2] * t0.zzzz + t2;
    //Instruction 22444
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t2;
    //Instruction 22445
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 22446
    //MOV
    vs_TEXCOORD1.xyz = t4.xyz;
    //Instruction 22447
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 22448
    //MOV
    vs_TEXCOORD6 = t0;
    //Instruction 22449
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 22450
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 22451
    //MOV
    vs_TEXCOORD4.xyz = t3.xyz;
    //Instruction 22452
    //MOV
    vs_TEXCOORD5.xyz = t5.xyz;
    //Instruction 22453
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump float t16_6;
mediump float t16_21;
mediump float t16_22;
void main()
{
    //Instruction 22069
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 22070
    //FRC
    t16_6 = fract(t16_0.y);
    //Instruction 22071
    //MOV
    t1.x = t16_0.x;
    //Instruction 22072
    //MAD
    t1.y = t16_6 * 0.062500 + unity_LODFade.y;
    //Instruction 22073
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 22074
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 22075
    //LT
    tb1 = t16_1<0.0;
    //Instruction 22076
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 22077
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 22078
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 22079
    //MUL
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 22080
    //LT
    tb1 = t10_2<0.0;
    //Instruction 22081
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 22082
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 22083
    //MOV
    t16_0.w = 1.0;
    //Instruction 22084
    //DP4
    t16_4.x = dot(unity_SHAr, t16_0);
    //Instruction 22085
    //DP4
    t16_4.y = dot(unity_SHAg, t16_0);
    //Instruction 22086
    //DP4
    t16_4.z = dot(unity_SHAb, t16_0);
    //Instruction 22087
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD5.xyz;
    //Instruction 22088
    //MUL
    t16_4.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 22089
    //SAMPLE_C_LZ
    vec3 txVec51 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_21 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec51, 0.0);
    //Instruction 22090
    //ADD
    t16_22 = (-_LightShadowData.x) + 1.0;
    //Instruction 22091
    //MAD
    t16_21 = t16_21 * t16_22 + _LightShadowData.x;
    //Instruction 22092
    //MUL
    t16_5.xyz = vec3(t16_21) * _LightColor0.xyz;
    //Instruction 22093
    //MUL
    t16_3.xyz = t16_3.xyz * t16_5.xyz;
    //Instruction 22094
    //DP3
    t16_21 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 22095
    //MAX
    t16_21 = max(t16_21, 0.0);
    //Instruction 22096
    //MAD
    t16_3.xyz = t16_3.xyz * vec3(t16_21) + t16_4.xyz;
    //Instruction 22097
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 22098
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 22099
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_3.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_1;
  tmpvar_13 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  FinalPosition_16 = tmpvar_1.xyz;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_16 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_17 > 1.0) && (tmpvar_17 < 5.0))) {
    highp float tmpvar_20;
    tmpvar_20 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_21;
    isBestWind_21 = (tmpvar_17 == 4.0);
    bool bLeaf2_22;
    bLeaf2_22 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_23;
    vPos_23 = FinalPosition_16;
    highp vec3 vDirection_24;
    vDirection_24 = tmpvar_2;
    highp float tmpvar_25;
    if (bLeaf2_22) {
      tmpvar_25 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_25 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_26;
    if (bLeaf2_22) {
      tmpvar_26 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_26 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_27;
    highp vec4 tmpvar_28;
    tmpvar_28.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_28.x = (tmpvar_25 + tmpvar_20);
    highp vec4 tmpvar_29;
    tmpvar_29 = abs(((
      fract((tmpvar_28 + 0.5))
     * 2.0) - 1.0));
    vPos_27 = (FinalPosition_16 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_26 * (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_24 = tmpvar_2;
    vPos_23 = vPos_27;
    if (isBestWind_21) {
      highp vec3 tmpvar_30;
      tmpvar_30 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_31;
      if (bLeaf2_22) {
        tmpvar_31 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_31 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_32;
      if (bLeaf2_22) {
        tmpvar_32 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_33;
      if (bLeaf2_22) {
        tmpvar_33 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_34;
      if (bLeaf2_22) {
        tmpvar_34 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_35;
      if (bLeaf2_22) {
        tmpvar_35 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_35 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_36;
      if (bLeaf2_22) {
        tmpvar_36 = bool(1);
      } else {
        tmpvar_36 = bool(1);
      };
      highp float fTwitch_37;
      highp vec3 vAxis_38;
      highp float fOsc_39;
      highp vec3 vOriginPos_40;
      highp vec3 tmpvar_41;
      tmpvar_41 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_42;
      tmpvar_42 = ((tmpvar_41.x + tmpvar_41.y) + tmpvar_41.z);
      highp vec4 tmpvar_43;
      tmpvar_43.x = (tmpvar_31 + tmpvar_42);
      tmpvar_43.y = ((tmpvar_31 * 0.75) - tmpvar_42);
      tmpvar_43.z = ((tmpvar_31 * 0.01) + tmpvar_42);
      tmpvar_43.w = (tmpvar_31 + tmpvar_42);
      highp vec4 tmpvar_44;
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      tmpvar_44 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      vOriginPos_40 = vPos_27;
      highp float tmpvar_46;
      tmpvar_46 = sqrt(dot (vPos_27, vPos_27));
      highp float fAngle_47;
      fAngle_47 = ((_glesMultiTexCoord2.x * tmpvar_33) * (tmpvar_44.x + (tmpvar_44.y * tmpvar_44.y)));
      highp vec2 vSinCos_48;
      vSinCos_48.x = sin(fAngle_47);
      vSinCos_48.y = cos(fAngle_47);
      highp float tmpvar_49;
      tmpvar_49 = (1.0 - vSinCos_48.y);
      highp mat3 tmpvar_50;
      tmpvar_50[0].x = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.x) + vSinCos_48.y);
      tmpvar_50[0].y = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.y) + (vSinCos_48.x * tmpvar_30.z));
      tmpvar_50[0].z = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.z) - (vSinCos_48.x * tmpvar_30.y));
      tmpvar_50[1].x = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.y) - (vSinCos_48.x * tmpvar_30.z));
      tmpvar_50[1].y = (((tmpvar_49 * tmpvar_30.y) * tmpvar_30.y) + vSinCos_48.y);
      tmpvar_50[1].z = (((tmpvar_49 * tmpvar_30.y) * tmpvar_30.z) + (vSinCos_48.x * tmpvar_30.x));
      tmpvar_50[2].x = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.z) + (vSinCos_48.x * tmpvar_30.y));
      tmpvar_50[2].y = (((tmpvar_49 * tmpvar_30.y) * tmpvar_30.z) - (vSinCos_48.x * tmpvar_30.x));
      tmpvar_50[2].z = (((tmpvar_49 * tmpvar_30.z) * tmpvar_30.z) + vSinCos_48.y);
      highp vec3 tmpvar_51;
      tmpvar_51 = ((tmpvar_30.yzx * vRotatedWindVector_15.zxy) - (tmpvar_30.zxy * vRotatedWindVector_15.yzx));
      vAxis_38.xz = tmpvar_51.xz;
      highp float tmpvar_52;
      tmpvar_52 = clamp (dot (vRotatedWindVector_15, tmpvar_30), -1.0, 1.0);
      vAxis_38.y = (tmpvar_51.y + tmpvar_52);
      highp vec3 tmpvar_53;
      tmpvar_53 = normalize(vAxis_38);
      vAxis_38 = tmpvar_53;
      highp float tmpvar_54;
      tmpvar_54 = (1.570796 - (sign(tmpvar_52) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_52))) * (1.570796 + (abs(tmpvar_52) * (-0.2146018 + 
          (abs(tmpvar_52) * (0.08656672 + (abs(tmpvar_52) * -0.03102955)))
        ))))
      )));
      fOsc_39 = (tmpvar_44.y - (tmpvar_44.x * tmpvar_44.x));
      fTwitch_37 = 0.0;
      if (tmpvar_36) {
        highp float fTime_55;
        fTime_55 = (tmpvar_35.z + tmpvar_42);
        highp vec4 tmpvar_56;
        tmpvar_56.zw = vec2(0.0, 0.0);
        tmpvar_56.x = fTime_55;
        tmpvar_56.y = (0.87 * fTime_55);
        highp vec4 tmpvar_57;
        highp vec4 tmpvar_58;
        tmpvar_58 = abs(((
          fract((tmpvar_56 + 0.5))
         * 2.0) - 1.0));
        tmpvar_57 = (((
          (tmpvar_58 * tmpvar_58)
         * 
          (3.0 - (2.0 * tmpvar_58))
        ) - 0.5) * 2.0);
        fTwitch_37 = (tmpvar_35.x * pow (clamp (
          ((((tmpvar_57.x * tmpvar_57.y) * tmpvar_57.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_35.y));
      };
      highp float fAngle_59;
      fAngle_59 = (_glesMultiTexCoord2.x * ((
        (tmpvar_54 * tmpvar_34)
       + 
        (fOsc_39 * tmpvar_32)
      ) + fTwitch_37));
      highp vec2 vSinCos_60;
      vSinCos_60.x = sin(fAngle_59);
      vSinCos_60.y = cos(fAngle_59);
      highp float tmpvar_61;
      tmpvar_61 = (1.0 - vSinCos_60.y);
      highp mat3 tmpvar_62;
      tmpvar_62[0].x = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.x) + vSinCos_60.y);
      tmpvar_62[0].y = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.y) + (vSinCos_60.x * tmpvar_53.z));
      tmpvar_62[0].z = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.z) - (vSinCos_60.x * tmpvar_53.y));
      tmpvar_62[1].x = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.y) - (vSinCos_60.x * tmpvar_53.z));
      tmpvar_62[1].y = (((tmpvar_61 * tmpvar_53.y) * tmpvar_53.y) + vSinCos_60.y);
      tmpvar_62[1].z = (((tmpvar_61 * tmpvar_53.y) * tmpvar_53.z) + (vSinCos_60.x * tmpvar_53.x));
      tmpvar_62[2].x = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.z) + (vSinCos_60.x * tmpvar_53.y));
      tmpvar_62[2].y = (((tmpvar_61 * tmpvar_53.y) * tmpvar_53.z) - (vSinCos_60.x * tmpvar_53.x));
      tmpvar_62[2].z = (((tmpvar_61 * tmpvar_53.z) * tmpvar_53.z) + vSinCos_60.y);
      highp mat3 tmpvar_63;
      tmpvar_63 = (tmpvar_50 * tmpvar_62);
      vOriginPos_40 = (normalize((tmpvar_63 * vPos_27)) * tmpvar_46);
      vDirection_24 = (tmpvar_63 * _glesNormal);
      vPos_23 = vOriginPos_40;
    };
    tmpvar_13 = vDirection_24;
    FinalPosition_16 = vPos_23;
  };
  FinalPosition_16 = (FinalPosition_16 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_64;
    vPos_64 = FinalPosition_16;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_65;
      vPos_65 = FinalPosition_16;
      highp float fTime_66;
      highp float fAdherenceScale_67;
      highp vec3 vWindVector_68;
      vWindVector_68 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_66 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_69;
      highp float fOscillation_70;
      fOscillation_70 = 1.0;
      highp float fAmount_71;
      highp float fTarget_72;
      highp vec4 tmpvar_73;
      tmpvar_73.x = (fTime_66 + _glesMultiTexCoord0.w);
      tmpvar_73.y = ((fTime_66 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_73.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_66 + _glesMultiTexCoord0.w));
      tmpvar_73.w = ((fTime_66 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_74;
      tmpvar_74 = abs(((
        fract((tmpvar_73 + 0.5))
       * 2.0) - 1.0));
      vOscillations_69 = (((
        (tmpvar_74 * tmpvar_74)
       * 
        (3.0 - (2.0 * tmpvar_74))
      ) - 0.5) * 2.0);
      highp float tmpvar_75;
      tmpvar_75 = (vOscillations_69.y * vOscillations_69.z);
      fTarget_72 = 1.0;
      fAmount_71 = tmpvar_75;
      if ((tmpvar_75 < 0.0)) {
        fTarget_72 = -1.0;
        fAmount_71 = -(tmpvar_75);
      };
      fOscillation_70 = (((
        mix (mix (tmpvar_75, fTarget_72, fAmount_71), fTarget_72, fAmount_71)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_69.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_70 = (fOscillation_70 * (1.0 + (vOscillations_69.w * _ST_WindBranchWhip.x)));
      vPos_65 = (FinalPosition_16 + ((vWindVector_68 * fOscillation_70) * _ST_WindBranch.y));
      highp vec4 tmpvar_76;
      tmpvar_76.zw = vec2(0.0, 0.0);
      tmpvar_76.x = ((fTime_66 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_76.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_77;
      highp vec4 tmpvar_78;
      tmpvar_78 = abs(((
        fract((tmpvar_76 + 0.5))
       * 2.0) - 1.0));
      tmpvar_77 = (((
        (tmpvar_78 * tmpvar_78)
       * 
        (3.0 - (2.0 * tmpvar_78))
      ) - 0.5) * 2.0);
      fAdherenceScale_67 = (1.0 - ((tmpvar_77.x * tmpvar_77.y) * (
        (tmpvar_77.x * tmpvar_77.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_67 = (fAdherenceScale_67 + ((vOscillations_69.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_65 = (vPos_65 + ((
        ((vRotatedBranchAnchor_14 - vPos_65) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_67) * _glesMultiTexCoord0.z));
      vPos_64 = vPos_65;
    } else {
      highp vec3 vPos_79;
      vPos_79 = vPos_64;
      highp float fTime_80;
      highp vec3 vWindVector_81;
      vWindVector_81 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_80 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_82;
      highp float fOscillation_83;
      fOscillation_83 = 1.0;
      highp float fAmount_84;
      highp float fTarget_85;
      highp vec4 tmpvar_86;
      tmpvar_86.w = 0.0;
      tmpvar_86.x = (fTime_80 + _glesMultiTexCoord0.w);
      tmpvar_86.y = ((fTime_80 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_86.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_80 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_87;
      tmpvar_87 = abs(((
        fract((tmpvar_86 + 0.5))
       * 2.0) - 1.0));
      vOscillations_82 = (((
        (tmpvar_87 * tmpvar_87)
       * 
        (3.0 - (2.0 * tmpvar_87))
      ) - 0.5) * 2.0);
      highp float tmpvar_88;
      tmpvar_88 = (vOscillations_82.y * vOscillations_82.z);
      fTarget_85 = 1.0;
      fAmount_84 = tmpvar_88;
      if ((tmpvar_88 < 0.0)) {
        fTarget_85 = -1.0;
        fAmount_84 = -(tmpvar_88);
      };
      fOscillation_83 = (((
        mix (mix (tmpvar_88, fTarget_85, fAmount_84), fTarget_85, fAmount_84)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_82.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_79 = (vPos_64 + ((vWindVector_81 * fOscillation_83) * _ST_WindBranch.y));
      vPos_64 = vPos_79;
    };
    FinalPosition_16 = vPos_64;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_89;
    vPos_89 = FinalPosition_16;
    highp float fMoveAmount_90;
    highp float fAdjust_91;
    highp float fLength_92;
    fLength_92 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_93;
    tmpvar_93 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_91 = tmpvar_93;
    if ((tmpvar_93 != 0.0)) {
      fAdjust_91 = pow (tmpvar_93, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_94;
    tmpvar_94.zw = vec2(0.0, 0.0);
    tmpvar_94.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_94.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_95;
    highp vec4 tmpvar_96;
    tmpvar_96 = abs(((
      fract((tmpvar_94 + 0.5))
     * 2.0) - 1.0));
    tmpvar_95 = (((
      (tmpvar_96 * tmpvar_96)
     * 
      (3.0 - (2.0 * tmpvar_96))
    ) - 0.5) * 2.0);
    fMoveAmount_90 = ((_ST_WindGlobal.y * (tmpvar_95.x + 
      (tmpvar_95.y * tmpvar_95.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_90 = (fMoveAmount_90 * fAdjust_91);
    vPos_89.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * fMoveAmount_90));
    vPos_89 = (normalize(vPos_89) * fLength_92);
    FinalPosition_16 = vPos_89;
  };
  tmpvar_12.xyz = FinalPosition_16;
  highp vec4 hPos_97;
  hPos_97 = (glstate_matrix_mvp * tmpvar_12);
  mediump vec3 screenPos_98;
  highp vec4 o_99;
  highp vec4 tmpvar_100;
  tmpvar_100 = (hPos_97 * 0.5);
  highp vec2 tmpvar_101;
  tmpvar_101.x = tmpvar_100.x;
  tmpvar_101.y = (tmpvar_100.y * _ProjectionParams.x);
  o_99.xy = (tmpvar_101 + tmpvar_100.w);
  o_99.zw = hPos_97.zw;
  highp vec3 tmpvar_102;
  tmpvar_102 = o_99.xyw;
  screenPos_98 = tmpvar_102;
  screenPos_98.xy = (screenPos_98.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_7;
  highp vec4 v_103;
  v_103.x = _World2Object[0].x;
  v_103.y = _World2Object[1].x;
  v_103.z = _World2Object[2].x;
  v_103.w = _World2Object[3].x;
  highp vec4 v_104;
  v_104.x = _World2Object[0].y;
  v_104.y = _World2Object[1].y;
  v_104.z = _World2Object[2].y;
  v_104.w = _World2Object[3].y;
  highp vec4 v_105;
  v_105.x = _World2Object[0].z;
  v_105.y = _World2Object[1].z;
  v_105.z = _World2Object[2].z;
  v_105.w = _World2Object[3].z;
  highp vec3 tmpvar_106;
  tmpvar_106 = normalize(((
    (v_103.xyz * tmpvar_13.x)
   + 
    (v_104.xyz * tmpvar_13.y)
  ) + (v_105.xyz * tmpvar_13.z)));
  worldNormal_4 = tmpvar_106;
  tmpvar_5 = worldNormal_4;
  lowp vec4 tmpvar_107;
  tmpvar_107.w = 1.0;
  tmpvar_107.xyz = worldNormal_4;
  mediump vec4 normal_108;
  normal_108 = tmpvar_107;
  mediump vec3 x2_109;
  mediump vec4 tmpvar_110;
  tmpvar_110 = (normal_108.xyzz * normal_108.yzzx);
  x2_109.x = dot (unity_SHBr, tmpvar_110);
  x2_109.y = dot (unity_SHBg, tmpvar_110);
  x2_109.z = dot (unity_SHBb, tmpvar_110);
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = screenPos_98;
  xlv_TEXCOORD5 = (x2_109 + (unity_SHC.xyz * (
    (normal_108.x * normal_108.x)
   - 
    (normal_108.y * normal_108.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_16;
  x_16 = (tmpvar_9 - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_17.x, max (tmpvar_17.y, tmpvar_17.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_17 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_18;
  normalWorld_18 = tmpvar_4;
  mediump vec3 tmpvar_19;
  mediump vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = normalWorld_18;
  mediump vec3 x1_21;
  x1_21.x = dot (unity_SHAr, tmpvar_20);
  x1_21.y = dot (unity_SHAg, tmpvar_20);
  x1_21.z = dot (unity_SHAb, tmpvar_20);
  tmpvar_19 = (xlv_TEXCOORD5 + x1_21);
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_24 = tmpvar_25;
  c_23.xyz = ((tmpvar_8 * tmpvar_1) * diff_24);
  c_23.w = tmpvar_9;
  c_22.w = c_23.w;
  c_22.xyz = (c_23.xyz + (tmpvar_8 * tmpvar_19));
  c_3.xyz = c_22.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec4 t3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
mediump vec3 t16_15;
highp vec2 t16;
bvec2 tb16;
highp float t19;
bool tb19;
highp vec3 t24;
highp vec2 t32;
highp int ti32;
highp vec2 t37;
highp vec2 t39;
highp float t48;
bool tb48;
highp float t49;
bool tb49;
highp float t51;
bool tb51;
highp float t52;
highp float t53;
mediump float t16_63;
void main()
{
    //Instruction 21127
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 21128
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 21129
    //ADD
    t16.x = t0.x + _Object2World[3].z;
    //Instruction 21130
    //ADD
    t32.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 21131
    //ADD
    t16.y = t32.x + in_NORMAL0.x;
    //Instruction 21132
    //FRC
    t16.xy = fract(t16.xy);
    //Instruction 21133
    //MAD
    t16.x = t16.y * 0.500000 + t16.x;
    //Instruction 21134
    //ADD
    t16.x = t16.x + -0.300000;
    //Instruction 21135
    //MUL
    t1.z = t16.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 21136
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 21137
    //LT
    tb16.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), t16_2.xxxx).xy;
    //Instruction 21138
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 21139
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 21140
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 21141
    //DP3
    t48 = dot(t3.xyz, t3.xyz);
    //Instruction 21142
    //RSQ
    t48 = inversesqrt(t48);
    //Instruction 21143
    //MUL
    t3.xyz = vec3(t48) * t3.xyz;
    //Instruction 21144
    //AND
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, tb16.xxx);
    //Instruction 21145
    //ADD
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 21146
    //LT
    tb48 = t16_2.x<5.000000;
    //Instruction 21147
    //AND
    ti32 = int(uint(tb48) & uint(tb16.y));
    //Instruction 21148
    //IF
    if((uint(ti32))!=uint(0u)){
        //Instruction 21149
        //ADD
        t32.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 21150
        //EQ
        tb48 = t16_2.x==4.000000;
        //Instruction 21151
        //LT
        tb49 = 0.0<in_TEXCOORD2.w;
        //Instruction 21152
        //MOVC
        t5.xy = (bool(tb49)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 21153
        //ADD
        t32.x = t32.x + t5.x;
        //Instruction 21154
        //ADD
        t32.x = t32.x + 0.500000;
        //Instruction 21155
        //FRC
        t32.x = fract(t32.x);
        //Instruction 21156
        //MAD
        t32.x = t32.x * 2.000000 + -1.0;
        //Instruction 21157
        //MUL
        t51 = abs(t32.x) * abs(t32.x);
        //Instruction 21158
        //MAD
        t32.x = -abs(t32.x) * 2.000000 + 3.000000;
        //Instruction 21159
        //MAD
        t32.x = t51 * t32.x + -0.500000;
        //Instruction 21160
        //DP2
        t32.x = dot(t32.xx, t5.yy);
        //Instruction 21161
        //MUL
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 21162
        //FRC
        t5.xyz = fract(t5.xyz);
        //Instruction 21163
        //MAD
        t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 21164
        //MUL
        t5.xyz = t32.xxx * t5.xyz;
        //Instruction 21165
        //MAD
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        //Instruction 21166
        //IF
        if(tb48){
            //Instruction 21167
            //MUL
            t5 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 21168
            //FRC
            t5 = fract(t5);
            //Instruction 21169
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 21170
            //MOVC
            t6 = (bool(tb49)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 21171
            //MOVC
            t7.xyz = (bool(tb49)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 21172
            //MUL
            t32.x = t5.w * 3.000000;
            //Instruction 21173
            //MAD
            t8.y = t5.w * 3.000000 + t6.x;
            //Instruction 21174
            //MAD
            t8.x = t6.x * 0.750000 + (-t32.x);
            //Instruction 21175
            //ADD
            t32.xy = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 21176
            //FRC
            t32.xy = fract(t32.xy);
            //Instruction 21177
            //MAD
            t32.xy = t32.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 21178
            //MUL
            t8.xy = abs(t32.xy) * abs(t32.xy);
            //Instruction 21179
            //MAD
            t32.xy = -abs(t32.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 21180
            //MAD
            t32.xy = t8.xy * t32.xy + vec2(-0.500000, -0.500000);
            //Instruction 21181
            //ADD
            t32.xy = t32.xy + t32.xy;
            //Instruction 21182
            //DP3
            t49 = dot(t4.xyz, t4.xyz);
            //Instruction 21183
            //SQRT
            t49 = sqrt(t49);
            //Instruction 21184
            //MAD
            t51 = t32.x * t32.x + t32.y;
            //Instruction 21185
            //MUL
            t52 = t6.z * in_TEXCOORD2.x;
            //Instruction 21186
            //MUL
            t51 = t51 * t52;
            //Instruction 21187
            //SINCOS
            t6.x = sin(t51);
            t8.x = cos(t51);
            //Instruction 21188
            //ADD
            t51 = (-t8.x) + 1.0;
            //Instruction 21189
            //MUL
            t9 = t5.xxxy * vec4(t51);
            //Instruction 21190
            //MUL
            t24.xyz = t5.zxy * t6.xxx;
            //Instruction 21191
            //MAD
            t10.xy = t9.zy * t5.zy + t24.zx;
            //Instruction 21192
            //MAD
            t11.xy = t9.xw * t5.xy + t8.xx;
            //Instruction 21193
            //MAD
            t10.z = t9.w * t5.z + (-t24.y);
            //Instruction 21194
            //MAD
            t12.xy = t9.yz * t5.yz + (-t24.xz);
            //Instruction 21195
            //MAD
            t12.z = t9.w * t5.z + t24.y;
            //Instruction 21196
            //MUL
            t52 = t5.z * t5.z;
            //Instruction 21197
            //MAD
            t12.w = t52 * t51 + t8.x;
            //Instruction 21198
            //MUL
            t8.xyz = t3.yzx * t5.zxy;
            //Instruction 21199
            //MAD
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            //Instruction 21200
            //DP3
            t19 = dot(t3.xyz, t5.xyz);
            //Instruction 21201
            //MAX
            t19 = max(t19, -1.0);
            //Instruction 21202
            //MIN
            t19 = min(t19, 1.0);
            //Instruction 21203
            //ADD
            t8.w = t19 + t8.y;
            //Instruction 21204
            //DP3
            t51 = dot(t8.xzw, t8.xzw);
            //Instruction 21205
            //RSQ
            t51 = inversesqrt(t51);
            //Instruction 21206
            //MUL
            t5.xyz = vec3(t51) * t8.zxw;
            //Instruction 21207
            //ADD
            t51 = -abs(t19) + 1.0;
            //Instruction 21208
            //SQRT
            t51 = sqrt(t51);
            //Instruction 21209
            //MAD
            t52 = abs(t19) * -0.018729 + 0.074261;
            //Instruction 21210
            //MAD
            t52 = t52 * abs(t19) + -0.212114;
            //Instruction 21211
            //MAD
            t52 = t52 * abs(t19) + 1.570729;
            //Instruction 21212
            //MUL
            t6.x = t51 * t52;
            //Instruction 21213
            //MAD
            t6.x = t6.x * -2.000000 + 3.141593;
            //Instruction 21214
            //LT
            tb19 = t19<(-t19);
            //Instruction 21215
            //AND
            t19 = tb19 ? t6.x : float(0.0);
            //Instruction 21216
            //MAD
            t19 = t52 * t51 + t19;
            //Instruction 21217
            //MAD
            t32.x = (-t32.y) * t32.y + t32.x;
            //Instruction 21218
            //MAD
            t8.x = t5.w * 3.000000 + t7.z;
            //Instruction 21219
            //MUL
            t8.y = t8.x * 0.870000;
            //Instruction 21220
            //ADD
            t6.xz = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 21221
            //FRC
            t6.xz = fract(t6.xz);
            //Instruction 21222
            //MAD
            t6.xz = t6.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 21223
            //MUL
            t39.xy = abs(t6.xz) * abs(t6.xz);
            //Instruction 21224
            //MAD
            t6.xz = -abs(t6.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 21225
            //MAD
            t6.xz = t39.xy * t6.xz + vec2(-0.500000, -0.500000);
            //Instruction 21226
            //ADD
            t6.xz = t6.xz + t6.xz;
            //Instruction 21227
            //MUL
            t48 = t6.z * t6.z;
            //Instruction 21228
            //MAD
            t48 = t48 * t6.x + 1.0;
            //Instruction 21229
            //MUL
            t48 = t48 * 0.500000;
            t48 = clamp(t48, 0.0, 1.0);
            //Instruction 21230
            //LOG
            t48 = log2(t48);
            //Instruction 21231
            //MUL
            t48 = t48 * t7.y;
            //Instruction 21232
            //EXP
            t48 = exp2(t48);
            //Instruction 21233
            //MUL
            t32.x = t6.y * t32.x;
            //Instruction 21234
            //MAD
            t32.x = t19 * t6.w + t32.x;
            //Instruction 21235
            //MAD
            t32.x = t7.x * t48 + t32.x;
            //Instruction 21236
            //MUL
            t32.x = t32.x * in_TEXCOORD2.x;
            //Instruction 21237
            //SINCOS
            t6.x = sin(t32.x);
            t7.x = cos(t32.x);
            //Instruction 21238
            //ADD
            t32.x = (-t7.x) + 1.0;
            //Instruction 21239
            //MUL
            t8 = vec4(t5.y * t32.x, t5.y * t32.x, t5.y * t32.x, t5.z * t32.x);
            //Instruction 21240
            //MUL
            t6.xyz = t5.xyz * t6.xxx;
            //Instruction 21241
            //MAD
            t9.xy = t8.zy * t5.xz + t6.zx;
            //Instruction 21242
            //MAD
            t13.xy = t8.xw * t5.yz + t7.xx;
            //Instruction 21243
            //MAD
            t9.z = t8.w * t5.x + (-t6.y);
            //Instruction 21244
            //MAD
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            //Instruction 21245
            //MAD
            t14.z = t8.w * t5.x + t6.y;
            //Instruction 21246
            //MUL
            t48 = t5.x * t5.x;
            //Instruction 21247
            //MAD
            t9.w = t48 * t32.x + t7.x;
            //Instruction 21248
            //MOV
            t11.z = t12.x;
            //Instruction 21249
            //MOV
            t11.w = t10.x;
            //Instruction 21250
            //MOV
            t13.z = t9.y;
            //Instruction 21251
            //MOV
            t13.w = t14.y;
            //Instruction 21252
            //DP3
            t5.x = dot(t11.xzw, t13.xzw);
            //Instruction 21253
            //MOV
            t14.w = t13.y;
            //Instruction 21254
            //DP3
            t5.y = dot(t11.xwz, t14.xzw);
            //Instruction 21255
            //DP3
            t5.z = dot(t11.xzw, t9.xzw);
            //Instruction 21256
            //MOV
            t10.w = t11.y;
            //Instruction 21257
            //DP3
            t6.x = dot(t10.ywz, t13.xzw);
            //Instruction 21258
            //DP3
            t6.y = dot(t10.yzw, t14.xzw);
            //Instruction 21259
            //DP3
            t6.z = dot(t10.ywz, t9.xzw);
            //Instruction 21260
            //DP3
            t7.x = dot(t12.yzw, t13.xzw);
            //Instruction 21261
            //DP3
            t7.y = dot(t12.ywz, t14.xzw);
            //Instruction 21262
            //DP3
            t7.z = dot(t12.yzw, t9.xzw);
            //Instruction 21263
            //DP3
            t32.x = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 21264
            //DP3
            t32.y = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 21265
            //DP3
            t19 = dot(t7.xyz, in_NORMAL0.xyz);
            //Instruction 21266
            //DP3
            t5.x = dot(t5.xyz, t4.xyz);
            //Instruction 21267
            //DP3
            t5.y = dot(t6.xyz, t4.xyz);
            //Instruction 21268
            //DP3
            t5.z = dot(t7.xyz, t4.xyz);
            //Instruction 21269
            //DP3
            t51 = dot(t5.xyz, t5.xyz);
            //Instruction 21270
            //RSQ
            t51 = inversesqrt(t51);
            //Instruction 21271
            //MUL
            t5.xyz = vec3(t51) * t5.xyz;
            //Instruction 21272
            //MUL
            t4.xyz = vec3(t49) * t5.xyz;
            //Instruction 21273
        //ELSE
        } else {
            //Instruction 21274
            //MOV
            t32.xy = in_NORMAL0.xy;
            //Instruction 21275
            //MOV
            t19 = in_NORMAL0.z;
            //Instruction 21276
        //ENDIF
        }
        //Instruction 21277
    //ELSE
    } else {
        //Instruction 21278
        //MOV
        t32.xy = in_NORMAL0.xy;
        //Instruction 21279
        //MOV
        t19 = in_NORMAL0.z;
        //Instruction 21280
    //ENDIF
    }
    //Instruction 21281
    //ADD
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    //Instruction 21282
    //GE
    tb49 = t16_2.x>=3.000000;
    //Instruction 21283
    //IF
    if(tb49){
        //Instruction 21284
        //EQ
        tb49 = t16_2.x==5.000000;
        //Instruction 21285
        //IF
        if(tb49){
            //Instruction 21286
            //MUL
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 21287
            //MAD
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            //Instruction 21288
            //MAD
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            //Instruction 21289
            //DP3
            t49 = dot(t5.xyz, t5.xyz);
            //Instruction 21290
            //RSQ
            t49 = inversesqrt(t49);
            //Instruction 21291
            //MUL
            t5.xyz = vec3(t49) * t5.xyz;
            //Instruction 21292
            //MUL
            t6.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 21293
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 21294
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 21295
            //MUL
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            //Instruction 21296
            //ADD
            t49 = t0.x + _ST_WindBranch.x;
            //Instruction 21297
            //ADD
            t2.x = t49 + in_TEXCOORD0.w;
            //Instruction 21298
            //MAD
            t2.y = t49 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 21299
            //MUL
            t51 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 21300
            //MUL
            t2.z = t51 * 0.500000;
            //Instruction 21301
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 21302
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 21303
            //FRC
            t2 = fract(t2);
            //Instruction 21304
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 21305
            //MUL
            t7 = abs(t2) * abs(t2);
            //Instruction 21306
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 21307
            //MAD
            t2 = t7 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 21308
            //ADD
            t2 = t2 + t2;
            //Instruction 21309
            //MUL
            t7.w = t2.z * t2.y;
            //Instruction 21310
            //LT
            tb51 = t7.w<0.0;
            //Instruction 21311
            //MOV
            t7.y = (-t7.w);
            //Instruction 21312
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 21313
            //MOVC
            t7.xy = (bool(tb51)) ? t7.xy : t7.zw;
            //Instruction 21314
            //MAD
            t51 = (-t2.y) * t2.z + t7.x;
            //Instruction 21315
            //MAD
            t51 = t7.y * t51 + t7.w;
            //Instruction 21316
            //ADD
            t52 = (-t51) + t7.x;
            //Instruction 21317
            //MAD
            t51 = t7.y * t52 + t51;
            //Instruction 21318
            //MUL
            t51 = t51 * _ST_WindBranchTwitch.x;
            //Instruction 21319
            //ADD
            t52 = (-_ST_WindVector.w) + 1.0;
            //Instruction 21320
            //ADD
            t53 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 21321
            //MUL
            t53 = t2.x * t53;
            //Instruction 21322
            //MAD
            t51 = t51 * t52 + t53;
            //Instruction 21323
            //MAD
            t52 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 21324
            //MUL
            t51 = t51 * t52;
            //Instruction 21325
            //MUL
            t6.xyz = vec3(t51) * t6.xyz;
            //Instruction 21326
            //MAD
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 21327
            //MAD
            t7.x = t49 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 21328
            //MUL
            t49 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 21329
            //MAD
            t7.y = t49 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 21330
            //ADD
            t7.xy = t7.xy + vec2(0.500000, 0.500000);
            //Instruction 21331
            //FRC
            t7.xy = fract(t7.xy);
            //Instruction 21332
            //MAD
            t7.xy = t7.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 21333
            //MUL
            t39.xy = abs(t7.xy) * abs(t7.xy);
            //Instruction 21334
            //MAD
            t7.xy = -abs(t7.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 21335
            //MAD
            t7.xy = t39.xy * t7.xy + vec2(-0.500000, -0.500000);
            //Instruction 21336
            //ADD
            t7.xy = t7.xy + t7.xy;
            //Instruction 21337
            //MUL
            t7.xy = t7.xy * t7.xy;
            //Instruction 21338
            //MUL
            t49 = t7.x * t7.y;
            //Instruction 21339
            //MAD
            t49 = (-t49) * _ST_WindTurbulences.x + 1.0;
            //Instruction 21340
            //MUL
            t51 = t2.w * _ST_WindVector.w;
            //Instruction 21341
            //MAD
            t49 = t51 * _ST_WindBranchWhip.x + t49;
            //Instruction 21342
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            //Instruction 21343
            //MUL
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 21344
            //MUL
            t5.xyz = vec3(t49) * t5.xyz;
            //Instruction 21345
            //MAD
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
            //Instruction 21346
        //ELSE
        } else {
            //Instruction 21347
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 21348
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 21349
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 21350
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 21351
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 21352
            //ADD
            t6.x = t0.x + in_TEXCOORD0.w;
            //Instruction 21353
            //MAD
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 21354
            //MUL
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 21355
            //MUL
            t6.z = t0.x * 0.500000;
            //Instruction 21356
            //ADD
            t6.xyz = t6.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 21357
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 21358
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 21359
            //MUL
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            //Instruction 21360
            //MAD
            t6.xyz = -abs(t6.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 21361
            //MAD
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 21362
            //ADD
            t6.xyz = t6.xyz + t6.xyz;
            //Instruction 21363
            //MUL
            t2.w = t6.z * t6.y;
            //Instruction 21364
            //LT
            tb0 = t2.w<0.0;
            //Instruction 21365
            //MOV
            t2.y = (-t2.w);
            //Instruction 21366
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 21367
            //MOVC
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 21368
            //MAD
            t0.x = (-t6.y) * t6.z + t7.x;
            //Instruction 21369
            //MAD
            t0.x = t7.y * t0.x + t2.w;
            //Instruction 21370
            //ADD
            t49 = (-t0.x) + t7.x;
            //Instruction 21371
            //MAD
            t0.x = t7.y * t49 + t0.x;
            //Instruction 21372
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 21373
            //ADD
            t49 = (-_ST_WindVector.w) + 1.0;
            //Instruction 21374
            //ADD
            t51 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 21375
            //MUL
            t51 = t51 * t6.x;
            //Instruction 21376
            //MAD
            t0.x = t0.x * t49 + t51;
            //Instruction 21377
            //MUL
            t5.xyz = t0.xxx * t5.xyz;
            //Instruction 21378
            //MAD
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 21379
        //ENDIF
        }
        //Instruction 21380
    //ENDIF
    }
    //Instruction 21381
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 21382
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 21383
    //DIV
    t49 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 21384
    //MAD
    t49 = (-t49) * 0.250000 + t4.y;
    //Instruction 21385
    //MAX
    t49 = max(t49, 0.0);
    //Instruction 21386
    //MUL
    t49 = t49 * _ST_WindGlobal.z;
    //Instruction 21387
    //NE
    tb51 = t49!=0.0;
    //Instruction 21388
    //LOG
    t52 = log2(t49);
    //Instruction 21389
    //MUL
    t52 = t52 * _ST_WindGlobal.w;
    //Instruction 21390
    //EXP
    t52 = exp2(t52);
    //Instruction 21391
    //MOVC
    t49 = (tb51) ? t52 : t49;
    //Instruction 21392
    //ADD
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 21393
    //MAD
    t5.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 21394
    //ADD
    t5.xy = t5.xy + vec2(0.500000, 0.500000);
    //Instruction 21395
    //FRC
    t5.xy = fract(t5.xy);
    //Instruction 21396
    //MAD
    t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 21397
    //MUL
    t37.xy = abs(t5.xy) * abs(t5.xy);
    //Instruction 21398
    //MAD
    t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 21399
    //MAD
    t5.xy = t37.xy * t5.xy + vec2(-0.500000, -0.500000);
    //Instruction 21400
    //ADD
    t5.xy = t5.xy + t5.xy;
    //Instruction 21401
    //MAD
    t51 = t5.y * t5.y + t5.x;
    //Instruction 21402
    //DIV
    t52 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 21403
    //MAD
    t51 = _ST_WindGlobal.y * t51 + t52;
    //Instruction 21404
    //MUL
    t49 = t49 * t51;
    //Instruction 21405
    //MAD
    t5.xz = t3.xz * vec2(t49) + t4.xz;
    //Instruction 21406
    //MOV
    t5.y = t4.y;
    //Instruction 21407
    //DP3
    t49 = dot(t5.xyz, t5.xyz);
    //Instruction 21408
    //RSQ
    t49 = inversesqrt(t49);
    //Instruction 21409
    //MUL
    t3.xzw = vec3(t49) * t5.xyz;
    //Instruction 21410
    //MUL
    t3.xzw = t0.xxx * t3.xzw;
    //Instruction 21411
    //MOVC
    t3.xzw = (tb16.x) ? t3.xzw : t4.xyz;
    //Instruction 21412
    //MUL
    t4.xyz = t3.zzz * glstate_matrix_mvp[1].xyw;
    //Instruction 21413
    //MAD
    t4.xyz = glstate_matrix_mvp[0].xyw * t3.xxx + t4.xyz;
    //Instruction 21414
    //MAD
    t4.xyz = glstate_matrix_mvp[2].xyw * t3.www + t4.xyz;
    //Instruction 21415
    //MAD
    t4.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t4.xyz;
    //Instruction 21416
    //MUL
    t5.xz = t4.xz * vec2(0.500000, 0.500000);
    //Instruction 21417
    //MUL
    t0.x = t4.y * _ProjectionParams.x;
    //Instruction 21418
    //MUL
    t5.w = t0.x * 0.500000;
    //Instruction 21419
    //ADD
    t0.xy = t5.zz + t5.xw;
    //Instruction 21420
    //MUL
    t0.xy = t0.xy * _ScreenParams.xy;
    //Instruction 21421
    //MUL
    t4.xy = t0.xy * vec2(0.250000, 0.250000);
    //Instruction 21422
    //MUL
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    //Instruction 21423
    //MAD
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    //Instruction 21424
    //MAD
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    //Instruction 21425
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 21426
    //MUL
    t5.xyz = t3.zzz * _Object2World[1].xyz;
    //Instruction 21427
    //MAD
    t5.xyz = _Object2World[0].xyz * t3.xxx + t5.xyz;
    //Instruction 21428
    //MAD
    t3.xzw = _Object2World[2].xyz * t3.www + t5.xyz;
    //Instruction 21429
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xzw;
    //Instruction 21430
    //MOV
    t5.x = _World2Object[0].x;
    //Instruction 21431
    //MOV
    t5.y = _World2Object[1].x;
    //Instruction 21432
    //MOV
    t5.z = _World2Object[2].x;
    //Instruction 21433
    //MOV
    t6.x = _World2Object[0].y;
    //Instruction 21434
    //MOV
    t6.y = _World2Object[1].y;
    //Instruction 21435
    //MOV
    t6.z = _World2Object[2].y;
    //Instruction 21436
    //MUL
    t0.xyw = t32.yyy * t6.xyz;
    //Instruction 21437
    //MAD
    t0.xyz = t5.xyz * t32.xxx + t0.xyw;
    //Instruction 21438
    //MOV
    t5.x = _World2Object[0].z;
    //Instruction 21439
    //MOV
    t5.y = _World2Object[1].z;
    //Instruction 21440
    //MOV
    t5.z = _World2Object[2].z;
    //Instruction 21441
    //MAD
    t0.xyz = t5.xyz * vec3(t19) + t0.xyz;
    //Instruction 21442
    //DP3
    t48 = dot(t0.xyz, t0.xyz);
    //Instruction 21443
    //RSQ
    t48 = inversesqrt(t48);
    //Instruction 21444
    //MUL
    t0.xyz = vec3(t48) * t0.xyz;
    //Instruction 21445
    //MUL
    t16_2 = t0.yzzx * t0.xyzz;
    //Instruction 21446
    //DP4
    t16_15.x = dot(unity_SHBr, t16_2);
    //Instruction 21447
    //DP4
    t16_15.y = dot(unity_SHBg, t16_2);
    //Instruction 21448
    //DP4
    t16_15.z = dot(unity_SHBb, t16_2);
    //Instruction 21449
    //MUL
    t16_63 = t0.y * t0.y;
    //Instruction 21450
    //MAD
    t16_63 = t0.x * t0.x + (-t16_63);
    //Instruction 21451
    //MAD
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(t16_63) + t16_15.xyz;
    //Instruction 21452
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 21453
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 21454
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 21455
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 21456
    //MOV
    vs_TEXCOORD4.xyz = t4.xyz;
    //Instruction 21457
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump float t16_6;
mediump vec3 t16_9;
mediump float t16_21;
void main()
{
    //Instruction 21091
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 21092
    //FRC
    t16_6 = fract(t16_0.y);
    //Instruction 21093
    //MOV
    t1.x = t16_0.x;
    //Instruction 21094
    //MAD
    t1.y = t16_6 * 0.062500 + unity_LODFade.y;
    //Instruction 21095
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 21096
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 21097
    //LT
    tb1 = t16_1<0.0;
    //Instruction 21098
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 21099
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 21100
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 21101
    //LT
    tb1 = t10_2<0.0;
    //Instruction 21102
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 21103
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 21104
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 21105
    //ADD
    t16_9.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 21106
    //MAD
    t16_9.xyz = vs_TEXCOORD3.zzz * t16_9.xyz + t10_0.xyz;
    //Instruction 21107
    //MAX
    t16_4.x = max(t16_9.z, t16_9.y);
    //Instruction 21108
    //MAX
    t16_4.x = max(t16_9.x, t16_4.x);
    //Instruction 21109
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 21110
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 21111
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_9.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 21112
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD2.xyz;
    //Instruction 21113
    //MUL
    t16_4.xyz = t16_3.xyz * _LightColor0.xyz;
    //Instruction 21114
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 21115
    //MOV
    t16_0.w = 1.0;
    //Instruction 21116
    //DP4
    t16_5.x = dot(unity_SHAr, t16_0);
    //Instruction 21117
    //DP4
    t16_5.y = dot(unity_SHAg, t16_0);
    //Instruction 21118
    //DP4
    t16_5.z = dot(unity_SHAb, t16_0);
    //Instruction 21119
    //ADD
    t16_5.xyz = t16_5.xyz + vs_TEXCOORD5.xyz;
    //Instruction 21120
    //MUL
    t16_3.xyz = t16_3.xyz * t16_5.xyz;
    //Instruction 21121
    //DP3
    t16_21 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 21122
    //MAX
    t16_21 = max(t16_21, 0.0);
    //Instruction 21123
    //MAD
    t16_3.xyz = t16_4.xyz * vec3(t16_21) + t16_3.xyz;
    //Instruction 21124
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 21125
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 21126
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  FinalPosition_17 = tmpvar_1.xyz;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_17 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_18 > 1.0) && (tmpvar_18 < 5.0))) {
    highp float tmpvar_21;
    tmpvar_21 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_22;
    isBestWind_22 = (tmpvar_18 == 4.0);
    bool bLeaf2_23;
    bLeaf2_23 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_24;
    vPos_24 = FinalPosition_17;
    highp vec3 vDirection_25;
    vDirection_25 = tmpvar_2;
    highp float tmpvar_26;
    if (bLeaf2_23) {
      tmpvar_26 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_26 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_27;
    if (bLeaf2_23) {
      tmpvar_27 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_28;
    highp vec4 tmpvar_29;
    tmpvar_29.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_29.x = (tmpvar_26 + tmpvar_21);
    highp vec4 tmpvar_30;
    tmpvar_30 = abs(((
      fract((tmpvar_29 + 0.5))
     * 2.0) - 1.0));
    vPos_28 = (FinalPosition_17 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_27 * (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_25 = tmpvar_2;
    vPos_24 = vPos_28;
    if (isBestWind_22) {
      highp vec3 tmpvar_31;
      tmpvar_31 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_32;
      if (bLeaf2_23) {
        tmpvar_32 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_33;
      if (bLeaf2_23) {
        tmpvar_33 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_34;
      if (bLeaf2_23) {
        tmpvar_34 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_35;
      if (bLeaf2_23) {
        tmpvar_35 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_36;
      if (bLeaf2_23) {
        tmpvar_36 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_36 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_37;
      if (bLeaf2_23) {
        tmpvar_37 = bool(1);
      } else {
        tmpvar_37 = bool(1);
      };
      highp float fTwitch_38;
      highp vec3 vAxis_39;
      highp float fOsc_40;
      highp vec3 vOriginPos_41;
      highp vec3 tmpvar_42;
      tmpvar_42 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_43;
      tmpvar_43 = ((tmpvar_42.x + tmpvar_42.y) + tmpvar_42.z);
      highp vec4 tmpvar_44;
      tmpvar_44.x = (tmpvar_32 + tmpvar_43);
      tmpvar_44.y = ((tmpvar_32 * 0.75) - tmpvar_43);
      tmpvar_44.z = ((tmpvar_32 * 0.01) + tmpvar_43);
      tmpvar_44.w = (tmpvar_32 + tmpvar_43);
      highp vec4 tmpvar_45;
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      tmpvar_45 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      vOriginPos_41 = vPos_28;
      highp float tmpvar_47;
      tmpvar_47 = sqrt(dot (vPos_28, vPos_28));
      highp float fAngle_48;
      fAngle_48 = ((_glesMultiTexCoord2.x * tmpvar_34) * (tmpvar_45.x + (tmpvar_45.y * tmpvar_45.y)));
      highp vec2 vSinCos_49;
      vSinCos_49.x = sin(fAngle_48);
      vSinCos_49.y = cos(fAngle_48);
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - vSinCos_49.y);
      highp mat3 tmpvar_51;
      tmpvar_51[0].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.x) + vSinCos_49.y);
      tmpvar_51[0].y = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.y) + (vSinCos_49.x * tmpvar_31.z));
      tmpvar_51[0].z = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.z) - (vSinCos_49.x * tmpvar_31.y));
      tmpvar_51[1].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.y) - (vSinCos_49.x * tmpvar_31.z));
      tmpvar_51[1].y = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.y) + vSinCos_49.y);
      tmpvar_51[1].z = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.z) + (vSinCos_49.x * tmpvar_31.x));
      tmpvar_51[2].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.z) + (vSinCos_49.x * tmpvar_31.y));
      tmpvar_51[2].y = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.z) - (vSinCos_49.x * tmpvar_31.x));
      tmpvar_51[2].z = (((tmpvar_50 * tmpvar_31.z) * tmpvar_31.z) + vSinCos_49.y);
      highp vec3 tmpvar_52;
      tmpvar_52 = ((tmpvar_31.yzx * vRotatedWindVector_16.zxy) - (tmpvar_31.zxy * vRotatedWindVector_16.yzx));
      vAxis_39.xz = tmpvar_52.xz;
      highp float tmpvar_53;
      tmpvar_53 = clamp (dot (vRotatedWindVector_16, tmpvar_31), -1.0, 1.0);
      vAxis_39.y = (tmpvar_52.y + tmpvar_53);
      highp vec3 tmpvar_54;
      tmpvar_54 = normalize(vAxis_39);
      vAxis_39 = tmpvar_54;
      highp float tmpvar_55;
      tmpvar_55 = (1.570796 - (sign(tmpvar_53) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_53))) * (1.570796 + (abs(tmpvar_53) * (-0.2146018 + 
          (abs(tmpvar_53) * (0.08656672 + (abs(tmpvar_53) * -0.03102955)))
        ))))
      )));
      fOsc_40 = (tmpvar_45.y - (tmpvar_45.x * tmpvar_45.x));
      fTwitch_38 = 0.0;
      if (tmpvar_37) {
        highp float fTime_56;
        fTime_56 = (tmpvar_36.z + tmpvar_43);
        highp vec4 tmpvar_57;
        tmpvar_57.zw = vec2(0.0, 0.0);
        tmpvar_57.x = fTime_56;
        tmpvar_57.y = (0.87 * fTime_56);
        highp vec4 tmpvar_58;
        highp vec4 tmpvar_59;
        tmpvar_59 = abs(((
          fract((tmpvar_57 + 0.5))
         * 2.0) - 1.0));
        tmpvar_58 = (((
          (tmpvar_59 * tmpvar_59)
         * 
          (3.0 - (2.0 * tmpvar_59))
        ) - 0.5) * 2.0);
        fTwitch_38 = (tmpvar_36.x * pow (clamp (
          ((((tmpvar_58.x * tmpvar_58.y) * tmpvar_58.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_36.y));
      };
      highp float fAngle_60;
      fAngle_60 = (_glesMultiTexCoord2.x * ((
        (tmpvar_55 * tmpvar_35)
       + 
        (fOsc_40 * tmpvar_33)
      ) + fTwitch_38));
      highp vec2 vSinCos_61;
      vSinCos_61.x = sin(fAngle_60);
      vSinCos_61.y = cos(fAngle_60);
      highp float tmpvar_62;
      tmpvar_62 = (1.0 - vSinCos_61.y);
      highp mat3 tmpvar_63;
      tmpvar_63[0].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.x) + vSinCos_61.y);
      tmpvar_63[0].y = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.y) + (vSinCos_61.x * tmpvar_54.z));
      tmpvar_63[0].z = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.z) - (vSinCos_61.x * tmpvar_54.y));
      tmpvar_63[1].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.y) - (vSinCos_61.x * tmpvar_54.z));
      tmpvar_63[1].y = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.y) + vSinCos_61.y);
      tmpvar_63[1].z = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.z) + (vSinCos_61.x * tmpvar_54.x));
      tmpvar_63[2].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.z) + (vSinCos_61.x * tmpvar_54.y));
      tmpvar_63[2].y = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.z) - (vSinCos_61.x * tmpvar_54.x));
      tmpvar_63[2].z = (((tmpvar_62 * tmpvar_54.z) * tmpvar_54.z) + vSinCos_61.y);
      highp mat3 tmpvar_64;
      tmpvar_64 = (tmpvar_51 * tmpvar_63);
      vOriginPos_41 = (normalize((tmpvar_64 * vPos_28)) * tmpvar_47);
      vDirection_25 = (tmpvar_64 * _glesNormal);
      vPos_24 = vOriginPos_41;
    };
    tmpvar_14 = vDirection_25;
    FinalPosition_17 = vPos_24;
  };
  FinalPosition_17 = (FinalPosition_17 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_65;
    vPos_65 = FinalPosition_17;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_66;
      vPos_66 = FinalPosition_17;
      highp float fTime_67;
      highp float fAdherenceScale_68;
      highp vec3 vWindVector_69;
      vWindVector_69 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_67 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_70;
      highp float fOscillation_71;
      fOscillation_71 = 1.0;
      highp float fAmount_72;
      highp float fTarget_73;
      highp vec4 tmpvar_74;
      tmpvar_74.x = (fTime_67 + _glesMultiTexCoord0.w);
      tmpvar_74.y = ((fTime_67 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_74.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_67 + _glesMultiTexCoord0.w));
      tmpvar_74.w = ((fTime_67 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_75;
      tmpvar_75 = abs(((
        fract((tmpvar_74 + 0.5))
       * 2.0) - 1.0));
      vOscillations_70 = (((
        (tmpvar_75 * tmpvar_75)
       * 
        (3.0 - (2.0 * tmpvar_75))
      ) - 0.5) * 2.0);
      highp float tmpvar_76;
      tmpvar_76 = (vOscillations_70.y * vOscillations_70.z);
      fTarget_73 = 1.0;
      fAmount_72 = tmpvar_76;
      if ((tmpvar_76 < 0.0)) {
        fTarget_73 = -1.0;
        fAmount_72 = -(tmpvar_76);
      };
      fOscillation_71 = (((
        mix (mix (tmpvar_76, fTarget_73, fAmount_72), fTarget_73, fAmount_72)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_70.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_71 = (fOscillation_71 * (1.0 + (vOscillations_70.w * _ST_WindBranchWhip.x)));
      vPos_66 = (FinalPosition_17 + ((vWindVector_69 * fOscillation_71) * _ST_WindBranch.y));
      highp vec4 tmpvar_77;
      tmpvar_77.zw = vec2(0.0, 0.0);
      tmpvar_77.x = ((fTime_67 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_77.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_78;
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      tmpvar_78 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      fAdherenceScale_68 = (1.0 - ((tmpvar_78.x * tmpvar_78.y) * (
        (tmpvar_78.x * tmpvar_78.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_68 = (fAdherenceScale_68 + ((vOscillations_70.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_66 = (vPos_66 + ((
        ((vRotatedBranchAnchor_15 - vPos_66) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_68) * _glesMultiTexCoord0.z));
      vPos_65 = vPos_66;
    } else {
      highp vec3 vPos_80;
      vPos_80 = vPos_65;
      highp float fTime_81;
      highp vec3 vWindVector_82;
      vWindVector_82 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_81 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_83;
      highp float fOscillation_84;
      fOscillation_84 = 1.0;
      highp float fAmount_85;
      highp float fTarget_86;
      highp vec4 tmpvar_87;
      tmpvar_87.w = 0.0;
      tmpvar_87.x = (fTime_81 + _glesMultiTexCoord0.w);
      tmpvar_87.y = ((fTime_81 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_87.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_81 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_88;
      tmpvar_88 = abs(((
        fract((tmpvar_87 + 0.5))
       * 2.0) - 1.0));
      vOscillations_83 = (((
        (tmpvar_88 * tmpvar_88)
       * 
        (3.0 - (2.0 * tmpvar_88))
      ) - 0.5) * 2.0);
      highp float tmpvar_89;
      tmpvar_89 = (vOscillations_83.y * vOscillations_83.z);
      fTarget_86 = 1.0;
      fAmount_85 = tmpvar_89;
      if ((tmpvar_89 < 0.0)) {
        fTarget_86 = -1.0;
        fAmount_85 = -(tmpvar_89);
      };
      fOscillation_84 = (((
        mix (mix (tmpvar_89, fTarget_86, fAmount_85), fTarget_86, fAmount_85)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_83.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_80 = (vPos_65 + ((vWindVector_82 * fOscillation_84) * _ST_WindBranch.y));
      vPos_65 = vPos_80;
    };
    FinalPosition_17 = vPos_65;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_90;
    vPos_90 = FinalPosition_17;
    highp float fMoveAmount_91;
    highp float fAdjust_92;
    highp float fLength_93;
    fLength_93 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_94;
    tmpvar_94 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_92 = tmpvar_94;
    if ((tmpvar_94 != 0.0)) {
      fAdjust_92 = pow (tmpvar_94, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_95;
    tmpvar_95.zw = vec2(0.0, 0.0);
    tmpvar_95.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_95.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_96;
    highp vec4 tmpvar_97;
    tmpvar_97 = abs(((
      fract((tmpvar_95 + 0.5))
     * 2.0) - 1.0));
    tmpvar_96 = (((
      (tmpvar_97 * tmpvar_97)
     * 
      (3.0 - (2.0 * tmpvar_97))
    ) - 0.5) * 2.0);
    fMoveAmount_91 = ((_ST_WindGlobal.y * (tmpvar_96.x + 
      (tmpvar_96.y * tmpvar_96.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_91 = (fMoveAmount_91 * fAdjust_92);
    vPos_90.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_91));
    vPos_90 = (normalize(vPos_90) * fLength_93);
    FinalPosition_17 = vPos_90;
  };
  tmpvar_13.xyz = FinalPosition_17;
  highp vec4 hPos_98;
  hPos_98 = (glstate_matrix_mvp * tmpvar_13);
  mediump vec3 screenPos_99;
  highp vec4 o_100;
  highp vec4 tmpvar_101;
  tmpvar_101 = (hPos_98 * 0.5);
  highp vec2 tmpvar_102;
  tmpvar_102.x = tmpvar_101.x;
  tmpvar_102.y = (tmpvar_101.y * _ProjectionParams.x);
  o_100.xy = (tmpvar_102 + tmpvar_101.w);
  o_100.zw = hPos_98.zw;
  highp vec3 tmpvar_103;
  tmpvar_103 = o_100.xyw;
  screenPos_99 = tmpvar_103;
  screenPos_99.xy = (screenPos_99.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_8;
  highp vec4 v_104;
  v_104.x = _World2Object[0].x;
  v_104.y = _World2Object[1].x;
  v_104.z = _World2Object[2].x;
  v_104.w = _World2Object[3].x;
  highp vec4 v_105;
  v_105.x = _World2Object[0].y;
  v_105.y = _World2Object[1].y;
  v_105.z = _World2Object[2].y;
  v_105.w = _World2Object[3].y;
  highp vec4 v_106;
  v_106.x = _World2Object[0].z;
  v_106.y = _World2Object[1].z;
  v_106.z = _World2Object[2].z;
  v_106.w = _World2Object[3].z;
  highp vec3 tmpvar_107;
  tmpvar_107 = normalize(((
    (v_104.xyz * tmpvar_14.x)
   + 
    (v_105.xyz * tmpvar_14.y)
  ) + (v_106.xyz * tmpvar_14.z)));
  worldNormal_4 = tmpvar_107;
  tmpvar_5 = worldNormal_4;
  lowp vec4 tmpvar_108;
  tmpvar_108.w = 1.0;
  tmpvar_108.xyz = worldNormal_4;
  mediump vec4 normal_109;
  normal_109 = tmpvar_108;
  mediump vec3 x2_110;
  mediump vec4 tmpvar_111;
  tmpvar_111 = (normal_109.xyzz * normal_109.yzzx);
  x2_110.x = dot (unity_SHBr, tmpvar_111);
  x2_110.y = dot (unity_SHBg, tmpvar_111);
  x2_110.z = dot (unity_SHBb, tmpvar_111);
  tmpvar_7 = (unity_World2Shadow[0] * (_Object2World * tmpvar_13));
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = screenPos_99;
  xlv_TEXCOORD5 = (x2_110 + (unity_SHC.xyz * (
    (normal_109.x * normal_109.x)
   - 
    (normal_109.y * normal_109.y)
  )));
  xlv_TEXCOORD6 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_13.x = tmpvar_14.x;
  projUV_13.y = ((fract(tmpvar_14.y) * 0.0625) + unity_LODFade.y);
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_16;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_17;
  x_17 = (tmpvar_10 - _Cutoff);
  if ((x_17 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_18;
  tmpvar_18 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_18.x, max (tmpvar_18.y, tmpvar_18.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_18 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_19 = tmpvar_20;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_19;
  mediump vec3 normalWorld_21;
  normalWorld_21 = tmpvar_5;
  mediump vec3 tmpvar_22;
  mediump vec3 tmpvar_23;
  mediump vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = normalWorld_21;
  mediump vec3 x1_25;
  x1_25.x = dot (unity_SHAr, tmpvar_24);
  x1_25.y = dot (unity_SHAg, tmpvar_24);
  x1_25.z = dot (unity_SHAb, tmpvar_24);
  tmpvar_23 = (xlv_TEXCOORD5 + x1_25);
  tmpvar_22 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_22;
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_28 = tmpvar_29;
  c_27.xyz = ((tmpvar_9 * tmpvar_22) * diff_28);
  c_27.w = tmpvar_10;
  c_26.w = c_27.w;
  c_26.xyz = (c_27.xyz + (tmpvar_9 * tmpvar_23));
  c_4.xyz = c_26.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  FinalPosition_17 = tmpvar_1.xyz;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_17 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_18 > 1.0) && (tmpvar_18 < 5.0))) {
    highp float tmpvar_21;
    tmpvar_21 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_22;
    isBestWind_22 = (tmpvar_18 == 4.0);
    bool bLeaf2_23;
    bLeaf2_23 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_24;
    vPos_24 = FinalPosition_17;
    highp vec3 vDirection_25;
    vDirection_25 = tmpvar_2;
    highp float tmpvar_26;
    if (bLeaf2_23) {
      tmpvar_26 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_26 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_27;
    if (bLeaf2_23) {
      tmpvar_27 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_28;
    highp vec4 tmpvar_29;
    tmpvar_29.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_29.x = (tmpvar_26 + tmpvar_21);
    highp vec4 tmpvar_30;
    tmpvar_30 = abs(((
      fract((tmpvar_29 + 0.5))
     * 2.0) - 1.0));
    vPos_28 = (FinalPosition_17 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_27 * (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_25 = tmpvar_2;
    vPos_24 = vPos_28;
    if (isBestWind_22) {
      highp vec3 tmpvar_31;
      tmpvar_31 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_32;
      if (bLeaf2_23) {
        tmpvar_32 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_33;
      if (bLeaf2_23) {
        tmpvar_33 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_34;
      if (bLeaf2_23) {
        tmpvar_34 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_35;
      if (bLeaf2_23) {
        tmpvar_35 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_36;
      if (bLeaf2_23) {
        tmpvar_36 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_36 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_37;
      if (bLeaf2_23) {
        tmpvar_37 = bool(1);
      } else {
        tmpvar_37 = bool(1);
      };
      highp float fTwitch_38;
      highp vec3 vAxis_39;
      highp float fOsc_40;
      highp vec3 vOriginPos_41;
      highp vec3 tmpvar_42;
      tmpvar_42 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_43;
      tmpvar_43 = ((tmpvar_42.x + tmpvar_42.y) + tmpvar_42.z);
      highp vec4 tmpvar_44;
      tmpvar_44.x = (tmpvar_32 + tmpvar_43);
      tmpvar_44.y = ((tmpvar_32 * 0.75) - tmpvar_43);
      tmpvar_44.z = ((tmpvar_32 * 0.01) + tmpvar_43);
      tmpvar_44.w = (tmpvar_32 + tmpvar_43);
      highp vec4 tmpvar_45;
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      tmpvar_45 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      vOriginPos_41 = vPos_28;
      highp float tmpvar_47;
      tmpvar_47 = sqrt(dot (vPos_28, vPos_28));
      highp float fAngle_48;
      fAngle_48 = ((_glesMultiTexCoord2.x * tmpvar_34) * (tmpvar_45.x + (tmpvar_45.y * tmpvar_45.y)));
      highp vec2 vSinCos_49;
      vSinCos_49.x = sin(fAngle_48);
      vSinCos_49.y = cos(fAngle_48);
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - vSinCos_49.y);
      highp mat3 tmpvar_51;
      tmpvar_51[0].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.x) + vSinCos_49.y);
      tmpvar_51[0].y = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.y) + (vSinCos_49.x * tmpvar_31.z));
      tmpvar_51[0].z = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.z) - (vSinCos_49.x * tmpvar_31.y));
      tmpvar_51[1].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.y) - (vSinCos_49.x * tmpvar_31.z));
      tmpvar_51[1].y = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.y) + vSinCos_49.y);
      tmpvar_51[1].z = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.z) + (vSinCos_49.x * tmpvar_31.x));
      tmpvar_51[2].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.z) + (vSinCos_49.x * tmpvar_31.y));
      tmpvar_51[2].y = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.z) - (vSinCos_49.x * tmpvar_31.x));
      tmpvar_51[2].z = (((tmpvar_50 * tmpvar_31.z) * tmpvar_31.z) + vSinCos_49.y);
      highp vec3 tmpvar_52;
      tmpvar_52 = ((tmpvar_31.yzx * vRotatedWindVector_16.zxy) - (tmpvar_31.zxy * vRotatedWindVector_16.yzx));
      vAxis_39.xz = tmpvar_52.xz;
      highp float tmpvar_53;
      tmpvar_53 = clamp (dot (vRotatedWindVector_16, tmpvar_31), -1.0, 1.0);
      vAxis_39.y = (tmpvar_52.y + tmpvar_53);
      highp vec3 tmpvar_54;
      tmpvar_54 = normalize(vAxis_39);
      vAxis_39 = tmpvar_54;
      highp float tmpvar_55;
      tmpvar_55 = (1.570796 - (sign(tmpvar_53) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_53))) * (1.570796 + (abs(tmpvar_53) * (-0.2146018 + 
          (abs(tmpvar_53) * (0.08656672 + (abs(tmpvar_53) * -0.03102955)))
        ))))
      )));
      fOsc_40 = (tmpvar_45.y - (tmpvar_45.x * tmpvar_45.x));
      fTwitch_38 = 0.0;
      if (tmpvar_37) {
        highp float fTime_56;
        fTime_56 = (tmpvar_36.z + tmpvar_43);
        highp vec4 tmpvar_57;
        tmpvar_57.zw = vec2(0.0, 0.0);
        tmpvar_57.x = fTime_56;
        tmpvar_57.y = (0.87 * fTime_56);
        highp vec4 tmpvar_58;
        highp vec4 tmpvar_59;
        tmpvar_59 = abs(((
          fract((tmpvar_57 + 0.5))
         * 2.0) - 1.0));
        tmpvar_58 = (((
          (tmpvar_59 * tmpvar_59)
         * 
          (3.0 - (2.0 * tmpvar_59))
        ) - 0.5) * 2.0);
        fTwitch_38 = (tmpvar_36.x * pow (clamp (
          ((((tmpvar_58.x * tmpvar_58.y) * tmpvar_58.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_36.y));
      };
      highp float fAngle_60;
      fAngle_60 = (_glesMultiTexCoord2.x * ((
        (tmpvar_55 * tmpvar_35)
       + 
        (fOsc_40 * tmpvar_33)
      ) + fTwitch_38));
      highp vec2 vSinCos_61;
      vSinCos_61.x = sin(fAngle_60);
      vSinCos_61.y = cos(fAngle_60);
      highp float tmpvar_62;
      tmpvar_62 = (1.0 - vSinCos_61.y);
      highp mat3 tmpvar_63;
      tmpvar_63[0].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.x) + vSinCos_61.y);
      tmpvar_63[0].y = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.y) + (vSinCos_61.x * tmpvar_54.z));
      tmpvar_63[0].z = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.z) - (vSinCos_61.x * tmpvar_54.y));
      tmpvar_63[1].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.y) - (vSinCos_61.x * tmpvar_54.z));
      tmpvar_63[1].y = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.y) + vSinCos_61.y);
      tmpvar_63[1].z = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.z) + (vSinCos_61.x * tmpvar_54.x));
      tmpvar_63[2].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.z) + (vSinCos_61.x * tmpvar_54.y));
      tmpvar_63[2].y = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.z) - (vSinCos_61.x * tmpvar_54.x));
      tmpvar_63[2].z = (((tmpvar_62 * tmpvar_54.z) * tmpvar_54.z) + vSinCos_61.y);
      highp mat3 tmpvar_64;
      tmpvar_64 = (tmpvar_51 * tmpvar_63);
      vOriginPos_41 = (normalize((tmpvar_64 * vPos_28)) * tmpvar_47);
      vDirection_25 = (tmpvar_64 * _glesNormal);
      vPos_24 = vOriginPos_41;
    };
    tmpvar_14 = vDirection_25;
    FinalPosition_17 = vPos_24;
  };
  FinalPosition_17 = (FinalPosition_17 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_65;
    vPos_65 = FinalPosition_17;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_66;
      vPos_66 = FinalPosition_17;
      highp float fTime_67;
      highp float fAdherenceScale_68;
      highp vec3 vWindVector_69;
      vWindVector_69 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_67 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_70;
      highp float fOscillation_71;
      fOscillation_71 = 1.0;
      highp float fAmount_72;
      highp float fTarget_73;
      highp vec4 tmpvar_74;
      tmpvar_74.x = (fTime_67 + _glesMultiTexCoord0.w);
      tmpvar_74.y = ((fTime_67 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_74.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_67 + _glesMultiTexCoord0.w));
      tmpvar_74.w = ((fTime_67 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_75;
      tmpvar_75 = abs(((
        fract((tmpvar_74 + 0.5))
       * 2.0) - 1.0));
      vOscillations_70 = (((
        (tmpvar_75 * tmpvar_75)
       * 
        (3.0 - (2.0 * tmpvar_75))
      ) - 0.5) * 2.0);
      highp float tmpvar_76;
      tmpvar_76 = (vOscillations_70.y * vOscillations_70.z);
      fTarget_73 = 1.0;
      fAmount_72 = tmpvar_76;
      if ((tmpvar_76 < 0.0)) {
        fTarget_73 = -1.0;
        fAmount_72 = -(tmpvar_76);
      };
      fOscillation_71 = (((
        mix (mix (tmpvar_76, fTarget_73, fAmount_72), fTarget_73, fAmount_72)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_70.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_71 = (fOscillation_71 * (1.0 + (vOscillations_70.w * _ST_WindBranchWhip.x)));
      vPos_66 = (FinalPosition_17 + ((vWindVector_69 * fOscillation_71) * _ST_WindBranch.y));
      highp vec4 tmpvar_77;
      tmpvar_77.zw = vec2(0.0, 0.0);
      tmpvar_77.x = ((fTime_67 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_77.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_78;
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      tmpvar_78 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      fAdherenceScale_68 = (1.0 - ((tmpvar_78.x * tmpvar_78.y) * (
        (tmpvar_78.x * tmpvar_78.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_68 = (fAdherenceScale_68 + ((vOscillations_70.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_66 = (vPos_66 + ((
        ((vRotatedBranchAnchor_15 - vPos_66) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_68) * _glesMultiTexCoord0.z));
      vPos_65 = vPos_66;
    } else {
      highp vec3 vPos_80;
      vPos_80 = vPos_65;
      highp float fTime_81;
      highp vec3 vWindVector_82;
      vWindVector_82 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_81 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_83;
      highp float fOscillation_84;
      fOscillation_84 = 1.0;
      highp float fAmount_85;
      highp float fTarget_86;
      highp vec4 tmpvar_87;
      tmpvar_87.w = 0.0;
      tmpvar_87.x = (fTime_81 + _glesMultiTexCoord0.w);
      tmpvar_87.y = ((fTime_81 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_87.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_81 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_88;
      tmpvar_88 = abs(((
        fract((tmpvar_87 + 0.5))
       * 2.0) - 1.0));
      vOscillations_83 = (((
        (tmpvar_88 * tmpvar_88)
       * 
        (3.0 - (2.0 * tmpvar_88))
      ) - 0.5) * 2.0);
      highp float tmpvar_89;
      tmpvar_89 = (vOscillations_83.y * vOscillations_83.z);
      fTarget_86 = 1.0;
      fAmount_85 = tmpvar_89;
      if ((tmpvar_89 < 0.0)) {
        fTarget_86 = -1.0;
        fAmount_85 = -(tmpvar_89);
      };
      fOscillation_84 = (((
        mix (mix (tmpvar_89, fTarget_86, fAmount_85), fTarget_86, fAmount_85)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_83.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_80 = (vPos_65 + ((vWindVector_82 * fOscillation_84) * _ST_WindBranch.y));
      vPos_65 = vPos_80;
    };
    FinalPosition_17 = vPos_65;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_90;
    vPos_90 = FinalPosition_17;
    highp float fMoveAmount_91;
    highp float fAdjust_92;
    highp float fLength_93;
    fLength_93 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_94;
    tmpvar_94 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_92 = tmpvar_94;
    if ((tmpvar_94 != 0.0)) {
      fAdjust_92 = pow (tmpvar_94, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_95;
    tmpvar_95.zw = vec2(0.0, 0.0);
    tmpvar_95.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_95.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_96;
    highp vec4 tmpvar_97;
    tmpvar_97 = abs(((
      fract((tmpvar_95 + 0.5))
     * 2.0) - 1.0));
    tmpvar_96 = (((
      (tmpvar_97 * tmpvar_97)
     * 
      (3.0 - (2.0 * tmpvar_97))
    ) - 0.5) * 2.0);
    fMoveAmount_91 = ((_ST_WindGlobal.y * (tmpvar_96.x + 
      (tmpvar_96.y * tmpvar_96.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_91 = (fMoveAmount_91 * fAdjust_92);
    vPos_90.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_91));
    vPos_90 = (normalize(vPos_90) * fLength_93);
    FinalPosition_17 = vPos_90;
  };
  tmpvar_13.xyz = FinalPosition_17;
  highp vec4 hPos_98;
  hPos_98 = (glstate_matrix_mvp * tmpvar_13);
  mediump vec3 screenPos_99;
  highp vec4 o_100;
  highp vec4 tmpvar_101;
  tmpvar_101 = (hPos_98 * 0.5);
  highp vec2 tmpvar_102;
  tmpvar_102.x = tmpvar_101.x;
  tmpvar_102.y = (tmpvar_101.y * _ProjectionParams.x);
  o_100.xy = (tmpvar_102 + tmpvar_101.w);
  o_100.zw = hPos_98.zw;
  highp vec3 tmpvar_103;
  tmpvar_103 = o_100.xyw;
  screenPos_99 = tmpvar_103;
  screenPos_99.xy = (screenPos_99.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_8;
  highp vec3 tmpvar_104;
  tmpvar_104 = (_Object2World * tmpvar_13).xyz;
  highp vec4 v_105;
  v_105.x = _World2Object[0].x;
  v_105.y = _World2Object[1].x;
  v_105.z = _World2Object[2].x;
  v_105.w = _World2Object[3].x;
  highp vec4 v_106;
  v_106.x = _World2Object[0].y;
  v_106.y = _World2Object[1].y;
  v_106.z = _World2Object[2].y;
  v_106.w = _World2Object[3].y;
  highp vec4 v_107;
  v_107.x = _World2Object[0].z;
  v_107.y = _World2Object[1].z;
  v_107.z = _World2Object[2].z;
  v_107.w = _World2Object[3].z;
  highp vec3 tmpvar_108;
  tmpvar_108 = normalize(((
    (v_105.xyz * tmpvar_14.x)
   + 
    (v_106.xyz * tmpvar_14.y)
  ) + (v_107.xyz * tmpvar_14.z)));
  worldNormal_4 = tmpvar_108;
  tmpvar_5 = worldNormal_4;
  lowp vec4 tmpvar_109;
  tmpvar_109.w = 1.0;
  tmpvar_109.xyz = worldNormal_4;
  mediump vec4 normal_110;
  normal_110 = tmpvar_109;
  mediump vec3 x2_111;
  mediump vec4 tmpvar_112;
  tmpvar_112 = (normal_110.xyzz * normal_110.yzzx);
  x2_111.x = dot (unity_SHBr, tmpvar_112);
  x2_111.y = dot (unity_SHBg, tmpvar_112);
  x2_111.z = dot (unity_SHBb, tmpvar_112);
  highp vec3 lightColor0_113;
  lightColor0_113 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_114;
  lightColor1_114 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_115;
  lightColor2_115 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_116;
  lightColor3_116 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_117;
  lightAttenSq_117 = unity_4LightAtten0;
  highp vec3 normal_118;
  normal_118 = worldNormal_4;
  highp vec3 col_119;
  highp vec4 ndotl_120;
  highp vec4 lengthSq_121;
  highp vec4 tmpvar_122;
  tmpvar_122 = (unity_4LightPosX0 - tmpvar_104.x);
  highp vec4 tmpvar_123;
  tmpvar_123 = (unity_4LightPosY0 - tmpvar_104.y);
  highp vec4 tmpvar_124;
  tmpvar_124 = (unity_4LightPosZ0 - tmpvar_104.z);
  lengthSq_121 = (tmpvar_122 * tmpvar_122);
  lengthSq_121 = (lengthSq_121 + (tmpvar_123 * tmpvar_123));
  lengthSq_121 = (lengthSq_121 + (tmpvar_124 * tmpvar_124));
  ndotl_120 = (tmpvar_122 * normal_118.x);
  ndotl_120 = (ndotl_120 + (tmpvar_123 * normal_118.y));
  ndotl_120 = (ndotl_120 + (tmpvar_124 * normal_118.z));
  highp vec4 tmpvar_125;
  tmpvar_125 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_120 * inversesqrt(lengthSq_121)));
  ndotl_120 = tmpvar_125;
  highp vec4 tmpvar_126;
  tmpvar_126 = (tmpvar_125 * (1.0/((1.0 + 
    (lengthSq_121 * lightAttenSq_117)
  ))));
  col_119 = (lightColor0_113 * tmpvar_126.x);
  col_119 = (col_119 + (lightColor1_114 * tmpvar_126.y));
  col_119 = (col_119 + (lightColor2_115 * tmpvar_126.z));
  col_119 = (col_119 + (lightColor3_116 * tmpvar_126.w));
  tmpvar_7 = ((x2_111 + (unity_SHC.xyz * 
    ((normal_110.x * normal_110.x) - (normal_110.y * normal_110.y))
  )) + col_119);
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_104;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = screenPos_99;
  xlv_TEXCOORD5 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_16;
  x_16 = (tmpvar_9 - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_17.x, max (tmpvar_17.y, tmpvar_17.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_17 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_18;
  normalWorld_18 = tmpvar_4;
  mediump vec3 tmpvar_19;
  mediump vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = normalWorld_18;
  mediump vec3 x1_21;
  x1_21.x = dot (unity_SHAr, tmpvar_20);
  x1_21.y = dot (unity_SHAg, tmpvar_20);
  x1_21.z = dot (unity_SHAb, tmpvar_20);
  tmpvar_19 = (xlv_TEXCOORD5 + x1_21);
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_24 = tmpvar_25;
  c_23.xyz = ((tmpvar_8 * tmpvar_1) * diff_24);
  c_23.w = tmpvar_9;
  c_22.w = c_23.w;
  c_22.xyz = (c_23.xyz + (tmpvar_8 * tmpvar_19));
  c_3.xyz = c_22.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec4 t3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
mediump vec3 t16_15;
highp vec2 t16;
bvec2 tb16;
highp float t19;
bool tb19;
highp vec3 t24;
highp vec2 t32;
highp int ti32;
highp vec2 t37;
highp vec2 t39;
highp float t48;
bool tb48;
highp float t49;
bool tb49;
highp float t51;
bool tb51;
highp float t52;
highp float t53;
mediump float t16_63;
void main()
{
    //Instruction 21494
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 21495
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 21496
    //ADD
    t16.x = t0.x + _Object2World[3].z;
    //Instruction 21497
    //ADD
    t32.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 21498
    //ADD
    t16.y = t32.x + in_NORMAL0.x;
    //Instruction 21499
    //FRC
    t16.xy = fract(t16.xy);
    //Instruction 21500
    //MAD
    t16.x = t16.y * 0.500000 + t16.x;
    //Instruction 21501
    //ADD
    t16.x = t16.x + -0.300000;
    //Instruction 21502
    //MUL
    t1.z = t16.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 21503
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 21504
    //LT
    tb16.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), t16_2.xxxx).xy;
    //Instruction 21505
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 21506
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 21507
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 21508
    //DP3
    t48 = dot(t3.xyz, t3.xyz);
    //Instruction 21509
    //RSQ
    t48 = inversesqrt(t48);
    //Instruction 21510
    //MUL
    t3.xyz = vec3(t48) * t3.xyz;
    //Instruction 21511
    //AND
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, tb16.xxx);
    //Instruction 21512
    //ADD
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 21513
    //LT
    tb48 = t16_2.x<5.000000;
    //Instruction 21514
    //AND
    ti32 = int(uint(tb48) & uint(tb16.y));
    //Instruction 21515
    //IF
    if((uint(ti32))!=uint(0u)){
        //Instruction 21516
        //ADD
        t32.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 21517
        //EQ
        tb48 = t16_2.x==4.000000;
        //Instruction 21518
        //LT
        tb49 = 0.0<in_TEXCOORD2.w;
        //Instruction 21519
        //MOVC
        t5.xy = (bool(tb49)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 21520
        //ADD
        t32.x = t32.x + t5.x;
        //Instruction 21521
        //ADD
        t32.x = t32.x + 0.500000;
        //Instruction 21522
        //FRC
        t32.x = fract(t32.x);
        //Instruction 21523
        //MAD
        t32.x = t32.x * 2.000000 + -1.0;
        //Instruction 21524
        //MUL
        t51 = abs(t32.x) * abs(t32.x);
        //Instruction 21525
        //MAD
        t32.x = -abs(t32.x) * 2.000000 + 3.000000;
        //Instruction 21526
        //MAD
        t32.x = t51 * t32.x + -0.500000;
        //Instruction 21527
        //DP2
        t32.x = dot(t32.xx, t5.yy);
        //Instruction 21528
        //MUL
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 21529
        //FRC
        t5.xyz = fract(t5.xyz);
        //Instruction 21530
        //MAD
        t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 21531
        //MUL
        t5.xyz = t32.xxx * t5.xyz;
        //Instruction 21532
        //MAD
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        //Instruction 21533
        //IF
        if(tb48){
            //Instruction 21534
            //MUL
            t5 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 21535
            //FRC
            t5 = fract(t5);
            //Instruction 21536
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 21537
            //MOVC
            t6 = (bool(tb49)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 21538
            //MOVC
            t7.xyz = (bool(tb49)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 21539
            //MUL
            t32.x = t5.w * 3.000000;
            //Instruction 21540
            //MAD
            t8.y = t5.w * 3.000000 + t6.x;
            //Instruction 21541
            //MAD
            t8.x = t6.x * 0.750000 + (-t32.x);
            //Instruction 21542
            //ADD
            t32.xy = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 21543
            //FRC
            t32.xy = fract(t32.xy);
            //Instruction 21544
            //MAD
            t32.xy = t32.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 21545
            //MUL
            t8.xy = abs(t32.xy) * abs(t32.xy);
            //Instruction 21546
            //MAD
            t32.xy = -abs(t32.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 21547
            //MAD
            t32.xy = t8.xy * t32.xy + vec2(-0.500000, -0.500000);
            //Instruction 21548
            //ADD
            t32.xy = t32.xy + t32.xy;
            //Instruction 21549
            //DP3
            t49 = dot(t4.xyz, t4.xyz);
            //Instruction 21550
            //SQRT
            t49 = sqrt(t49);
            //Instruction 21551
            //MAD
            t51 = t32.x * t32.x + t32.y;
            //Instruction 21552
            //MUL
            t52 = t6.z * in_TEXCOORD2.x;
            //Instruction 21553
            //MUL
            t51 = t51 * t52;
            //Instruction 21554
            //SINCOS
            t6.x = sin(t51);
            t8.x = cos(t51);
            //Instruction 21555
            //ADD
            t51 = (-t8.x) + 1.0;
            //Instruction 21556
            //MUL
            t9 = t5.xxxy * vec4(t51);
            //Instruction 21557
            //MUL
            t24.xyz = t5.zxy * t6.xxx;
            //Instruction 21558
            //MAD
            t10.xy = t9.zy * t5.zy + t24.zx;
            //Instruction 21559
            //MAD
            t11.xy = t9.xw * t5.xy + t8.xx;
            //Instruction 21560
            //MAD
            t10.z = t9.w * t5.z + (-t24.y);
            //Instruction 21561
            //MAD
            t12.xy = t9.yz * t5.yz + (-t24.xz);
            //Instruction 21562
            //MAD
            t12.z = t9.w * t5.z + t24.y;
            //Instruction 21563
            //MUL
            t52 = t5.z * t5.z;
            //Instruction 21564
            //MAD
            t12.w = t52 * t51 + t8.x;
            //Instruction 21565
            //MUL
            t8.xyz = t3.yzx * t5.zxy;
            //Instruction 21566
            //MAD
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            //Instruction 21567
            //DP3
            t19 = dot(t3.xyz, t5.xyz);
            //Instruction 21568
            //MAX
            t19 = max(t19, -1.0);
            //Instruction 21569
            //MIN
            t19 = min(t19, 1.0);
            //Instruction 21570
            //ADD
            t8.w = t19 + t8.y;
            //Instruction 21571
            //DP3
            t51 = dot(t8.xzw, t8.xzw);
            //Instruction 21572
            //RSQ
            t51 = inversesqrt(t51);
            //Instruction 21573
            //MUL
            t5.xyz = vec3(t51) * t8.zxw;
            //Instruction 21574
            //ADD
            t51 = -abs(t19) + 1.0;
            //Instruction 21575
            //SQRT
            t51 = sqrt(t51);
            //Instruction 21576
            //MAD
            t52 = abs(t19) * -0.018729 + 0.074261;
            //Instruction 21577
            //MAD
            t52 = t52 * abs(t19) + -0.212114;
            //Instruction 21578
            //MAD
            t52 = t52 * abs(t19) + 1.570729;
            //Instruction 21579
            //MUL
            t6.x = t51 * t52;
            //Instruction 21580
            //MAD
            t6.x = t6.x * -2.000000 + 3.141593;
            //Instruction 21581
            //LT
            tb19 = t19<(-t19);
            //Instruction 21582
            //AND
            t19 = tb19 ? t6.x : float(0.0);
            //Instruction 21583
            //MAD
            t19 = t52 * t51 + t19;
            //Instruction 21584
            //MAD
            t32.x = (-t32.y) * t32.y + t32.x;
            //Instruction 21585
            //MAD
            t8.x = t5.w * 3.000000 + t7.z;
            //Instruction 21586
            //MUL
            t8.y = t8.x * 0.870000;
            //Instruction 21587
            //ADD
            t6.xz = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 21588
            //FRC
            t6.xz = fract(t6.xz);
            //Instruction 21589
            //MAD
            t6.xz = t6.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 21590
            //MUL
            t39.xy = abs(t6.xz) * abs(t6.xz);
            //Instruction 21591
            //MAD
            t6.xz = -abs(t6.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 21592
            //MAD
            t6.xz = t39.xy * t6.xz + vec2(-0.500000, -0.500000);
            //Instruction 21593
            //ADD
            t6.xz = t6.xz + t6.xz;
            //Instruction 21594
            //MUL
            t48 = t6.z * t6.z;
            //Instruction 21595
            //MAD
            t48 = t48 * t6.x + 1.0;
            //Instruction 21596
            //MUL
            t48 = t48 * 0.500000;
            t48 = clamp(t48, 0.0, 1.0);
            //Instruction 21597
            //LOG
            t48 = log2(t48);
            //Instruction 21598
            //MUL
            t48 = t48 * t7.y;
            //Instruction 21599
            //EXP
            t48 = exp2(t48);
            //Instruction 21600
            //MUL
            t32.x = t6.y * t32.x;
            //Instruction 21601
            //MAD
            t32.x = t19 * t6.w + t32.x;
            //Instruction 21602
            //MAD
            t32.x = t7.x * t48 + t32.x;
            //Instruction 21603
            //MUL
            t32.x = t32.x * in_TEXCOORD2.x;
            //Instruction 21604
            //SINCOS
            t6.x = sin(t32.x);
            t7.x = cos(t32.x);
            //Instruction 21605
            //ADD
            t32.x = (-t7.x) + 1.0;
            //Instruction 21606
            //MUL
            t8 = vec4(t5.y * t32.x, t5.y * t32.x, t5.y * t32.x, t5.z * t32.x);
            //Instruction 21607
            //MUL
            t6.xyz = t5.xyz * t6.xxx;
            //Instruction 21608
            //MAD
            t9.xy = t8.zy * t5.xz + t6.zx;
            //Instruction 21609
            //MAD
            t13.xy = t8.xw * t5.yz + t7.xx;
            //Instruction 21610
            //MAD
            t9.z = t8.w * t5.x + (-t6.y);
            //Instruction 21611
            //MAD
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            //Instruction 21612
            //MAD
            t14.z = t8.w * t5.x + t6.y;
            //Instruction 21613
            //MUL
            t48 = t5.x * t5.x;
            //Instruction 21614
            //MAD
            t9.w = t48 * t32.x + t7.x;
            //Instruction 21615
            //MOV
            t11.z = t12.x;
            //Instruction 21616
            //MOV
            t11.w = t10.x;
            //Instruction 21617
            //MOV
            t13.z = t9.y;
            //Instruction 21618
            //MOV
            t13.w = t14.y;
            //Instruction 21619
            //DP3
            t5.x = dot(t11.xzw, t13.xzw);
            //Instruction 21620
            //MOV
            t14.w = t13.y;
            //Instruction 21621
            //DP3
            t5.y = dot(t11.xwz, t14.xzw);
            //Instruction 21622
            //DP3
            t5.z = dot(t11.xzw, t9.xzw);
            //Instruction 21623
            //MOV
            t10.w = t11.y;
            //Instruction 21624
            //DP3
            t6.x = dot(t10.ywz, t13.xzw);
            //Instruction 21625
            //DP3
            t6.y = dot(t10.yzw, t14.xzw);
            //Instruction 21626
            //DP3
            t6.z = dot(t10.ywz, t9.xzw);
            //Instruction 21627
            //DP3
            t7.x = dot(t12.yzw, t13.xzw);
            //Instruction 21628
            //DP3
            t7.y = dot(t12.ywz, t14.xzw);
            //Instruction 21629
            //DP3
            t7.z = dot(t12.yzw, t9.xzw);
            //Instruction 21630
            //DP3
            t32.x = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 21631
            //DP3
            t32.y = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 21632
            //DP3
            t19 = dot(t7.xyz, in_NORMAL0.xyz);
            //Instruction 21633
            //DP3
            t5.x = dot(t5.xyz, t4.xyz);
            //Instruction 21634
            //DP3
            t5.y = dot(t6.xyz, t4.xyz);
            //Instruction 21635
            //DP3
            t5.z = dot(t7.xyz, t4.xyz);
            //Instruction 21636
            //DP3
            t51 = dot(t5.xyz, t5.xyz);
            //Instruction 21637
            //RSQ
            t51 = inversesqrt(t51);
            //Instruction 21638
            //MUL
            t5.xyz = vec3(t51) * t5.xyz;
            //Instruction 21639
            //MUL
            t4.xyz = vec3(t49) * t5.xyz;
            //Instruction 21640
        //ELSE
        } else {
            //Instruction 21641
            //MOV
            t32.xy = in_NORMAL0.xy;
            //Instruction 21642
            //MOV
            t19 = in_NORMAL0.z;
            //Instruction 21643
        //ENDIF
        }
        //Instruction 21644
    //ELSE
    } else {
        //Instruction 21645
        //MOV
        t32.xy = in_NORMAL0.xy;
        //Instruction 21646
        //MOV
        t19 = in_NORMAL0.z;
        //Instruction 21647
    //ENDIF
    }
    //Instruction 21648
    //ADD
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    //Instruction 21649
    //GE
    tb49 = t16_2.x>=3.000000;
    //Instruction 21650
    //IF
    if(tb49){
        //Instruction 21651
        //EQ
        tb49 = t16_2.x==5.000000;
        //Instruction 21652
        //IF
        if(tb49){
            //Instruction 21653
            //MUL
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 21654
            //MAD
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            //Instruction 21655
            //MAD
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            //Instruction 21656
            //DP3
            t49 = dot(t5.xyz, t5.xyz);
            //Instruction 21657
            //RSQ
            t49 = inversesqrt(t49);
            //Instruction 21658
            //MUL
            t5.xyz = vec3(t49) * t5.xyz;
            //Instruction 21659
            //MUL
            t6.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 21660
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 21661
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 21662
            //MUL
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            //Instruction 21663
            //ADD
            t49 = t0.x + _ST_WindBranch.x;
            //Instruction 21664
            //ADD
            t2.x = t49 + in_TEXCOORD0.w;
            //Instruction 21665
            //MAD
            t2.y = t49 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 21666
            //MUL
            t51 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 21667
            //MUL
            t2.z = t51 * 0.500000;
            //Instruction 21668
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 21669
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 21670
            //FRC
            t2 = fract(t2);
            //Instruction 21671
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 21672
            //MUL
            t7 = abs(t2) * abs(t2);
            //Instruction 21673
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 21674
            //MAD
            t2 = t7 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 21675
            //ADD
            t2 = t2 + t2;
            //Instruction 21676
            //MUL
            t7.w = t2.z * t2.y;
            //Instruction 21677
            //LT
            tb51 = t7.w<0.0;
            //Instruction 21678
            //MOV
            t7.y = (-t7.w);
            //Instruction 21679
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 21680
            //MOVC
            t7.xy = (bool(tb51)) ? t7.xy : t7.zw;
            //Instruction 21681
            //MAD
            t51 = (-t2.y) * t2.z + t7.x;
            //Instruction 21682
            //MAD
            t51 = t7.y * t51 + t7.w;
            //Instruction 21683
            //ADD
            t52 = (-t51) + t7.x;
            //Instruction 21684
            //MAD
            t51 = t7.y * t52 + t51;
            //Instruction 21685
            //MUL
            t51 = t51 * _ST_WindBranchTwitch.x;
            //Instruction 21686
            //ADD
            t52 = (-_ST_WindVector.w) + 1.0;
            //Instruction 21687
            //ADD
            t53 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 21688
            //MUL
            t53 = t2.x * t53;
            //Instruction 21689
            //MAD
            t51 = t51 * t52 + t53;
            //Instruction 21690
            //MAD
            t52 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 21691
            //MUL
            t51 = t51 * t52;
            //Instruction 21692
            //MUL
            t6.xyz = vec3(t51) * t6.xyz;
            //Instruction 21693
            //MAD
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 21694
            //MAD
            t7.x = t49 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 21695
            //MUL
            t49 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 21696
            //MAD
            t7.y = t49 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 21697
            //ADD
            t7.xy = t7.xy + vec2(0.500000, 0.500000);
            //Instruction 21698
            //FRC
            t7.xy = fract(t7.xy);
            //Instruction 21699
            //MAD
            t7.xy = t7.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 21700
            //MUL
            t39.xy = abs(t7.xy) * abs(t7.xy);
            //Instruction 21701
            //MAD
            t7.xy = -abs(t7.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 21702
            //MAD
            t7.xy = t39.xy * t7.xy + vec2(-0.500000, -0.500000);
            //Instruction 21703
            //ADD
            t7.xy = t7.xy + t7.xy;
            //Instruction 21704
            //MUL
            t7.xy = t7.xy * t7.xy;
            //Instruction 21705
            //MUL
            t49 = t7.x * t7.y;
            //Instruction 21706
            //MAD
            t49 = (-t49) * _ST_WindTurbulences.x + 1.0;
            //Instruction 21707
            //MUL
            t51 = t2.w * _ST_WindVector.w;
            //Instruction 21708
            //MAD
            t49 = t51 * _ST_WindBranchWhip.x + t49;
            //Instruction 21709
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            //Instruction 21710
            //MUL
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 21711
            //MUL
            t5.xyz = vec3(t49) * t5.xyz;
            //Instruction 21712
            //MAD
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
            //Instruction 21713
        //ELSE
        } else {
            //Instruction 21714
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 21715
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 21716
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 21717
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 21718
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 21719
            //ADD
            t6.x = t0.x + in_TEXCOORD0.w;
            //Instruction 21720
            //MAD
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 21721
            //MUL
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 21722
            //MUL
            t6.z = t0.x * 0.500000;
            //Instruction 21723
            //ADD
            t6.xyz = t6.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 21724
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 21725
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 21726
            //MUL
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            //Instruction 21727
            //MAD
            t6.xyz = -abs(t6.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 21728
            //MAD
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 21729
            //ADD
            t6.xyz = t6.xyz + t6.xyz;
            //Instruction 21730
            //MUL
            t2.w = t6.z * t6.y;
            //Instruction 21731
            //LT
            tb0 = t2.w<0.0;
            //Instruction 21732
            //MOV
            t2.y = (-t2.w);
            //Instruction 21733
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 21734
            //MOVC
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 21735
            //MAD
            t0.x = (-t6.y) * t6.z + t7.x;
            //Instruction 21736
            //MAD
            t0.x = t7.y * t0.x + t2.w;
            //Instruction 21737
            //ADD
            t49 = (-t0.x) + t7.x;
            //Instruction 21738
            //MAD
            t0.x = t7.y * t49 + t0.x;
            //Instruction 21739
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 21740
            //ADD
            t49 = (-_ST_WindVector.w) + 1.0;
            //Instruction 21741
            //ADD
            t51 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 21742
            //MUL
            t51 = t51 * t6.x;
            //Instruction 21743
            //MAD
            t0.x = t0.x * t49 + t51;
            //Instruction 21744
            //MUL
            t5.xyz = t0.xxx * t5.xyz;
            //Instruction 21745
            //MAD
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 21746
        //ENDIF
        }
        //Instruction 21747
    //ENDIF
    }
    //Instruction 21748
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 21749
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 21750
    //DIV
    t49 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 21751
    //MAD
    t49 = (-t49) * 0.250000 + t4.y;
    //Instruction 21752
    //MAX
    t49 = max(t49, 0.0);
    //Instruction 21753
    //MUL
    t49 = t49 * _ST_WindGlobal.z;
    //Instruction 21754
    //NE
    tb51 = t49!=0.0;
    //Instruction 21755
    //LOG
    t52 = log2(t49);
    //Instruction 21756
    //MUL
    t52 = t52 * _ST_WindGlobal.w;
    //Instruction 21757
    //EXP
    t52 = exp2(t52);
    //Instruction 21758
    //MOVC
    t49 = (tb51) ? t52 : t49;
    //Instruction 21759
    //ADD
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 21760
    //MAD
    t5.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 21761
    //ADD
    t5.xy = t5.xy + vec2(0.500000, 0.500000);
    //Instruction 21762
    //FRC
    t5.xy = fract(t5.xy);
    //Instruction 21763
    //MAD
    t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 21764
    //MUL
    t37.xy = abs(t5.xy) * abs(t5.xy);
    //Instruction 21765
    //MAD
    t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 21766
    //MAD
    t5.xy = t37.xy * t5.xy + vec2(-0.500000, -0.500000);
    //Instruction 21767
    //ADD
    t5.xy = t5.xy + t5.xy;
    //Instruction 21768
    //MAD
    t51 = t5.y * t5.y + t5.x;
    //Instruction 21769
    //DIV
    t52 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 21770
    //MAD
    t51 = _ST_WindGlobal.y * t51 + t52;
    //Instruction 21771
    //MUL
    t49 = t49 * t51;
    //Instruction 21772
    //MAD
    t5.xz = t3.xz * vec2(t49) + t4.xz;
    //Instruction 21773
    //MOV
    t5.y = t4.y;
    //Instruction 21774
    //DP3
    t49 = dot(t5.xyz, t5.xyz);
    //Instruction 21775
    //RSQ
    t49 = inversesqrt(t49);
    //Instruction 21776
    //MUL
    t3.xzw = vec3(t49) * t5.xyz;
    //Instruction 21777
    //MUL
    t3.xzw = t0.xxx * t3.xzw;
    //Instruction 21778
    //MOVC
    t3.xzw = (tb16.x) ? t3.xzw : t4.xyz;
    //Instruction 21779
    //MUL
    t4.xyz = t3.zzz * glstate_matrix_mvp[1].xyw;
    //Instruction 21780
    //MAD
    t4.xyz = glstate_matrix_mvp[0].xyw * t3.xxx + t4.xyz;
    //Instruction 21781
    //MAD
    t4.xyz = glstate_matrix_mvp[2].xyw * t3.www + t4.xyz;
    //Instruction 21782
    //MAD
    t4.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t4.xyz;
    //Instruction 21783
    //MUL
    t5.xz = t4.xz * vec2(0.500000, 0.500000);
    //Instruction 21784
    //MUL
    t0.x = t4.y * _ProjectionParams.x;
    //Instruction 21785
    //MUL
    t5.w = t0.x * 0.500000;
    //Instruction 21786
    //ADD
    t0.xy = t5.zz + t5.xw;
    //Instruction 21787
    //MUL
    t0.xy = t0.xy * _ScreenParams.xy;
    //Instruction 21788
    //MUL
    t4.xy = t0.xy * vec2(0.250000, 0.250000);
    //Instruction 21789
    //MUL
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    //Instruction 21790
    //MAD
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    //Instruction 21791
    //MAD
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    //Instruction 21792
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 21793
    //MUL
    t5.xyz = t3.zzz * _Object2World[1].xyz;
    //Instruction 21794
    //MAD
    t5.xyz = _Object2World[0].xyz * t3.xxx + t5.xyz;
    //Instruction 21795
    //MAD
    t3.xzw = _Object2World[2].xyz * t3.www + t5.xyz;
    //Instruction 21796
    //MAD
    t3.xzw = _Object2World[3].xyz * in_POSITION0.www + t3.xzw;
    //Instruction 21797
    //MOV
    t5.x = _World2Object[0].x;
    //Instruction 21798
    //MOV
    t5.y = _World2Object[1].x;
    //Instruction 21799
    //MOV
    t5.z = _World2Object[2].x;
    //Instruction 21800
    //MOV
    t6.x = _World2Object[0].y;
    //Instruction 21801
    //MOV
    t6.y = _World2Object[1].y;
    //Instruction 21802
    //MOV
    t6.z = _World2Object[2].y;
    //Instruction 21803
    //MUL
    t0.xyw = t32.yyy * t6.xyz;
    //Instruction 21804
    //MAD
    t0.xyz = t5.xyz * t32.xxx + t0.xyw;
    //Instruction 21805
    //MOV
    t5.x = _World2Object[0].z;
    //Instruction 21806
    //MOV
    t5.y = _World2Object[1].z;
    //Instruction 21807
    //MOV
    t5.z = _World2Object[2].z;
    //Instruction 21808
    //MAD
    t0.xyz = t5.xyz * vec3(t19) + t0.xyz;
    //Instruction 21809
    //DP3
    t48 = dot(t0.xyz, t0.xyz);
    //Instruction 21810
    //RSQ
    t48 = inversesqrt(t48);
    //Instruction 21811
    //MUL
    t0.xyz = vec3(t48) * t0.xyz;
    //Instruction 21812
    //MUL
    t16_2 = t0.yzzx * t0.xyzz;
    //Instruction 21813
    //DP4
    t16_15.x = dot(unity_SHBr, t16_2);
    //Instruction 21814
    //DP4
    t16_15.y = dot(unity_SHBg, t16_2);
    //Instruction 21815
    //DP4
    t16_15.z = dot(unity_SHBb, t16_2);
    //Instruction 21816
    //MUL
    t16_63 = t0.y * t0.y;
    //Instruction 21817
    //MAD
    t16_63 = t0.x * t0.x + (-t16_63);
    //Instruction 21818
    //MAD
    t16_15.xyz = unity_SHC.xyz * vec3(t16_63) + t16_15.xyz;
    //Instruction 21819
    //ADD
    t2 = (-t3.xxxx) + unity_4LightPosX0;
    //Instruction 21820
    //ADD
    t5 = (-t3.zzzz) + unity_4LightPosY0;
    //Instruction 21821
    //ADD
    t6 = (-t3.wwww) + unity_4LightPosZ0;
    //Instruction 21822
    //MUL
    t7 = t5 * t5;
    //Instruction 21823
    //MAD
    t7 = t2 * t2 + t7;
    //Instruction 21824
    //MAD
    t7 = t6 * t6 + t7;
    //Instruction 21825
    //MUL
    t5 = t0.yyyy * t5;
    //Instruction 21826
    //MAD
    t2 = t2 * t0.xxxx + t5;
    //Instruction 21827
    //MAD
    t2 = t6 * t0.zzzz + t2;
    //Instruction 21828
    //RSQ
    t5 = inversesqrt(t7);
    //Instruction 21829
    //MUL
    t2 = t2 * t5;
    //Instruction 21830
    //MAX
    t2 = max(t2, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 21831
    //MAD
    t5 = t7 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 21832
    //DIV
    t5 = vec4(1.0, 1.0, 1.0, 1.0) / t5;
    //Instruction 21833
    //MUL
    t2 = t2 * t5;
    //Instruction 21834
    //MUL
    t5.xyz = t2.yyy * unity_LightColor[1].xyz;
    //Instruction 21835
    //MAD
    t5.xyz = unity_LightColor[0].xyz * t2.xxx + t5.xyz;
    //Instruction 21836
    //MAD
    t5.xyz = unity_LightColor[2].xyz * t2.zzz + t5.xyz;
    //Instruction 21837
    //MAD
    t5.xyz = unity_LightColor[3].xyz * t2.www + t5.xyz;
    //Instruction 21838
    //ADD
    t5.xyz = t5.xyz + t16_15.xyz;
    //Instruction 21839
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 21840
    //MOV
    vs_TEXCOORD1.xyz = t3.xzw;
    //Instruction 21841
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 21842
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 21843
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 21844
    //MOV
    vs_TEXCOORD4.xyz = t4.xyz;
    //Instruction 21845
    //MOV
    vs_TEXCOORD5.xyz = t5.xyz;
    //Instruction 21846
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump float t16_6;
mediump vec3 t16_9;
mediump float t16_21;
void main()
{
    //Instruction 21458
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 21459
    //FRC
    t16_6 = fract(t16_0.y);
    //Instruction 21460
    //MOV
    t1.x = t16_0.x;
    //Instruction 21461
    //MAD
    t1.y = t16_6 * 0.062500 + unity_LODFade.y;
    //Instruction 21462
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 21463
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 21464
    //LT
    tb1 = t16_1<0.0;
    //Instruction 21465
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 21466
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 21467
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 21468
    //LT
    tb1 = t10_2<0.0;
    //Instruction 21469
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 21470
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 21471
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 21472
    //ADD
    t16_9.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 21473
    //MAD
    t16_9.xyz = vs_TEXCOORD3.zzz * t16_9.xyz + t10_0.xyz;
    //Instruction 21474
    //MAX
    t16_4.x = max(t16_9.z, t16_9.y);
    //Instruction 21475
    //MAX
    t16_4.x = max(t16_9.x, t16_4.x);
    //Instruction 21476
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 21477
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 21478
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_9.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 21479
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD2.xyz;
    //Instruction 21480
    //MUL
    t16_4.xyz = t16_3.xyz * _LightColor0.xyz;
    //Instruction 21481
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 21482
    //MOV
    t16_0.w = 1.0;
    //Instruction 21483
    //DP4
    t16_5.x = dot(unity_SHAr, t16_0);
    //Instruction 21484
    //DP4
    t16_5.y = dot(unity_SHAg, t16_0);
    //Instruction 21485
    //DP4
    t16_5.z = dot(unity_SHAb, t16_0);
    //Instruction 21486
    //ADD
    t16_5.xyz = t16_5.xyz + vs_TEXCOORD5.xyz;
    //Instruction 21487
    //MUL
    t16_3.xyz = t16_3.xyz * t16_5.xyz;
    //Instruction 21488
    //DP3
    t16_21 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 21489
    //MAX
    t16_21 = max(t16_21, 0.0);
    //Instruction 21490
    //MAD
    t16_3.xyz = t16_4.xyz * vec3(t16_21) + t16_3.xyz;
    //Instruction 21491
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 21492
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 21493
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec4 tmpvar_8;
  lowp vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10.xy = tmpvar_3.xy;
  tmpvar_9.w = _Color.w;
  tmpvar_9.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].x;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].y;
  tmpvar_11 = clamp (((
    fract(((tmpvar_12 + tmpvar_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_10.z = tmpvar_11;
  highp vec4 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_1;
  tmpvar_15 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  FinalPosition_18 = tmpvar_1.xyz;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_18 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_19 > 1.0) && (tmpvar_19 < 5.0))) {
    highp float tmpvar_22;
    tmpvar_22 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_23;
    isBestWind_23 = (tmpvar_19 == 4.0);
    bool bLeaf2_24;
    bLeaf2_24 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_25;
    vPos_25 = FinalPosition_18;
    highp vec3 vDirection_26;
    vDirection_26 = tmpvar_2;
    highp float tmpvar_27;
    if (bLeaf2_24) {
      tmpvar_27 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_28;
    if (bLeaf2_24) {
      tmpvar_28 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_28 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_29;
    highp vec4 tmpvar_30;
    tmpvar_30.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_30.x = (tmpvar_27 + tmpvar_22);
    highp vec4 tmpvar_31;
    tmpvar_31 = abs(((
      fract((tmpvar_30 + 0.5))
     * 2.0) - 1.0));
    vPos_29 = (FinalPosition_18 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_28 * (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_26 = tmpvar_2;
    vPos_25 = vPos_29;
    if (isBestWind_23) {
      highp vec3 tmpvar_32;
      tmpvar_32 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_33;
      if (bLeaf2_24) {
        tmpvar_33 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_34;
      if (bLeaf2_24) {
        tmpvar_34 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_35;
      if (bLeaf2_24) {
        tmpvar_35 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_36;
      if (bLeaf2_24) {
        tmpvar_36 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_37;
      if (bLeaf2_24) {
        tmpvar_37 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_37 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_38;
      if (bLeaf2_24) {
        tmpvar_38 = bool(1);
      } else {
        tmpvar_38 = bool(1);
      };
      highp float fTwitch_39;
      highp vec3 vAxis_40;
      highp float fOsc_41;
      highp vec3 vOriginPos_42;
      highp vec3 tmpvar_43;
      tmpvar_43 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_44;
      tmpvar_44 = ((tmpvar_43.x + tmpvar_43.y) + tmpvar_43.z);
      highp vec4 tmpvar_45;
      tmpvar_45.x = (tmpvar_33 + tmpvar_44);
      tmpvar_45.y = ((tmpvar_33 * 0.75) - tmpvar_44);
      tmpvar_45.z = ((tmpvar_33 * 0.01) + tmpvar_44);
      tmpvar_45.w = (tmpvar_33 + tmpvar_44);
      highp vec4 tmpvar_46;
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      tmpvar_46 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      vOriginPos_42 = vPos_29;
      highp float tmpvar_48;
      tmpvar_48 = sqrt(dot (vPos_29, vPos_29));
      highp float fAngle_49;
      fAngle_49 = ((_glesMultiTexCoord2.x * tmpvar_35) * (tmpvar_46.x + (tmpvar_46.y * tmpvar_46.y)));
      highp vec2 vSinCos_50;
      vSinCos_50.x = sin(fAngle_49);
      vSinCos_50.y = cos(fAngle_49);
      highp float tmpvar_51;
      tmpvar_51 = (1.0 - vSinCos_50.y);
      highp mat3 tmpvar_52;
      tmpvar_52[0].x = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.x) + vSinCos_50.y);
      tmpvar_52[0].y = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.y) + (vSinCos_50.x * tmpvar_32.z));
      tmpvar_52[0].z = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.z) - (vSinCos_50.x * tmpvar_32.y));
      tmpvar_52[1].x = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.y) - (vSinCos_50.x * tmpvar_32.z));
      tmpvar_52[1].y = (((tmpvar_51 * tmpvar_32.y) * tmpvar_32.y) + vSinCos_50.y);
      tmpvar_52[1].z = (((tmpvar_51 * tmpvar_32.y) * tmpvar_32.z) + (vSinCos_50.x * tmpvar_32.x));
      tmpvar_52[2].x = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.z) + (vSinCos_50.x * tmpvar_32.y));
      tmpvar_52[2].y = (((tmpvar_51 * tmpvar_32.y) * tmpvar_32.z) - (vSinCos_50.x * tmpvar_32.x));
      tmpvar_52[2].z = (((tmpvar_51 * tmpvar_32.z) * tmpvar_32.z) + vSinCos_50.y);
      highp vec3 tmpvar_53;
      tmpvar_53 = ((tmpvar_32.yzx * vRotatedWindVector_17.zxy) - (tmpvar_32.zxy * vRotatedWindVector_17.yzx));
      vAxis_40.xz = tmpvar_53.xz;
      highp float tmpvar_54;
      tmpvar_54 = clamp (dot (vRotatedWindVector_17, tmpvar_32), -1.0, 1.0);
      vAxis_40.y = (tmpvar_53.y + tmpvar_54);
      highp vec3 tmpvar_55;
      tmpvar_55 = normalize(vAxis_40);
      vAxis_40 = tmpvar_55;
      highp float tmpvar_56;
      tmpvar_56 = (1.570796 - (sign(tmpvar_54) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_54))) * (1.570796 + (abs(tmpvar_54) * (-0.2146018 + 
          (abs(tmpvar_54) * (0.08656672 + (abs(tmpvar_54) * -0.03102955)))
        ))))
      )));
      fOsc_41 = (tmpvar_46.y - (tmpvar_46.x * tmpvar_46.x));
      fTwitch_39 = 0.0;
      if (tmpvar_38) {
        highp float fTime_57;
        fTime_57 = (tmpvar_37.z + tmpvar_44);
        highp vec4 tmpvar_58;
        tmpvar_58.zw = vec2(0.0, 0.0);
        tmpvar_58.x = fTime_57;
        tmpvar_58.y = (0.87 * fTime_57);
        highp vec4 tmpvar_59;
        highp vec4 tmpvar_60;
        tmpvar_60 = abs(((
          fract((tmpvar_58 + 0.5))
         * 2.0) - 1.0));
        tmpvar_59 = (((
          (tmpvar_60 * tmpvar_60)
         * 
          (3.0 - (2.0 * tmpvar_60))
        ) - 0.5) * 2.0);
        fTwitch_39 = (tmpvar_37.x * pow (clamp (
          ((((tmpvar_59.x * tmpvar_59.y) * tmpvar_59.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_37.y));
      };
      highp float fAngle_61;
      fAngle_61 = (_glesMultiTexCoord2.x * ((
        (tmpvar_56 * tmpvar_36)
       + 
        (fOsc_41 * tmpvar_34)
      ) + fTwitch_39));
      highp vec2 vSinCos_62;
      vSinCos_62.x = sin(fAngle_61);
      vSinCos_62.y = cos(fAngle_61);
      highp float tmpvar_63;
      tmpvar_63 = (1.0 - vSinCos_62.y);
      highp mat3 tmpvar_64;
      tmpvar_64[0].x = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.x) + vSinCos_62.y);
      tmpvar_64[0].y = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.y) + (vSinCos_62.x * tmpvar_55.z));
      tmpvar_64[0].z = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.z) - (vSinCos_62.x * tmpvar_55.y));
      tmpvar_64[1].x = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.y) - (vSinCos_62.x * tmpvar_55.z));
      tmpvar_64[1].y = (((tmpvar_63 * tmpvar_55.y) * tmpvar_55.y) + vSinCos_62.y);
      tmpvar_64[1].z = (((tmpvar_63 * tmpvar_55.y) * tmpvar_55.z) + (vSinCos_62.x * tmpvar_55.x));
      tmpvar_64[2].x = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.z) + (vSinCos_62.x * tmpvar_55.y));
      tmpvar_64[2].y = (((tmpvar_63 * tmpvar_55.y) * tmpvar_55.z) - (vSinCos_62.x * tmpvar_55.x));
      tmpvar_64[2].z = (((tmpvar_63 * tmpvar_55.z) * tmpvar_55.z) + vSinCos_62.y);
      highp mat3 tmpvar_65;
      tmpvar_65 = (tmpvar_52 * tmpvar_64);
      vOriginPos_42 = (normalize((tmpvar_65 * vPos_29)) * tmpvar_48);
      vDirection_26 = (tmpvar_65 * _glesNormal);
      vPos_25 = vOriginPos_42;
    };
    tmpvar_15 = vDirection_26;
    FinalPosition_18 = vPos_25;
  };
  FinalPosition_18 = (FinalPosition_18 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_66;
    vPos_66 = FinalPosition_18;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_67;
      vPos_67 = FinalPosition_18;
      highp float fTime_68;
      highp float fAdherenceScale_69;
      highp vec3 vWindVector_70;
      vWindVector_70 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_68 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_71;
      highp float fOscillation_72;
      fOscillation_72 = 1.0;
      highp float fAmount_73;
      highp float fTarget_74;
      highp vec4 tmpvar_75;
      tmpvar_75.x = (fTime_68 + _glesMultiTexCoord0.w);
      tmpvar_75.y = ((fTime_68 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_75.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_68 + _glesMultiTexCoord0.w));
      tmpvar_75.w = ((fTime_68 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_76;
      tmpvar_76 = abs(((
        fract((tmpvar_75 + 0.5))
       * 2.0) - 1.0));
      vOscillations_71 = (((
        (tmpvar_76 * tmpvar_76)
       * 
        (3.0 - (2.0 * tmpvar_76))
      ) - 0.5) * 2.0);
      highp float tmpvar_77;
      tmpvar_77 = (vOscillations_71.y * vOscillations_71.z);
      fTarget_74 = 1.0;
      fAmount_73 = tmpvar_77;
      if ((tmpvar_77 < 0.0)) {
        fTarget_74 = -1.0;
        fAmount_73 = -(tmpvar_77);
      };
      fOscillation_72 = (((
        mix (mix (tmpvar_77, fTarget_74, fAmount_73), fTarget_74, fAmount_73)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_71.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_72 = (fOscillation_72 * (1.0 + (vOscillations_71.w * _ST_WindBranchWhip.x)));
      vPos_67 = (FinalPosition_18 + ((vWindVector_70 * fOscillation_72) * _ST_WindBranch.y));
      highp vec4 tmpvar_78;
      tmpvar_78.zw = vec2(0.0, 0.0);
      tmpvar_78.x = ((fTime_68 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_78.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_79;
      highp vec4 tmpvar_80;
      tmpvar_80 = abs(((
        fract((tmpvar_78 + 0.5))
       * 2.0) - 1.0));
      tmpvar_79 = (((
        (tmpvar_80 * tmpvar_80)
       * 
        (3.0 - (2.0 * tmpvar_80))
      ) - 0.5) * 2.0);
      fAdherenceScale_69 = (1.0 - ((tmpvar_79.x * tmpvar_79.y) * (
        (tmpvar_79.x * tmpvar_79.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_69 = (fAdherenceScale_69 + ((vOscillations_71.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_67 = (vPos_67 + ((
        ((vRotatedBranchAnchor_16 - vPos_67) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_69) * _glesMultiTexCoord0.z));
      vPos_66 = vPos_67;
    } else {
      highp vec3 vPos_81;
      vPos_81 = vPos_66;
      highp float fTime_82;
      highp vec3 vWindVector_83;
      vWindVector_83 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_82 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_84;
      highp float fOscillation_85;
      fOscillation_85 = 1.0;
      highp float fAmount_86;
      highp float fTarget_87;
      highp vec4 tmpvar_88;
      tmpvar_88.w = 0.0;
      tmpvar_88.x = (fTime_82 + _glesMultiTexCoord0.w);
      tmpvar_88.y = ((fTime_82 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_88.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_82 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_89;
      tmpvar_89 = abs(((
        fract((tmpvar_88 + 0.5))
       * 2.0) - 1.0));
      vOscillations_84 = (((
        (tmpvar_89 * tmpvar_89)
       * 
        (3.0 - (2.0 * tmpvar_89))
      ) - 0.5) * 2.0);
      highp float tmpvar_90;
      tmpvar_90 = (vOscillations_84.y * vOscillations_84.z);
      fTarget_87 = 1.0;
      fAmount_86 = tmpvar_90;
      if ((tmpvar_90 < 0.0)) {
        fTarget_87 = -1.0;
        fAmount_86 = -(tmpvar_90);
      };
      fOscillation_85 = (((
        mix (mix (tmpvar_90, fTarget_87, fAmount_86), fTarget_87, fAmount_86)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_84.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_81 = (vPos_66 + ((vWindVector_83 * fOscillation_85) * _ST_WindBranch.y));
      vPos_66 = vPos_81;
    };
    FinalPosition_18 = vPos_66;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_91;
    vPos_91 = FinalPosition_18;
    highp float fMoveAmount_92;
    highp float fAdjust_93;
    highp float fLength_94;
    fLength_94 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_95;
    tmpvar_95 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_93 = tmpvar_95;
    if ((tmpvar_95 != 0.0)) {
      fAdjust_93 = pow (tmpvar_95, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_96;
    tmpvar_96.zw = vec2(0.0, 0.0);
    tmpvar_96.x = (tmpvar_12 + _ST_WindGlobal.x);
    tmpvar_96.y = (tmpvar_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_97;
    highp vec4 tmpvar_98;
    tmpvar_98 = abs(((
      fract((tmpvar_96 + 0.5))
     * 2.0) - 1.0));
    tmpvar_97 = (((
      (tmpvar_98 * tmpvar_98)
     * 
      (3.0 - (2.0 * tmpvar_98))
    ) - 0.5) * 2.0);
    fMoveAmount_92 = ((_ST_WindGlobal.y * (tmpvar_97.x + 
      (tmpvar_97.y * tmpvar_97.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_92 = (fMoveAmount_92 * fAdjust_93);
    vPos_91.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * fMoveAmount_92));
    vPos_91 = (normalize(vPos_91) * fLength_94);
    FinalPosition_18 = vPos_91;
  };
  tmpvar_14.xyz = FinalPosition_18;
  highp vec4 hPos_99;
  hPos_99 = (glstate_matrix_mvp * tmpvar_14);
  mediump vec3 screenPos_100;
  highp vec4 o_101;
  highp vec4 tmpvar_102;
  tmpvar_102 = (hPos_99 * 0.5);
  highp vec2 tmpvar_103;
  tmpvar_103.x = tmpvar_102.x;
  tmpvar_103.y = (tmpvar_102.y * _ProjectionParams.x);
  o_101.xy = (tmpvar_103 + tmpvar_102.w);
  o_101.zw = hPos_99.zw;
  highp vec3 tmpvar_104;
  tmpvar_104 = o_101.xyw;
  screenPos_100 = tmpvar_104;
  screenPos_100.xy = (screenPos_100.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_9;
  highp vec3 tmpvar_105;
  tmpvar_105 = (_Object2World * tmpvar_14).xyz;
  highp vec4 v_106;
  v_106.x = _World2Object[0].x;
  v_106.y = _World2Object[1].x;
  v_106.z = _World2Object[2].x;
  v_106.w = _World2Object[3].x;
  highp vec4 v_107;
  v_107.x = _World2Object[0].y;
  v_107.y = _World2Object[1].y;
  v_107.z = _World2Object[2].y;
  v_107.w = _World2Object[3].y;
  highp vec4 v_108;
  v_108.x = _World2Object[0].z;
  v_108.y = _World2Object[1].z;
  v_108.z = _World2Object[2].z;
  v_108.w = _World2Object[3].z;
  highp vec3 tmpvar_109;
  tmpvar_109 = normalize(((
    (v_106.xyz * tmpvar_15.x)
   + 
    (v_107.xyz * tmpvar_15.y)
  ) + (v_108.xyz * tmpvar_15.z)));
  worldNormal_4 = tmpvar_109;
  tmpvar_5 = worldNormal_4;
  lowp vec4 tmpvar_110;
  tmpvar_110.w = 1.0;
  tmpvar_110.xyz = worldNormal_4;
  mediump vec4 normal_111;
  normal_111 = tmpvar_110;
  mediump vec3 x2_112;
  mediump vec4 tmpvar_113;
  tmpvar_113 = (normal_111.xyzz * normal_111.yzzx);
  x2_112.x = dot (unity_SHBr, tmpvar_113);
  x2_112.y = dot (unity_SHBg, tmpvar_113);
  x2_112.z = dot (unity_SHBb, tmpvar_113);
  highp vec3 lightColor0_114;
  lightColor0_114 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_115;
  lightColor1_115 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_116;
  lightColor2_116 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_117;
  lightColor3_117 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_118;
  lightAttenSq_118 = unity_4LightAtten0;
  highp vec3 normal_119;
  normal_119 = worldNormal_4;
  highp vec3 col_120;
  highp vec4 ndotl_121;
  highp vec4 lengthSq_122;
  highp vec4 tmpvar_123;
  tmpvar_123 = (unity_4LightPosX0 - tmpvar_105.x);
  highp vec4 tmpvar_124;
  tmpvar_124 = (unity_4LightPosY0 - tmpvar_105.y);
  highp vec4 tmpvar_125;
  tmpvar_125 = (unity_4LightPosZ0 - tmpvar_105.z);
  lengthSq_122 = (tmpvar_123 * tmpvar_123);
  lengthSq_122 = (lengthSq_122 + (tmpvar_124 * tmpvar_124));
  lengthSq_122 = (lengthSq_122 + (tmpvar_125 * tmpvar_125));
  ndotl_121 = (tmpvar_123 * normal_119.x);
  ndotl_121 = (ndotl_121 + (tmpvar_124 * normal_119.y));
  ndotl_121 = (ndotl_121 + (tmpvar_125 * normal_119.z));
  highp vec4 tmpvar_126;
  tmpvar_126 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_121 * inversesqrt(lengthSq_122)));
  ndotl_121 = tmpvar_126;
  highp vec4 tmpvar_127;
  tmpvar_127 = (tmpvar_126 * (1.0/((1.0 + 
    (lengthSq_122 * lightAttenSq_118)
  ))));
  col_120 = (lightColor0_114 * tmpvar_127.x);
  col_120 = (col_120 + (lightColor1_115 * tmpvar_127.y));
  col_120 = (col_120 + (lightColor2_116 * tmpvar_127.z));
  col_120 = (col_120 + (lightColor3_117 * tmpvar_127.w));
  tmpvar_7 = ((x2_112 + (unity_SHC.xyz * 
    ((normal_111.x * normal_111.x) - (normal_111.y * normal_111.y))
  )) + col_120);
  tmpvar_8 = (unity_World2Shadow[0] * (_Object2World * tmpvar_14));
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_105;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_10;
  xlv_TEXCOORD4 = screenPos_100;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_13.x = tmpvar_14.x;
  projUV_13.y = ((fract(tmpvar_14.y) * 0.0625) + unity_LODFade.y);
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_16;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_17;
  x_17 = (tmpvar_10 - _Cutoff);
  if ((x_17 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_18;
  tmpvar_18 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_18.x, max (tmpvar_18.y, tmpvar_18.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_18 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_19 = tmpvar_20;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_19;
  mediump vec3 normalWorld_21;
  normalWorld_21 = tmpvar_5;
  mediump vec3 tmpvar_22;
  mediump vec3 tmpvar_23;
  mediump vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = normalWorld_21;
  mediump vec3 x1_25;
  x1_25.x = dot (unity_SHAr, tmpvar_24);
  x1_25.y = dot (unity_SHAg, tmpvar_24);
  x1_25.z = dot (unity_SHAb, tmpvar_24);
  tmpvar_23 = (xlv_TEXCOORD5 + x1_25);
  tmpvar_22 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_22;
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_28 = tmpvar_29;
  c_27.xyz = ((tmpvar_9 * tmpvar_22) * diff_28);
  c_27.w = tmpvar_10;
  c_26.w = c_27.w;
  c_26.xyz = (c_27.xyz + (tmpvar_9 * tmpvar_23));
  c_4.xyz = c_26.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  FinalPosition_17 = tmpvar_1.xyz;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_17 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_18 > 1.0) && (tmpvar_18 < 5.0))) {
    highp float tmpvar_21;
    tmpvar_21 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_22;
    isBestWind_22 = (tmpvar_18 == 4.0);
    bool bLeaf2_23;
    bLeaf2_23 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_24;
    vPos_24 = FinalPosition_17;
    highp vec3 vDirection_25;
    vDirection_25 = tmpvar_2;
    highp float tmpvar_26;
    if (bLeaf2_23) {
      tmpvar_26 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_26 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_27;
    if (bLeaf2_23) {
      tmpvar_27 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_28;
    highp vec4 tmpvar_29;
    tmpvar_29.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_29.x = (tmpvar_26 + tmpvar_21);
    highp vec4 tmpvar_30;
    tmpvar_30 = abs(((
      fract((tmpvar_29 + 0.5))
     * 2.0) - 1.0));
    vPos_28 = (FinalPosition_17 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_27 * (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_25 = tmpvar_2;
    vPos_24 = vPos_28;
    if (isBestWind_22) {
      highp vec3 tmpvar_31;
      tmpvar_31 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_32;
      if (bLeaf2_23) {
        tmpvar_32 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_33;
      if (bLeaf2_23) {
        tmpvar_33 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_34;
      if (bLeaf2_23) {
        tmpvar_34 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_35;
      if (bLeaf2_23) {
        tmpvar_35 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_36;
      if (bLeaf2_23) {
        tmpvar_36 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_36 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_37;
      if (bLeaf2_23) {
        tmpvar_37 = bool(1);
      } else {
        tmpvar_37 = bool(1);
      };
      highp float fTwitch_38;
      highp vec3 vAxis_39;
      highp float fOsc_40;
      highp vec3 vOriginPos_41;
      highp vec3 tmpvar_42;
      tmpvar_42 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_43;
      tmpvar_43 = ((tmpvar_42.x + tmpvar_42.y) + tmpvar_42.z);
      highp vec4 tmpvar_44;
      tmpvar_44.x = (tmpvar_32 + tmpvar_43);
      tmpvar_44.y = ((tmpvar_32 * 0.75) - tmpvar_43);
      tmpvar_44.z = ((tmpvar_32 * 0.01) + tmpvar_43);
      tmpvar_44.w = (tmpvar_32 + tmpvar_43);
      highp vec4 tmpvar_45;
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      tmpvar_45 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      vOriginPos_41 = vPos_28;
      highp float tmpvar_47;
      tmpvar_47 = sqrt(dot (vPos_28, vPos_28));
      highp float fAngle_48;
      fAngle_48 = ((_glesMultiTexCoord2.x * tmpvar_34) * (tmpvar_45.x + (tmpvar_45.y * tmpvar_45.y)));
      highp vec2 vSinCos_49;
      vSinCos_49.x = sin(fAngle_48);
      vSinCos_49.y = cos(fAngle_48);
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - vSinCos_49.y);
      highp mat3 tmpvar_51;
      tmpvar_51[0].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.x) + vSinCos_49.y);
      tmpvar_51[0].y = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.y) + (vSinCos_49.x * tmpvar_31.z));
      tmpvar_51[0].z = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.z) - (vSinCos_49.x * tmpvar_31.y));
      tmpvar_51[1].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.y) - (vSinCos_49.x * tmpvar_31.z));
      tmpvar_51[1].y = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.y) + vSinCos_49.y);
      tmpvar_51[1].z = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.z) + (vSinCos_49.x * tmpvar_31.x));
      tmpvar_51[2].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.z) + (vSinCos_49.x * tmpvar_31.y));
      tmpvar_51[2].y = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.z) - (vSinCos_49.x * tmpvar_31.x));
      tmpvar_51[2].z = (((tmpvar_50 * tmpvar_31.z) * tmpvar_31.z) + vSinCos_49.y);
      highp vec3 tmpvar_52;
      tmpvar_52 = ((tmpvar_31.yzx * vRotatedWindVector_16.zxy) - (tmpvar_31.zxy * vRotatedWindVector_16.yzx));
      vAxis_39.xz = tmpvar_52.xz;
      highp float tmpvar_53;
      tmpvar_53 = clamp (dot (vRotatedWindVector_16, tmpvar_31), -1.0, 1.0);
      vAxis_39.y = (tmpvar_52.y + tmpvar_53);
      highp vec3 tmpvar_54;
      tmpvar_54 = normalize(vAxis_39);
      vAxis_39 = tmpvar_54;
      highp float tmpvar_55;
      tmpvar_55 = (1.570796 - (sign(tmpvar_53) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_53))) * (1.570796 + (abs(tmpvar_53) * (-0.2146018 + 
          (abs(tmpvar_53) * (0.08656672 + (abs(tmpvar_53) * -0.03102955)))
        ))))
      )));
      fOsc_40 = (tmpvar_45.y - (tmpvar_45.x * tmpvar_45.x));
      fTwitch_38 = 0.0;
      if (tmpvar_37) {
        highp float fTime_56;
        fTime_56 = (tmpvar_36.z + tmpvar_43);
        highp vec4 tmpvar_57;
        tmpvar_57.zw = vec2(0.0, 0.0);
        tmpvar_57.x = fTime_56;
        tmpvar_57.y = (0.87 * fTime_56);
        highp vec4 tmpvar_58;
        highp vec4 tmpvar_59;
        tmpvar_59 = abs(((
          fract((tmpvar_57 + 0.5))
         * 2.0) - 1.0));
        tmpvar_58 = (((
          (tmpvar_59 * tmpvar_59)
         * 
          (3.0 - (2.0 * tmpvar_59))
        ) - 0.5) * 2.0);
        fTwitch_38 = (tmpvar_36.x * pow (clamp (
          ((((tmpvar_58.x * tmpvar_58.y) * tmpvar_58.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_36.y));
      };
      highp float fAngle_60;
      fAngle_60 = (_glesMultiTexCoord2.x * ((
        (tmpvar_55 * tmpvar_35)
       + 
        (fOsc_40 * tmpvar_33)
      ) + fTwitch_38));
      highp vec2 vSinCos_61;
      vSinCos_61.x = sin(fAngle_60);
      vSinCos_61.y = cos(fAngle_60);
      highp float tmpvar_62;
      tmpvar_62 = (1.0 - vSinCos_61.y);
      highp mat3 tmpvar_63;
      tmpvar_63[0].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.x) + vSinCos_61.y);
      tmpvar_63[0].y = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.y) + (vSinCos_61.x * tmpvar_54.z));
      tmpvar_63[0].z = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.z) - (vSinCos_61.x * tmpvar_54.y));
      tmpvar_63[1].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.y) - (vSinCos_61.x * tmpvar_54.z));
      tmpvar_63[1].y = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.y) + vSinCos_61.y);
      tmpvar_63[1].z = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.z) + (vSinCos_61.x * tmpvar_54.x));
      tmpvar_63[2].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.z) + (vSinCos_61.x * tmpvar_54.y));
      tmpvar_63[2].y = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.z) - (vSinCos_61.x * tmpvar_54.x));
      tmpvar_63[2].z = (((tmpvar_62 * tmpvar_54.z) * tmpvar_54.z) + vSinCos_61.y);
      highp mat3 tmpvar_64;
      tmpvar_64 = (tmpvar_51 * tmpvar_63);
      vOriginPos_41 = (normalize((tmpvar_64 * vPos_28)) * tmpvar_47);
      vDirection_25 = (tmpvar_64 * _glesNormal);
      vPos_24 = vOriginPos_41;
    };
    tmpvar_14 = vDirection_25;
    FinalPosition_17 = vPos_24;
  };
  FinalPosition_17 = (FinalPosition_17 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_65;
    vPos_65 = FinalPosition_17;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_66;
      vPos_66 = FinalPosition_17;
      highp float fTime_67;
      highp float fAdherenceScale_68;
      highp vec3 vWindVector_69;
      vWindVector_69 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_67 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_70;
      highp float fOscillation_71;
      fOscillation_71 = 1.0;
      highp float fAmount_72;
      highp float fTarget_73;
      highp vec4 tmpvar_74;
      tmpvar_74.x = (fTime_67 + _glesMultiTexCoord0.w);
      tmpvar_74.y = ((fTime_67 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_74.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_67 + _glesMultiTexCoord0.w));
      tmpvar_74.w = ((fTime_67 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_75;
      tmpvar_75 = abs(((
        fract((tmpvar_74 + 0.5))
       * 2.0) - 1.0));
      vOscillations_70 = (((
        (tmpvar_75 * tmpvar_75)
       * 
        (3.0 - (2.0 * tmpvar_75))
      ) - 0.5) * 2.0);
      highp float tmpvar_76;
      tmpvar_76 = (vOscillations_70.y * vOscillations_70.z);
      fTarget_73 = 1.0;
      fAmount_72 = tmpvar_76;
      if ((tmpvar_76 < 0.0)) {
        fTarget_73 = -1.0;
        fAmount_72 = -(tmpvar_76);
      };
      fOscillation_71 = (((
        mix (mix (tmpvar_76, fTarget_73, fAmount_72), fTarget_73, fAmount_72)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_70.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_71 = (fOscillation_71 * (1.0 + (vOscillations_70.w * _ST_WindBranchWhip.x)));
      vPos_66 = (FinalPosition_17 + ((vWindVector_69 * fOscillation_71) * _ST_WindBranch.y));
      highp vec4 tmpvar_77;
      tmpvar_77.zw = vec2(0.0, 0.0);
      tmpvar_77.x = ((fTime_67 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_77.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_78;
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      tmpvar_78 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      fAdherenceScale_68 = (1.0 - ((tmpvar_78.x * tmpvar_78.y) * (
        (tmpvar_78.x * tmpvar_78.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_68 = (fAdherenceScale_68 + ((vOscillations_70.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_66 = (vPos_66 + ((
        ((vRotatedBranchAnchor_15 - vPos_66) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_68) * _glesMultiTexCoord0.z));
      vPos_65 = vPos_66;
    } else {
      highp vec3 vPos_80;
      vPos_80 = vPos_65;
      highp float fTime_81;
      highp vec3 vWindVector_82;
      vWindVector_82 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_81 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_83;
      highp float fOscillation_84;
      fOscillation_84 = 1.0;
      highp float fAmount_85;
      highp float fTarget_86;
      highp vec4 tmpvar_87;
      tmpvar_87.w = 0.0;
      tmpvar_87.x = (fTime_81 + _glesMultiTexCoord0.w);
      tmpvar_87.y = ((fTime_81 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_87.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_81 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_88;
      tmpvar_88 = abs(((
        fract((tmpvar_87 + 0.5))
       * 2.0) - 1.0));
      vOscillations_83 = (((
        (tmpvar_88 * tmpvar_88)
       * 
        (3.0 - (2.0 * tmpvar_88))
      ) - 0.5) * 2.0);
      highp float tmpvar_89;
      tmpvar_89 = (vOscillations_83.y * vOscillations_83.z);
      fTarget_86 = 1.0;
      fAmount_85 = tmpvar_89;
      if ((tmpvar_89 < 0.0)) {
        fTarget_86 = -1.0;
        fAmount_85 = -(tmpvar_89);
      };
      fOscillation_84 = (((
        mix (mix (tmpvar_89, fTarget_86, fAmount_85), fTarget_86, fAmount_85)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_83.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_80 = (vPos_65 + ((vWindVector_82 * fOscillation_84) * _ST_WindBranch.y));
      vPos_65 = vPos_80;
    };
    FinalPosition_17 = vPos_65;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_90;
    vPos_90 = FinalPosition_17;
    highp float fMoveAmount_91;
    highp float fAdjust_92;
    highp float fLength_93;
    fLength_93 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_94;
    tmpvar_94 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_92 = tmpvar_94;
    if ((tmpvar_94 != 0.0)) {
      fAdjust_92 = pow (tmpvar_94, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_95;
    tmpvar_95.zw = vec2(0.0, 0.0);
    tmpvar_95.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_95.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_96;
    highp vec4 tmpvar_97;
    tmpvar_97 = abs(((
      fract((tmpvar_95 + 0.5))
     * 2.0) - 1.0));
    tmpvar_96 = (((
      (tmpvar_97 * tmpvar_97)
     * 
      (3.0 - (2.0 * tmpvar_97))
    ) - 0.5) * 2.0);
    fMoveAmount_91 = ((_ST_WindGlobal.y * (tmpvar_96.x + 
      (tmpvar_96.y * tmpvar_96.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_91 = (fMoveAmount_91 * fAdjust_92);
    vPos_90.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_91));
    vPos_90 = (normalize(vPos_90) * fLength_93);
    FinalPosition_17 = vPos_90;
  };
  tmpvar_13.xyz = FinalPosition_17;
  highp vec4 hPos_98;
  hPos_98 = (glstate_matrix_mvp * tmpvar_13);
  mediump vec3 screenPos_99;
  highp vec4 o_100;
  highp vec4 tmpvar_101;
  tmpvar_101 = (hPos_98 * 0.5);
  highp vec2 tmpvar_102;
  tmpvar_102.x = tmpvar_101.x;
  tmpvar_102.y = (tmpvar_101.y * _ProjectionParams.x);
  o_100.xy = (tmpvar_102 + tmpvar_101.w);
  o_100.zw = hPos_98.zw;
  highp vec3 tmpvar_103;
  tmpvar_103 = o_100.xyw;
  screenPos_99 = tmpvar_103;
  screenPos_99.xy = (screenPos_99.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_8;
  highp vec4 v_104;
  v_104.x = _World2Object[0].x;
  v_104.y = _World2Object[1].x;
  v_104.z = _World2Object[2].x;
  v_104.w = _World2Object[3].x;
  highp vec4 v_105;
  v_105.x = _World2Object[0].y;
  v_105.y = _World2Object[1].y;
  v_105.z = _World2Object[2].y;
  v_105.w = _World2Object[3].y;
  highp vec4 v_106;
  v_106.x = _World2Object[0].z;
  v_106.y = _World2Object[1].z;
  v_106.z = _World2Object[2].z;
  v_106.w = _World2Object[3].z;
  highp vec3 tmpvar_107;
  tmpvar_107 = normalize(((
    (v_104.xyz * tmpvar_14.x)
   + 
    (v_105.xyz * tmpvar_14.y)
  ) + (v_106.xyz * tmpvar_14.z)));
  worldNormal_4 = tmpvar_107;
  tmpvar_5 = worldNormal_4;
  lowp vec4 tmpvar_108;
  tmpvar_108.w = 1.0;
  tmpvar_108.xyz = worldNormal_4;
  mediump vec4 normal_109;
  normal_109 = tmpvar_108;
  mediump vec3 x2_110;
  mediump vec4 tmpvar_111;
  tmpvar_111 = (normal_109.xyzz * normal_109.yzzx);
  x2_110.x = dot (unity_SHBr, tmpvar_111);
  x2_110.y = dot (unity_SHBg, tmpvar_111);
  x2_110.z = dot (unity_SHBb, tmpvar_111);
  tmpvar_7 = (unity_World2Shadow[0] * (_Object2World * tmpvar_13));
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = screenPos_99;
  xlv_TEXCOORD5 = (x2_110 + (unity_SHC.xyz * (
    (normal_109.x * normal_109.x)
   - 
    (normal_109.y * normal_109.y)
  )));
  xlv_TEXCOORD6 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_13.x = tmpvar_14.x;
  projUV_13.y = ((fract(tmpvar_14.y) * 0.0625) + unity_LODFade.y);
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_16;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_17;
  x_17 = (tmpvar_10 - _Cutoff);
  if ((x_17 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_18;
  tmpvar_18 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_18.x, max (tmpvar_18.y, tmpvar_18.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_18 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp float shadow_19;
  shadow_19 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_19;
  mediump vec3 normalWorld_20;
  normalWorld_20 = tmpvar_5;
  mediump vec3 tmpvar_21;
  mediump vec3 tmpvar_22;
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = normalWorld_20;
  mediump vec3 x1_24;
  x1_24.x = dot (unity_SHAr, tmpvar_23);
  x1_24.y = dot (unity_SHAg, tmpvar_23);
  x1_24.z = dot (unity_SHAb, tmpvar_23);
  tmpvar_22 = (xlv_TEXCOORD5 + x1_24);
  tmpvar_21 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_21;
  lowp vec4 c_25;
  lowp vec4 c_26;
  lowp float diff_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_27 = tmpvar_28;
  c_26.xyz = ((tmpvar_9 * tmpvar_21) * diff_27);
  c_26.w = tmpvar_10;
  c_25.w = c_26.w;
  c_25.xyz = (c_26.xyz + (tmpvar_9 * tmpvar_22));
  c_4.xyz = c_25.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec4 t3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
mediump vec3 t16_15;
highp vec2 t16;
bvec2 tb16;
highp float t19;
bool tb19;
highp vec3 t24;
highp vec2 t32;
highp int ti32;
highp vec2 t37;
highp vec2 t39;
highp float t48;
bool tb48;
highp float t49;
bool tb49;
highp float t51;
bool tb51;
highp float t52;
highp float t53;
mediump float t16_63;
void main()
{
    //Instruction 21887
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 21888
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 21889
    //ADD
    t16.x = t0.x + _Object2World[3].z;
    //Instruction 21890
    //ADD
    t32.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 21891
    //ADD
    t16.y = t32.x + in_NORMAL0.x;
    //Instruction 21892
    //FRC
    t16.xy = fract(t16.xy);
    //Instruction 21893
    //MAD
    t16.x = t16.y * 0.500000 + t16.x;
    //Instruction 21894
    //ADD
    t16.x = t16.x + -0.300000;
    //Instruction 21895
    //MUL
    t1.z = t16.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 21896
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 21897
    //LT
    tb16.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), t16_2.xxxx).xy;
    //Instruction 21898
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 21899
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 21900
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 21901
    //DP3
    t48 = dot(t3.xyz, t3.xyz);
    //Instruction 21902
    //RSQ
    t48 = inversesqrt(t48);
    //Instruction 21903
    //MUL
    t3.xyz = vec3(t48) * t3.xyz;
    //Instruction 21904
    //AND
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, tb16.xxx);
    //Instruction 21905
    //ADD
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 21906
    //LT
    tb48 = t16_2.x<5.000000;
    //Instruction 21907
    //AND
    ti32 = int(uint(tb48) & uint(tb16.y));
    //Instruction 21908
    //IF
    if((uint(ti32))!=uint(0u)){
        //Instruction 21909
        //ADD
        t32.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 21910
        //EQ
        tb48 = t16_2.x==4.000000;
        //Instruction 21911
        //LT
        tb49 = 0.0<in_TEXCOORD2.w;
        //Instruction 21912
        //MOVC
        t5.xy = (bool(tb49)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 21913
        //ADD
        t32.x = t32.x + t5.x;
        //Instruction 21914
        //ADD
        t32.x = t32.x + 0.500000;
        //Instruction 21915
        //FRC
        t32.x = fract(t32.x);
        //Instruction 21916
        //MAD
        t32.x = t32.x * 2.000000 + -1.0;
        //Instruction 21917
        //MUL
        t51 = abs(t32.x) * abs(t32.x);
        //Instruction 21918
        //MAD
        t32.x = -abs(t32.x) * 2.000000 + 3.000000;
        //Instruction 21919
        //MAD
        t32.x = t51 * t32.x + -0.500000;
        //Instruction 21920
        //DP2
        t32.x = dot(t32.xx, t5.yy);
        //Instruction 21921
        //MUL
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 21922
        //FRC
        t5.xyz = fract(t5.xyz);
        //Instruction 21923
        //MAD
        t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 21924
        //MUL
        t5.xyz = t32.xxx * t5.xyz;
        //Instruction 21925
        //MAD
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        //Instruction 21926
        //IF
        if(tb48){
            //Instruction 21927
            //MUL
            t5 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 21928
            //FRC
            t5 = fract(t5);
            //Instruction 21929
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 21930
            //MOVC
            t6 = (bool(tb49)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 21931
            //MOVC
            t7.xyz = (bool(tb49)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 21932
            //MUL
            t32.x = t5.w * 3.000000;
            //Instruction 21933
            //MAD
            t8.y = t5.w * 3.000000 + t6.x;
            //Instruction 21934
            //MAD
            t8.x = t6.x * 0.750000 + (-t32.x);
            //Instruction 21935
            //ADD
            t32.xy = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 21936
            //FRC
            t32.xy = fract(t32.xy);
            //Instruction 21937
            //MAD
            t32.xy = t32.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 21938
            //MUL
            t8.xy = abs(t32.xy) * abs(t32.xy);
            //Instruction 21939
            //MAD
            t32.xy = -abs(t32.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 21940
            //MAD
            t32.xy = t8.xy * t32.xy + vec2(-0.500000, -0.500000);
            //Instruction 21941
            //ADD
            t32.xy = t32.xy + t32.xy;
            //Instruction 21942
            //DP3
            t49 = dot(t4.xyz, t4.xyz);
            //Instruction 21943
            //SQRT
            t49 = sqrt(t49);
            //Instruction 21944
            //MAD
            t51 = t32.x * t32.x + t32.y;
            //Instruction 21945
            //MUL
            t52 = t6.z * in_TEXCOORD2.x;
            //Instruction 21946
            //MUL
            t51 = t51 * t52;
            //Instruction 21947
            //SINCOS
            t6.x = sin(t51);
            t8.x = cos(t51);
            //Instruction 21948
            //ADD
            t51 = (-t8.x) + 1.0;
            //Instruction 21949
            //MUL
            t9 = t5.xxxy * vec4(t51);
            //Instruction 21950
            //MUL
            t24.xyz = t5.zxy * t6.xxx;
            //Instruction 21951
            //MAD
            t10.xy = t9.zy * t5.zy + t24.zx;
            //Instruction 21952
            //MAD
            t11.xy = t9.xw * t5.xy + t8.xx;
            //Instruction 21953
            //MAD
            t10.z = t9.w * t5.z + (-t24.y);
            //Instruction 21954
            //MAD
            t12.xy = t9.yz * t5.yz + (-t24.xz);
            //Instruction 21955
            //MAD
            t12.z = t9.w * t5.z + t24.y;
            //Instruction 21956
            //MUL
            t52 = t5.z * t5.z;
            //Instruction 21957
            //MAD
            t12.w = t52 * t51 + t8.x;
            //Instruction 21958
            //MUL
            t8.xyz = t3.yzx * t5.zxy;
            //Instruction 21959
            //MAD
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            //Instruction 21960
            //DP3
            t19 = dot(t3.xyz, t5.xyz);
            //Instruction 21961
            //MAX
            t19 = max(t19, -1.0);
            //Instruction 21962
            //MIN
            t19 = min(t19, 1.0);
            //Instruction 21963
            //ADD
            t8.w = t19 + t8.y;
            //Instruction 21964
            //DP3
            t51 = dot(t8.xzw, t8.xzw);
            //Instruction 21965
            //RSQ
            t51 = inversesqrt(t51);
            //Instruction 21966
            //MUL
            t5.xyz = vec3(t51) * t8.zxw;
            //Instruction 21967
            //ADD
            t51 = -abs(t19) + 1.0;
            //Instruction 21968
            //SQRT
            t51 = sqrt(t51);
            //Instruction 21969
            //MAD
            t52 = abs(t19) * -0.018729 + 0.074261;
            //Instruction 21970
            //MAD
            t52 = t52 * abs(t19) + -0.212114;
            //Instruction 21971
            //MAD
            t52 = t52 * abs(t19) + 1.570729;
            //Instruction 21972
            //MUL
            t6.x = t51 * t52;
            //Instruction 21973
            //MAD
            t6.x = t6.x * -2.000000 + 3.141593;
            //Instruction 21974
            //LT
            tb19 = t19<(-t19);
            //Instruction 21975
            //AND
            t19 = tb19 ? t6.x : float(0.0);
            //Instruction 21976
            //MAD
            t19 = t52 * t51 + t19;
            //Instruction 21977
            //MAD
            t32.x = (-t32.y) * t32.y + t32.x;
            //Instruction 21978
            //MAD
            t8.x = t5.w * 3.000000 + t7.z;
            //Instruction 21979
            //MUL
            t8.y = t8.x * 0.870000;
            //Instruction 21980
            //ADD
            t6.xz = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 21981
            //FRC
            t6.xz = fract(t6.xz);
            //Instruction 21982
            //MAD
            t6.xz = t6.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 21983
            //MUL
            t39.xy = abs(t6.xz) * abs(t6.xz);
            //Instruction 21984
            //MAD
            t6.xz = -abs(t6.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 21985
            //MAD
            t6.xz = t39.xy * t6.xz + vec2(-0.500000, -0.500000);
            //Instruction 21986
            //ADD
            t6.xz = t6.xz + t6.xz;
            //Instruction 21987
            //MUL
            t48 = t6.z * t6.z;
            //Instruction 21988
            //MAD
            t48 = t48 * t6.x + 1.0;
            //Instruction 21989
            //MUL
            t48 = t48 * 0.500000;
            t48 = clamp(t48, 0.0, 1.0);
            //Instruction 21990
            //LOG
            t48 = log2(t48);
            //Instruction 21991
            //MUL
            t48 = t48 * t7.y;
            //Instruction 21992
            //EXP
            t48 = exp2(t48);
            //Instruction 21993
            //MUL
            t32.x = t6.y * t32.x;
            //Instruction 21994
            //MAD
            t32.x = t19 * t6.w + t32.x;
            //Instruction 21995
            //MAD
            t32.x = t7.x * t48 + t32.x;
            //Instruction 21996
            //MUL
            t32.x = t32.x * in_TEXCOORD2.x;
            //Instruction 21997
            //SINCOS
            t6.x = sin(t32.x);
            t7.x = cos(t32.x);
            //Instruction 21998
            //ADD
            t32.x = (-t7.x) + 1.0;
            //Instruction 21999
            //MUL
            t8 = vec4(t5.y * t32.x, t5.y * t32.x, t5.y * t32.x, t5.z * t32.x);
            //Instruction 22000
            //MUL
            t6.xyz = t5.xyz * t6.xxx;
            //Instruction 22001
            //MAD
            t9.xy = t8.zy * t5.xz + t6.zx;
            //Instruction 22002
            //MAD
            t13.xy = t8.xw * t5.yz + t7.xx;
            //Instruction 22003
            //MAD
            t9.z = t8.w * t5.x + (-t6.y);
            //Instruction 22004
            //MAD
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            //Instruction 22005
            //MAD
            t14.z = t8.w * t5.x + t6.y;
            //Instruction 22006
            //MUL
            t48 = t5.x * t5.x;
            //Instruction 22007
            //MAD
            t9.w = t48 * t32.x + t7.x;
            //Instruction 22008
            //MOV
            t11.z = t12.x;
            //Instruction 22009
            //MOV
            t11.w = t10.x;
            //Instruction 22010
            //MOV
            t13.z = t9.y;
            //Instruction 22011
            //MOV
            t13.w = t14.y;
            //Instruction 22012
            //DP3
            t5.x = dot(t11.xzw, t13.xzw);
            //Instruction 22013
            //MOV
            t14.w = t13.y;
            //Instruction 22014
            //DP3
            t5.y = dot(t11.xwz, t14.xzw);
            //Instruction 22015
            //DP3
            t5.z = dot(t11.xzw, t9.xzw);
            //Instruction 22016
            //MOV
            t10.w = t11.y;
            //Instruction 22017
            //DP3
            t6.x = dot(t10.ywz, t13.xzw);
            //Instruction 22018
            //DP3
            t6.y = dot(t10.yzw, t14.xzw);
            //Instruction 22019
            //DP3
            t6.z = dot(t10.ywz, t9.xzw);
            //Instruction 22020
            //DP3
            t7.x = dot(t12.yzw, t13.xzw);
            //Instruction 22021
            //DP3
            t7.y = dot(t12.ywz, t14.xzw);
            //Instruction 22022
            //DP3
            t7.z = dot(t12.yzw, t9.xzw);
            //Instruction 22023
            //DP3
            t32.x = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 22024
            //DP3
            t32.y = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 22025
            //DP3
            t19 = dot(t7.xyz, in_NORMAL0.xyz);
            //Instruction 22026
            //DP3
            t5.x = dot(t5.xyz, t4.xyz);
            //Instruction 22027
            //DP3
            t5.y = dot(t6.xyz, t4.xyz);
            //Instruction 22028
            //DP3
            t5.z = dot(t7.xyz, t4.xyz);
            //Instruction 22029
            //DP3
            t51 = dot(t5.xyz, t5.xyz);
            //Instruction 22030
            //RSQ
            t51 = inversesqrt(t51);
            //Instruction 22031
            //MUL
            t5.xyz = vec3(t51) * t5.xyz;
            //Instruction 22032
            //MUL
            t4.xyz = vec3(t49) * t5.xyz;
            //Instruction 22033
        //ELSE
        } else {
            //Instruction 22034
            //MOV
            t32.xy = in_NORMAL0.xy;
            //Instruction 22035
            //MOV
            t19 = in_NORMAL0.z;
            //Instruction 22036
        //ENDIF
        }
        //Instruction 22037
    //ELSE
    } else {
        //Instruction 22038
        //MOV
        t32.xy = in_NORMAL0.xy;
        //Instruction 22039
        //MOV
        t19 = in_NORMAL0.z;
        //Instruction 22040
    //ENDIF
    }
    //Instruction 22041
    //ADD
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    //Instruction 22042
    //GE
    tb49 = t16_2.x>=3.000000;
    //Instruction 22043
    //IF
    if(tb49){
        //Instruction 22044
        //EQ
        tb49 = t16_2.x==5.000000;
        //Instruction 22045
        //IF
        if(tb49){
            //Instruction 22046
            //MUL
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 22047
            //MAD
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            //Instruction 22048
            //MAD
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            //Instruction 22049
            //DP3
            t49 = dot(t5.xyz, t5.xyz);
            //Instruction 22050
            //RSQ
            t49 = inversesqrt(t49);
            //Instruction 22051
            //MUL
            t5.xyz = vec3(t49) * t5.xyz;
            //Instruction 22052
            //MUL
            t6.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 22053
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 22054
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 22055
            //MUL
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            //Instruction 22056
            //ADD
            t49 = t0.x + _ST_WindBranch.x;
            //Instruction 22057
            //ADD
            t2.x = t49 + in_TEXCOORD0.w;
            //Instruction 22058
            //MAD
            t2.y = t49 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 22059
            //MUL
            t51 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 22060
            //MUL
            t2.z = t51 * 0.500000;
            //Instruction 22061
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 22062
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 22063
            //FRC
            t2 = fract(t2);
            //Instruction 22064
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 22065
            //MUL
            t7 = abs(t2) * abs(t2);
            //Instruction 22066
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 22067
            //MAD
            t2 = t7 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 22068
            //ADD
            t2 = t2 + t2;
            //Instruction 22069
            //MUL
            t7.w = t2.z * t2.y;
            //Instruction 22070
            //LT
            tb51 = t7.w<0.0;
            //Instruction 22071
            //MOV
            t7.y = (-t7.w);
            //Instruction 22072
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 22073
            //MOVC
            t7.xy = (bool(tb51)) ? t7.xy : t7.zw;
            //Instruction 22074
            //MAD
            t51 = (-t2.y) * t2.z + t7.x;
            //Instruction 22075
            //MAD
            t51 = t7.y * t51 + t7.w;
            //Instruction 22076
            //ADD
            t52 = (-t51) + t7.x;
            //Instruction 22077
            //MAD
            t51 = t7.y * t52 + t51;
            //Instruction 22078
            //MUL
            t51 = t51 * _ST_WindBranchTwitch.x;
            //Instruction 22079
            //ADD
            t52 = (-_ST_WindVector.w) + 1.0;
            //Instruction 22080
            //ADD
            t53 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 22081
            //MUL
            t53 = t2.x * t53;
            //Instruction 22082
            //MAD
            t51 = t51 * t52 + t53;
            //Instruction 22083
            //MAD
            t52 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 22084
            //MUL
            t51 = t51 * t52;
            //Instruction 22085
            //MUL
            t6.xyz = vec3(t51) * t6.xyz;
            //Instruction 22086
            //MAD
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 22087
            //MAD
            t7.x = t49 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 22088
            //MUL
            t49 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 22089
            //MAD
            t7.y = t49 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 22090
            //ADD
            t7.xy = t7.xy + vec2(0.500000, 0.500000);
            //Instruction 22091
            //FRC
            t7.xy = fract(t7.xy);
            //Instruction 22092
            //MAD
            t7.xy = t7.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 22093
            //MUL
            t39.xy = abs(t7.xy) * abs(t7.xy);
            //Instruction 22094
            //MAD
            t7.xy = -abs(t7.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 22095
            //MAD
            t7.xy = t39.xy * t7.xy + vec2(-0.500000, -0.500000);
            //Instruction 22096
            //ADD
            t7.xy = t7.xy + t7.xy;
            //Instruction 22097
            //MUL
            t7.xy = t7.xy * t7.xy;
            //Instruction 22098
            //MUL
            t49 = t7.x * t7.y;
            //Instruction 22099
            //MAD
            t49 = (-t49) * _ST_WindTurbulences.x + 1.0;
            //Instruction 22100
            //MUL
            t51 = t2.w * _ST_WindVector.w;
            //Instruction 22101
            //MAD
            t49 = t51 * _ST_WindBranchWhip.x + t49;
            //Instruction 22102
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            //Instruction 22103
            //MUL
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 22104
            //MUL
            t5.xyz = vec3(t49) * t5.xyz;
            //Instruction 22105
            //MAD
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
            //Instruction 22106
        //ELSE
        } else {
            //Instruction 22107
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 22108
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 22109
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 22110
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 22111
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 22112
            //ADD
            t6.x = t0.x + in_TEXCOORD0.w;
            //Instruction 22113
            //MAD
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 22114
            //MUL
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 22115
            //MUL
            t6.z = t0.x * 0.500000;
            //Instruction 22116
            //ADD
            t6.xyz = t6.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 22117
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 22118
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 22119
            //MUL
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            //Instruction 22120
            //MAD
            t6.xyz = -abs(t6.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 22121
            //MAD
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 22122
            //ADD
            t6.xyz = t6.xyz + t6.xyz;
            //Instruction 22123
            //MUL
            t2.w = t6.z * t6.y;
            //Instruction 22124
            //LT
            tb0 = t2.w<0.0;
            //Instruction 22125
            //MOV
            t2.y = (-t2.w);
            //Instruction 22126
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 22127
            //MOVC
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 22128
            //MAD
            t0.x = (-t6.y) * t6.z + t7.x;
            //Instruction 22129
            //MAD
            t0.x = t7.y * t0.x + t2.w;
            //Instruction 22130
            //ADD
            t49 = (-t0.x) + t7.x;
            //Instruction 22131
            //MAD
            t0.x = t7.y * t49 + t0.x;
            //Instruction 22132
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 22133
            //ADD
            t49 = (-_ST_WindVector.w) + 1.0;
            //Instruction 22134
            //ADD
            t51 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 22135
            //MUL
            t51 = t51 * t6.x;
            //Instruction 22136
            //MAD
            t0.x = t0.x * t49 + t51;
            //Instruction 22137
            //MUL
            t5.xyz = t0.xxx * t5.xyz;
            //Instruction 22138
            //MAD
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 22139
        //ENDIF
        }
        //Instruction 22140
    //ENDIF
    }
    //Instruction 22141
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 22142
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 22143
    //DIV
    t49 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 22144
    //MAD
    t49 = (-t49) * 0.250000 + t4.y;
    //Instruction 22145
    //MAX
    t49 = max(t49, 0.0);
    //Instruction 22146
    //MUL
    t49 = t49 * _ST_WindGlobal.z;
    //Instruction 22147
    //NE
    tb51 = t49!=0.0;
    //Instruction 22148
    //LOG
    t52 = log2(t49);
    //Instruction 22149
    //MUL
    t52 = t52 * _ST_WindGlobal.w;
    //Instruction 22150
    //EXP
    t52 = exp2(t52);
    //Instruction 22151
    //MOVC
    t49 = (tb51) ? t52 : t49;
    //Instruction 22152
    //ADD
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 22153
    //MAD
    t5.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 22154
    //ADD
    t5.xy = t5.xy + vec2(0.500000, 0.500000);
    //Instruction 22155
    //FRC
    t5.xy = fract(t5.xy);
    //Instruction 22156
    //MAD
    t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 22157
    //MUL
    t37.xy = abs(t5.xy) * abs(t5.xy);
    //Instruction 22158
    //MAD
    t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 22159
    //MAD
    t5.xy = t37.xy * t5.xy + vec2(-0.500000, -0.500000);
    //Instruction 22160
    //ADD
    t5.xy = t5.xy + t5.xy;
    //Instruction 22161
    //MAD
    t51 = t5.y * t5.y + t5.x;
    //Instruction 22162
    //DIV
    t52 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 22163
    //MAD
    t51 = _ST_WindGlobal.y * t51 + t52;
    //Instruction 22164
    //MUL
    t49 = t49 * t51;
    //Instruction 22165
    //MAD
    t5.xz = t3.xz * vec2(t49) + t4.xz;
    //Instruction 22166
    //MOV
    t5.y = t4.y;
    //Instruction 22167
    //DP3
    t49 = dot(t5.xyz, t5.xyz);
    //Instruction 22168
    //RSQ
    t49 = inversesqrt(t49);
    //Instruction 22169
    //MUL
    t3.xzw = vec3(t49) * t5.xyz;
    //Instruction 22170
    //MUL
    t3.xzw = t0.xxx * t3.xzw;
    //Instruction 22171
    //MOVC
    t3.xzw = (tb16.x) ? t3.xzw : t4.xyz;
    //Instruction 22172
    //MUL
    t4.xyz = t3.zzz * glstate_matrix_mvp[1].xyw;
    //Instruction 22173
    //MAD
    t4.xyz = glstate_matrix_mvp[0].xyw * t3.xxx + t4.xyz;
    //Instruction 22174
    //MAD
    t4.xyz = glstate_matrix_mvp[2].xyw * t3.www + t4.xyz;
    //Instruction 22175
    //MAD
    t4.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t4.xyz;
    //Instruction 22176
    //MUL
    t5.xz = t4.xz * vec2(0.500000, 0.500000);
    //Instruction 22177
    //MUL
    t0.x = t4.y * _ProjectionParams.x;
    //Instruction 22178
    //MUL
    t5.w = t0.x * 0.500000;
    //Instruction 22179
    //ADD
    t0.xy = t5.zz + t5.xw;
    //Instruction 22180
    //MUL
    t0.xy = t0.xy * _ScreenParams.xy;
    //Instruction 22181
    //MUL
    t4.xy = t0.xy * vec2(0.250000, 0.250000);
    //Instruction 22182
    //MUL
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    //Instruction 22183
    //MAD
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    //Instruction 22184
    //MAD
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    //Instruction 22185
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 22186
    //MUL
    t5.xyz = t3.zzz * _Object2World[1].xyz;
    //Instruction 22187
    //MAD
    t5.xyz = _Object2World[0].xyz * t3.xxx + t5.xyz;
    //Instruction 22188
    //MAD
    t5.xyz = _Object2World[2].xyz * t3.www + t5.xyz;
    //Instruction 22189
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t5.xyz;
    //Instruction 22190
    //MOV
    t5.x = _World2Object[0].x;
    //Instruction 22191
    //MOV
    t5.y = _World2Object[1].x;
    //Instruction 22192
    //MOV
    t5.z = _World2Object[2].x;
    //Instruction 22193
    //MOV
    t6.x = _World2Object[0].y;
    //Instruction 22194
    //MOV
    t6.y = _World2Object[1].y;
    //Instruction 22195
    //MOV
    t6.z = _World2Object[2].y;
    //Instruction 22196
    //MUL
    t0.xyw = t32.yyy * t6.xyz;
    //Instruction 22197
    //MAD
    t0.xyz = t5.xyz * t32.xxx + t0.xyw;
    //Instruction 22198
    //MOV
    t5.x = _World2Object[0].z;
    //Instruction 22199
    //MOV
    t5.y = _World2Object[1].z;
    //Instruction 22200
    //MOV
    t5.z = _World2Object[2].z;
    //Instruction 22201
    //MAD
    t0.xyz = t5.xyz * vec3(t19) + t0.xyz;
    //Instruction 22202
    //DP3
    t48 = dot(t0.xyz, t0.xyz);
    //Instruction 22203
    //RSQ
    t48 = inversesqrt(t48);
    //Instruction 22204
    //MUL
    t0.xyz = vec3(t48) * t0.xyz;
    //Instruction 22205
    //MUL
    t16_2 = t0.yzzx * t0.xyzz;
    //Instruction 22206
    //DP4
    t16_15.x = dot(unity_SHBr, t16_2);
    //Instruction 22207
    //DP4
    t16_15.y = dot(unity_SHBg, t16_2);
    //Instruction 22208
    //DP4
    t16_15.z = dot(unity_SHBb, t16_2);
    //Instruction 22209
    //MUL
    t16_63 = t0.y * t0.y;
    //Instruction 22210
    //MAD
    t16_63 = t0.x * t0.x + (-t16_63);
    //Instruction 22211
    //MAD
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(t16_63) + t16_15.xyz;
    //Instruction 22212
    //MUL
    t2 = t3.zzzz * _Object2World[1];
    //Instruction 22213
    //MAD
    t2 = _Object2World[0] * t3.xxxx + t2;
    //Instruction 22214
    //MAD
    t2 = _Object2World[2] * t3.wwww + t2;
    //Instruction 22215
    //MAD
    t2 = _Object2World[3] * in_POSITION0.wwww + t2;
    //Instruction 22216
    //MUL
    t3 = t2.yyyy * unity_World2Shadow[0][1];
    //Instruction 22217
    //MAD
    t3 = unity_World2Shadow[0][0] * t2.xxxx + t3;
    //Instruction 22218
    //MAD
    t3 = unity_World2Shadow[0][2] * t2.zzzz + t3;
    //Instruction 22219
    //MAD
    t2 = unity_World2Shadow[0][3] * t2.wwww + t3;
    //Instruction 22220
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 22221
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 22222
    //MOV
    vs_TEXCOORD6 = t2;
    //Instruction 22223
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 22224
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 22225
    //MOV
    vs_TEXCOORD4.xyz = t4.xyz;
    //Instruction 22226
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump float t16_6;
mediump vec3 t16_9;
mediump float t16_21;
void main()
{
    //Instruction 21847
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 21848
    //FRC
    t16_6 = fract(t16_0.y);
    //Instruction 21849
    //MOV
    t1.x = t16_0.x;
    //Instruction 21850
    //MAD
    t1.y = t16_6 * 0.062500 + unity_LODFade.y;
    //Instruction 21851
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 21852
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 21853
    //LT
    tb1 = t16_1<0.0;
    //Instruction 21854
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 21855
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 21856
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 21857
    //LT
    tb1 = t10_2<0.0;
    //Instruction 21858
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 21859
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 21860
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 21861
    //ADD
    t16_9.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 21862
    //MAD
    t16_9.xyz = vs_TEXCOORD3.zzz * t16_9.xyz + t10_0.xyz;
    //Instruction 21863
    //MAX
    t16_4.x = max(t16_9.z, t16_9.y);
    //Instruction 21864
    //MAX
    t16_4.x = max(t16_9.x, t16_4.x);
    //Instruction 21865
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 21866
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 21867
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_9.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 21868
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD2.xyz;
    //Instruction 21869
    //SAMPLE_C_LZ
    vec3 txVec59 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_21 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec59, 0.0);
    //Instruction 21870
    //ADD
    t16_4.x = (-_LightShadowData.x) + 1.0;
    //Instruction 21871
    //MAD
    t16_21 = t16_21 * t16_4.x + _LightShadowData.x;
    //Instruction 21872
    //MUL
    t16_4.xyz = vec3(t16_21) * _LightColor0.xyz;
    //Instruction 21873
    //MUL
    t16_4.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 21874
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 21875
    //MOV
    t16_0.w = 1.0;
    //Instruction 21876
    //DP4
    t16_5.x = dot(unity_SHAr, t16_0);
    //Instruction 21877
    //DP4
    t16_5.y = dot(unity_SHAg, t16_0);
    //Instruction 21878
    //DP4
    t16_5.z = dot(unity_SHAb, t16_0);
    //Instruction 21879
    //ADD
    t16_5.xyz = t16_5.xyz + vs_TEXCOORD5.xyz;
    //Instruction 21880
    //MUL
    t16_3.xyz = t16_3.xyz * t16_5.xyz;
    //Instruction 21881
    //DP3
    t16_21 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 21882
    //MAX
    t16_21 = max(t16_21, 0.0);
    //Instruction 21883
    //MAD
    t16_3.xyz = t16_4.xyz * vec3(t16_21) + t16_3.xyz;
    //Instruction 21884
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 21885
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 21886
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec4 tmpvar_8;
  lowp vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10.xy = tmpvar_3.xy;
  tmpvar_9.w = _Color.w;
  tmpvar_9.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].x;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].y;
  tmpvar_11 = clamp (((
    fract(((tmpvar_12 + tmpvar_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_10.z = tmpvar_11;
  highp vec4 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_1;
  tmpvar_15 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  FinalPosition_18 = tmpvar_1.xyz;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_18 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_19 > 1.0) && (tmpvar_19 < 5.0))) {
    highp float tmpvar_22;
    tmpvar_22 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_23;
    isBestWind_23 = (tmpvar_19 == 4.0);
    bool bLeaf2_24;
    bLeaf2_24 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_25;
    vPos_25 = FinalPosition_18;
    highp vec3 vDirection_26;
    vDirection_26 = tmpvar_2;
    highp float tmpvar_27;
    if (bLeaf2_24) {
      tmpvar_27 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_28;
    if (bLeaf2_24) {
      tmpvar_28 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_28 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_29;
    highp vec4 tmpvar_30;
    tmpvar_30.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_30.x = (tmpvar_27 + tmpvar_22);
    highp vec4 tmpvar_31;
    tmpvar_31 = abs(((
      fract((tmpvar_30 + 0.5))
     * 2.0) - 1.0));
    vPos_29 = (FinalPosition_18 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_28 * (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_26 = tmpvar_2;
    vPos_25 = vPos_29;
    if (isBestWind_23) {
      highp vec3 tmpvar_32;
      tmpvar_32 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_33;
      if (bLeaf2_24) {
        tmpvar_33 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_34;
      if (bLeaf2_24) {
        tmpvar_34 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_35;
      if (bLeaf2_24) {
        tmpvar_35 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_36;
      if (bLeaf2_24) {
        tmpvar_36 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_37;
      if (bLeaf2_24) {
        tmpvar_37 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_37 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_38;
      if (bLeaf2_24) {
        tmpvar_38 = bool(1);
      } else {
        tmpvar_38 = bool(1);
      };
      highp float fTwitch_39;
      highp vec3 vAxis_40;
      highp float fOsc_41;
      highp vec3 vOriginPos_42;
      highp vec3 tmpvar_43;
      tmpvar_43 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_44;
      tmpvar_44 = ((tmpvar_43.x + tmpvar_43.y) + tmpvar_43.z);
      highp vec4 tmpvar_45;
      tmpvar_45.x = (tmpvar_33 + tmpvar_44);
      tmpvar_45.y = ((tmpvar_33 * 0.75) - tmpvar_44);
      tmpvar_45.z = ((tmpvar_33 * 0.01) + tmpvar_44);
      tmpvar_45.w = (tmpvar_33 + tmpvar_44);
      highp vec4 tmpvar_46;
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      tmpvar_46 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      vOriginPos_42 = vPos_29;
      highp float tmpvar_48;
      tmpvar_48 = sqrt(dot (vPos_29, vPos_29));
      highp float fAngle_49;
      fAngle_49 = ((_glesMultiTexCoord2.x * tmpvar_35) * (tmpvar_46.x + (tmpvar_46.y * tmpvar_46.y)));
      highp vec2 vSinCos_50;
      vSinCos_50.x = sin(fAngle_49);
      vSinCos_50.y = cos(fAngle_49);
      highp float tmpvar_51;
      tmpvar_51 = (1.0 - vSinCos_50.y);
      highp mat3 tmpvar_52;
      tmpvar_52[0].x = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.x) + vSinCos_50.y);
      tmpvar_52[0].y = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.y) + (vSinCos_50.x * tmpvar_32.z));
      tmpvar_52[0].z = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.z) - (vSinCos_50.x * tmpvar_32.y));
      tmpvar_52[1].x = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.y) - (vSinCos_50.x * tmpvar_32.z));
      tmpvar_52[1].y = (((tmpvar_51 * tmpvar_32.y) * tmpvar_32.y) + vSinCos_50.y);
      tmpvar_52[1].z = (((tmpvar_51 * tmpvar_32.y) * tmpvar_32.z) + (vSinCos_50.x * tmpvar_32.x));
      tmpvar_52[2].x = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.z) + (vSinCos_50.x * tmpvar_32.y));
      tmpvar_52[2].y = (((tmpvar_51 * tmpvar_32.y) * tmpvar_32.z) - (vSinCos_50.x * tmpvar_32.x));
      tmpvar_52[2].z = (((tmpvar_51 * tmpvar_32.z) * tmpvar_32.z) + vSinCos_50.y);
      highp vec3 tmpvar_53;
      tmpvar_53 = ((tmpvar_32.yzx * vRotatedWindVector_17.zxy) - (tmpvar_32.zxy * vRotatedWindVector_17.yzx));
      vAxis_40.xz = tmpvar_53.xz;
      highp float tmpvar_54;
      tmpvar_54 = clamp (dot (vRotatedWindVector_17, tmpvar_32), -1.0, 1.0);
      vAxis_40.y = (tmpvar_53.y + tmpvar_54);
      highp vec3 tmpvar_55;
      tmpvar_55 = normalize(vAxis_40);
      vAxis_40 = tmpvar_55;
      highp float tmpvar_56;
      tmpvar_56 = (1.570796 - (sign(tmpvar_54) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_54))) * (1.570796 + (abs(tmpvar_54) * (-0.2146018 + 
          (abs(tmpvar_54) * (0.08656672 + (abs(tmpvar_54) * -0.03102955)))
        ))))
      )));
      fOsc_41 = (tmpvar_46.y - (tmpvar_46.x * tmpvar_46.x));
      fTwitch_39 = 0.0;
      if (tmpvar_38) {
        highp float fTime_57;
        fTime_57 = (tmpvar_37.z + tmpvar_44);
        highp vec4 tmpvar_58;
        tmpvar_58.zw = vec2(0.0, 0.0);
        tmpvar_58.x = fTime_57;
        tmpvar_58.y = (0.87 * fTime_57);
        highp vec4 tmpvar_59;
        highp vec4 tmpvar_60;
        tmpvar_60 = abs(((
          fract((tmpvar_58 + 0.5))
         * 2.0) - 1.0));
        tmpvar_59 = (((
          (tmpvar_60 * tmpvar_60)
         * 
          (3.0 - (2.0 * tmpvar_60))
        ) - 0.5) * 2.0);
        fTwitch_39 = (tmpvar_37.x * pow (clamp (
          ((((tmpvar_59.x * tmpvar_59.y) * tmpvar_59.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_37.y));
      };
      highp float fAngle_61;
      fAngle_61 = (_glesMultiTexCoord2.x * ((
        (tmpvar_56 * tmpvar_36)
       + 
        (fOsc_41 * tmpvar_34)
      ) + fTwitch_39));
      highp vec2 vSinCos_62;
      vSinCos_62.x = sin(fAngle_61);
      vSinCos_62.y = cos(fAngle_61);
      highp float tmpvar_63;
      tmpvar_63 = (1.0 - vSinCos_62.y);
      highp mat3 tmpvar_64;
      tmpvar_64[0].x = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.x) + vSinCos_62.y);
      tmpvar_64[0].y = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.y) + (vSinCos_62.x * tmpvar_55.z));
      tmpvar_64[0].z = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.z) - (vSinCos_62.x * tmpvar_55.y));
      tmpvar_64[1].x = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.y) - (vSinCos_62.x * tmpvar_55.z));
      tmpvar_64[1].y = (((tmpvar_63 * tmpvar_55.y) * tmpvar_55.y) + vSinCos_62.y);
      tmpvar_64[1].z = (((tmpvar_63 * tmpvar_55.y) * tmpvar_55.z) + (vSinCos_62.x * tmpvar_55.x));
      tmpvar_64[2].x = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.z) + (vSinCos_62.x * tmpvar_55.y));
      tmpvar_64[2].y = (((tmpvar_63 * tmpvar_55.y) * tmpvar_55.z) - (vSinCos_62.x * tmpvar_55.x));
      tmpvar_64[2].z = (((tmpvar_63 * tmpvar_55.z) * tmpvar_55.z) + vSinCos_62.y);
      highp mat3 tmpvar_65;
      tmpvar_65 = (tmpvar_52 * tmpvar_64);
      vOriginPos_42 = (normalize((tmpvar_65 * vPos_29)) * tmpvar_48);
      vDirection_26 = (tmpvar_65 * _glesNormal);
      vPos_25 = vOriginPos_42;
    };
    tmpvar_15 = vDirection_26;
    FinalPosition_18 = vPos_25;
  };
  FinalPosition_18 = (FinalPosition_18 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_66;
    vPos_66 = FinalPosition_18;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_67;
      vPos_67 = FinalPosition_18;
      highp float fTime_68;
      highp float fAdherenceScale_69;
      highp vec3 vWindVector_70;
      vWindVector_70 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_68 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_71;
      highp float fOscillation_72;
      fOscillation_72 = 1.0;
      highp float fAmount_73;
      highp float fTarget_74;
      highp vec4 tmpvar_75;
      tmpvar_75.x = (fTime_68 + _glesMultiTexCoord0.w);
      tmpvar_75.y = ((fTime_68 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_75.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_68 + _glesMultiTexCoord0.w));
      tmpvar_75.w = ((fTime_68 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_76;
      tmpvar_76 = abs(((
        fract((tmpvar_75 + 0.5))
       * 2.0) - 1.0));
      vOscillations_71 = (((
        (tmpvar_76 * tmpvar_76)
       * 
        (3.0 - (2.0 * tmpvar_76))
      ) - 0.5) * 2.0);
      highp float tmpvar_77;
      tmpvar_77 = (vOscillations_71.y * vOscillations_71.z);
      fTarget_74 = 1.0;
      fAmount_73 = tmpvar_77;
      if ((tmpvar_77 < 0.0)) {
        fTarget_74 = -1.0;
        fAmount_73 = -(tmpvar_77);
      };
      fOscillation_72 = (((
        mix (mix (tmpvar_77, fTarget_74, fAmount_73), fTarget_74, fAmount_73)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_71.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_72 = (fOscillation_72 * (1.0 + (vOscillations_71.w * _ST_WindBranchWhip.x)));
      vPos_67 = (FinalPosition_18 + ((vWindVector_70 * fOscillation_72) * _ST_WindBranch.y));
      highp vec4 tmpvar_78;
      tmpvar_78.zw = vec2(0.0, 0.0);
      tmpvar_78.x = ((fTime_68 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_78.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_79;
      highp vec4 tmpvar_80;
      tmpvar_80 = abs(((
        fract((tmpvar_78 + 0.5))
       * 2.0) - 1.0));
      tmpvar_79 = (((
        (tmpvar_80 * tmpvar_80)
       * 
        (3.0 - (2.0 * tmpvar_80))
      ) - 0.5) * 2.0);
      fAdherenceScale_69 = (1.0 - ((tmpvar_79.x * tmpvar_79.y) * (
        (tmpvar_79.x * tmpvar_79.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_69 = (fAdherenceScale_69 + ((vOscillations_71.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_67 = (vPos_67 + ((
        ((vRotatedBranchAnchor_16 - vPos_67) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_69) * _glesMultiTexCoord0.z));
      vPos_66 = vPos_67;
    } else {
      highp vec3 vPos_81;
      vPos_81 = vPos_66;
      highp float fTime_82;
      highp vec3 vWindVector_83;
      vWindVector_83 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_82 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_84;
      highp float fOscillation_85;
      fOscillation_85 = 1.0;
      highp float fAmount_86;
      highp float fTarget_87;
      highp vec4 tmpvar_88;
      tmpvar_88.w = 0.0;
      tmpvar_88.x = (fTime_82 + _glesMultiTexCoord0.w);
      tmpvar_88.y = ((fTime_82 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_88.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_82 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_89;
      tmpvar_89 = abs(((
        fract((tmpvar_88 + 0.5))
       * 2.0) - 1.0));
      vOscillations_84 = (((
        (tmpvar_89 * tmpvar_89)
       * 
        (3.0 - (2.0 * tmpvar_89))
      ) - 0.5) * 2.0);
      highp float tmpvar_90;
      tmpvar_90 = (vOscillations_84.y * vOscillations_84.z);
      fTarget_87 = 1.0;
      fAmount_86 = tmpvar_90;
      if ((tmpvar_90 < 0.0)) {
        fTarget_87 = -1.0;
        fAmount_86 = -(tmpvar_90);
      };
      fOscillation_85 = (((
        mix (mix (tmpvar_90, fTarget_87, fAmount_86), fTarget_87, fAmount_86)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_84.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_81 = (vPos_66 + ((vWindVector_83 * fOscillation_85) * _ST_WindBranch.y));
      vPos_66 = vPos_81;
    };
    FinalPosition_18 = vPos_66;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_91;
    vPos_91 = FinalPosition_18;
    highp float fMoveAmount_92;
    highp float fAdjust_93;
    highp float fLength_94;
    fLength_94 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_95;
    tmpvar_95 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_93 = tmpvar_95;
    if ((tmpvar_95 != 0.0)) {
      fAdjust_93 = pow (tmpvar_95, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_96;
    tmpvar_96.zw = vec2(0.0, 0.0);
    tmpvar_96.x = (tmpvar_12 + _ST_WindGlobal.x);
    tmpvar_96.y = (tmpvar_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_97;
    highp vec4 tmpvar_98;
    tmpvar_98 = abs(((
      fract((tmpvar_96 + 0.5))
     * 2.0) - 1.0));
    tmpvar_97 = (((
      (tmpvar_98 * tmpvar_98)
     * 
      (3.0 - (2.0 * tmpvar_98))
    ) - 0.5) * 2.0);
    fMoveAmount_92 = ((_ST_WindGlobal.y * (tmpvar_97.x + 
      (tmpvar_97.y * tmpvar_97.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_92 = (fMoveAmount_92 * fAdjust_93);
    vPos_91.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * fMoveAmount_92));
    vPos_91 = (normalize(vPos_91) * fLength_94);
    FinalPosition_18 = vPos_91;
  };
  tmpvar_14.xyz = FinalPosition_18;
  highp vec4 hPos_99;
  hPos_99 = (glstate_matrix_mvp * tmpvar_14);
  mediump vec3 screenPos_100;
  highp vec4 o_101;
  highp vec4 tmpvar_102;
  tmpvar_102 = (hPos_99 * 0.5);
  highp vec2 tmpvar_103;
  tmpvar_103.x = tmpvar_102.x;
  tmpvar_103.y = (tmpvar_102.y * _ProjectionParams.x);
  o_101.xy = (tmpvar_103 + tmpvar_102.w);
  o_101.zw = hPos_99.zw;
  highp vec3 tmpvar_104;
  tmpvar_104 = o_101.xyw;
  screenPos_100 = tmpvar_104;
  screenPos_100.xy = (screenPos_100.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_9;
  highp vec3 tmpvar_105;
  tmpvar_105 = (_Object2World * tmpvar_14).xyz;
  highp vec4 v_106;
  v_106.x = _World2Object[0].x;
  v_106.y = _World2Object[1].x;
  v_106.z = _World2Object[2].x;
  v_106.w = _World2Object[3].x;
  highp vec4 v_107;
  v_107.x = _World2Object[0].y;
  v_107.y = _World2Object[1].y;
  v_107.z = _World2Object[2].y;
  v_107.w = _World2Object[3].y;
  highp vec4 v_108;
  v_108.x = _World2Object[0].z;
  v_108.y = _World2Object[1].z;
  v_108.z = _World2Object[2].z;
  v_108.w = _World2Object[3].z;
  highp vec3 tmpvar_109;
  tmpvar_109 = normalize(((
    (v_106.xyz * tmpvar_15.x)
   + 
    (v_107.xyz * tmpvar_15.y)
  ) + (v_108.xyz * tmpvar_15.z)));
  worldNormal_4 = tmpvar_109;
  tmpvar_5 = worldNormal_4;
  lowp vec4 tmpvar_110;
  tmpvar_110.w = 1.0;
  tmpvar_110.xyz = worldNormal_4;
  mediump vec4 normal_111;
  normal_111 = tmpvar_110;
  mediump vec3 x2_112;
  mediump vec4 tmpvar_113;
  tmpvar_113 = (normal_111.xyzz * normal_111.yzzx);
  x2_112.x = dot (unity_SHBr, tmpvar_113);
  x2_112.y = dot (unity_SHBg, tmpvar_113);
  x2_112.z = dot (unity_SHBb, tmpvar_113);
  highp vec3 lightColor0_114;
  lightColor0_114 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_115;
  lightColor1_115 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_116;
  lightColor2_116 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_117;
  lightColor3_117 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_118;
  lightAttenSq_118 = unity_4LightAtten0;
  highp vec3 normal_119;
  normal_119 = worldNormal_4;
  highp vec3 col_120;
  highp vec4 ndotl_121;
  highp vec4 lengthSq_122;
  highp vec4 tmpvar_123;
  tmpvar_123 = (unity_4LightPosX0 - tmpvar_105.x);
  highp vec4 tmpvar_124;
  tmpvar_124 = (unity_4LightPosY0 - tmpvar_105.y);
  highp vec4 tmpvar_125;
  tmpvar_125 = (unity_4LightPosZ0 - tmpvar_105.z);
  lengthSq_122 = (tmpvar_123 * tmpvar_123);
  lengthSq_122 = (lengthSq_122 + (tmpvar_124 * tmpvar_124));
  lengthSq_122 = (lengthSq_122 + (tmpvar_125 * tmpvar_125));
  ndotl_121 = (tmpvar_123 * normal_119.x);
  ndotl_121 = (ndotl_121 + (tmpvar_124 * normal_119.y));
  ndotl_121 = (ndotl_121 + (tmpvar_125 * normal_119.z));
  highp vec4 tmpvar_126;
  tmpvar_126 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_121 * inversesqrt(lengthSq_122)));
  ndotl_121 = tmpvar_126;
  highp vec4 tmpvar_127;
  tmpvar_127 = (tmpvar_126 * (1.0/((1.0 + 
    (lengthSq_122 * lightAttenSq_118)
  ))));
  col_120 = (lightColor0_114 * tmpvar_127.x);
  col_120 = (col_120 + (lightColor1_115 * tmpvar_127.y));
  col_120 = (col_120 + (lightColor2_116 * tmpvar_127.z));
  col_120 = (col_120 + (lightColor3_117 * tmpvar_127.w));
  tmpvar_7 = ((x2_112 + (unity_SHC.xyz * 
    ((normal_111.x * normal_111.x) - (normal_111.y * normal_111.y))
  )) + col_120);
  tmpvar_8 = (unity_World2Shadow[0] * (_Object2World * tmpvar_14));
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_105;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_10;
  xlv_TEXCOORD4 = screenPos_100;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_13.x = tmpvar_14.x;
  projUV_13.y = ((fract(tmpvar_14.y) * 0.0625) + unity_LODFade.y);
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_16;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_17;
  x_17 = (tmpvar_10 - _Cutoff);
  if ((x_17 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_18;
  tmpvar_18 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_18.x, max (tmpvar_18.y, tmpvar_18.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_18 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp float shadow_19;
  shadow_19 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_19;
  mediump vec3 normalWorld_20;
  normalWorld_20 = tmpvar_5;
  mediump vec3 tmpvar_21;
  mediump vec3 tmpvar_22;
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = normalWorld_20;
  mediump vec3 x1_24;
  x1_24.x = dot (unity_SHAr, tmpvar_23);
  x1_24.y = dot (unity_SHAg, tmpvar_23);
  x1_24.z = dot (unity_SHAb, tmpvar_23);
  tmpvar_22 = (xlv_TEXCOORD5 + x1_24);
  tmpvar_21 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_21;
  lowp vec4 c_25;
  lowp vec4 c_26;
  lowp float diff_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_27 = tmpvar_28;
  c_26.xyz = ((tmpvar_9 * tmpvar_21) * diff_27);
  c_26.w = tmpvar_10;
  c_25.w = c_26.w;
  c_25.xyz = (c_26.xyz + (tmpvar_9 * tmpvar_22));
  c_4.xyz = c_25.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec4 t3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
mediump vec3 t16_15;
highp vec2 t16;
bvec2 tb16;
highp float t19;
bool tb19;
highp vec3 t24;
highp vec2 t32;
highp int ti32;
highp vec2 t37;
highp vec2 t39;
highp float t48;
bool tb48;
highp float t49;
bool tb49;
highp float t51;
bool tb51;
highp float t52;
highp float t53;
mediump float t16_63;
void main()
{
    //Instruction 22537
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 22538
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 22539
    //ADD
    t16.x = t0.x + _Object2World[3].z;
    //Instruction 22540
    //ADD
    t32.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 22541
    //ADD
    t16.y = t32.x + in_NORMAL0.x;
    //Instruction 22542
    //FRC
    t16.xy = fract(t16.xy);
    //Instruction 22543
    //MAD
    t16.x = t16.y * 0.500000 + t16.x;
    //Instruction 22544
    //ADD
    t16.x = t16.x + -0.300000;
    //Instruction 22545
    //MUL
    t1.z = t16.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 22546
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 22547
    //LT
    tb16.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), t16_2.xxxx).xy;
    //Instruction 22548
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 22549
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 22550
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 22551
    //DP3
    t48 = dot(t3.xyz, t3.xyz);
    //Instruction 22552
    //RSQ
    t48 = inversesqrt(t48);
    //Instruction 22553
    //MUL
    t3.xyz = vec3(t48) * t3.xyz;
    //Instruction 22554
    //AND
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, tb16.xxx);
    //Instruction 22555
    //ADD
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 22556
    //LT
    tb48 = t16_2.x<5.000000;
    //Instruction 22557
    //AND
    ti32 = int(uint(tb48) & uint(tb16.y));
    //Instruction 22558
    //IF
    if((uint(ti32))!=uint(0u)){
        //Instruction 22559
        //ADD
        t32.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 22560
        //EQ
        tb48 = t16_2.x==4.000000;
        //Instruction 22561
        //LT
        tb49 = 0.0<in_TEXCOORD2.w;
        //Instruction 22562
        //MOVC
        t5.xy = (bool(tb49)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 22563
        //ADD
        t32.x = t32.x + t5.x;
        //Instruction 22564
        //ADD
        t32.x = t32.x + 0.500000;
        //Instruction 22565
        //FRC
        t32.x = fract(t32.x);
        //Instruction 22566
        //MAD
        t32.x = t32.x * 2.000000 + -1.0;
        //Instruction 22567
        //MUL
        t51 = abs(t32.x) * abs(t32.x);
        //Instruction 22568
        //MAD
        t32.x = -abs(t32.x) * 2.000000 + 3.000000;
        //Instruction 22569
        //MAD
        t32.x = t51 * t32.x + -0.500000;
        //Instruction 22570
        //DP2
        t32.x = dot(t32.xx, t5.yy);
        //Instruction 22571
        //MUL
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 22572
        //FRC
        t5.xyz = fract(t5.xyz);
        //Instruction 22573
        //MAD
        t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 22574
        //MUL
        t5.xyz = t32.xxx * t5.xyz;
        //Instruction 22575
        //MAD
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        //Instruction 22576
        //IF
        if(tb48){
            //Instruction 22577
            //MUL
            t5 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 22578
            //FRC
            t5 = fract(t5);
            //Instruction 22579
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 22580
            //MOVC
            t6 = (bool(tb49)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 22581
            //MOVC
            t7.xyz = (bool(tb49)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 22582
            //MUL
            t32.x = t5.w * 3.000000;
            //Instruction 22583
            //MAD
            t8.y = t5.w * 3.000000 + t6.x;
            //Instruction 22584
            //MAD
            t8.x = t6.x * 0.750000 + (-t32.x);
            //Instruction 22585
            //ADD
            t32.xy = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 22586
            //FRC
            t32.xy = fract(t32.xy);
            //Instruction 22587
            //MAD
            t32.xy = t32.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 22588
            //MUL
            t8.xy = abs(t32.xy) * abs(t32.xy);
            //Instruction 22589
            //MAD
            t32.xy = -abs(t32.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 22590
            //MAD
            t32.xy = t8.xy * t32.xy + vec2(-0.500000, -0.500000);
            //Instruction 22591
            //ADD
            t32.xy = t32.xy + t32.xy;
            //Instruction 22592
            //DP3
            t49 = dot(t4.xyz, t4.xyz);
            //Instruction 22593
            //SQRT
            t49 = sqrt(t49);
            //Instruction 22594
            //MAD
            t51 = t32.x * t32.x + t32.y;
            //Instruction 22595
            //MUL
            t52 = t6.z * in_TEXCOORD2.x;
            //Instruction 22596
            //MUL
            t51 = t51 * t52;
            //Instruction 22597
            //SINCOS
            t6.x = sin(t51);
            t8.x = cos(t51);
            //Instruction 22598
            //ADD
            t51 = (-t8.x) + 1.0;
            //Instruction 22599
            //MUL
            t9 = t5.xxxy * vec4(t51);
            //Instruction 22600
            //MUL
            t24.xyz = t5.zxy * t6.xxx;
            //Instruction 22601
            //MAD
            t10.xy = t9.zy * t5.zy + t24.zx;
            //Instruction 22602
            //MAD
            t11.xy = t9.xw * t5.xy + t8.xx;
            //Instruction 22603
            //MAD
            t10.z = t9.w * t5.z + (-t24.y);
            //Instruction 22604
            //MAD
            t12.xy = t9.yz * t5.yz + (-t24.xz);
            //Instruction 22605
            //MAD
            t12.z = t9.w * t5.z + t24.y;
            //Instruction 22606
            //MUL
            t52 = t5.z * t5.z;
            //Instruction 22607
            //MAD
            t12.w = t52 * t51 + t8.x;
            //Instruction 22608
            //MUL
            t8.xyz = t3.yzx * t5.zxy;
            //Instruction 22609
            //MAD
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            //Instruction 22610
            //DP3
            t19 = dot(t3.xyz, t5.xyz);
            //Instruction 22611
            //MAX
            t19 = max(t19, -1.0);
            //Instruction 22612
            //MIN
            t19 = min(t19, 1.0);
            //Instruction 22613
            //ADD
            t8.w = t19 + t8.y;
            //Instruction 22614
            //DP3
            t51 = dot(t8.xzw, t8.xzw);
            //Instruction 22615
            //RSQ
            t51 = inversesqrt(t51);
            //Instruction 22616
            //MUL
            t5.xyz = vec3(t51) * t8.zxw;
            //Instruction 22617
            //ADD
            t51 = -abs(t19) + 1.0;
            //Instruction 22618
            //SQRT
            t51 = sqrt(t51);
            //Instruction 22619
            //MAD
            t52 = abs(t19) * -0.018729 + 0.074261;
            //Instruction 22620
            //MAD
            t52 = t52 * abs(t19) + -0.212114;
            //Instruction 22621
            //MAD
            t52 = t52 * abs(t19) + 1.570729;
            //Instruction 22622
            //MUL
            t6.x = t51 * t52;
            //Instruction 22623
            //MAD
            t6.x = t6.x * -2.000000 + 3.141593;
            //Instruction 22624
            //LT
            tb19 = t19<(-t19);
            //Instruction 22625
            //AND
            t19 = tb19 ? t6.x : float(0.0);
            //Instruction 22626
            //MAD
            t19 = t52 * t51 + t19;
            //Instruction 22627
            //MAD
            t32.x = (-t32.y) * t32.y + t32.x;
            //Instruction 22628
            //MAD
            t8.x = t5.w * 3.000000 + t7.z;
            //Instruction 22629
            //MUL
            t8.y = t8.x * 0.870000;
            //Instruction 22630
            //ADD
            t6.xz = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 22631
            //FRC
            t6.xz = fract(t6.xz);
            //Instruction 22632
            //MAD
            t6.xz = t6.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 22633
            //MUL
            t39.xy = abs(t6.xz) * abs(t6.xz);
            //Instruction 22634
            //MAD
            t6.xz = -abs(t6.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 22635
            //MAD
            t6.xz = t39.xy * t6.xz + vec2(-0.500000, -0.500000);
            //Instruction 22636
            //ADD
            t6.xz = t6.xz + t6.xz;
            //Instruction 22637
            //MUL
            t48 = t6.z * t6.z;
            //Instruction 22638
            //MAD
            t48 = t48 * t6.x + 1.0;
            //Instruction 22639
            //MUL
            t48 = t48 * 0.500000;
            t48 = clamp(t48, 0.0, 1.0);
            //Instruction 22640
            //LOG
            t48 = log2(t48);
            //Instruction 22641
            //MUL
            t48 = t48 * t7.y;
            //Instruction 22642
            //EXP
            t48 = exp2(t48);
            //Instruction 22643
            //MUL
            t32.x = t6.y * t32.x;
            //Instruction 22644
            //MAD
            t32.x = t19 * t6.w + t32.x;
            //Instruction 22645
            //MAD
            t32.x = t7.x * t48 + t32.x;
            //Instruction 22646
            //MUL
            t32.x = t32.x * in_TEXCOORD2.x;
            //Instruction 22647
            //SINCOS
            t6.x = sin(t32.x);
            t7.x = cos(t32.x);
            //Instruction 22648
            //ADD
            t32.x = (-t7.x) + 1.0;
            //Instruction 22649
            //MUL
            t8 = vec4(t5.y * t32.x, t5.y * t32.x, t5.y * t32.x, t5.z * t32.x);
            //Instruction 22650
            //MUL
            t6.xyz = t5.xyz * t6.xxx;
            //Instruction 22651
            //MAD
            t9.xy = t8.zy * t5.xz + t6.zx;
            //Instruction 22652
            //MAD
            t13.xy = t8.xw * t5.yz + t7.xx;
            //Instruction 22653
            //MAD
            t9.z = t8.w * t5.x + (-t6.y);
            //Instruction 22654
            //MAD
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            //Instruction 22655
            //MAD
            t14.z = t8.w * t5.x + t6.y;
            //Instruction 22656
            //MUL
            t48 = t5.x * t5.x;
            //Instruction 22657
            //MAD
            t9.w = t48 * t32.x + t7.x;
            //Instruction 22658
            //MOV
            t11.z = t12.x;
            //Instruction 22659
            //MOV
            t11.w = t10.x;
            //Instruction 22660
            //MOV
            t13.z = t9.y;
            //Instruction 22661
            //MOV
            t13.w = t14.y;
            //Instruction 22662
            //DP3
            t5.x = dot(t11.xzw, t13.xzw);
            //Instruction 22663
            //MOV
            t14.w = t13.y;
            //Instruction 22664
            //DP3
            t5.y = dot(t11.xwz, t14.xzw);
            //Instruction 22665
            //DP3
            t5.z = dot(t11.xzw, t9.xzw);
            //Instruction 22666
            //MOV
            t10.w = t11.y;
            //Instruction 22667
            //DP3
            t6.x = dot(t10.ywz, t13.xzw);
            //Instruction 22668
            //DP3
            t6.y = dot(t10.yzw, t14.xzw);
            //Instruction 22669
            //DP3
            t6.z = dot(t10.ywz, t9.xzw);
            //Instruction 22670
            //DP3
            t7.x = dot(t12.yzw, t13.xzw);
            //Instruction 22671
            //DP3
            t7.y = dot(t12.ywz, t14.xzw);
            //Instruction 22672
            //DP3
            t7.z = dot(t12.yzw, t9.xzw);
            //Instruction 22673
            //DP3
            t32.x = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 22674
            //DP3
            t32.y = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 22675
            //DP3
            t19 = dot(t7.xyz, in_NORMAL0.xyz);
            //Instruction 22676
            //DP3
            t5.x = dot(t5.xyz, t4.xyz);
            //Instruction 22677
            //DP3
            t5.y = dot(t6.xyz, t4.xyz);
            //Instruction 22678
            //DP3
            t5.z = dot(t7.xyz, t4.xyz);
            //Instruction 22679
            //DP3
            t51 = dot(t5.xyz, t5.xyz);
            //Instruction 22680
            //RSQ
            t51 = inversesqrt(t51);
            //Instruction 22681
            //MUL
            t5.xyz = vec3(t51) * t5.xyz;
            //Instruction 22682
            //MUL
            t4.xyz = vec3(t49) * t5.xyz;
            //Instruction 22683
        //ELSE
        } else {
            //Instruction 22684
            //MOV
            t32.xy = in_NORMAL0.xy;
            //Instruction 22685
            //MOV
            t19 = in_NORMAL0.z;
            //Instruction 22686
        //ENDIF
        }
        //Instruction 22687
    //ELSE
    } else {
        //Instruction 22688
        //MOV
        t32.xy = in_NORMAL0.xy;
        //Instruction 22689
        //MOV
        t19 = in_NORMAL0.z;
        //Instruction 22690
    //ENDIF
    }
    //Instruction 22691
    //ADD
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    //Instruction 22692
    //GE
    tb49 = t16_2.x>=3.000000;
    //Instruction 22693
    //IF
    if(tb49){
        //Instruction 22694
        //EQ
        tb49 = t16_2.x==5.000000;
        //Instruction 22695
        //IF
        if(tb49){
            //Instruction 22696
            //MUL
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 22697
            //MAD
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            //Instruction 22698
            //MAD
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            //Instruction 22699
            //DP3
            t49 = dot(t5.xyz, t5.xyz);
            //Instruction 22700
            //RSQ
            t49 = inversesqrt(t49);
            //Instruction 22701
            //MUL
            t5.xyz = vec3(t49) * t5.xyz;
            //Instruction 22702
            //MUL
            t6.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 22703
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 22704
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 22705
            //MUL
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            //Instruction 22706
            //ADD
            t49 = t0.x + _ST_WindBranch.x;
            //Instruction 22707
            //ADD
            t2.x = t49 + in_TEXCOORD0.w;
            //Instruction 22708
            //MAD
            t2.y = t49 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 22709
            //MUL
            t51 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 22710
            //MUL
            t2.z = t51 * 0.500000;
            //Instruction 22711
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 22712
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 22713
            //FRC
            t2 = fract(t2);
            //Instruction 22714
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 22715
            //MUL
            t7 = abs(t2) * abs(t2);
            //Instruction 22716
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 22717
            //MAD
            t2 = t7 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 22718
            //ADD
            t2 = t2 + t2;
            //Instruction 22719
            //MUL
            t7.w = t2.z * t2.y;
            //Instruction 22720
            //LT
            tb51 = t7.w<0.0;
            //Instruction 22721
            //MOV
            t7.y = (-t7.w);
            //Instruction 22722
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 22723
            //MOVC
            t7.xy = (bool(tb51)) ? t7.xy : t7.zw;
            //Instruction 22724
            //MAD
            t51 = (-t2.y) * t2.z + t7.x;
            //Instruction 22725
            //MAD
            t51 = t7.y * t51 + t7.w;
            //Instruction 22726
            //ADD
            t52 = (-t51) + t7.x;
            //Instruction 22727
            //MAD
            t51 = t7.y * t52 + t51;
            //Instruction 22728
            //MUL
            t51 = t51 * _ST_WindBranchTwitch.x;
            //Instruction 22729
            //ADD
            t52 = (-_ST_WindVector.w) + 1.0;
            //Instruction 22730
            //ADD
            t53 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 22731
            //MUL
            t53 = t2.x * t53;
            //Instruction 22732
            //MAD
            t51 = t51 * t52 + t53;
            //Instruction 22733
            //MAD
            t52 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 22734
            //MUL
            t51 = t51 * t52;
            //Instruction 22735
            //MUL
            t6.xyz = vec3(t51) * t6.xyz;
            //Instruction 22736
            //MAD
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 22737
            //MAD
            t7.x = t49 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 22738
            //MUL
            t49 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 22739
            //MAD
            t7.y = t49 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 22740
            //ADD
            t7.xy = t7.xy + vec2(0.500000, 0.500000);
            //Instruction 22741
            //FRC
            t7.xy = fract(t7.xy);
            //Instruction 22742
            //MAD
            t7.xy = t7.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 22743
            //MUL
            t39.xy = abs(t7.xy) * abs(t7.xy);
            //Instruction 22744
            //MAD
            t7.xy = -abs(t7.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 22745
            //MAD
            t7.xy = t39.xy * t7.xy + vec2(-0.500000, -0.500000);
            //Instruction 22746
            //ADD
            t7.xy = t7.xy + t7.xy;
            //Instruction 22747
            //MUL
            t7.xy = t7.xy * t7.xy;
            //Instruction 22748
            //MUL
            t49 = t7.x * t7.y;
            //Instruction 22749
            //MAD
            t49 = (-t49) * _ST_WindTurbulences.x + 1.0;
            //Instruction 22750
            //MUL
            t51 = t2.w * _ST_WindVector.w;
            //Instruction 22751
            //MAD
            t49 = t51 * _ST_WindBranchWhip.x + t49;
            //Instruction 22752
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            //Instruction 22753
            //MUL
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 22754
            //MUL
            t5.xyz = vec3(t49) * t5.xyz;
            //Instruction 22755
            //MAD
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
            //Instruction 22756
        //ELSE
        } else {
            //Instruction 22757
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 22758
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 22759
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 22760
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 22761
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 22762
            //ADD
            t6.x = t0.x + in_TEXCOORD0.w;
            //Instruction 22763
            //MAD
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 22764
            //MUL
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 22765
            //MUL
            t6.z = t0.x * 0.500000;
            //Instruction 22766
            //ADD
            t6.xyz = t6.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 22767
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 22768
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 22769
            //MUL
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            //Instruction 22770
            //MAD
            t6.xyz = -abs(t6.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 22771
            //MAD
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 22772
            //ADD
            t6.xyz = t6.xyz + t6.xyz;
            //Instruction 22773
            //MUL
            t2.w = t6.z * t6.y;
            //Instruction 22774
            //LT
            tb0 = t2.w<0.0;
            //Instruction 22775
            //MOV
            t2.y = (-t2.w);
            //Instruction 22776
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 22777
            //MOVC
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 22778
            //MAD
            t0.x = (-t6.y) * t6.z + t7.x;
            //Instruction 22779
            //MAD
            t0.x = t7.y * t0.x + t2.w;
            //Instruction 22780
            //ADD
            t49 = (-t0.x) + t7.x;
            //Instruction 22781
            //MAD
            t0.x = t7.y * t49 + t0.x;
            //Instruction 22782
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 22783
            //ADD
            t49 = (-_ST_WindVector.w) + 1.0;
            //Instruction 22784
            //ADD
            t51 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 22785
            //MUL
            t51 = t51 * t6.x;
            //Instruction 22786
            //MAD
            t0.x = t0.x * t49 + t51;
            //Instruction 22787
            //MUL
            t5.xyz = t0.xxx * t5.xyz;
            //Instruction 22788
            //MAD
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 22789
        //ENDIF
        }
        //Instruction 22790
    //ENDIF
    }
    //Instruction 22791
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 22792
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 22793
    //DIV
    t49 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 22794
    //MAD
    t49 = (-t49) * 0.250000 + t4.y;
    //Instruction 22795
    //MAX
    t49 = max(t49, 0.0);
    //Instruction 22796
    //MUL
    t49 = t49 * _ST_WindGlobal.z;
    //Instruction 22797
    //NE
    tb51 = t49!=0.0;
    //Instruction 22798
    //LOG
    t52 = log2(t49);
    //Instruction 22799
    //MUL
    t52 = t52 * _ST_WindGlobal.w;
    //Instruction 22800
    //EXP
    t52 = exp2(t52);
    //Instruction 22801
    //MOVC
    t49 = (tb51) ? t52 : t49;
    //Instruction 22802
    //ADD
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 22803
    //MAD
    t5.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 22804
    //ADD
    t5.xy = t5.xy + vec2(0.500000, 0.500000);
    //Instruction 22805
    //FRC
    t5.xy = fract(t5.xy);
    //Instruction 22806
    //MAD
    t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 22807
    //MUL
    t37.xy = abs(t5.xy) * abs(t5.xy);
    //Instruction 22808
    //MAD
    t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 22809
    //MAD
    t5.xy = t37.xy * t5.xy + vec2(-0.500000, -0.500000);
    //Instruction 22810
    //ADD
    t5.xy = t5.xy + t5.xy;
    //Instruction 22811
    //MAD
    t51 = t5.y * t5.y + t5.x;
    //Instruction 22812
    //DIV
    t52 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 22813
    //MAD
    t51 = _ST_WindGlobal.y * t51 + t52;
    //Instruction 22814
    //MUL
    t49 = t49 * t51;
    //Instruction 22815
    //MAD
    t5.xz = t3.xz * vec2(t49) + t4.xz;
    //Instruction 22816
    //MOV
    t5.y = t4.y;
    //Instruction 22817
    //DP3
    t49 = dot(t5.xyz, t5.xyz);
    //Instruction 22818
    //RSQ
    t49 = inversesqrt(t49);
    //Instruction 22819
    //MUL
    t3.xzw = vec3(t49) * t5.xyz;
    //Instruction 22820
    //MUL
    t3.xzw = t0.xxx * t3.xzw;
    //Instruction 22821
    //MOVC
    t3.xzw = (tb16.x) ? t3.xzw : t4.xyz;
    //Instruction 22822
    //MUL
    t4.xyz = t3.zzz * glstate_matrix_mvp[1].xyw;
    //Instruction 22823
    //MAD
    t4.xyz = glstate_matrix_mvp[0].xyw * t3.xxx + t4.xyz;
    //Instruction 22824
    //MAD
    t4.xyz = glstate_matrix_mvp[2].xyw * t3.www + t4.xyz;
    //Instruction 22825
    //MAD
    t4.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t4.xyz;
    //Instruction 22826
    //MUL
    t5.xz = t4.xz * vec2(0.500000, 0.500000);
    //Instruction 22827
    //MUL
    t0.x = t4.y * _ProjectionParams.x;
    //Instruction 22828
    //MUL
    t5.w = t0.x * 0.500000;
    //Instruction 22829
    //ADD
    t0.xy = t5.zz + t5.xw;
    //Instruction 22830
    //MUL
    t0.xy = t0.xy * _ScreenParams.xy;
    //Instruction 22831
    //MUL
    t4.xy = t0.xy * vec2(0.250000, 0.250000);
    //Instruction 22832
    //MUL
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    //Instruction 22833
    //MAD
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    //Instruction 22834
    //MAD
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    //Instruction 22835
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 22836
    //MUL
    t5.xyz = t3.zzz * _Object2World[1].xyz;
    //Instruction 22837
    //MAD
    t5.xyz = _Object2World[0].xyz * t3.xxx + t5.xyz;
    //Instruction 22838
    //MAD
    t5.xyz = _Object2World[2].xyz * t3.www + t5.xyz;
    //Instruction 22839
    //MAD
    t5.xyz = _Object2World[3].xyz * in_POSITION0.www + t5.xyz;
    //Instruction 22840
    //MOV
    t6.x = _World2Object[0].x;
    //Instruction 22841
    //MOV
    t6.y = _World2Object[1].x;
    //Instruction 22842
    //MOV
    t6.z = _World2Object[2].x;
    //Instruction 22843
    //MOV
    t7.x = _World2Object[0].y;
    //Instruction 22844
    //MOV
    t7.y = _World2Object[1].y;
    //Instruction 22845
    //MOV
    t7.z = _World2Object[2].y;
    //Instruction 22846
    //MUL
    t0.xyw = t32.yyy * t7.xyz;
    //Instruction 22847
    //MAD
    t0.xyz = t6.xyz * t32.xxx + t0.xyw;
    //Instruction 22848
    //MOV
    t6.x = _World2Object[0].z;
    //Instruction 22849
    //MOV
    t6.y = _World2Object[1].z;
    //Instruction 22850
    //MOV
    t6.z = _World2Object[2].z;
    //Instruction 22851
    //MAD
    t0.xyz = t6.xyz * vec3(t19) + t0.xyz;
    //Instruction 22852
    //DP3
    t48 = dot(t0.xyz, t0.xyz);
    //Instruction 22853
    //RSQ
    t48 = inversesqrt(t48);
    //Instruction 22854
    //MUL
    t0.xyz = vec3(t48) * t0.xyz;
    //Instruction 22855
    //MUL
    t16_2 = t0.yzzx * t0.xyzz;
    //Instruction 22856
    //DP4
    t16_15.x = dot(unity_SHBr, t16_2);
    //Instruction 22857
    //DP4
    t16_15.y = dot(unity_SHBg, t16_2);
    //Instruction 22858
    //DP4
    t16_15.z = dot(unity_SHBb, t16_2);
    //Instruction 22859
    //MUL
    t16_63 = t0.y * t0.y;
    //Instruction 22860
    //MAD
    t16_63 = t0.x * t0.x + (-t16_63);
    //Instruction 22861
    //MAD
    t16_15.xyz = unity_SHC.xyz * vec3(t16_63) + t16_15.xyz;
    //Instruction 22862
    //ADD
    t2 = (-t5.xxxx) + unity_4LightPosX0;
    //Instruction 22863
    //ADD
    t6 = (-t5.yyyy) + unity_4LightPosY0;
    //Instruction 22864
    //ADD
    t7 = (-t5.zzzz) + unity_4LightPosZ0;
    //Instruction 22865
    //MUL
    t8 = t6 * t6;
    //Instruction 22866
    //MAD
    t8 = t2 * t2 + t8;
    //Instruction 22867
    //MAD
    t8 = t7 * t7 + t8;
    //Instruction 22868
    //MUL
    t6 = t0.yyyy * t6;
    //Instruction 22869
    //MAD
    t2 = t2 * t0.xxxx + t6;
    //Instruction 22870
    //MAD
    t2 = t7 * t0.zzzz + t2;
    //Instruction 22871
    //RSQ
    t6 = inversesqrt(t8);
    //Instruction 22872
    //MUL
    t2 = t2 * t6;
    //Instruction 22873
    //MAX
    t2 = max(t2, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 22874
    //MAD
    t6 = t8 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 22875
    //DIV
    t6 = vec4(1.0, 1.0, 1.0, 1.0) / t6;
    //Instruction 22876
    //MUL
    t2 = t2 * t6;
    //Instruction 22877
    //MUL
    t6.xyz = t2.yyy * unity_LightColor[1].xyz;
    //Instruction 22878
    //MAD
    t6.xyz = unity_LightColor[0].xyz * t2.xxx + t6.xyz;
    //Instruction 22879
    //MAD
    t6.xyz = unity_LightColor[2].xyz * t2.zzz + t6.xyz;
    //Instruction 22880
    //MAD
    t6.xyz = unity_LightColor[3].xyz * t2.www + t6.xyz;
    //Instruction 22881
    //ADD
    t6.xyz = t6.xyz + t16_15.xyz;
    //Instruction 22882
    //MUL
    t2 = t3.zzzz * _Object2World[1];
    //Instruction 22883
    //MAD
    t2 = _Object2World[0] * t3.xxxx + t2;
    //Instruction 22884
    //MAD
    t2 = _Object2World[2] * t3.wwww + t2;
    //Instruction 22885
    //MAD
    t2 = _Object2World[3] * in_POSITION0.wwww + t2;
    //Instruction 22886
    //MUL
    t3 = t2.yyyy * unity_World2Shadow[0][1];
    //Instruction 22887
    //MAD
    t3 = unity_World2Shadow[0][0] * t2.xxxx + t3;
    //Instruction 22888
    //MAD
    t3 = unity_World2Shadow[0][2] * t2.zzzz + t3;
    //Instruction 22889
    //MAD
    t2 = unity_World2Shadow[0][3] * t2.wwww + t3;
    //Instruction 22890
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 22891
    //MOV
    vs_TEXCOORD1.xyz = t5.xyz;
    //Instruction 22892
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 22893
    //MOV
    vs_TEXCOORD6 = t2;
    //Instruction 22894
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 22895
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 22896
    //MOV
    vs_TEXCOORD4.xyz = t4.xyz;
    //Instruction 22897
    //MOV
    vs_TEXCOORD5.xyz = t6.xyz;
    //Instruction 22898
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump float t16_6;
mediump vec3 t16_9;
mediump float t16_21;
void main()
{
    //Instruction 22497
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 22498
    //FRC
    t16_6 = fract(t16_0.y);
    //Instruction 22499
    //MOV
    t1.x = t16_0.x;
    //Instruction 22500
    //MAD
    t1.y = t16_6 * 0.062500 + unity_LODFade.y;
    //Instruction 22501
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 22502
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 22503
    //LT
    tb1 = t16_1<0.0;
    //Instruction 22504
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 22505
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 22506
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 22507
    //LT
    tb1 = t10_2<0.0;
    //Instruction 22508
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 22509
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 22510
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 22511
    //ADD
    t16_9.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 22512
    //MAD
    t16_9.xyz = vs_TEXCOORD3.zzz * t16_9.xyz + t10_0.xyz;
    //Instruction 22513
    //MAX
    t16_4.x = max(t16_9.z, t16_9.y);
    //Instruction 22514
    //MAX
    t16_4.x = max(t16_9.x, t16_4.x);
    //Instruction 22515
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 22516
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 22517
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_9.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 22518
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD2.xyz;
    //Instruction 22519
    //SAMPLE_C_LZ
    vec3 txVec48 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_21 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec48, 0.0);
    //Instruction 22520
    //ADD
    t16_4.x = (-_LightShadowData.x) + 1.0;
    //Instruction 22521
    //MAD
    t16_21 = t16_21 * t16_4.x + _LightShadowData.x;
    //Instruction 22522
    //MUL
    t16_4.xyz = vec3(t16_21) * _LightColor0.xyz;
    //Instruction 22523
    //MUL
    t16_4.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 22524
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 22525
    //MOV
    t16_0.w = 1.0;
    //Instruction 22526
    //DP4
    t16_5.x = dot(unity_SHAr, t16_0);
    //Instruction 22527
    //DP4
    t16_5.y = dot(unity_SHAg, t16_0);
    //Instruction 22528
    //DP4
    t16_5.z = dot(unity_SHAb, t16_0);
    //Instruction 22529
    //ADD
    t16_5.xyz = t16_5.xyz + vs_TEXCOORD5.xyz;
    //Instruction 22530
    //MUL
    t16_3.xyz = t16_3.xyz * t16_5.xyz;
    //Instruction 22531
    //DP3
    t16_21 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 22532
    //MAX
    t16_21 = max(t16_21, 0.0);
    //Instruction 22533
    //MAD
    t16_3.xyz = t16_4.xyz * vec3(t16_21) + t16_3.xyz;
    //Instruction 22534
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 22535
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 22536
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_4;
  lowp vec3 worldTangent_5;
  lowp vec3 worldNormal_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  FinalPosition_17 = tmpvar_1.xyz;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_17 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_18 > 1.0) && (tmpvar_18 < 5.0))) {
    highp float tmpvar_21;
    tmpvar_21 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_22;
    isBestWind_22 = (tmpvar_18 == 4.0);
    bool bLeaf2_23;
    bLeaf2_23 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_24;
    vPos_24 = FinalPosition_17;
    highp vec3 vDirection_25;
    vDirection_25 = tmpvar_2;
    highp float tmpvar_26;
    if (bLeaf2_23) {
      tmpvar_26 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_26 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_27;
    if (bLeaf2_23) {
      tmpvar_27 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_28;
    highp vec4 tmpvar_29;
    tmpvar_29.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_29.x = (tmpvar_26 + tmpvar_21);
    highp vec4 tmpvar_30;
    tmpvar_30 = abs(((
      fract((tmpvar_29 + 0.5))
     * 2.0) - 1.0));
    vPos_28 = (FinalPosition_17 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_27 * (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_25 = tmpvar_2;
    vPos_24 = vPos_28;
    if (isBestWind_22) {
      highp vec3 tmpvar_31;
      tmpvar_31 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_32;
      if (bLeaf2_23) {
        tmpvar_32 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_33;
      if (bLeaf2_23) {
        tmpvar_33 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_34;
      if (bLeaf2_23) {
        tmpvar_34 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_35;
      if (bLeaf2_23) {
        tmpvar_35 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_36;
      if (bLeaf2_23) {
        tmpvar_36 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_36 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_37;
      if (bLeaf2_23) {
        tmpvar_37 = bool(1);
      } else {
        tmpvar_37 = bool(1);
      };
      highp float fTwitch_38;
      highp vec3 vAxis_39;
      highp float fOsc_40;
      highp vec3 vOriginPos_41;
      highp vec3 tmpvar_42;
      tmpvar_42 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_43;
      tmpvar_43 = ((tmpvar_42.x + tmpvar_42.y) + tmpvar_42.z);
      highp vec4 tmpvar_44;
      tmpvar_44.x = (tmpvar_32 + tmpvar_43);
      tmpvar_44.y = ((tmpvar_32 * 0.75) - tmpvar_43);
      tmpvar_44.z = ((tmpvar_32 * 0.01) + tmpvar_43);
      tmpvar_44.w = (tmpvar_32 + tmpvar_43);
      highp vec4 tmpvar_45;
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      tmpvar_45 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      vOriginPos_41 = vPos_28;
      highp float tmpvar_47;
      tmpvar_47 = sqrt(dot (vPos_28, vPos_28));
      highp float fAngle_48;
      fAngle_48 = ((_glesMultiTexCoord2.x * tmpvar_34) * (tmpvar_45.x + (tmpvar_45.y * tmpvar_45.y)));
      highp vec2 vSinCos_49;
      vSinCos_49.x = sin(fAngle_48);
      vSinCos_49.y = cos(fAngle_48);
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - vSinCos_49.y);
      highp mat3 tmpvar_51;
      tmpvar_51[0].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.x) + vSinCos_49.y);
      tmpvar_51[0].y = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.y) + (vSinCos_49.x * tmpvar_31.z));
      tmpvar_51[0].z = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.z) - (vSinCos_49.x * tmpvar_31.y));
      tmpvar_51[1].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.y) - (vSinCos_49.x * tmpvar_31.z));
      tmpvar_51[1].y = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.y) + vSinCos_49.y);
      tmpvar_51[1].z = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.z) + (vSinCos_49.x * tmpvar_31.x));
      tmpvar_51[2].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.z) + (vSinCos_49.x * tmpvar_31.y));
      tmpvar_51[2].y = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.z) - (vSinCos_49.x * tmpvar_31.x));
      tmpvar_51[2].z = (((tmpvar_50 * tmpvar_31.z) * tmpvar_31.z) + vSinCos_49.y);
      highp vec3 tmpvar_52;
      tmpvar_52 = ((tmpvar_31.yzx * vRotatedWindVector_16.zxy) - (tmpvar_31.zxy * vRotatedWindVector_16.yzx));
      vAxis_39.xz = tmpvar_52.xz;
      highp float tmpvar_53;
      tmpvar_53 = clamp (dot (vRotatedWindVector_16, tmpvar_31), -1.0, 1.0);
      vAxis_39.y = (tmpvar_52.y + tmpvar_53);
      highp vec3 tmpvar_54;
      tmpvar_54 = normalize(vAxis_39);
      vAxis_39 = tmpvar_54;
      highp float tmpvar_55;
      tmpvar_55 = (1.570796 - (sign(tmpvar_53) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_53))) * (1.570796 + (abs(tmpvar_53) * (-0.2146018 + 
          (abs(tmpvar_53) * (0.08656672 + (abs(tmpvar_53) * -0.03102955)))
        ))))
      )));
      fOsc_40 = (tmpvar_45.y - (tmpvar_45.x * tmpvar_45.x));
      fTwitch_38 = 0.0;
      if (tmpvar_37) {
        highp float fTime_56;
        fTime_56 = (tmpvar_36.z + tmpvar_43);
        highp vec4 tmpvar_57;
        tmpvar_57.zw = vec2(0.0, 0.0);
        tmpvar_57.x = fTime_56;
        tmpvar_57.y = (0.87 * fTime_56);
        highp vec4 tmpvar_58;
        highp vec4 tmpvar_59;
        tmpvar_59 = abs(((
          fract((tmpvar_57 + 0.5))
         * 2.0) - 1.0));
        tmpvar_58 = (((
          (tmpvar_59 * tmpvar_59)
         * 
          (3.0 - (2.0 * tmpvar_59))
        ) - 0.5) * 2.0);
        fTwitch_38 = (tmpvar_36.x * pow (clamp (
          ((((tmpvar_58.x * tmpvar_58.y) * tmpvar_58.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_36.y));
      };
      highp float fAngle_60;
      fAngle_60 = (_glesMultiTexCoord2.x * ((
        (tmpvar_55 * tmpvar_35)
       + 
        (fOsc_40 * tmpvar_33)
      ) + fTwitch_38));
      highp vec2 vSinCos_61;
      vSinCos_61.x = sin(fAngle_60);
      vSinCos_61.y = cos(fAngle_60);
      highp float tmpvar_62;
      tmpvar_62 = (1.0 - vSinCos_61.y);
      highp mat3 tmpvar_63;
      tmpvar_63[0].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.x) + vSinCos_61.y);
      tmpvar_63[0].y = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.y) + (vSinCos_61.x * tmpvar_54.z));
      tmpvar_63[0].z = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.z) - (vSinCos_61.x * tmpvar_54.y));
      tmpvar_63[1].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.y) - (vSinCos_61.x * tmpvar_54.z));
      tmpvar_63[1].y = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.y) + vSinCos_61.y);
      tmpvar_63[1].z = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.z) + (vSinCos_61.x * tmpvar_54.x));
      tmpvar_63[2].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.z) + (vSinCos_61.x * tmpvar_54.y));
      tmpvar_63[2].y = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.z) - (vSinCos_61.x * tmpvar_54.x));
      tmpvar_63[2].z = (((tmpvar_62 * tmpvar_54.z) * tmpvar_54.z) + vSinCos_61.y);
      highp mat3 tmpvar_64;
      tmpvar_64 = (tmpvar_51 * tmpvar_63);
      vOriginPos_41 = (normalize((tmpvar_64 * vPos_28)) * tmpvar_47);
      vDirection_25 = (tmpvar_64 * _glesNormal);
      vPos_24 = vOriginPos_41;
    };
    tmpvar_14 = vDirection_25;
    FinalPosition_17 = vPos_24;
  };
  FinalPosition_17 = (FinalPosition_17 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_65;
    vPos_65 = FinalPosition_17;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_66;
      vPos_66 = FinalPosition_17;
      highp float fTime_67;
      highp float fAdherenceScale_68;
      highp vec3 vWindVector_69;
      vWindVector_69 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_67 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_70;
      highp float fOscillation_71;
      fOscillation_71 = 1.0;
      highp float fAmount_72;
      highp float fTarget_73;
      highp vec4 tmpvar_74;
      tmpvar_74.x = (fTime_67 + _glesMultiTexCoord0.w);
      tmpvar_74.y = ((fTime_67 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_74.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_67 + _glesMultiTexCoord0.w));
      tmpvar_74.w = ((fTime_67 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_75;
      tmpvar_75 = abs(((
        fract((tmpvar_74 + 0.5))
       * 2.0) - 1.0));
      vOscillations_70 = (((
        (tmpvar_75 * tmpvar_75)
       * 
        (3.0 - (2.0 * tmpvar_75))
      ) - 0.5) * 2.0);
      highp float tmpvar_76;
      tmpvar_76 = (vOscillations_70.y * vOscillations_70.z);
      fTarget_73 = 1.0;
      fAmount_72 = tmpvar_76;
      if ((tmpvar_76 < 0.0)) {
        fTarget_73 = -1.0;
        fAmount_72 = -(tmpvar_76);
      };
      fOscillation_71 = (((
        mix (mix (tmpvar_76, fTarget_73, fAmount_72), fTarget_73, fAmount_72)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_70.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_71 = (fOscillation_71 * (1.0 + (vOscillations_70.w * _ST_WindBranchWhip.x)));
      vPos_66 = (FinalPosition_17 + ((vWindVector_69 * fOscillation_71) * _ST_WindBranch.y));
      highp vec4 tmpvar_77;
      tmpvar_77.zw = vec2(0.0, 0.0);
      tmpvar_77.x = ((fTime_67 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_77.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_78;
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      tmpvar_78 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      fAdherenceScale_68 = (1.0 - ((tmpvar_78.x * tmpvar_78.y) * (
        (tmpvar_78.x * tmpvar_78.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_68 = (fAdherenceScale_68 + ((vOscillations_70.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_66 = (vPos_66 + ((
        ((vRotatedBranchAnchor_15 - vPos_66) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_68) * _glesMultiTexCoord0.z));
      vPos_65 = vPos_66;
    } else {
      highp vec3 vPos_80;
      vPos_80 = vPos_65;
      highp float fTime_81;
      highp vec3 vWindVector_82;
      vWindVector_82 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_81 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_83;
      highp float fOscillation_84;
      fOscillation_84 = 1.0;
      highp float fAmount_85;
      highp float fTarget_86;
      highp vec4 tmpvar_87;
      tmpvar_87.w = 0.0;
      tmpvar_87.x = (fTime_81 + _glesMultiTexCoord0.w);
      tmpvar_87.y = ((fTime_81 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_87.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_81 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_88;
      tmpvar_88 = abs(((
        fract((tmpvar_87 + 0.5))
       * 2.0) - 1.0));
      vOscillations_83 = (((
        (tmpvar_88 * tmpvar_88)
       * 
        (3.0 - (2.0 * tmpvar_88))
      ) - 0.5) * 2.0);
      highp float tmpvar_89;
      tmpvar_89 = (vOscillations_83.y * vOscillations_83.z);
      fTarget_86 = 1.0;
      fAmount_85 = tmpvar_89;
      if ((tmpvar_89 < 0.0)) {
        fTarget_86 = -1.0;
        fAmount_85 = -(tmpvar_89);
      };
      fOscillation_84 = (((
        mix (mix (tmpvar_89, fTarget_86, fAmount_85), fTarget_86, fAmount_85)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_83.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_80 = (vPos_65 + ((vWindVector_82 * fOscillation_84) * _ST_WindBranch.y));
      vPos_65 = vPos_80;
    };
    FinalPosition_17 = vPos_65;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_90;
    vPos_90 = FinalPosition_17;
    highp float fMoveAmount_91;
    highp float fAdjust_92;
    highp float fLength_93;
    fLength_93 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_94;
    tmpvar_94 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_92 = tmpvar_94;
    if ((tmpvar_94 != 0.0)) {
      fAdjust_92 = pow (tmpvar_94, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_95;
    tmpvar_95.zw = vec2(0.0, 0.0);
    tmpvar_95.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_95.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_96;
    highp vec4 tmpvar_97;
    tmpvar_97 = abs(((
      fract((tmpvar_95 + 0.5))
     * 2.0) - 1.0));
    tmpvar_96 = (((
      (tmpvar_97 * tmpvar_97)
     * 
      (3.0 - (2.0 * tmpvar_97))
    ) - 0.5) * 2.0);
    fMoveAmount_91 = ((_ST_WindGlobal.y * (tmpvar_96.x + 
      (tmpvar_96.y * tmpvar_96.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_91 = (fMoveAmount_91 * fAdjust_92);
    vPos_90.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_91));
    vPos_90 = (normalize(vPos_90) * fLength_93);
    FinalPosition_17 = vPos_90;
  };
  tmpvar_13.xyz = FinalPosition_17;
  highp vec4 hPos_98;
  hPos_98 = (glstate_matrix_mvp * tmpvar_13);
  mediump vec3 screenPos_99;
  highp vec4 o_100;
  highp vec4 tmpvar_101;
  tmpvar_101 = (hPos_98 * 0.5);
  highp vec2 tmpvar_102;
  tmpvar_102.x = tmpvar_101.x;
  tmpvar_102.y = (tmpvar_101.y * _ProjectionParams.x);
  o_100.xy = (tmpvar_102 + tmpvar_101.w);
  o_100.zw = hPos_98.zw;
  highp vec3 tmpvar_103;
  tmpvar_103 = o_100.xyw;
  screenPos_99 = tmpvar_103;
  screenPos_99.xy = (screenPos_99.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7 = tmpvar_8;
  highp vec3 tmpvar_104;
  tmpvar_104 = (_Object2World * tmpvar_13).xyz;
  highp vec4 v_105;
  v_105.x = _World2Object[0].x;
  v_105.y = _World2Object[1].x;
  v_105.z = _World2Object[2].x;
  v_105.w = _World2Object[3].x;
  highp vec4 v_106;
  v_106.x = _World2Object[0].y;
  v_106.y = _World2Object[1].y;
  v_106.z = _World2Object[2].y;
  v_106.w = _World2Object[3].y;
  highp vec4 v_107;
  v_107.x = _World2Object[0].z;
  v_107.y = _World2Object[1].z;
  v_107.z = _World2Object[2].z;
  v_107.w = _World2Object[3].z;
  highp vec3 tmpvar_108;
  tmpvar_108 = normalize(((
    (v_105.xyz * tmpvar_14.x)
   + 
    (v_106.xyz * tmpvar_14.y)
  ) + (v_107.xyz * tmpvar_14.z)));
  worldNormal_6 = tmpvar_108;
  highp mat3 tmpvar_109;
  tmpvar_109[0] = _Object2World[0].xyz;
  tmpvar_109[1] = _Object2World[1].xyz;
  tmpvar_109[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_110;
  tmpvar_110 = normalize((tmpvar_109 * _glesTANGENT.xyz));
  worldTangent_5 = tmpvar_110;
  lowp vec3 tmpvar_111;
  tmpvar_111 = ((worldNormal_6.yzx * worldTangent_5.zxy) - (worldNormal_6.zxy * worldTangent_5.yzx));
  highp vec3 tmpvar_112;
  tmpvar_112 = (tmpvar_111 * _glesTANGENT.w);
  worldBinormal_4 = tmpvar_112;
  highp vec4 tmpvar_113;
  tmpvar_113.x = worldTangent_5.x;
  tmpvar_113.y = worldBinormal_4.x;
  tmpvar_113.z = worldNormal_6.x;
  tmpvar_113.w = tmpvar_104.x;
  highp vec4 tmpvar_114;
  tmpvar_114.x = worldTangent_5.y;
  tmpvar_114.y = worldBinormal_4.y;
  tmpvar_114.z = worldNormal_6.y;
  tmpvar_114.w = tmpvar_104.y;
  highp vec4 tmpvar_115;
  tmpvar_115.x = worldTangent_5.z;
  tmpvar_115.y = worldBinormal_4.z;
  tmpvar_115.z = worldNormal_6.z;
  tmpvar_115.w = tmpvar_104.z;
  lowp vec4 tmpvar_116;
  tmpvar_116.w = 1.0;
  tmpvar_116.xyz = worldNormal_6;
  mediump vec4 normal_117;
  normal_117 = tmpvar_116;
  mediump vec3 x2_118;
  mediump vec4 tmpvar_119;
  tmpvar_119 = (normal_117.xyzz * normal_117.yzzx);
  x2_118.x = dot (unity_SHBr, tmpvar_119);
  x2_118.y = dot (unity_SHBg, tmpvar_119);
  x2_118.z = dot (unity_SHBb, tmpvar_119);
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_113;
  xlv_TEXCOORD1 = tmpvar_114;
  xlv_TEXCOORD2 = tmpvar_115;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = screenPos_99;
  xlv_TEXCOORD6 = (x2_118 + (unity_SHC.xyz * (
    (normal_117.x * normal_117.x)
   - 
    (normal_117.y * normal_117.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_16;
  x_16 = (tmpvar_9 - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_17.x, max (tmpvar_17.y, tmpvar_17.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_17 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_18;
  tmpvar_18 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD0.xyz, tmpvar_18);
  worldN_3.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD1.xyz, tmpvar_18);
  worldN_3.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (xlv_TEXCOORD2.xyz, tmpvar_18);
  worldN_3.z = tmpvar_21;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_22;
  normalWorld_22 = worldN_3;
  mediump vec3 tmpvar_23;
  mediump vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = normalWorld_22;
  mediump vec3 x1_25;
  x1_25.x = dot (unity_SHAr, tmpvar_24);
  x1_25.y = dot (unity_SHAg, tmpvar_24);
  x1_25.z = dot (unity_SHAb, tmpvar_24);
  tmpvar_23 = (xlv_TEXCOORD6 + x1_25);
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_28 = tmpvar_29;
  c_27.xyz = ((tmpvar_8 * tmpvar_1) * diff_28);
  c_27.w = tmpvar_9;
  c_26.w = c_27.w;
  c_26.xyz = (c_27.xyz + (tmpvar_8 * tmpvar_23));
  c_4.xyz = c_26.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec4 t3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
lowp vec3 t10_15;
mediump vec3 t16_16;
highp vec2 t17;
bvec2 tb17;
highp float t20;
bool tb20;
highp vec3 t25;
highp vec2 t34;
highp int ti34;
highp vec2 t39;
highp vec2 t41;
highp float t51;
bool tb51;
highp float t52;
bool tb52;
highp float t54;
bool tb54;
highp float t55;
highp float t56;
mediump float t16_67;
void main()
{
    //Instruction 22494
    //MUL
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 22495
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 22496
    //ADD
    t17.x = t0.x + _Object2World[3].z;
    //Instruction 22497
    //ADD
    t34.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 22498
    //ADD
    t17.y = t34.x + in_NORMAL0.x;
    //Instruction 22499
    //FRC
    t17.xy = fract(t17.xy);
    //Instruction 22500
    //MAD
    t17.x = t17.y * 0.500000 + t17.x;
    //Instruction 22501
    //ADD
    t17.x = t17.x + -0.300000;
    //Instruction 22502
    //MUL
    t1.z = t17.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 22503
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 22504
    //LT
    tb17.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), t16_2.xxxx).xy;
    //Instruction 22505
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 22506
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 22507
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 22508
    //DP3
    t51 = dot(t3.xyz, t3.xyz);
    //Instruction 22509
    //RSQ
    t51 = inversesqrt(t51);
    //Instruction 22510
    //MUL
    t3.xyz = vec3(t51) * t3.xyz;
    //Instruction 22511
    //AND
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, tb17.xxx);
    //Instruction 22512
    //ADD
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 22513
    //LT
    tb51 = t16_2.x<5.000000;
    //Instruction 22514
    //AND
    ti34 = int(uint(tb51) & uint(tb17.y));
    //Instruction 22515
    //IF
    if((uint(ti34))!=uint(0u)){
        //Instruction 22516
        //ADD
        t34.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 22517
        //EQ
        tb51 = t16_2.x==4.000000;
        //Instruction 22518
        //LT
        tb52 = 0.0<in_TEXCOORD2.w;
        //Instruction 22519
        //MOVC
        t5.xy = (bool(tb52)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 22520
        //ADD
        t34.x = t34.x + t5.x;
        //Instruction 22521
        //ADD
        t34.x = t34.x + 0.500000;
        //Instruction 22522
        //FRC
        t34.x = fract(t34.x);
        //Instruction 22523
        //MAD
        t34.x = t34.x * 2.000000 + -1.0;
        //Instruction 22524
        //MUL
        t54 = abs(t34.x) * abs(t34.x);
        //Instruction 22525
        //MAD
        t34.x = -abs(t34.x) * 2.000000 + 3.000000;
        //Instruction 22526
        //MAD
        t34.x = t54 * t34.x + -0.500000;
        //Instruction 22527
        //DP2
        t34.x = dot(t34.xx, t5.yy);
        //Instruction 22528
        //MUL
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 22529
        //FRC
        t5.xyz = fract(t5.xyz);
        //Instruction 22530
        //MAD
        t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 22531
        //MUL
        t5.xyz = t34.xxx * t5.xyz;
        //Instruction 22532
        //MAD
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        //Instruction 22533
        //IF
        if(tb51){
            //Instruction 22534
            //MUL
            t5 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 22535
            //FRC
            t5 = fract(t5);
            //Instruction 22536
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 22537
            //MOVC
            t6 = (bool(tb52)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 22538
            //MOVC
            t7.xyz = (bool(tb52)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 22539
            //MUL
            t34.x = t5.w * 3.000000;
            //Instruction 22540
            //MAD
            t8.y = t5.w * 3.000000 + t6.x;
            //Instruction 22541
            //MAD
            t8.x = t6.x * 0.750000 + (-t34.x);
            //Instruction 22542
            //ADD
            t34.xy = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 22543
            //FRC
            t34.xy = fract(t34.xy);
            //Instruction 22544
            //MAD
            t34.xy = t34.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 22545
            //MUL
            t8.xy = abs(t34.xy) * abs(t34.xy);
            //Instruction 22546
            //MAD
            t34.xy = -abs(t34.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 22547
            //MAD
            t34.xy = t8.xy * t34.xy + vec2(-0.500000, -0.500000);
            //Instruction 22548
            //ADD
            t34.xy = t34.xy + t34.xy;
            //Instruction 22549
            //DP3
            t52 = dot(t4.xyz, t4.xyz);
            //Instruction 22550
            //SQRT
            t52 = sqrt(t52);
            //Instruction 22551
            //MAD
            t54 = t34.x * t34.x + t34.y;
            //Instruction 22552
            //MUL
            t55 = t6.z * in_TEXCOORD2.x;
            //Instruction 22553
            //MUL
            t54 = t54 * t55;
            //Instruction 22554
            //SINCOS
            t6.x = sin(t54);
            t8.x = cos(t54);
            //Instruction 22555
            //ADD
            t54 = (-t8.x) + 1.0;
            //Instruction 22556
            //MUL
            t9 = t5.xxxy * vec4(t54);
            //Instruction 22557
            //MUL
            t25.xyz = t5.zxy * t6.xxx;
            //Instruction 22558
            //MAD
            t10.xy = t9.zy * t5.zy + t25.zx;
            //Instruction 22559
            //MAD
            t11.xy = t9.xw * t5.xy + t8.xx;
            //Instruction 22560
            //MAD
            t10.z = t9.w * t5.z + (-t25.y);
            //Instruction 22561
            //MAD
            t12.xy = t9.yz * t5.yz + (-t25.xz);
            //Instruction 22562
            //MAD
            t12.z = t9.w * t5.z + t25.y;
            //Instruction 22563
            //MUL
            t55 = t5.z * t5.z;
            //Instruction 22564
            //MAD
            t12.w = t55 * t54 + t8.x;
            //Instruction 22565
            //MUL
            t8.xyz = t3.yzx * t5.zxy;
            //Instruction 22566
            //MAD
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            //Instruction 22567
            //DP3
            t20 = dot(t3.xyz, t5.xyz);
            //Instruction 22568
            //MAX
            t20 = max(t20, -1.0);
            //Instruction 22569
            //MIN
            t20 = min(t20, 1.0);
            //Instruction 22570
            //ADD
            t8.w = t20 + t8.y;
            //Instruction 22571
            //DP3
            t54 = dot(t8.xzw, t8.xzw);
            //Instruction 22572
            //RSQ
            t54 = inversesqrt(t54);
            //Instruction 22573
            //MUL
            t5.xyz = vec3(t54) * t8.zxw;
            //Instruction 22574
            //ADD
            t54 = -abs(t20) + 1.0;
            //Instruction 22575
            //SQRT
            t54 = sqrt(t54);
            //Instruction 22576
            //MAD
            t55 = abs(t20) * -0.018729 + 0.074261;
            //Instruction 22577
            //MAD
            t55 = t55 * abs(t20) + -0.212114;
            //Instruction 22578
            //MAD
            t55 = t55 * abs(t20) + 1.570729;
            //Instruction 22579
            //MUL
            t6.x = t54 * t55;
            //Instruction 22580
            //MAD
            t6.x = t6.x * -2.000000 + 3.141593;
            //Instruction 22581
            //LT
            tb20 = t20<(-t20);
            //Instruction 22582
            //AND
            t20 = tb20 ? t6.x : float(0.0);
            //Instruction 22583
            //MAD
            t20 = t55 * t54 + t20;
            //Instruction 22584
            //MAD
            t34.x = (-t34.y) * t34.y + t34.x;
            //Instruction 22585
            //MAD
            t8.x = t5.w * 3.000000 + t7.z;
            //Instruction 22586
            //MUL
            t8.y = t8.x * 0.870000;
            //Instruction 22587
            //ADD
            t6.xz = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 22588
            //FRC
            t6.xz = fract(t6.xz);
            //Instruction 22589
            //MAD
            t6.xz = t6.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 22590
            //MUL
            t41.xy = abs(t6.xz) * abs(t6.xz);
            //Instruction 22591
            //MAD
            t6.xz = -abs(t6.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 22592
            //MAD
            t6.xz = t41.xy * t6.xz + vec2(-0.500000, -0.500000);
            //Instruction 22593
            //ADD
            t6.xz = t6.xz + t6.xz;
            //Instruction 22594
            //MUL
            t51 = t6.z * t6.z;
            //Instruction 22595
            //MAD
            t51 = t51 * t6.x + 1.0;
            //Instruction 22596
            //MUL
            t51 = t51 * 0.500000;
            t51 = clamp(t51, 0.0, 1.0);
            //Instruction 22597
            //LOG
            t51 = log2(t51);
            //Instruction 22598
            //MUL
            t51 = t51 * t7.y;
            //Instruction 22599
            //EXP
            t51 = exp2(t51);
            //Instruction 22600
            //MUL
            t34.x = t6.y * t34.x;
            //Instruction 22601
            //MAD
            t34.x = t20 * t6.w + t34.x;
            //Instruction 22602
            //MAD
            t34.x = t7.x * t51 + t34.x;
            //Instruction 22603
            //MUL
            t34.x = t34.x * in_TEXCOORD2.x;
            //Instruction 22604
            //SINCOS
            t6.x = sin(t34.x);
            t7.x = cos(t34.x);
            //Instruction 22605
            //ADD
            t34.x = (-t7.x) + 1.0;
            //Instruction 22606
            //MUL
            t8 = vec4(t5.y * t34.x, t5.y * t34.x, t5.y * t34.x, t5.z * t34.x);
            //Instruction 22607
            //MUL
            t6.xyz = t5.xyz * t6.xxx;
            //Instruction 22608
            //MAD
            t9.xy = t8.zy * t5.xz + t6.zx;
            //Instruction 22609
            //MAD
            t13.xy = t8.xw * t5.yz + t7.xx;
            //Instruction 22610
            //MAD
            t9.z = t8.w * t5.x + (-t6.y);
            //Instruction 22611
            //MAD
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            //Instruction 22612
            //MAD
            t14.z = t8.w * t5.x + t6.y;
            //Instruction 22613
            //MUL
            t51 = t5.x * t5.x;
            //Instruction 22614
            //MAD
            t9.w = t51 * t34.x + t7.x;
            //Instruction 22615
            //MOV
            t11.z = t12.x;
            //Instruction 22616
            //MOV
            t11.w = t10.x;
            //Instruction 22617
            //MOV
            t13.z = t9.y;
            //Instruction 22618
            //MOV
            t13.w = t14.y;
            //Instruction 22619
            //DP3
            t5.x = dot(t11.xzw, t13.xzw);
            //Instruction 22620
            //MOV
            t14.w = t13.y;
            //Instruction 22621
            //DP3
            t5.y = dot(t11.xwz, t14.xzw);
            //Instruction 22622
            //DP3
            t5.z = dot(t11.xzw, t9.xzw);
            //Instruction 22623
            //MOV
            t10.w = t11.y;
            //Instruction 22624
            //DP3
            t6.x = dot(t10.ywz, t13.xzw);
            //Instruction 22625
            //DP3
            t6.y = dot(t10.yzw, t14.xzw);
            //Instruction 22626
            //DP3
            t6.z = dot(t10.ywz, t9.xzw);
            //Instruction 22627
            //DP3
            t7.x = dot(t12.yzw, t13.xzw);
            //Instruction 22628
            //DP3
            t7.y = dot(t12.ywz, t14.xzw);
            //Instruction 22629
            //DP3
            t7.z = dot(t12.yzw, t9.xzw);
            //Instruction 22630
            //DP3
            t34.x = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 22631
            //DP3
            t34.y = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 22632
            //DP3
            t20 = dot(t7.xyz, in_NORMAL0.xyz);
            //Instruction 22633
            //DP3
            t5.x = dot(t5.xyz, t4.xyz);
            //Instruction 22634
            //DP3
            t5.y = dot(t6.xyz, t4.xyz);
            //Instruction 22635
            //DP3
            t5.z = dot(t7.xyz, t4.xyz);
            //Instruction 22636
            //DP3
            t54 = dot(t5.xyz, t5.xyz);
            //Instruction 22637
            //RSQ
            t54 = inversesqrt(t54);
            //Instruction 22638
            //MUL
            t5.xyz = vec3(t54) * t5.xyz;
            //Instruction 22639
            //MUL
            t4.xyz = vec3(t52) * t5.xyz;
            //Instruction 22640
        //ELSE
        } else {
            //Instruction 22641
            //MOV
            t34.xy = in_NORMAL0.xy;
            //Instruction 22642
            //MOV
            t20 = in_NORMAL0.z;
            //Instruction 22643
        //ENDIF
        }
        //Instruction 22644
    //ELSE
    } else {
        //Instruction 22645
        //MOV
        t34.xy = in_NORMAL0.xy;
        //Instruction 22646
        //MOV
        t20 = in_NORMAL0.z;
        //Instruction 22647
    //ENDIF
    }
    //Instruction 22648
    //ADD
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    //Instruction 22649
    //GE
    tb52 = t16_2.x>=3.000000;
    //Instruction 22650
    //IF
    if(tb52){
        //Instruction 22651
        //EQ
        tb52 = t16_2.x==5.000000;
        //Instruction 22652
        //IF
        if(tb52){
            //Instruction 22653
            //MUL
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 22654
            //MAD
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            //Instruction 22655
            //MAD
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            //Instruction 22656
            //DP3
            t52 = dot(t5.xyz, t5.xyz);
            //Instruction 22657
            //RSQ
            t52 = inversesqrt(t52);
            //Instruction 22658
            //MUL
            t5.xyz = vec3(t52) * t5.xyz;
            //Instruction 22659
            //MUL
            t6.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 22660
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 22661
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 22662
            //MUL
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            //Instruction 22663
            //ADD
            t52 = t0.x + _ST_WindBranch.x;
            //Instruction 22664
            //ADD
            t2.x = t52 + in_TEXCOORD0.w;
            //Instruction 22665
            //MAD
            t2.y = t52 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 22666
            //MUL
            t54 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 22667
            //MUL
            t2.z = t54 * 0.500000;
            //Instruction 22668
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 22669
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 22670
            //FRC
            t2 = fract(t2);
            //Instruction 22671
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 22672
            //MUL
            t7 = abs(t2) * abs(t2);
            //Instruction 22673
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 22674
            //MAD
            t2 = t7 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 22675
            //ADD
            t2 = t2 + t2;
            //Instruction 22676
            //MUL
            t7.w = t2.z * t2.y;
            //Instruction 22677
            //LT
            tb54 = t7.w<0.0;
            //Instruction 22678
            //MOV
            t7.y = (-t7.w);
            //Instruction 22679
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 22680
            //MOVC
            t7.xy = (bool(tb54)) ? t7.xy : t7.zw;
            //Instruction 22681
            //MAD
            t54 = (-t2.y) * t2.z + t7.x;
            //Instruction 22682
            //MAD
            t54 = t7.y * t54 + t7.w;
            //Instruction 22683
            //ADD
            t55 = (-t54) + t7.x;
            //Instruction 22684
            //MAD
            t54 = t7.y * t55 + t54;
            //Instruction 22685
            //MUL
            t54 = t54 * _ST_WindBranchTwitch.x;
            //Instruction 22686
            //ADD
            t55 = (-_ST_WindVector.w) + 1.0;
            //Instruction 22687
            //ADD
            t56 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 22688
            //MUL
            t56 = t2.x * t56;
            //Instruction 22689
            //MAD
            t54 = t54 * t55 + t56;
            //Instruction 22690
            //MAD
            t55 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 22691
            //MUL
            t54 = t54 * t55;
            //Instruction 22692
            //MUL
            t6.xyz = vec3(t54) * t6.xyz;
            //Instruction 22693
            //MAD
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 22694
            //MAD
            t7.x = t52 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 22695
            //MUL
            t52 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 22696
            //MAD
            t7.y = t52 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 22697
            //ADD
            t7.xy = t7.xy + vec2(0.500000, 0.500000);
            //Instruction 22698
            //FRC
            t7.xy = fract(t7.xy);
            //Instruction 22699
            //MAD
            t7.xy = t7.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 22700
            //MUL
            t41.xy = abs(t7.xy) * abs(t7.xy);
            //Instruction 22701
            //MAD
            t7.xy = -abs(t7.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 22702
            //MAD
            t7.xy = t41.xy * t7.xy + vec2(-0.500000, -0.500000);
            //Instruction 22703
            //ADD
            t7.xy = t7.xy + t7.xy;
            //Instruction 22704
            //MUL
            t7.xy = t7.xy * t7.xy;
            //Instruction 22705
            //MUL
            t52 = t7.x * t7.y;
            //Instruction 22706
            //MAD
            t52 = (-t52) * _ST_WindTurbulences.x + 1.0;
            //Instruction 22707
            //MUL
            t54 = t2.w * _ST_WindVector.w;
            //Instruction 22708
            //MAD
            t52 = t54 * _ST_WindBranchWhip.x + t52;
            //Instruction 22709
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            //Instruction 22710
            //MUL
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 22711
            //MUL
            t5.xyz = vec3(t52) * t5.xyz;
            //Instruction 22712
            //MAD
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
            //Instruction 22713
        //ELSE
        } else {
            //Instruction 22714
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 22715
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 22716
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 22717
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 22718
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 22719
            //ADD
            t6.x = t0.x + in_TEXCOORD0.w;
            //Instruction 22720
            //MAD
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 22721
            //MUL
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 22722
            //MUL
            t6.z = t0.x * 0.500000;
            //Instruction 22723
            //ADD
            t6.xyz = t6.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 22724
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 22725
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 22726
            //MUL
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            //Instruction 22727
            //MAD
            t6.xyz = -abs(t6.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 22728
            //MAD
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 22729
            //ADD
            t6.xyz = t6.xyz + t6.xyz;
            //Instruction 22730
            //MUL
            t2.w = t6.z * t6.y;
            //Instruction 22731
            //LT
            tb0 = t2.w<0.0;
            //Instruction 22732
            //MOV
            t2.y = (-t2.w);
            //Instruction 22733
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 22734
            //MOVC
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 22735
            //MAD
            t0.x = (-t6.y) * t6.z + t7.x;
            //Instruction 22736
            //MAD
            t0.x = t7.y * t0.x + t2.w;
            //Instruction 22737
            //ADD
            t52 = (-t0.x) + t7.x;
            //Instruction 22738
            //MAD
            t0.x = t7.y * t52 + t0.x;
            //Instruction 22739
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 22740
            //ADD
            t52 = (-_ST_WindVector.w) + 1.0;
            //Instruction 22741
            //ADD
            t54 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 22742
            //MUL
            t54 = t54 * t6.x;
            //Instruction 22743
            //MAD
            t0.x = t0.x * t52 + t54;
            //Instruction 22744
            //MUL
            t5.xyz = t0.xxx * t5.xyz;
            //Instruction 22745
            //MAD
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 22746
        //ENDIF
        }
        //Instruction 22747
    //ENDIF
    }
    //Instruction 22748
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 22749
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 22750
    //DIV
    t52 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 22751
    //MAD
    t52 = (-t52) * 0.250000 + t4.y;
    //Instruction 22752
    //MAX
    t52 = max(t52, 0.0);
    //Instruction 22753
    //MUL
    t52 = t52 * _ST_WindGlobal.z;
    //Instruction 22754
    //NE
    tb54 = t52!=0.0;
    //Instruction 22755
    //LOG
    t55 = log2(t52);
    //Instruction 22756
    //MUL
    t55 = t55 * _ST_WindGlobal.w;
    //Instruction 22757
    //EXP
    t55 = exp2(t55);
    //Instruction 22758
    //MOVC
    t52 = (tb54) ? t55 : t52;
    //Instruction 22759
    //ADD
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 22760
    //MAD
    t5.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 22761
    //ADD
    t5.xy = t5.xy + vec2(0.500000, 0.500000);
    //Instruction 22762
    //FRC
    t5.xy = fract(t5.xy);
    //Instruction 22763
    //MAD
    t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 22764
    //MUL
    t39.xy = abs(t5.xy) * abs(t5.xy);
    //Instruction 22765
    //MAD
    t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 22766
    //MAD
    t5.xy = t39.xy * t5.xy + vec2(-0.500000, -0.500000);
    //Instruction 22767
    //ADD
    t5.xy = t5.xy + t5.xy;
    //Instruction 22768
    //MAD
    t54 = t5.y * t5.y + t5.x;
    //Instruction 22769
    //DIV
    t55 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 22770
    //MAD
    t54 = _ST_WindGlobal.y * t54 + t55;
    //Instruction 22771
    //MUL
    t52 = t52 * t54;
    //Instruction 22772
    //MAD
    t5.xz = t3.xz * vec2(t52) + t4.xz;
    //Instruction 22773
    //MOV
    t5.y = t4.y;
    //Instruction 22774
    //DP3
    t52 = dot(t5.xyz, t5.xyz);
    //Instruction 22775
    //RSQ
    t52 = inversesqrt(t52);
    //Instruction 22776
    //MUL
    t3.xzw = vec3(t52) * t5.xyz;
    //Instruction 22777
    //MUL
    t3.xzw = t0.xxx * t3.xzw;
    //Instruction 22778
    //MOVC
    t3.xzw = (tb17.x) ? t3.xzw : t4.xyz;
    //Instruction 22779
    //MUL
    t4.xyz = t3.zzz * glstate_matrix_mvp[1].xyw;
    //Instruction 22780
    //MAD
    t4.xyz = glstate_matrix_mvp[0].xyw * t3.xxx + t4.xyz;
    //Instruction 22781
    //MAD
    t4.xyz = glstate_matrix_mvp[2].xyw * t3.www + t4.xyz;
    //Instruction 22782
    //MAD
    t4.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t4.xyz;
    //Instruction 22783
    //MUL
    t5.xz = t4.xz * vec2(0.500000, 0.500000);
    //Instruction 22784
    //MUL
    t0.x = t4.y * _ProjectionParams.x;
    //Instruction 22785
    //MUL
    t5.w = t0.x * 0.500000;
    //Instruction 22786
    //ADD
    t0.xy = t5.zz + t5.xw;
    //Instruction 22787
    //MUL
    t0.xy = t0.xy * _ScreenParams.xy;
    //Instruction 22788
    //MUL
    t4.xy = t0.xy * vec2(0.250000, 0.250000);
    //Instruction 22789
    //MUL
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    //Instruction 22790
    //MAD
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    //Instruction 22791
    //MAD
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    //Instruction 22792
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 22793
    //MUL
    t5.xyz = t3.zzz * _Object2World[1].xyz;
    //Instruction 22794
    //MAD
    t5.xyz = _Object2World[0].xyz * t3.xxx + t5.xyz;
    //Instruction 22795
    //MAD
    t3.xzw = _Object2World[2].xyz * t3.www + t5.xyz;
    //Instruction 22796
    //MAD
    t3.xzw = _Object2World[3].xyz * in_POSITION0.www + t3.xzw;
    //Instruction 22797
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 22798
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 22799
    //MOV
    t2.zw = _World2Object[2].xx;
    //Instruction 22800
    //MOV
    t5.x = _World2Object[0].y;
    //Instruction 22801
    //MOV
    t5.y = _World2Object[1].y;
    //Instruction 22802
    //MOV
    t5.zw = _World2Object[2].yy;
    //Instruction 22803
    //MUL
    t5 = t34.yyyy * t5;
    //Instruction 22804
    //MAD
    t0 = t2 * t34.xxxx + t5;
    //Instruction 22805
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 22806
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 22807
    //MOV
    t2.zw = _World2Object[2].zz;
    //Instruction 22808
    //MAD
    t0 = t2 * vec4(t20) + t0;
    //Instruction 22809
    //DP3
    t52 = dot(t0.xyw, t0.xyw);
    //Instruction 22810
    //RSQ
    t52 = inversesqrt(t52);
    //Instruction 22811
    //MUL
    t0 = t0 * vec4(t52);
    //Instruction 22812
    //MUL
    t5.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 22813
    //MAD
    t5.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t5.xyz;
    //Instruction 22814
    //MAD
    t5.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t5.xyz;
    //Instruction 22815
    //DP3
    t52 = dot(t5.xyz, t5.xyz);
    //Instruction 22816
    //RSQ
    t52 = inversesqrt(t52);
    //Instruction 22817
    //MUL
    t5.xyz = vec3(t52) * t5.xyz;
    //Instruction 22818
    //MUL
    t10_15.xyz = t0.wxy * t5.xyz;
    //Instruction 22819
    //MAD
    t10_15.xyz = t0.ywx * t5.yzx + (-t10_15.xyz);
    //Instruction 22820
    //MUL
    t6.xyz = t10_15.xyz * in_TANGENT0.www;
    //Instruction 22821
    //MUL
    t16_2 = t0.ywzx * t0;
    //Instruction 22822
    //DP4
    t16_16.x = dot(unity_SHBr, t16_2);
    //Instruction 22823
    //DP4
    t16_16.y = dot(unity_SHBg, t16_2);
    //Instruction 22824
    //DP4
    t16_16.z = dot(unity_SHBb, t16_2);
    //Instruction 22825
    //MUL
    t16_67 = t0.y * t0.y;
    //Instruction 22826
    //MAD
    t16_67 = t0.x * t0.x + (-t16_67);
    //Instruction 22827
    //MAD
    vs_TEXCOORD6.xyz = unity_SHC.xyz * vec3(t16_67) + t16_16.xyz;
    //Instruction 22828
    //MOV
    vs_TEXCOORD0.x = t5.z;
    //Instruction 22829
    //MOV
    vs_TEXCOORD0.y = t6.x;
    //Instruction 22830
    //MOV
    vs_TEXCOORD0.z = t0.x;
    //Instruction 22831
    //MOV
    vs_TEXCOORD0.w = t3.x;
    //Instruction 22832
    //MOV
    vs_TEXCOORD1.x = t5.x;
    //Instruction 22833
    //MOV
    vs_TEXCOORD1.y = t6.y;
    //Instruction 22834
    //MOV
    vs_TEXCOORD1.z = t0.y;
    //Instruction 22835
    //MOV
    vs_TEXCOORD1.w = t3.z;
    //Instruction 22836
    //MOV
    vs_TEXCOORD2.x = t5.y;
    //Instruction 22837
    //MOV
    vs_TEXCOORD2.y = t6.z;
    //Instruction 22838
    //MOV
    vs_TEXCOORD2.z = t0.w;
    //Instruction 22839
    //MOV
    vs_TEXCOORD2.w = t3.w;
    //Instruction 22840
    //MOV
    vs_TEXCOORD3.w = _Color.w;
    //Instruction 22841
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 22842
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 22843
    //MOV
    vs_TEXCOORD5.xyz = t4.xyz;
    //Instruction 22844
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump float t16_6;
mediump vec3 t16_9;
mediump float t16_21;
void main()
{
    //Instruction 22454
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    //Instruction 22455
    //FRC
    t16_6 = fract(t16_0.y);
    //Instruction 22456
    //MOV
    t1.x = t16_0.x;
    //Instruction 22457
    //MAD
    t1.y = t16_6 * 0.062500 + unity_LODFade.y;
    //Instruction 22458
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 22459
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 22460
    //LT
    tb1 = t16_1<0.0;
    //Instruction 22461
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 22462
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    //Instruction 22463
    //MAD
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 22464
    //LT
    tb1 = t10_2.x<0.0;
    //Instruction 22465
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 22466
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 22467
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 22468
    //ADD
    t16_9.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 22469
    //MAD
    t16_9.xyz = vs_TEXCOORD4.zzz * t16_9.xyz + t10_0.xyz;
    //Instruction 22470
    //MAX
    t16_4.x = max(t16_9.z, t16_9.y);
    //Instruction 22471
    //MAX
    t16_4.x = max(t16_9.x, t16_4.x);
    //Instruction 22472
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 22473
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 22474
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_9.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 22475
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD3.xyz;
    //Instruction 22476
    //MUL
    t16_4.xyz = t16_3.xyz * _LightColor0.xyz;
    //Instruction 22477
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 22478
    //MAD
    t10_2.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 22479
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    //Instruction 22480
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    //Instruction 22481
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    //Instruction 22482
    //MOV
    t0.w = 1.0;
    //Instruction 22483
    //DP4
    t16_5.x = dot(unity_SHAr, t0);
    //Instruction 22484
    //DP4
    t16_5.y = dot(unity_SHAg, t0);
    //Instruction 22485
    //DP4
    t16_5.z = dot(unity_SHAb, t0);
    //Instruction 22486
    //DP3
    t16_21 = dot(t0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 22487
    //MAX
    t16_21 = max(t16_21, 0.0);
    //Instruction 22488
    //ADD
    t16_5.xyz = t16_5.xyz + vs_TEXCOORD6.xyz;
    //Instruction 22489
    //MUL
    t16_3.xyz = t16_3.xyz * t16_5.xyz;
    //Instruction 22490
    //MAD
    t16_3.xyz = t16_4.xyz * vec3(t16_21) + t16_3.xyz;
    //Instruction 22491
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 22492
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 22493
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_4;
  lowp vec3 worldTangent_5;
  lowp vec3 worldNormal_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  lowp vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10.xy = tmpvar_3.xy;
  tmpvar_9.w = _Color.w;
  tmpvar_9.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].x;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].y;
  tmpvar_11 = clamp (((
    fract(((tmpvar_12 + tmpvar_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_10.z = tmpvar_11;
  highp vec4 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_1;
  tmpvar_15 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  FinalPosition_18 = tmpvar_1.xyz;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_18 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_19 > 1.0) && (tmpvar_19 < 5.0))) {
    highp float tmpvar_22;
    tmpvar_22 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_23;
    isBestWind_23 = (tmpvar_19 == 4.0);
    bool bLeaf2_24;
    bLeaf2_24 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_25;
    vPos_25 = FinalPosition_18;
    highp vec3 vDirection_26;
    vDirection_26 = tmpvar_2;
    highp float tmpvar_27;
    if (bLeaf2_24) {
      tmpvar_27 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_28;
    if (bLeaf2_24) {
      tmpvar_28 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_28 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_29;
    highp vec4 tmpvar_30;
    tmpvar_30.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_30.x = (tmpvar_27 + tmpvar_22);
    highp vec4 tmpvar_31;
    tmpvar_31 = abs(((
      fract((tmpvar_30 + 0.5))
     * 2.0) - 1.0));
    vPos_29 = (FinalPosition_18 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_28 * (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_26 = tmpvar_2;
    vPos_25 = vPos_29;
    if (isBestWind_23) {
      highp vec3 tmpvar_32;
      tmpvar_32 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_33;
      if (bLeaf2_24) {
        tmpvar_33 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_34;
      if (bLeaf2_24) {
        tmpvar_34 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_35;
      if (bLeaf2_24) {
        tmpvar_35 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_36;
      if (bLeaf2_24) {
        tmpvar_36 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_37;
      if (bLeaf2_24) {
        tmpvar_37 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_37 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_38;
      if (bLeaf2_24) {
        tmpvar_38 = bool(1);
      } else {
        tmpvar_38 = bool(1);
      };
      highp float fTwitch_39;
      highp vec3 vAxis_40;
      highp float fOsc_41;
      highp vec3 vOriginPos_42;
      highp vec3 tmpvar_43;
      tmpvar_43 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_44;
      tmpvar_44 = ((tmpvar_43.x + tmpvar_43.y) + tmpvar_43.z);
      highp vec4 tmpvar_45;
      tmpvar_45.x = (tmpvar_33 + tmpvar_44);
      tmpvar_45.y = ((tmpvar_33 * 0.75) - tmpvar_44);
      tmpvar_45.z = ((tmpvar_33 * 0.01) + tmpvar_44);
      tmpvar_45.w = (tmpvar_33 + tmpvar_44);
      highp vec4 tmpvar_46;
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      tmpvar_46 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      vOriginPos_42 = vPos_29;
      highp float tmpvar_48;
      tmpvar_48 = sqrt(dot (vPos_29, vPos_29));
      highp float fAngle_49;
      fAngle_49 = ((_glesMultiTexCoord2.x * tmpvar_35) * (tmpvar_46.x + (tmpvar_46.y * tmpvar_46.y)));
      highp vec2 vSinCos_50;
      vSinCos_50.x = sin(fAngle_49);
      vSinCos_50.y = cos(fAngle_49);
      highp float tmpvar_51;
      tmpvar_51 = (1.0 - vSinCos_50.y);
      highp mat3 tmpvar_52;
      tmpvar_52[0].x = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.x) + vSinCos_50.y);
      tmpvar_52[0].y = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.y) + (vSinCos_50.x * tmpvar_32.z));
      tmpvar_52[0].z = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.z) - (vSinCos_50.x * tmpvar_32.y));
      tmpvar_52[1].x = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.y) - (vSinCos_50.x * tmpvar_32.z));
      tmpvar_52[1].y = (((tmpvar_51 * tmpvar_32.y) * tmpvar_32.y) + vSinCos_50.y);
      tmpvar_52[1].z = (((tmpvar_51 * tmpvar_32.y) * tmpvar_32.z) + (vSinCos_50.x * tmpvar_32.x));
      tmpvar_52[2].x = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.z) + (vSinCos_50.x * tmpvar_32.y));
      tmpvar_52[2].y = (((tmpvar_51 * tmpvar_32.y) * tmpvar_32.z) - (vSinCos_50.x * tmpvar_32.x));
      tmpvar_52[2].z = (((tmpvar_51 * tmpvar_32.z) * tmpvar_32.z) + vSinCos_50.y);
      highp vec3 tmpvar_53;
      tmpvar_53 = ((tmpvar_32.yzx * vRotatedWindVector_17.zxy) - (tmpvar_32.zxy * vRotatedWindVector_17.yzx));
      vAxis_40.xz = tmpvar_53.xz;
      highp float tmpvar_54;
      tmpvar_54 = clamp (dot (vRotatedWindVector_17, tmpvar_32), -1.0, 1.0);
      vAxis_40.y = (tmpvar_53.y + tmpvar_54);
      highp vec3 tmpvar_55;
      tmpvar_55 = normalize(vAxis_40);
      vAxis_40 = tmpvar_55;
      highp float tmpvar_56;
      tmpvar_56 = (1.570796 - (sign(tmpvar_54) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_54))) * (1.570796 + (abs(tmpvar_54) * (-0.2146018 + 
          (abs(tmpvar_54) * (0.08656672 + (abs(tmpvar_54) * -0.03102955)))
        ))))
      )));
      fOsc_41 = (tmpvar_46.y - (tmpvar_46.x * tmpvar_46.x));
      fTwitch_39 = 0.0;
      if (tmpvar_38) {
        highp float fTime_57;
        fTime_57 = (tmpvar_37.z + tmpvar_44);
        highp vec4 tmpvar_58;
        tmpvar_58.zw = vec2(0.0, 0.0);
        tmpvar_58.x = fTime_57;
        tmpvar_58.y = (0.87 * fTime_57);
        highp vec4 tmpvar_59;
        highp vec4 tmpvar_60;
        tmpvar_60 = abs(((
          fract((tmpvar_58 + 0.5))
         * 2.0) - 1.0));
        tmpvar_59 = (((
          (tmpvar_60 * tmpvar_60)
         * 
          (3.0 - (2.0 * tmpvar_60))
        ) - 0.5) * 2.0);
        fTwitch_39 = (tmpvar_37.x * pow (clamp (
          ((((tmpvar_59.x * tmpvar_59.y) * tmpvar_59.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_37.y));
      };
      highp float fAngle_61;
      fAngle_61 = (_glesMultiTexCoord2.x * ((
        (tmpvar_56 * tmpvar_36)
       + 
        (fOsc_41 * tmpvar_34)
      ) + fTwitch_39));
      highp vec2 vSinCos_62;
      vSinCos_62.x = sin(fAngle_61);
      vSinCos_62.y = cos(fAngle_61);
      highp float tmpvar_63;
      tmpvar_63 = (1.0 - vSinCos_62.y);
      highp mat3 tmpvar_64;
      tmpvar_64[0].x = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.x) + vSinCos_62.y);
      tmpvar_64[0].y = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.y) + (vSinCos_62.x * tmpvar_55.z));
      tmpvar_64[0].z = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.z) - (vSinCos_62.x * tmpvar_55.y));
      tmpvar_64[1].x = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.y) - (vSinCos_62.x * tmpvar_55.z));
      tmpvar_64[1].y = (((tmpvar_63 * tmpvar_55.y) * tmpvar_55.y) + vSinCos_62.y);
      tmpvar_64[1].z = (((tmpvar_63 * tmpvar_55.y) * tmpvar_55.z) + (vSinCos_62.x * tmpvar_55.x));
      tmpvar_64[2].x = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.z) + (vSinCos_62.x * tmpvar_55.y));
      tmpvar_64[2].y = (((tmpvar_63 * tmpvar_55.y) * tmpvar_55.z) - (vSinCos_62.x * tmpvar_55.x));
      tmpvar_64[2].z = (((tmpvar_63 * tmpvar_55.z) * tmpvar_55.z) + vSinCos_62.y);
      highp mat3 tmpvar_65;
      tmpvar_65 = (tmpvar_52 * tmpvar_64);
      vOriginPos_42 = (normalize((tmpvar_65 * vPos_29)) * tmpvar_48);
      vDirection_26 = (tmpvar_65 * _glesNormal);
      vPos_25 = vOriginPos_42;
    };
    tmpvar_15 = vDirection_26;
    FinalPosition_18 = vPos_25;
  };
  FinalPosition_18 = (FinalPosition_18 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_66;
    vPos_66 = FinalPosition_18;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_67;
      vPos_67 = FinalPosition_18;
      highp float fTime_68;
      highp float fAdherenceScale_69;
      highp vec3 vWindVector_70;
      vWindVector_70 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_68 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_71;
      highp float fOscillation_72;
      fOscillation_72 = 1.0;
      highp float fAmount_73;
      highp float fTarget_74;
      highp vec4 tmpvar_75;
      tmpvar_75.x = (fTime_68 + _glesMultiTexCoord0.w);
      tmpvar_75.y = ((fTime_68 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_75.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_68 + _glesMultiTexCoord0.w));
      tmpvar_75.w = ((fTime_68 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_76;
      tmpvar_76 = abs(((
        fract((tmpvar_75 + 0.5))
       * 2.0) - 1.0));
      vOscillations_71 = (((
        (tmpvar_76 * tmpvar_76)
       * 
        (3.0 - (2.0 * tmpvar_76))
      ) - 0.5) * 2.0);
      highp float tmpvar_77;
      tmpvar_77 = (vOscillations_71.y * vOscillations_71.z);
      fTarget_74 = 1.0;
      fAmount_73 = tmpvar_77;
      if ((tmpvar_77 < 0.0)) {
        fTarget_74 = -1.0;
        fAmount_73 = -(tmpvar_77);
      };
      fOscillation_72 = (((
        mix (mix (tmpvar_77, fTarget_74, fAmount_73), fTarget_74, fAmount_73)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_71.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_72 = (fOscillation_72 * (1.0 + (vOscillations_71.w * _ST_WindBranchWhip.x)));
      vPos_67 = (FinalPosition_18 + ((vWindVector_70 * fOscillation_72) * _ST_WindBranch.y));
      highp vec4 tmpvar_78;
      tmpvar_78.zw = vec2(0.0, 0.0);
      tmpvar_78.x = ((fTime_68 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_78.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_79;
      highp vec4 tmpvar_80;
      tmpvar_80 = abs(((
        fract((tmpvar_78 + 0.5))
       * 2.0) - 1.0));
      tmpvar_79 = (((
        (tmpvar_80 * tmpvar_80)
       * 
        (3.0 - (2.0 * tmpvar_80))
      ) - 0.5) * 2.0);
      fAdherenceScale_69 = (1.0 - ((tmpvar_79.x * tmpvar_79.y) * (
        (tmpvar_79.x * tmpvar_79.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_69 = (fAdherenceScale_69 + ((vOscillations_71.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_67 = (vPos_67 + ((
        ((vRotatedBranchAnchor_16 - vPos_67) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_69) * _glesMultiTexCoord0.z));
      vPos_66 = vPos_67;
    } else {
      highp vec3 vPos_81;
      vPos_81 = vPos_66;
      highp float fTime_82;
      highp vec3 vWindVector_83;
      vWindVector_83 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_82 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_84;
      highp float fOscillation_85;
      fOscillation_85 = 1.0;
      highp float fAmount_86;
      highp float fTarget_87;
      highp vec4 tmpvar_88;
      tmpvar_88.w = 0.0;
      tmpvar_88.x = (fTime_82 + _glesMultiTexCoord0.w);
      tmpvar_88.y = ((fTime_82 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_88.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_82 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_89;
      tmpvar_89 = abs(((
        fract((tmpvar_88 + 0.5))
       * 2.0) - 1.0));
      vOscillations_84 = (((
        (tmpvar_89 * tmpvar_89)
       * 
        (3.0 - (2.0 * tmpvar_89))
      ) - 0.5) * 2.0);
      highp float tmpvar_90;
      tmpvar_90 = (vOscillations_84.y * vOscillations_84.z);
      fTarget_87 = 1.0;
      fAmount_86 = tmpvar_90;
      if ((tmpvar_90 < 0.0)) {
        fTarget_87 = -1.0;
        fAmount_86 = -(tmpvar_90);
      };
      fOscillation_85 = (((
        mix (mix (tmpvar_90, fTarget_87, fAmount_86), fTarget_87, fAmount_86)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_84.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_81 = (vPos_66 + ((vWindVector_83 * fOscillation_85) * _ST_WindBranch.y));
      vPos_66 = vPos_81;
    };
    FinalPosition_18 = vPos_66;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_91;
    vPos_91 = FinalPosition_18;
    highp float fMoveAmount_92;
    highp float fAdjust_93;
    highp float fLength_94;
    fLength_94 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_95;
    tmpvar_95 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_93 = tmpvar_95;
    if ((tmpvar_95 != 0.0)) {
      fAdjust_93 = pow (tmpvar_95, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_96;
    tmpvar_96.zw = vec2(0.0, 0.0);
    tmpvar_96.x = (tmpvar_12 + _ST_WindGlobal.x);
    tmpvar_96.y = (tmpvar_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_97;
    highp vec4 tmpvar_98;
    tmpvar_98 = abs(((
      fract((tmpvar_96 + 0.5))
     * 2.0) - 1.0));
    tmpvar_97 = (((
      (tmpvar_98 * tmpvar_98)
     * 
      (3.0 - (2.0 * tmpvar_98))
    ) - 0.5) * 2.0);
    fMoveAmount_92 = ((_ST_WindGlobal.y * (tmpvar_97.x + 
      (tmpvar_97.y * tmpvar_97.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_92 = (fMoveAmount_92 * fAdjust_93);
    vPos_91.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * fMoveAmount_92));
    vPos_91 = (normalize(vPos_91) * fLength_94);
    FinalPosition_18 = vPos_91;
  };
  tmpvar_14.xyz = FinalPosition_18;
  highp vec4 hPos_99;
  hPos_99 = (glstate_matrix_mvp * tmpvar_14);
  mediump vec3 screenPos_100;
  highp vec4 o_101;
  highp vec4 tmpvar_102;
  tmpvar_102 = (hPos_99 * 0.5);
  highp vec2 tmpvar_103;
  tmpvar_103.x = tmpvar_102.x;
  tmpvar_103.y = (tmpvar_102.y * _ProjectionParams.x);
  o_101.xy = (tmpvar_103 + tmpvar_102.w);
  o_101.zw = hPos_99.zw;
  highp vec3 tmpvar_104;
  tmpvar_104 = o_101.xyw;
  screenPos_100 = tmpvar_104;
  screenPos_100.xy = (screenPos_100.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7 = tmpvar_9;
  highp vec3 tmpvar_105;
  tmpvar_105 = (_Object2World * tmpvar_14).xyz;
  highp vec4 v_106;
  v_106.x = _World2Object[0].x;
  v_106.y = _World2Object[1].x;
  v_106.z = _World2Object[2].x;
  v_106.w = _World2Object[3].x;
  highp vec4 v_107;
  v_107.x = _World2Object[0].y;
  v_107.y = _World2Object[1].y;
  v_107.z = _World2Object[2].y;
  v_107.w = _World2Object[3].y;
  highp vec4 v_108;
  v_108.x = _World2Object[0].z;
  v_108.y = _World2Object[1].z;
  v_108.z = _World2Object[2].z;
  v_108.w = _World2Object[3].z;
  highp vec3 tmpvar_109;
  tmpvar_109 = normalize(((
    (v_106.xyz * tmpvar_15.x)
   + 
    (v_107.xyz * tmpvar_15.y)
  ) + (v_108.xyz * tmpvar_15.z)));
  worldNormal_6 = tmpvar_109;
  highp mat3 tmpvar_110;
  tmpvar_110[0] = _Object2World[0].xyz;
  tmpvar_110[1] = _Object2World[1].xyz;
  tmpvar_110[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_111;
  tmpvar_111 = normalize((tmpvar_110 * _glesTANGENT.xyz));
  worldTangent_5 = tmpvar_111;
  lowp vec3 tmpvar_112;
  tmpvar_112 = ((worldNormal_6.yzx * worldTangent_5.zxy) - (worldNormal_6.zxy * worldTangent_5.yzx));
  highp vec3 tmpvar_113;
  tmpvar_113 = (tmpvar_112 * _glesTANGENT.w);
  worldBinormal_4 = tmpvar_113;
  highp vec4 tmpvar_114;
  tmpvar_114.x = worldTangent_5.x;
  tmpvar_114.y = worldBinormal_4.x;
  tmpvar_114.z = worldNormal_6.x;
  tmpvar_114.w = tmpvar_105.x;
  highp vec4 tmpvar_115;
  tmpvar_115.x = worldTangent_5.y;
  tmpvar_115.y = worldBinormal_4.y;
  tmpvar_115.z = worldNormal_6.y;
  tmpvar_115.w = tmpvar_105.y;
  highp vec4 tmpvar_116;
  tmpvar_116.x = worldTangent_5.z;
  tmpvar_116.y = worldBinormal_4.z;
  tmpvar_116.z = worldNormal_6.z;
  tmpvar_116.w = tmpvar_105.z;
  lowp vec4 tmpvar_117;
  tmpvar_117.w = 1.0;
  tmpvar_117.xyz = worldNormal_6;
  mediump vec4 normal_118;
  normal_118 = tmpvar_117;
  mediump vec3 x2_119;
  mediump vec4 tmpvar_120;
  tmpvar_120 = (normal_118.xyzz * normal_118.yzzx);
  x2_119.x = dot (unity_SHBr, tmpvar_120);
  x2_119.y = dot (unity_SHBg, tmpvar_120);
  x2_119.z = dot (unity_SHBb, tmpvar_120);
  tmpvar_8 = (unity_World2Shadow[0] * (_Object2World * tmpvar_14));
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_114;
  xlv_TEXCOORD1 = tmpvar_115;
  xlv_TEXCOORD2 = tmpvar_116;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = screenPos_100;
  xlv_TEXCOORD6 = (x2_119 + (unity_SHC.xyz * (
    (normal_118.x * normal_118.x)
   - 
    (normal_118.y * normal_118.y)
  )));
  xlv_TEXCOORD7 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_13.x = tmpvar_14.x;
  projUV_13.y = ((fract(tmpvar_14.y) * 0.0625) + unity_LODFade.y);
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_12 = tmpvar_16;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_17;
  x_17 = (tmpvar_10 - _Cutoff);
  if ((x_17 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_18;
  tmpvar_18 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_18.x, max (tmpvar_18.y, tmpvar_18.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_18 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_19;
  tmpvar_19 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7).x > 
    (xlv_TEXCOORD7.z / xlv_TEXCOORD7.w)
  )), _LightShadowData.x);
  tmpvar_20 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (xlv_TEXCOORD0.xyz, tmpvar_19);
  worldN_4.x = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = dot (xlv_TEXCOORD1.xyz, tmpvar_19);
  worldN_4.y = tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = dot (xlv_TEXCOORD2.xyz, tmpvar_19);
  worldN_4.z = tmpvar_24;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_20;
  mediump vec3 normalWorld_25;
  normalWorld_25 = worldN_4;
  mediump vec3 tmpvar_26;
  mediump vec3 tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = normalWorld_25;
  mediump vec3 x1_29;
  x1_29.x = dot (unity_SHAr, tmpvar_28);
  x1_29.y = dot (unity_SHAg, tmpvar_28);
  x1_29.z = dot (unity_SHAb, tmpvar_28);
  tmpvar_27 = (xlv_TEXCOORD6 + x1_29);
  tmpvar_26 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_26;
  lowp vec4 c_30;
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_32 = tmpvar_33;
  c_31.xyz = ((tmpvar_9 * tmpvar_26) * diff_32);
  c_31.w = tmpvar_10;
  c_30.w = c_31.w;
  c_30.xyz = (c_31.xyz + (tmpvar_9 * tmpvar_27));
  c_5.xyz = c_30.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_4;
  lowp vec3 worldTangent_5;
  lowp vec3 worldNormal_6;
  mediump vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  lowp vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10.xy = tmpvar_3.xy;
  tmpvar_9.w = _Color.w;
  tmpvar_9.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].x;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].y;
  tmpvar_11 = clamp (((
    fract(((tmpvar_12 + tmpvar_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_10.z = tmpvar_11;
  highp vec4 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_1;
  tmpvar_15 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  FinalPosition_18 = tmpvar_1.xyz;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_18 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_19 > 1.0) && (tmpvar_19 < 5.0))) {
    highp float tmpvar_22;
    tmpvar_22 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_23;
    isBestWind_23 = (tmpvar_19 == 4.0);
    bool bLeaf2_24;
    bLeaf2_24 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_25;
    vPos_25 = FinalPosition_18;
    highp vec3 vDirection_26;
    vDirection_26 = tmpvar_2;
    highp float tmpvar_27;
    if (bLeaf2_24) {
      tmpvar_27 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_28;
    if (bLeaf2_24) {
      tmpvar_28 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_28 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_29;
    highp vec4 tmpvar_30;
    tmpvar_30.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_30.x = (tmpvar_27 + tmpvar_22);
    highp vec4 tmpvar_31;
    tmpvar_31 = abs(((
      fract((tmpvar_30 + 0.5))
     * 2.0) - 1.0));
    vPos_29 = (FinalPosition_18 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_28 * (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_26 = tmpvar_2;
    vPos_25 = vPos_29;
    if (isBestWind_23) {
      highp vec3 tmpvar_32;
      tmpvar_32 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_33;
      if (bLeaf2_24) {
        tmpvar_33 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_34;
      if (bLeaf2_24) {
        tmpvar_34 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_35;
      if (bLeaf2_24) {
        tmpvar_35 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_36;
      if (bLeaf2_24) {
        tmpvar_36 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_37;
      if (bLeaf2_24) {
        tmpvar_37 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_37 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_38;
      if (bLeaf2_24) {
        tmpvar_38 = bool(1);
      } else {
        tmpvar_38 = bool(1);
      };
      highp float fTwitch_39;
      highp vec3 vAxis_40;
      highp float fOsc_41;
      highp vec3 vOriginPos_42;
      highp vec3 tmpvar_43;
      tmpvar_43 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_44;
      tmpvar_44 = ((tmpvar_43.x + tmpvar_43.y) + tmpvar_43.z);
      highp vec4 tmpvar_45;
      tmpvar_45.x = (tmpvar_33 + tmpvar_44);
      tmpvar_45.y = ((tmpvar_33 * 0.75) - tmpvar_44);
      tmpvar_45.z = ((tmpvar_33 * 0.01) + tmpvar_44);
      tmpvar_45.w = (tmpvar_33 + tmpvar_44);
      highp vec4 tmpvar_46;
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      tmpvar_46 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      vOriginPos_42 = vPos_29;
      highp float tmpvar_48;
      tmpvar_48 = sqrt(dot (vPos_29, vPos_29));
      highp float fAngle_49;
      fAngle_49 = ((_glesMultiTexCoord2.x * tmpvar_35) * (tmpvar_46.x + (tmpvar_46.y * tmpvar_46.y)));
      highp vec2 vSinCos_50;
      vSinCos_50.x = sin(fAngle_49);
      vSinCos_50.y = cos(fAngle_49);
      highp float tmpvar_51;
      tmpvar_51 = (1.0 - vSinCos_50.y);
      highp mat3 tmpvar_52;
      tmpvar_52[0].x = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.x) + vSinCos_50.y);
      tmpvar_52[0].y = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.y) + (vSinCos_50.x * tmpvar_32.z));
      tmpvar_52[0].z = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.z) - (vSinCos_50.x * tmpvar_32.y));
      tmpvar_52[1].x = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.y) - (vSinCos_50.x * tmpvar_32.z));
      tmpvar_52[1].y = (((tmpvar_51 * tmpvar_32.y) * tmpvar_32.y) + vSinCos_50.y);
      tmpvar_52[1].z = (((tmpvar_51 * tmpvar_32.y) * tmpvar_32.z) + (vSinCos_50.x * tmpvar_32.x));
      tmpvar_52[2].x = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.z) + (vSinCos_50.x * tmpvar_32.y));
      tmpvar_52[2].y = (((tmpvar_51 * tmpvar_32.y) * tmpvar_32.z) - (vSinCos_50.x * tmpvar_32.x));
      tmpvar_52[2].z = (((tmpvar_51 * tmpvar_32.z) * tmpvar_32.z) + vSinCos_50.y);
      highp vec3 tmpvar_53;
      tmpvar_53 = ((tmpvar_32.yzx * vRotatedWindVector_17.zxy) - (tmpvar_32.zxy * vRotatedWindVector_17.yzx));
      vAxis_40.xz = tmpvar_53.xz;
      highp float tmpvar_54;
      tmpvar_54 = clamp (dot (vRotatedWindVector_17, tmpvar_32), -1.0, 1.0);
      vAxis_40.y = (tmpvar_53.y + tmpvar_54);
      highp vec3 tmpvar_55;
      tmpvar_55 = normalize(vAxis_40);
      vAxis_40 = tmpvar_55;
      highp float tmpvar_56;
      tmpvar_56 = (1.570796 - (sign(tmpvar_54) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_54))) * (1.570796 + (abs(tmpvar_54) * (-0.2146018 + 
          (abs(tmpvar_54) * (0.08656672 + (abs(tmpvar_54) * -0.03102955)))
        ))))
      )));
      fOsc_41 = (tmpvar_46.y - (tmpvar_46.x * tmpvar_46.x));
      fTwitch_39 = 0.0;
      if (tmpvar_38) {
        highp float fTime_57;
        fTime_57 = (tmpvar_37.z + tmpvar_44);
        highp vec4 tmpvar_58;
        tmpvar_58.zw = vec2(0.0, 0.0);
        tmpvar_58.x = fTime_57;
        tmpvar_58.y = (0.87 * fTime_57);
        highp vec4 tmpvar_59;
        highp vec4 tmpvar_60;
        tmpvar_60 = abs(((
          fract((tmpvar_58 + 0.5))
         * 2.0) - 1.0));
        tmpvar_59 = (((
          (tmpvar_60 * tmpvar_60)
         * 
          (3.0 - (2.0 * tmpvar_60))
        ) - 0.5) * 2.0);
        fTwitch_39 = (tmpvar_37.x * pow (clamp (
          ((((tmpvar_59.x * tmpvar_59.y) * tmpvar_59.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_37.y));
      };
      highp float fAngle_61;
      fAngle_61 = (_glesMultiTexCoord2.x * ((
        (tmpvar_56 * tmpvar_36)
       + 
        (fOsc_41 * tmpvar_34)
      ) + fTwitch_39));
      highp vec2 vSinCos_62;
      vSinCos_62.x = sin(fAngle_61);
      vSinCos_62.y = cos(fAngle_61);
      highp float tmpvar_63;
      tmpvar_63 = (1.0 - vSinCos_62.y);
      highp mat3 tmpvar_64;
      tmpvar_64[0].x = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.x) + vSinCos_62.y);
      tmpvar_64[0].y = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.y) + (vSinCos_62.x * tmpvar_55.z));
      tmpvar_64[0].z = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.z) - (vSinCos_62.x * tmpvar_55.y));
      tmpvar_64[1].x = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.y) - (vSinCos_62.x * tmpvar_55.z));
      tmpvar_64[1].y = (((tmpvar_63 * tmpvar_55.y) * tmpvar_55.y) + vSinCos_62.y);
      tmpvar_64[1].z = (((tmpvar_63 * tmpvar_55.y) * tmpvar_55.z) + (vSinCos_62.x * tmpvar_55.x));
      tmpvar_64[2].x = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.z) + (vSinCos_62.x * tmpvar_55.y));
      tmpvar_64[2].y = (((tmpvar_63 * tmpvar_55.y) * tmpvar_55.z) - (vSinCos_62.x * tmpvar_55.x));
      tmpvar_64[2].z = (((tmpvar_63 * tmpvar_55.z) * tmpvar_55.z) + vSinCos_62.y);
      highp mat3 tmpvar_65;
      tmpvar_65 = (tmpvar_52 * tmpvar_64);
      vOriginPos_42 = (normalize((tmpvar_65 * vPos_29)) * tmpvar_48);
      vDirection_26 = (tmpvar_65 * _glesNormal);
      vPos_25 = vOriginPos_42;
    };
    tmpvar_15 = vDirection_26;
    FinalPosition_18 = vPos_25;
  };
  FinalPosition_18 = (FinalPosition_18 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_66;
    vPos_66 = FinalPosition_18;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_67;
      vPos_67 = FinalPosition_18;
      highp float fTime_68;
      highp float fAdherenceScale_69;
      highp vec3 vWindVector_70;
      vWindVector_70 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_68 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_71;
      highp float fOscillation_72;
      fOscillation_72 = 1.0;
      highp float fAmount_73;
      highp float fTarget_74;
      highp vec4 tmpvar_75;
      tmpvar_75.x = (fTime_68 + _glesMultiTexCoord0.w);
      tmpvar_75.y = ((fTime_68 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_75.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_68 + _glesMultiTexCoord0.w));
      tmpvar_75.w = ((fTime_68 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_76;
      tmpvar_76 = abs(((
        fract((tmpvar_75 + 0.5))
       * 2.0) - 1.0));
      vOscillations_71 = (((
        (tmpvar_76 * tmpvar_76)
       * 
        (3.0 - (2.0 * tmpvar_76))
      ) - 0.5) * 2.0);
      highp float tmpvar_77;
      tmpvar_77 = (vOscillations_71.y * vOscillations_71.z);
      fTarget_74 = 1.0;
      fAmount_73 = tmpvar_77;
      if ((tmpvar_77 < 0.0)) {
        fTarget_74 = -1.0;
        fAmount_73 = -(tmpvar_77);
      };
      fOscillation_72 = (((
        mix (mix (tmpvar_77, fTarget_74, fAmount_73), fTarget_74, fAmount_73)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_71.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_72 = (fOscillation_72 * (1.0 + (vOscillations_71.w * _ST_WindBranchWhip.x)));
      vPos_67 = (FinalPosition_18 + ((vWindVector_70 * fOscillation_72) * _ST_WindBranch.y));
      highp vec4 tmpvar_78;
      tmpvar_78.zw = vec2(0.0, 0.0);
      tmpvar_78.x = ((fTime_68 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_78.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_79;
      highp vec4 tmpvar_80;
      tmpvar_80 = abs(((
        fract((tmpvar_78 + 0.5))
       * 2.0) - 1.0));
      tmpvar_79 = (((
        (tmpvar_80 * tmpvar_80)
       * 
        (3.0 - (2.0 * tmpvar_80))
      ) - 0.5) * 2.0);
      fAdherenceScale_69 = (1.0 - ((tmpvar_79.x * tmpvar_79.y) * (
        (tmpvar_79.x * tmpvar_79.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_69 = (fAdherenceScale_69 + ((vOscillations_71.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_67 = (vPos_67 + ((
        ((vRotatedBranchAnchor_16 - vPos_67) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_69) * _glesMultiTexCoord0.z));
      vPos_66 = vPos_67;
    } else {
      highp vec3 vPos_81;
      vPos_81 = vPos_66;
      highp float fTime_82;
      highp vec3 vWindVector_83;
      vWindVector_83 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_82 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_84;
      highp float fOscillation_85;
      fOscillation_85 = 1.0;
      highp float fAmount_86;
      highp float fTarget_87;
      highp vec4 tmpvar_88;
      tmpvar_88.w = 0.0;
      tmpvar_88.x = (fTime_82 + _glesMultiTexCoord0.w);
      tmpvar_88.y = ((fTime_82 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_88.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_82 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_89;
      tmpvar_89 = abs(((
        fract((tmpvar_88 + 0.5))
       * 2.0) - 1.0));
      vOscillations_84 = (((
        (tmpvar_89 * tmpvar_89)
       * 
        (3.0 - (2.0 * tmpvar_89))
      ) - 0.5) * 2.0);
      highp float tmpvar_90;
      tmpvar_90 = (vOscillations_84.y * vOscillations_84.z);
      fTarget_87 = 1.0;
      fAmount_86 = tmpvar_90;
      if ((tmpvar_90 < 0.0)) {
        fTarget_87 = -1.0;
        fAmount_86 = -(tmpvar_90);
      };
      fOscillation_85 = (((
        mix (mix (tmpvar_90, fTarget_87, fAmount_86), fTarget_87, fAmount_86)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_84.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_81 = (vPos_66 + ((vWindVector_83 * fOscillation_85) * _ST_WindBranch.y));
      vPos_66 = vPos_81;
    };
    FinalPosition_18 = vPos_66;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_91;
    vPos_91 = FinalPosition_18;
    highp float fMoveAmount_92;
    highp float fAdjust_93;
    highp float fLength_94;
    fLength_94 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_95;
    tmpvar_95 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_93 = tmpvar_95;
    if ((tmpvar_95 != 0.0)) {
      fAdjust_93 = pow (tmpvar_95, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_96;
    tmpvar_96.zw = vec2(0.0, 0.0);
    tmpvar_96.x = (tmpvar_12 + _ST_WindGlobal.x);
    tmpvar_96.y = (tmpvar_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_97;
    highp vec4 tmpvar_98;
    tmpvar_98 = abs(((
      fract((tmpvar_96 + 0.5))
     * 2.0) - 1.0));
    tmpvar_97 = (((
      (tmpvar_98 * tmpvar_98)
     * 
      (3.0 - (2.0 * tmpvar_98))
    ) - 0.5) * 2.0);
    fMoveAmount_92 = ((_ST_WindGlobal.y * (tmpvar_97.x + 
      (tmpvar_97.y * tmpvar_97.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_92 = (fMoveAmount_92 * fAdjust_93);
    vPos_91.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * fMoveAmount_92));
    vPos_91 = (normalize(vPos_91) * fLength_94);
    FinalPosition_18 = vPos_91;
  };
  tmpvar_14.xyz = FinalPosition_18;
  highp vec4 hPos_99;
  hPos_99 = (glstate_matrix_mvp * tmpvar_14);
  mediump vec3 screenPos_100;
  highp vec4 o_101;
  highp vec4 tmpvar_102;
  tmpvar_102 = (hPos_99 * 0.5);
  highp vec2 tmpvar_103;
  tmpvar_103.x = tmpvar_102.x;
  tmpvar_103.y = (tmpvar_102.y * _ProjectionParams.x);
  o_101.xy = (tmpvar_103 + tmpvar_102.w);
  o_101.zw = hPos_99.zw;
  highp vec3 tmpvar_104;
  tmpvar_104 = o_101.xyw;
  screenPos_100 = tmpvar_104;
  screenPos_100.xy = (screenPos_100.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7 = tmpvar_9;
  highp vec3 tmpvar_105;
  tmpvar_105 = (_Object2World * tmpvar_14).xyz;
  highp vec4 v_106;
  v_106.x = _World2Object[0].x;
  v_106.y = _World2Object[1].x;
  v_106.z = _World2Object[2].x;
  v_106.w = _World2Object[3].x;
  highp vec4 v_107