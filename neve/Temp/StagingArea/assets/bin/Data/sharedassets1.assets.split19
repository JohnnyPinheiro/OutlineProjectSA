z;
    //Instruction 16347
    //DP3
    t27 = dot(t4.xyz, t4.xyz);
    //Instruction 16348
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 16349
    //MUL
    t4.xyz = vec3(t27) * t4.xyz;
    //Instruction 16350
    //MUL
    t10_7.xyz = t2.wxy * t4.xyz;
    //Instruction 16351
    //MAD
    t10_7.xyz = t2.ywx * t4.yzx + (-t10_7.xyz);
    //Instruction 16352
    //MUL
    t5.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 16353
    //MUL
    t16_6 = t2.ywzx * t2;
    //Instruction 16354
    //DP4
    t16_8.x = dot(unity_SHBr, t16_6);
    //Instruction 16355
    //DP4
    t16_8.y = dot(unity_SHBg, t16_6);
    //Instruction 16356
    //DP4
    t16_8.z = dot(unity_SHBb, t16_6);
    //Instruction 16357
    //MUL
    t16_35 = t2.y * t2.y;
    //Instruction 16358
    //MAD
    t16_35 = t2.x * t2.x + (-t16_35);
    //Instruction 16359
    //MAD
    vs_TEXCOORD6.xyz = unity_SHC.xyz * vec3(t16_35) + t16_8.xyz;
    //Instruction 16360
    //MUL
    t6 = t0.yyyy * _Object2World[1];
    //Instruction 16361
    //MAD
    t6 = _Object2World[0] * t0.xxxx + t6;
    //Instruction 16362
    //MAD
    t0 = _Object2World[2] * t0.zzzz + t6;
    //Instruction 16363
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 16364
    //MUL
    t6 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 16365
    //MAD
    t6 = unity_World2Shadow[0][0] * t0.xxxx + t6;
    //Instruction 16366
    //MAD
    t6 = unity_World2Shadow[0][2] * t0.zzzz + t6;
    //Instruction 16367
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t6;
    //Instruction 16368
    //MOV
    vs_TEXCOORD0.x = t4.z;
    //Instruction 16369
    //MOV
    vs_TEXCOORD0.y = t5.x;
    //Instruction 16370
    //MOV
    vs_TEXCOORD0.z = t2.x;
    //Instruction 16371
    //MOV
    vs_TEXCOORD0.w = t3.x;
    //Instruction 16372
    //MOV
    vs_TEXCOORD1.x = t4.x;
    //Instruction 16373
    //MOV
    vs_TEXCOORD1.y = t5.y;
    //Instruction 16374
    //MOV
    vs_TEXCOORD1.z = t2.y;
    //Instruction 16375
    //MOV
    vs_TEXCOORD1.w = t3.y;
    //Instruction 16376
    //MOV
    vs_TEXCOORD2.x = t4.y;
    //Instruction 16377
    //MOV
    vs_TEXCOORD2.y = t5.z;
    //Instruction 16378
    //MOV
    vs_TEXCOORD2.z = t2.w;
    //Instruction 16379
    //MOV
    vs_TEXCOORD2.w = t3.z;
    //Instruction 16380
    //MOV
    vs_TEXCOORD3.w = _Color.w;
    //Instruction 16381
    //MOV
    vs_TEXCOORD7 = t0;
    //Instruction 16382
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 16383
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 16384
    //MOV
    t0.xy = in_TEXCOORD2.zw;
    //Instruction 16385
    //MOV
    t0.z = in_TEXCOORD1.w;
    //Instruction 16386
    //MOV
    vs_TEXCOORD5.xyz = t0.xyz;
    //Instruction 16387
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec4 vs_TEXCOORD7;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec4 t1;
mediump float t16_1;
lowp vec3 t10_1;
lowp vec3 t10_2;
mediump vec3 t16_3;
lowp vec3 t10_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump float t16_18;
void main()
{
    //Instruction 16134
    //MOV
    t16_0.x = vs_TEXCOORD5.z;
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 16135
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 16136
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD5.xy).xyz;
    //Instruction 16137
    //ADD
    t16_6.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 16138
    //MAD
    t16_0.xyz = t16_0.xxx * t16_6.xyz + t10_2.xyz;
    //Instruction 16139
    //MAX
    t16_18 = max(t16_0.z, t16_0.y);
    //Instruction 16140
    //MAX
    t16_18 = max(t16_18, t16_0.x);
    //Instruction 16141
    //ADD
    t16_3.xyz = (-t16_0.xyz) + _HueVariation.xyz;
    //Instruction 16142
    //MAD
    t16_0.xyz = vs_TEXCOORD4.zzz * t16_3.xyz + t16_0.xyz;
    //Instruction 16143
    //MAX
    t16_3.x = max(t16_0.z, t16_0.y);
    //Instruction 16144
    //MAX
    t16_3.x = max(t16_0.x, t16_3.x);
    //Instruction 16145
    //DIV
    t16_18 = t16_18 / t16_3.x;
    //Instruction 16146
    //MAD
    t16_1 = t16_18 * 0.500000 + 0.500000;
    //Instruction 16147
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_1);
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 16148
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD3.xyz;
    //Instruction 16149
    //SAMPLE_C_LZ
    vec3 txVec40 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
    t16_18 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec40, 0.0);
    //Instruction 16150
    //ADD
    t16_3.x = (-_LightShadowData.x) + 1.0;
    //Instruction 16151
    //MAD
    t16_18 = t16_18 * t16_3.x + _LightShadowData.x;
    //Instruction 16152
    //MUL
    t16_3.xyz = vec3(t16_18) * _LightColor0.xyz;
    //Instruction 16153
    //MUL
    t16_3.xyz = t16_0.xyz * t16_3.xyz;
    //Instruction 16154
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 16155
    //MAD
    t10_4.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 16156
    //DP3
    t1.x = dot(vs_TEXCOORD0.xyz, t10_4.xyz);
    //Instruction 16157
    //DP3
    t1.y = dot(vs_TEXCOORD1.xyz, t10_4.xyz);
    //Instruction 16158
    //DP3
    t1.z = dot(vs_TEXCOORD2.xyz, t10_4.xyz);
    //Instruction 16159
    //MOV
    t1.w = 1.0;
    //Instruction 16160
    //DP4
    t16_5.x = dot(unity_SHAr, t1);
    //Instruction 16161
    //DP4
    t16_5.y = dot(unity_SHAg, t1);
    //Instruction 16162
    //DP4
    t16_5.z = dot(unity_SHAb, t1);
    //Instruction 16163
    //DP3
    t16_18 = dot(t1.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 16164
    //MAX
    t16_18 = max(t16_18, 0.0);
    //Instruction 16165
    //ADD
    t16_5.xyz = t16_5.xyz + vs_TEXCOORD6.xyz;
    //Instruction 16166
    //MUL
    t16_0.xyz = t16_0.xyz * t16_5.xyz;
    //Instruction 16167
    //MAD
    t16_0.xyz = t16_3.xyz * vec3(t16_18) + t16_0.xyz;
    //Instruction 16168
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 16169
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 16170
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec4 tmpvar_8;
  lowp vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  mediump vec3 tmpvar_11;
  tmpvar_10.xy = tmpvar_2.xy;
  tmpvar_9.w = _Color.w;
  tmpvar_9.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].x;
  highp float tmpvar_14;
  tmpvar_14 = _Object2World[3].y;
  tmpvar_12 = clamp (((
    fract(((tmpvar_13 + tmpvar_14) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_10.z = tmpvar_12;
  highp vec3 tmpvar_15;
  tmpvar_15.xy = _glesMultiTexCoord2.zw;
  tmpvar_15.z = _glesMultiTexCoord1.w;
  tmpvar_11 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  FinalPosition_19 = tmpvar_1.xyz;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_19 = tmpvar_23;
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_24;
    vPos_24 = tmpvar_23;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_25;
      vPos_25 = tmpvar_23;
      highp float fTime_26;
      highp float fAdherenceScale_27;
      highp vec3 vWindVector_28;
      vWindVector_28 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_26 = (_ST_WindBranch.x + (tmpvar_13 + tmpvar_14));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.x = (fTime_26 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((fTime_26 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_26 + _glesMultiTexCoord0.w));
      tmpvar_33.w = ((fTime_26 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_29.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_30 = (fOscillation_30 * (1.0 + (vOscillations_29.w * _ST_WindBranchWhip.x)));
      vPos_25 = (tmpvar_23 + ((vWindVector_28 * fOscillation_30) * _ST_WindBranch.y));
      highp vec4 tmpvar_36;
      tmpvar_36.zw = vec2(0.0, 0.0);
      tmpvar_36.x = ((fTime_26 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_36.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_37;
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      tmpvar_37 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      fAdherenceScale_27 = (1.0 - ((tmpvar_37.x * tmpvar_37.y) * (
        (tmpvar_37.x * tmpvar_37.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_27 = (fAdherenceScale_27 + ((vOscillations_29.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_25 = (vPos_25 + ((
        ((vRotatedBranchAnchor_17 - vPos_25) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_27) * _glesMultiTexCoord0.z));
      vPos_24 = vPos_25;
    } else {
      highp vec3 vPos_39;
      vPos_39 = vPos_24;
      highp float fTime_40;
      highp vec3 vWindVector_41;
      vWindVector_41 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_40 = (_ST_WindBranch.x + (tmpvar_13 + tmpvar_14));
      highp vec4 vOscillations_42;
      highp float fOscillation_43;
      fOscillation_43 = 1.0;
      highp float fAmount_44;
      highp float fTarget_45;
      highp vec4 tmpvar_46;
      tmpvar_46.w = 0.0;
      tmpvar_46.x = (fTime_40 + _glesMultiTexCoord0.w);
      tmpvar_46.y = ((fTime_40 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_46.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_40 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      vOscillations_42 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = (vOscillations_42.y * vOscillations_42.z);
      fTarget_45 = 1.0;
      fAmount_44 = tmpvar_48;
      if ((tmpvar_48 < 0.0)) {
        fTarget_45 = -1.0;
        fAmount_44 = -(tmpvar_48);
      };
      fOscillation_43 = (((
        mix (mix (tmpvar_48, fTarget_45, fAmount_44), fTarget_45, fAmount_44)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_42.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_39 = (vPos_24 + ((vWindVector_41 * fOscillation_43) * _ST_WindBranch.y));
      vPos_24 = vPos_39;
    };
    FinalPosition_19 = vPos_24;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_49;
    vPos_49 = FinalPosition_19;
    highp float fMoveAmount_50;
    highp float fAdjust_51;
    highp float fLength_52;
    fLength_52 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_53;
    tmpvar_53 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_51 = tmpvar_53;
    if ((tmpvar_53 != 0.0)) {
      fAdjust_51 = pow (tmpvar_53, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_54;
    tmpvar_54.zw = vec2(0.0, 0.0);
    tmpvar_54.x = (tmpvar_13 + _ST_WindGlobal.x);
    tmpvar_54.y = (tmpvar_14 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_55;
    highp vec4 tmpvar_56;
    tmpvar_56 = abs(((
      fract((tmpvar_54 + 0.5))
     * 2.0) - 1.0));
    tmpvar_55 = (((
      (tmpvar_56 * tmpvar_56)
     * 
      (3.0 - (2.0 * tmpvar_56))
    ) - 0.5) * 2.0);
    fMoveAmount_50 = ((_ST_WindGlobal.y * (tmpvar_55.x + 
      (tmpvar_55.y * tmpvar_55.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_50 = (fMoveAmount_50 * fAdjust_51);
    vPos_49.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * fMoveAmount_50));
    vPos_49 = (normalize(vPos_49) * fLength_52);
    FinalPosition_19 = vPos_49;
  };
  tmpvar_16.xyz = FinalPosition_19;
  tmpvar_6 = tmpvar_9;
  highp vec3 tmpvar_57;
  tmpvar_57 = (_Object2World * tmpvar_16).xyz;
  highp vec4 v_58;
  v_58.x = _World2Object[0].x;
  v_58.y = _World2Object[1].x;
  v_58.z = _World2Object[2].x;
  v_58.w = _World2Object[3].x;
  highp vec4 v_59;
  v_59.x = _World2Object[0].y;
  v_59.y = _World2Object[1].y;
  v_59.z = _World2Object[2].y;
  v_59.w = _World2Object[3].y;
  highp vec4 v_60;
  v_60.x = _World2Object[0].z;
  v_60.y = _World2Object[1].z;
  v_60.z = _World2Object[2].z;
  v_60.w = _World2Object[3].z;
  highp vec3 tmpvar_61;
  tmpvar_61 = normalize(((
    (v_58.xyz * _glesNormal.x)
   + 
    (v_59.xyz * _glesNormal.y)
  ) + (v_60.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_61;
  highp mat3 tmpvar_62;
  tmpvar_62[0] = _Object2World[0].xyz;
  tmpvar_62[1] = _Object2World[1].xyz;
  tmpvar_62[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((tmpvar_62 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_63;
  lowp vec3 tmpvar_64;
  tmpvar_64 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_65;
  tmpvar_65 = (tmpvar_64 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_65;
  highp vec4 tmpvar_66;
  tmpvar_66.x = worldTangent_4.x;
  tmpvar_66.y = worldBinormal_3.x;
  tmpvar_66.z = worldNormal_5.x;
  tmpvar_66.w = tmpvar_57.x;
  highp vec4 tmpvar_67;
  tmpvar_67.x = worldTangent_4.y;
  tmpvar_67.y = worldBinormal_3.y;
  tmpvar_67.z = worldNormal_5.y;
  tmpvar_67.w = tmpvar_57.y;
  highp vec4 tmpvar_68;
  tmpvar_68.x = worldTangent_4.z;
  tmpvar_68.y = worldBinormal_3.z;
  tmpvar_68.z = worldNormal_5.z;
  tmpvar_68.w = tmpvar_57.z;
  lowp vec4 tmpvar_69;
  tmpvar_69.w = 1.0;
  tmpvar_69.xyz = worldNormal_5;
  mediump vec4 normal_70;
  normal_70 = tmpvar_69;
  mediump vec3 x2_71;
  mediump vec4 tmpvar_72;
  tmpvar_72 = (normal_70.xyzz * normal_70.yzzx);
  x2_71.x = dot (unity_SHBr, tmpvar_72);
  x2_71.y = dot (unity_SHBg, tmpvar_72);
  x2_71.z = dot (unity_SHBb, tmpvar_72);
  highp vec3 lightColor0_73;
  lightColor0_73 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_74;
  lightColor1_74 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_75;
  lightColor2_75 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_76;
  lightColor3_76 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_77;
  lightAttenSq_77 = unity_4LightAtten0;
  highp vec3 normal_78;
  normal_78 = worldNormal_5;
  highp vec3 col_79;
  highp vec4 ndotl_80;
  highp vec4 lengthSq_81;
  highp vec4 tmpvar_82;
  tmpvar_82 = (unity_4LightPosX0 - tmpvar_57.x);
  highp vec4 tmpvar_83;
  tmpvar_83 = (unity_4LightPosY0 - tmpvar_57.y);
  highp vec4 tmpvar_84;
  tmpvar_84 = (unity_4LightPosZ0 - tmpvar_57.z);
  lengthSq_81 = (tmpvar_82 * tmpvar_82);
  lengthSq_81 = (lengthSq_81 + (tmpvar_83 * tmpvar_83));
  lengthSq_81 = (lengthSq_81 + (tmpvar_84 * tmpvar_84));
  ndotl_80 = (tmpvar_82 * normal_78.x);
  ndotl_80 = (ndotl_80 + (tmpvar_83 * normal_78.y));
  ndotl_80 = (ndotl_80 + (tmpvar_84 * normal_78.z));
  highp vec4 tmpvar_85;
  tmpvar_85 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_80 * inversesqrt(lengthSq_81)));
  ndotl_80 = tmpvar_85;
  highp vec4 tmpvar_86;
  tmpvar_86 = (tmpvar_85 * (1.0/((1.0 + 
    (lengthSq_81 * lightAttenSq_77)
  ))));
  col_79 = (lightColor0_73 * tmpvar_86.x);
  col_79 = (col_79 + (lightColor1_74 * tmpvar_86.y));
  col_79 = (col_79 + (lightColor2_75 * tmpvar_86.z));
  col_79 = (col_79 + (lightColor3_76 * tmpvar_86.w));
  tmpvar_7 = ((x2_71 + (unity_SHC.xyz * 
    ((normal_70.x * normal_70.x) - (normal_70.y * normal_70.y))
  )) + col_79);
  tmpvar_8 = (unity_World2Shadow[0] * (_Object2World * tmpvar_16));
  gl_Position = (glstate_matrix_mvp * tmpvar_16);
  xlv_TEXCOORD0 = tmpvar_66;
  xlv_TEXCOORD1 = tmpvar_67;
  xlv_TEXCOORD2 = tmpvar_68;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD6 = tmpvar_7;
  xlv_TEXCOORD7 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 blendColor_12;
  mediump vec4 diffuseColor_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_13 = tmpvar_14;
  tmpvar_10 = (diffuseColor_13.w * _Color.w);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  blendColor_12 = tmpvar_15;
  diffuseColor_13.xyz = mix (blendColor_12.xyz, diffuseColor_13.xyz, vec3(clamp (xlv_TEXCOORD5.z, 0.0, 1.0)));
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_13.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_11 = (max (diffuseColor_13.x, max (diffuseColor_13.y, diffuseColor_13.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_13.xyz = clamp ((tmpvar_16 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_13.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float shadow_18;
  shadow_18 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD7.xyz) * (1.0 - _LightShadowData.x)));
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD0.xyz, tmpvar_17);
  worldN_4.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD1.xyz, tmpvar_17);
  worldN_4.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (xlv_TEXCOORD2.xyz, tmpvar_17);
  worldN_4.z = tmpvar_21;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_18;
  mediump vec3 normalWorld_22;
  normalWorld_22 = worldN_4;
  mediump vec3 tmpvar_23;
  mediump vec3 tmpvar_24;
  mediump vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = normalWorld_22;
  mediump vec3 x1_26;
  x1_26.x = dot (unity_SHAr, tmpvar_25);
  x1_26.y = dot (unity_SHAg, tmpvar_25);
  x1_26.z = dot (unity_SHAb, tmpvar_25);
  tmpvar_24 = (xlv_TEXCOORD6 + x1_26);
  tmpvar_23 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_23;
  lowp vec4 c_27;
  lowp vec4 c_28;
  lowp float diff_29;
  mediump float tmpvar_30;
  tmpvar_30 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_29 = tmpvar_30;
  c_28.xyz = ((tmpvar_9 * tmpvar_23) * diff_29);
  c_28.w = tmpvar_10;
  c_27.w = c_28.w;
  c_27.xyz = (c_28.xyz + (tmpvar_9 * tmpvar_24));
  c_5.xyz = c_27.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec4 vs_TEXCOORD7;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec4 t4;
highp vec3 t5;
highp vec4 t6;
mediump vec4 t16_6;
highp vec4 t7;
lowp vec3 t10_7;
mediump vec3 t16_8;
highp vec4 t9;
highp vec4 t10;
highp vec2 t11;
bool tb11;
highp vec2 t22;
highp vec2 t26;
highp vec2 t28;
highp float t33;
highp float t34;
bool tb34;
highp float t36;
bool tb36;
highp float t37;
highp float t38;
mediump float t16_41;
void main()
{
    //Instruction 16425
    //MUL
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 16426
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 16427
    //ADD
    t11.x = t0.x + _Object2World[3].z;
    //Instruction 16428
    //ADD
    t22.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 16429
    //ADD
    t11.y = t22.x + in_NORMAL0.x;
    //Instruction 16430
    //FRC
    t11.xy = fract(t11.xy);
    //Instruction 16431
    //MAD
    t11.x = t11.y * 0.500000 + t11.x;
    //Instruction 16432
    //ADD
    t11.x = t11.x + -0.300000;
    //Instruction 16433
    //MUL
    t1.z = t11.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 16434
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 16435
    //LT
    tb11 = 0.0<t16_2;
    //Instruction 16436
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 16437
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 16438
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 16439
    //DP3
    t22.x = dot(t3.xyz, t3.xyz);
    //Instruction 16440
    //RSQ
    t22.x = inversesqrt(t22.x);
    //Instruction 16441
    //MUL
    t22.xy = t22.xx * t3.xz;
    //Instruction 16442
    //AND
    t22.xy = mix(vec2(0.0, 0.0), t22.xy, bvec2(tb11));
    //Instruction 16443
    //ADD
    t3.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 16444
    //MAD
    t3.xyz = unity_LODFade.xxx * t3.xyz + in_POSITION0.xyz;
    //Instruction 16445
    //GE
    tb34 = t16_2>=3.000000;
    //Instruction 16446
    //IF
    if(tb34){
        //Instruction 16447
        //EQ
        tb34 = t16_2==5.000000;
        //Instruction 16448
        //IF
        if(tb34){
            //Instruction 16449
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 16450
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 16451
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 16452
            //DP3
            t34 = dot(t4.xyz, t4.xyz);
            //Instruction 16453
            //RSQ
            t34 = inversesqrt(t34);
            //Instruction 16454
            //MUL
            t4.xyz = vec3(t34) * t4.xyz;
            //Instruction 16455
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 16456
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 16457
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 16458
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 16459
            //ADD
            t34 = t0.x + _ST_WindBranch.x;
            //Instruction 16460
            //ADD
            t2.x = t34 + in_TEXCOORD0.w;
            //Instruction 16461
            //MAD
            t2.y = t34 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 16462
            //MUL
            t36 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 16463
            //MUL
            t2.z = t36 * 0.500000;
            //Instruction 16464
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 16465
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 16466
            //FRC
            t2 = fract(t2);
            //Instruction 16467
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 16468
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 16469
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 16470
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 16471
            //ADD
            t2 = t2 + t2;
            //Instruction 16472
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 16473
            //LT
            tb36 = t6.w<0.0;
            //Instruction 16474
            //MOV
            t6.y = (-t6.w);
            //Instruction 16475
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 16476
            //MOVC
            t6.xy = (bool(tb36)) ? t6.xy : t6.zw;
            //Instruction 16477
            //MAD
            t36 = (-t2.y) * t2.z + t6.x;
            //Instruction 16478
            //MAD
            t36 = t6.y * t36 + t6.w;
            //Instruction 16479
            //ADD
            t37 = (-t36) + t6.x;
            //Instruction 16480
            //MAD
            t36 = t6.y * t37 + t36;
            //Instruction 16481
            //MUL
            t36 = t36 * _ST_WindBranchTwitch.x;
            //Instruction 16482
            //ADD
            t37 = (-_ST_WindVector.w) + 1.0;
            //Instruction 16483
            //ADD
            t38 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 16484
            //MUL
            t38 = t2.x * t38;
            //Instruction 16485
            //MAD
            t36 = t36 * t37 + t38;
            //Instruction 16486
            //MAD
            t37 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 16487
            //MUL
            t36 = t36 * t37;
            //Instruction 16488
            //MUL
            t5.xyz = vec3(t36) * t5.xyz;
            //Instruction 16489
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 16490
            //MAD
            t6.x = t34 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 16491
            //MUL
            t34 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 16492
            //MAD
            t6.y = t34 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 16493
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 16494
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 16495
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 16496
            //MUL
            t28.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 16497
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 16498
            //MAD
            t6.xy = t28.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 16499
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 16500
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 16501
            //MUL
            t34 = t6.x * t6.y;
            //Instruction 16502
            //MAD
            t34 = (-t34) * _ST_WindTurbulences.x + 1.0;
            //Instruction 16503
            //MUL
            t36 = t2.w * _ST_WindVector.w;
            //Instruction 16504
            //MAD
            t34 = t36 * _ST_WindBranchWhip.x + t34;
            //Instruction 16505
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 16506
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 16507
            //MUL
            t4.xyz = vec3(t34) * t4.xyz;
            //Instruction 16508
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 16509
        //ELSE
        } else {
            //Instruction 16510
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 16511
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 16512
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 16513
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 16514
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 16515
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 16516
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 16517
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 16518
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 16519
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 16520
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 16521
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 16522
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 16523
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 16524
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 16525
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 16526
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 16527
            //LT
            tb0 = t2.w<0.0;
            //Instruction 16528
            //MOV
            t2.y = (-t2.w);
            //Instruction 16529
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 16530
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 16531
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 16532
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 16533
            //ADD
            t34 = (-t0.x) + t6.x;
            //Instruction 16534
            //MAD
            t0.x = t6.y * t34 + t0.x;
            //Instruction 16535
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 16536
            //ADD
            t34 = (-_ST_WindVector.w) + 1.0;
            //Instruction 16537
            //ADD
            t36 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 16538
            //MUL
            t36 = t36 * t5.x;
            //Instruction 16539
            //MAD
            t0.x = t0.x * t34 + t36;
            //Instruction 16540
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 16541
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 16542
        //ENDIF
        }
        //Instruction 16543
    //ENDIF
    }
    //Instruction 16544
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 16545
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 16546
    //DIV
    t34 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 16547
    //MAD
    t34 = (-t34) * 0.250000 + t3.y;
    //Instruction 16548
    //MAX
    t34 = max(t34, 0.0);
    //Instruction 16549
    //MUL
    t34 = t34 * _ST_WindGlobal.z;
    //Instruction 16550
    //NE
    tb36 = t34!=0.0;
    //Instruction 16551
    //LOG
    t4.x = log2(t34);
    //Instruction 16552
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 16553
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 16554
    //MOVC
    t34 = (tb36) ? t4.x : t34;
    //Instruction 16555
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 16556
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 16557
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 16558
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 16559
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 16560
    //MUL
    t26.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 16561
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 16562
    //MAD
    t4.xy = t26.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 16563
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 16564
    //MAD
    t36 = t4.y * t4.y + t4.x;
    //Instruction 16565
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 16566
    //MAD
    t36 = _ST_WindGlobal.y * t36 + t4.x;
    //Instruction 16567
    //MUL
    t34 = t34 * t36;
    //Instruction 16568
    //MAD
    t4.xz = t22.xy * vec2(t34) + t3.xz;
    //Instruction 16569
    //MOV
    t4.y = t3.y;
    //Instruction 16570
    //DP3
    t22.x = dot(t4.xyz, t4.xyz);
    //Instruction 16571
    //RSQ
    t22.x = inversesqrt(t22.x);
    //Instruction 16572
    //MUL
    t4.xyz = t22.xxx * t4.xyz;
    //Instruction 16573
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 16574
    //MOVC
    t0.xyz = (bool(tb11)) ? t0.xzw : t3.xyz;
    //Instruction 16575
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 16576
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 16577
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 16578
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 16579
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 16580
    //MAD
    t3.xyz = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 16581
    //MAD
    t3.xyz = _Object2World[2].xyz * t0.zzz + t3.xyz;
    //Instruction 16582
    //MAD
    t3.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xyz;
    //Instruction 16583
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 16584
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 16585
    //MOV
    t2.zw = _World2Object[2].xx;
    //Instruction 16586
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 16587
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 16588
    //MOV
    t4.zw = _World2Object[2].yy;
    //Instruction 16589
    //MUL
    t4 = t4 * in_NORMAL0.yyyy;
    //Instruction 16590
    //MAD
    t2 = t2 * in_NORMAL0.xxxx + t4;
    //Instruction 16591
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 16592
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 16593
    //MOV
    t4.zw = _World2Object[2].zz;
    //Instruction 16594
    //MAD
    t2 = t4 * in_NORMAL0.zzzz + t2;
    //Instruction 16595
    //DP3
    t33 = dot(t2.xyw, t2.xyw);
    //Instruction 16596
    //RSQ
    t33 = inversesqrt(t33);
    //Instruction 16597
    //MUL
    t2 = vec4(t33) * t2;
    //Instruction 16598
    //MUL
    t4.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 16599
    //MAD
    t4.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t4.xyz;
    //Instruction 16600
    //MAD
    t4.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t4.xyz;
    //Instruction 16601
    //DP3
    t33 = dot(t4.xyz, t4.xyz);
    //Instruction 16602
    //RSQ
    t33 = inversesqrt(t33);
    //Instruction 16603
    //MUL
    t4.xyz = vec3(t33) * t4.xyz;
    //Instruction 16604
    //MUL
    t10_7.xyz = t2.wxy * t4.xyz;
    //Instruction 16605
    //MAD
    t10_7.xyz = t2.ywx * t4.yzx + (-t10_7.xyz);
    //Instruction 16606
    //MUL
    t5.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 16607
    //MUL
    t16_6 = t2.ywzx * t2;
    //Instruction 16608
    //DP4
    t16_8.x = dot(unity_SHBr, t16_6);
    //Instruction 16609
    //DP4
    t16_8.y = dot(unity_SHBg, t16_6);
    //Instruction 16610
    //DP4
    t16_8.z = dot(unity_SHBb, t16_6);
    //Instruction 16611
    //MUL
    t16_41 = t2.y * t2.y;
    //Instruction 16612
    //MAD
    t16_41 = t2.x * t2.x + (-t16_41);
    //Instruction 16613
    //MAD
    t16_8.xyz = unity_SHC.xyz * vec3(t16_41) + t16_8.xyz;
    //Instruction 16614
    //ADD
    t6 = (-t3.xxxx) + unity_4LightPosX0;
    //Instruction 16615
    //ADD
    t7 = (-t3.yyyy) + unity_4LightPosY0;
    //Instruction 16616
    //ADD
    t9 = (-t3.zzzz) + unity_4LightPosZ0;
    //Instruction 16617
    //MUL
    t10 = t7 * t7;
    //Instruction 16618
    //MAD
    t10 = t6 * t6 + t10;
    //Instruction 16619
    //MAD
    t10 = t9 * t9 + t10;
    //Instruction 16620
    //MUL
    t7 = t2.yyyy * t7;
    //Instruction 16621
    //MAD
    t6 = t6 * t2.xxxx + t7;
    //Instruction 16622
    //MAD
    t6 = t9 * t2.wwww + t6;
    //Instruction 16623
    //RSQ
    t7 = inversesqrt(t10);
    //Instruction 16624
    //MUL
    t6 = t6 * t7;
    //Instruction 16625
    //MAX
    t6 = max(t6, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 16626
    //MAD
    t7 = t10 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 16627
    //DIV
    t7 = vec4(1.0, 1.0, 1.0, 1.0) / t7;
    //Instruction 16628
    //MUL
    t6 = t6 * t7;
    //Instruction 16629
    //MUL
    t9.xyz = t6.yyy * unity_LightColor[1].xyz;
    //Instruction 16630
    //MAD
    t9.xyz = unity_LightColor[0].xyz * t6.xxx + t9.xyz;
    //Instruction 16631
    //MAD
    t9.xyz = unity_LightColor[2].xyz * t6.zzz + t9.xyz;
    //Instruction 16632
    //MAD
    t9.xyz = unity_LightColor[3].xyz * t6.www + t9.xyz;
    //Instruction 16633
    //ADD
    t9.xyz = t16_8.xyz + t9.xyz;
    //Instruction 16634
    //MUL
    t6 = t0.yyyy * _Object2World[1];
    //Instruction 16635
    //MAD
    t6 = _Object2World[0] * t0.xxxx + t6;
    //Instruction 16636
    //MAD
    t0 = _Object2World[2] * t0.zzzz + t6;
    //Instruction 16637
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 16638
    //MUL
    t6 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 16639
    //MAD
    t6 = unity_World2Shadow[0][0] * t0.xxxx + t6;
    //Instruction 16640
    //MAD
    t6 = unity_World2Shadow[0][2] * t0.zzzz + t6;
    //Instruction 16641
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t6;
    //Instruction 16642
    //MOV
    vs_TEXCOORD0.x = t4.z;
    //Instruction 16643
    //MOV
    vs_TEXCOORD0.y = t5.x;
    //Instruction 16644
    //MOV
    vs_TEXCOORD0.z = t2.x;
    //Instruction 16645
    //MOV
    vs_TEXCOORD0.w = t3.x;
    //Instruction 16646
    //MOV
    vs_TEXCOORD1.x = t4.x;
    //Instruction 16647
    //MOV
    vs_TEXCOORD1.y = t5.y;
    //Instruction 16648
    //MOV
    vs_TEXCOORD1.z = t2.y;
    //Instruction 16649
    //MOV
    vs_TEXCOORD1.w = t3.y;
    //Instruction 16650
    //MOV
    vs_TEXCOORD2.x = t4.y;
    //Instruction 16651
    //MOV
    vs_TEXCOORD2.y = t5.z;
    //Instruction 16652
    //MOV
    vs_TEXCOORD2.z = t2.w;
    //Instruction 16653
    //MOV
    vs_TEXCOORD2.w = t3.z;
    //Instruction 16654
    //MOV
    vs_TEXCOORD3.w = _Color.w;
    //Instruction 16655
    //MOV
    vs_TEXCOORD7 = t0;
    //Instruction 16656
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 16657
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 16658
    //MOV
    t0.xy = in_TEXCOORD2.zw;
    //Instruction 16659
    //MOV
    t0.z = in_TEXCOORD1.w;
    //Instruction 16660
    //MOV
    vs_TEXCOORD5.xyz = t0.xyz;
    //Instruction 16661
    //MOV
    vs_TEXCOORD6.xyz = t9.xyz;
    //Instruction 16662
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec4 vs_TEXCOORD7;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec4 t1;
mediump float t16_1;
lowp vec3 t10_1;
lowp vec3 t10_2;
mediump vec3 t16_3;
lowp vec3 t10_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump float t16_18;
void main()
{
    //Instruction 16388
    //MOV
    t16_0.x = vs_TEXCOORD5.z;
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 16389
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 16390
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD5.xy).xyz;
    //Instruction 16391
    //ADD
    t16_6.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 16392
    //MAD
    t16_0.xyz = t16_0.xxx * t16_6.xyz + t10_2.xyz;
    //Instruction 16393
    //MAX
    t16_18 = max(t16_0.z, t16_0.y);
    //Instruction 16394
    //MAX
    t16_18 = max(t16_18, t16_0.x);
    //Instruction 16395
    //ADD
    t16_3.xyz = (-t16_0.xyz) + _HueVariation.xyz;
    //Instruction 16396
    //MAD
    t16_0.xyz = vs_TEXCOORD4.zzz * t16_3.xyz + t16_0.xyz;
    //Instruction 16397
    //MAX
    t16_3.x = max(t16_0.z, t16_0.y);
    //Instruction 16398
    //MAX
    t16_3.x = max(t16_0.x, t16_3.x);
    //Instruction 16399
    //DIV
    t16_18 = t16_18 / t16_3.x;
    //Instruction 16400
    //MAD
    t16_1 = t16_18 * 0.500000 + 0.500000;
    //Instruction 16401
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_1);
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 16402
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD3.xyz;
    //Instruction 16403
    //SAMPLE_C_LZ
    vec3 txVec41 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
    t16_18 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec41, 0.0);
    //Instruction 16404
    //ADD
    t16_3.x = (-_LightShadowData.x) + 1.0;
    //Instruction 16405
    //MAD
    t16_18 = t16_18 * t16_3.x + _LightShadowData.x;
    //Instruction 16406
    //MUL
    t16_3.xyz = vec3(t16_18) * _LightColor0.xyz;
    //Instruction 16407
    //MUL
    t16_3.xyz = t16_0.xyz * t16_3.xyz;
    //Instruction 16408
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 16409
    //MAD
    t10_4.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 16410
    //DP3
    t1.x = dot(vs_TEXCOORD0.xyz, t10_4.xyz);
    //Instruction 16411
    //DP3
    t1.y = dot(vs_TEXCOORD1.xyz, t10_4.xyz);
    //Instruction 16412
    //DP3
    t1.z = dot(vs_TEXCOORD2.xyz, t10_4.xyz);
    //Instruction 16413
    //MOV
    t1.w = 1.0;
    //Instruction 16414
    //DP4
    t16_5.x = dot(unity_SHAr, t1);
    //Instruction 16415
    //DP4
    t16_5.y = dot(unity_SHAg, t1);
    //Instruction 16416
    //DP4
    t16_5.z = dot(unity_SHAb, t1);
    //Instruction 16417
    //DP3
    t16_18 = dot(t1.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 16418
    //MAX
    t16_18 = max(t16_18, 0.0);
    //Instruction 16419
    //ADD
    t16_5.xyz = t16_5.xyz + vs_TEXCOORD6.xyz;
    //Instruction 16420
    //MUL
    t16_0.xyz = t16_0.xyz * t16_5.xyz;
    //Instruction 16421
    //MAD
    t16_0.xyz = t16_3.xyz * vec3(t16_18) + t16_0.xyz;
    //Instruction 16422
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 16423
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 16424
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_3.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = tmpvar_1;
  tmpvar_10 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_11;
  highp vec3 vRotatedWindVector_12;
  highp vec3 FinalPosition_13;
  FinalPosition_13 = tmpvar_1.xyz;
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  mediump float tmpvar_15;
  tmpvar_15 = (_WindQuality * _WindEnabled);
  if ((tmpvar_15 > 0.0)) {
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedWindVector_12 = normalize((tmpvar_16 * _ST_WindVector.xyz));
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_11 = (normalize((tmpvar_17 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_13 = tmpvar_18;
  if ((tmpvar_15 == 5.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_18;
    highp float fOffset_20;
    fOffset_20 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_20 = 0.75;
    };
    highp vec4 tmpvar_21;
    tmpvar_21.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_21.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_20);
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    vPos_19 = (tmpvar_18 + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_22 * tmpvar_22)
       * 
        (3.0 - (2.0 * tmpvar_22))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_10 = tmpvar_2;
    FinalPosition_13 = vPos_19;
  };
  if ((tmpvar_15 >= 3.0)) {
    highp vec3 vPos_23;
    vPos_23 = FinalPosition_13;
    if ((tmpvar_15 == 5.0)) {
      highp vec3 vPos_24;
      vPos_24 = FinalPosition_13;
      highp float fTime_25;
      highp float fAdherenceScale_26;
      highp vec3 vWindVector_27;
      vWindVector_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_25 = (_ST_WindBranch.x + (tmpvar_14.x + tmpvar_14.y));
      highp vec4 vOscillations_28;
      highp float fOscillation_29;
      fOscillation_29 = 1.0;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.x = (fTime_25 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((fTime_25 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_25 + _glesMultiTexCoord0.w));
      tmpvar_32.w = ((fTime_25 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_28 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_28.y * vOscillations_28.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      fOscillation_29 = (((
        mix (mix (tmpvar_34, fTarget_31, fAmount_30), fTarget_31, fAmount_30)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_28.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_29 = (fOscillation_29 * (1.0 + (vOscillations_28.w * _ST_WindBranchWhip.x)));
      vPos_24 = (FinalPosition_13 + ((vWindVector_27 * fOscillation_29) * _ST_WindBranch.y));
      highp vec4 tmpvar_35;
      tmpvar_35.zw = vec2(0.0, 0.0);
      tmpvar_35.x = ((fTime_25 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_35.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_36;
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      tmpvar_36 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      fAdherenceScale_26 = (1.0 - ((tmpvar_36.x * tmpvar_36.y) * (
        (tmpvar_36.x * tmpvar_36.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_26 = (fAdherenceScale_26 + ((vOscillations_28.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_24 = (vPos_24 + ((
        ((vRotatedBranchAnchor_11 - vPos_24) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_26) * _glesMultiTexCoord0.z));
      vPos_23 = vPos_24;
    } else {
      highp vec3 vPos_38;
      vPos_38 = vPos_23;
      highp float fTime_39;
      highp vec3 vWindVector_40;
      vWindVector_40 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_39 = (_ST_WindBranch.x + (tmpvar_14.x + tmpvar_14.y));
      highp vec4 vOscillations_41;
      highp float fOscillation_42;
      fOscillation_42 = 1.0;
      highp float fAmount_43;
      highp float fTarget_44;
      highp vec4 tmpvar_45;
      tmpvar_45.w = 0.0;
      tmpvar_45.x = (fTime_39 + _glesMultiTexCoord0.w);
      tmpvar_45.y = ((fTime_39 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_45.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_39 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      vOscillations_41 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = (vOscillations_41.y * vOscillations_41.z);
      fTarget_44 = 1.0;
      fAmount_43 = tmpvar_47;
      if ((tmpvar_47 < 0.0)) {
        fTarget_44 = -1.0;
        fAmount_43 = -(tmpvar_47);
      };
      fOscillation_42 = (((
        mix (mix (tmpvar_47, fTarget_44, fAmount_43), fTarget_44, fAmount_43)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_41.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_38 = (vPos_23 + ((vWindVector_40 * fOscillation_42) * _ST_WindBranch.y));
      vPos_23 = vPos_38;
    };
    FinalPosition_13 = vPos_23;
  };
  if ((tmpvar_15 > 0.0)) {
    highp vec3 vPos_48;
    vPos_48 = FinalPosition_13;
    highp float fMoveAmount_49;
    highp float fAdjust_50;
    highp float fLength_51;
    fLength_51 = sqrt(dot (FinalPosition_13, FinalPosition_13));
    highp float tmpvar_52;
    tmpvar_52 = (max ((FinalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_50 = tmpvar_52;
    if ((tmpvar_52 != 0.0)) {
      fAdjust_50 = pow (tmpvar_52, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_53;
    tmpvar_53.zw = vec2(0.0, 0.0);
    tmpvar_53.x = (tmpvar_14.x + _ST_WindGlobal.x);
    tmpvar_53.y = (tmpvar_14.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_54;
    highp vec4 tmpvar_55;
    tmpvar_55 = abs(((
      fract((tmpvar_53 + 0.5))
     * 2.0) - 1.0));
    tmpvar_54 = (((
      (tmpvar_55 * tmpvar_55)
     * 
      (3.0 - (2.0 * tmpvar_55))
    ) - 0.5) * 2.0);
    fMoveAmount_49 = ((_ST_WindGlobal.y * (tmpvar_54.x + 
      (tmpvar_54.y * tmpvar_54.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_49 = (fMoveAmount_49 * fAdjust_50);
    vPos_48.xz = (FinalPosition_13.xz + (vRotatedWindVector_12.xz * fMoveAmount_49));
    vPos_48 = (normalize(vPos_48) * fLength_51);
    FinalPosition_13 = vPos_48;
  };
  tmpvar_9.xyz = FinalPosition_13;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_56;
  v_56.x = _World2Object[0].x;
  v_56.y = _World2Object[1].x;
  v_56.z = _World2Object[2].x;
  v_56.w = _World2Object[3].x;
  highp vec4 v_57;
  v_57.x = _World2Object[0].y;
  v_57.y = _World2Object[1].y;
  v_57.z = _World2Object[2].y;
  v_57.w = _World2Object[3].y;
  highp vec4 v_58;
  v_58.x = _World2Object[0].z;
  v_58.y = _World2Object[1].z;
  v_58.z = _World2Object[2].z;
  v_58.w = _World2Object[3].z;
  highp vec3 tmpvar_59;
  tmpvar_59 = normalize(((
    (v_56.xyz * tmpvar_10.x)
   + 
    (v_57.xyz * tmpvar_10.y)
  ) + (v_58.xyz * tmpvar_10.z)));
  worldNormal_4 = tmpvar_59;
  tmpvar_5 = worldNormal_4;
  lowp vec4 tmpvar_60;
  tmpvar_60.w = 1.0;
  tmpvar_60.xyz = worldNormal_4;
  mediump vec4 normal_61;
  normal_61 = tmpvar_60;
  mediump vec3 x2_62;
  mediump vec4 tmpvar_63;
  tmpvar_63 = (normal_61.xyzz * normal_61.yzzx);
  x2_62.x = dot (unity_SHBr, tmpvar_63);
  x2_62.y = dot (unity_SHBg, tmpvar_63);
  x2_62.z = dot (unity_SHBb, tmpvar_63);
  gl_Position = (glstate_matrix_mvp * tmpvar_9);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_9).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = (x2_62 + (unity_SHC.xyz * (
    (normal_61.x * normal_61.x)
   - 
    (normal_61.y * normal_61.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_9 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_13;
  normalWorld_13 = tmpvar_4;
  mediump vec3 tmpvar_14;
  mediump vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = normalWorld_13;
  mediump vec3 x1_16;
  x1_16.x = dot (unity_SHAr, tmpvar_15);
  x1_16.y = dot (unity_SHAg, tmpvar_15);
  x1_16.z = dot (unity_SHAb, tmpvar_15);
  tmpvar_14 = (xlv_TEXCOORD4 + x1_16);
  lowp vec4 c_17;
  lowp vec4 c_18;
  lowp float diff_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_19 = tmpvar_20;
  c_18.xyz = ((tmpvar_8 * tmpvar_1) * diff_19);
  c_18.w = tmpvar_9;
  c_17.w = c_18.w;
  c_17.xyz = (c_18.xyz + (tmpvar_8 * tmpvar_14));
  c_3.xyz = c_17.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
mediump vec3 t16_6;
highp vec3 t8;
highp float t10;
highp float t15;
highp vec2 t17;
highp vec2 t19;
highp float t22;
bool tb22;
highp float t23;
bool tb23;
highp float t24;
highp float t25;
mediump float t16_27;
void main()
{
    //Instruction 15456
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 15457
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 15458
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 15459
    //MUL
    t8.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 15460
    //MAD
    t8.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t8.xyz;
    //Instruction 15461
    //MAD
    t8.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t8.xyz;
    //Instruction 15462
    //DP3
    t15 = dot(t8.xyz, t8.xyz);
    //Instruction 15463
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 15464
    //MUL
    t8.xy = vec2(t15) * t8.xz;
    //Instruction 15465
    //AND
    t8.xy = mix(vec2(0.0, 0.0), t8.xy, bvec2(tb1));
    //Instruction 15466
    //ADD
    t2.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 15467
    //MAD
    t2.xyz = unity_LODFade.xxx * t2.xyz + in_POSITION0.xyz;
    //Instruction 15468
    //EQ
    tb22 = t16_0.x==5.000000;
    //Instruction 15469
    //LT
    tb23 = in_TEXCOORD0.x<0.500000;
    //Instruction 15470
    //AND
    t23 = tb23 ? 0.750000 : float(0.0);
    //Instruction 15471
    //ADD
    t3.x = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 15472
    //MAD
    t23 = t3.x * _ST_WindFrondRipple.z + t23;
    //Instruction 15473
    //ADD
    t23 = t23 + 0.500000;
    //Instruction 15474
    //FRC
    t23 = fract(t23);
    //Instruction 15475
    //MAD
    t23 = t23 * 2.000000 + -1.0;
    //Instruction 15476
    //MUL
    t3.x = abs(t23) * abs(t23);
    //Instruction 15477
    //MAD
    t23 = -abs(t23) * 2.000000 + 3.000000;
    //Instruction 15478
    //MAD
    t23 = t3.x * t23 + -0.500000;
    //Instruction 15479
    //MUL
    t23 = t23 * in_TEXCOORD2.y;
    //Instruction 15480
    //DP2
    t23 = dot(_ST_WindFrondRipple.yy, vec2(t23));
    //Instruction 15481
    //MAD
    t3.xyz = vec3(t23) * in_NORMAL0.xyz + t2.xyz;
    //Instruction 15482
    //MOVC
    t2.xyz = (bool(tb22)) ? t3.xyz : t2.xyz;
    //Instruction 15483
    //GE
    tb23 = t16_0.x>=3.000000;
    //Instruction 15484
    //IF
    if(tb23){
        //Instruction 15485
        //IF
        if(tb22){
            //Instruction 15486
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 15487
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 15488
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 15489
            //DP3
            t22 = dot(t3.xyz, t3.xyz);
            //Instruction 15490
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 15491
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 15492
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 15493
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 15494
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 15495
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 15496
            //ADD
            t22 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 15497
            //ADD
            t22 = t22 + _ST_WindBranch.x;
            //Instruction 15498
            //ADD
            t0.x = t22 + in_TEXCOORD0.w;
            //Instruction 15499
            //MAD
            t0.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 15500
            //MUL
            t23 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 15501
            //MUL
            t0.z = t23 * 0.500000;
            //Instruction 15502
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 15503
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 15504
            //FRC
            t0 = fract(t0);
            //Instruction 15505
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 15506
            //MUL
            t5 = abs(t0) * abs(t0);
            //Instruction 15507
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 15508
            //MAD
            t0 = t5 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 15509
            //ADD
            t0 = t0 + t0;
            //Instruction 15510
            //MUL
            t5.w = t0.z * t0.y;
            //Instruction 15511
            //LT
            tb23 = t5.w<0.0;
            //Instruction 15512
            //MOV
            t5.y = (-t5.w);
            //Instruction 15513
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 15514
            //MOVC
            t5.xy = (bool(tb23)) ? t5.xy : t5.zw;
            //Instruction 15515
            //MAD
            t23 = (-t0.y) * t0.z + t5.x;
            //Instruction 15516
            //MAD
            t23 = t5.y * t23 + t5.w;
            //Instruction 15517
            //ADD
            t24 = (-t23) + t5.x;
            //Instruction 15518
            //MAD
            t23 = t5.y * t24 + t23;
            //Instruction 15519
            //MUL
            t23 = t23 * _ST_WindBranchTwitch.x;
            //Instruction 15520
            //ADD
            t24 = (-_ST_WindVector.w) + 1.0;
            //Instruction 15521
            //ADD
            t25 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 15522
            //MUL
            t25 = t0.x * t25;
            //Instruction 15523
            //MAD
            t23 = t23 * t24 + t25;
            //Instruction 15524
            //MAD
            t24 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 15525
            //MUL
            t23 = t23 * t24;
            //Instruction 15526
            //MUL
            t4.xyz = vec3(t23) * t4.xyz;
            //Instruction 15527
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 15528
            //MAD
            t5.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 15529
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 15530
            //MAD
            t5.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 15531
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 15532
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 15533
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 15534
            //MUL
            t19.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 15535
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 15536
            //MAD
            t5.xy = t19.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 15537
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 15538
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 15539
            //MUL
            t22 = t5.x * t5.y;
            //Instruction 15540
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 15541
            //MUL
            t23 = t0.w * _ST_WindVector.w;
            //Instruction 15542
            //MAD
            t22 = t23 * _ST_WindBranchWhip.x + t22;
            //Instruction 15543
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 15544
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 15545
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 15546
            //MAD
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 15547
        //ELSE
        } else {
            //Instruction 15548
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 15549
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 15550
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 15551
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 15552
            //ADD
            t22 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 15553
            //ADD
            t22 = t22 + _ST_WindBranch.x;
            //Instruction 15554
            //ADD
            t4.x = t22 + in_TEXCOORD0.w;
            //Instruction 15555
            //MAD
            t4.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 15556
            //MUL
            t22 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 15557
            //MUL
            t4.z = t22 * 0.500000;
            //Instruction 15558
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 15559
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 15560
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 15561
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 15562
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 15563
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 15564
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 15565
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 15566
            //LT
            tb22 = t0.w<0.0;
            //Instruction 15567
            //MOV
            t0.y = (-t0.w);
            //Instruction 15568
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 15569
            //MOVC
            t5.xy = (bool(tb22)) ? t0.xy : t0.zw;
            //Instruction 15570
            //MAD
            t22 = (-t4.y) * t4.z + t5.x;
            //Instruction 15571
            //MAD
            t22 = t5.y * t22 + t0.w;
            //Instruction 15572
            //ADD
            t23 = (-t22) + t5.x;
            //Instruction 15573
            //MAD
            t22 = t5.y * t23 + t22;
            //Instruction 15574
            //MUL
            t22 = t22 * _ST_WindBranchTwitch.x;
            //Instruction 15575
            //ADD
            t23 = (-_ST_WindVector.w) + 1.0;
            //Instruction 15576
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 15577
            //MUL
            t24 = t24 * t4.x;
            //Instruction 15578
            //MAD
            t22 = t22 * t23 + t24;
            //Instruction 15579
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 15580
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 15581
        //ENDIF
        }
        //Instruction 15582
    //ENDIF
    }
    //Instruction 15583
    //DP3
    t22 = dot(t2.xyz, t2.xyz);
    //Instruction 15584
    //SQRT
    t22 = sqrt(t22);
    //Instruction 15585
    //DIV
    t23 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 15586
    //MAD
    t23 = (-t23) * 0.250000 + t2.y;
    //Instruction 15587
    //MAX
    t23 = max(t23, 0.0);
    //Instruction 15588
    //MUL
    t23 = t23 * _ST_WindGlobal.z;
    //Instruction 15589
    //NE
    tb3 = t23!=0.0;
    //Instruction 15590
    //LOG
    t10 = log2(t23);
    //Instruction 15591
    //MUL
    t10 = t10 * _ST_WindGlobal.w;
    //Instruction 15592
    //EXP
    t10 = exp2(t10);
    //Instruction 15593
    //MOVC
    t23 = (tb3) ? t10 : t23;
    //Instruction 15594
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 15595
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 15596
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 15597
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 15598
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 15599
    //MUL
    t17.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 15600
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 15601
    //MAD
    t3.xy = t17.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 15602
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 15603
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 15604
    //DIV
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 15605
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t10;
    //Instruction 15606
    //MUL
    t23 = t23 * t3.x;
    //Instruction 15607
    //MAD
    t3.xz = t8.xy * vec2(t23) + t2.xz;
    //Instruction 15608
    //MOV
    t3.y = t2.y;
    //Instruction 15609
    //DP3
    t8.x = dot(t3.xyz, t3.xyz);
    //Instruction 15610
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 15611
    //MUL
    t3.xyz = t8.xxx * t3.xyz;
    //Instruction 15612
    //MUL
    t8.xyz = vec3(t22) * t3.xyz;
    //Instruction 15613
    //MOVC
    t1.xyz = (bool(tb1)) ? t8.xyz : t2.xyz;
    //Instruction 15614
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 15615
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 15616
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 15617
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 15618
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 15619
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 15620
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 15621
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 15622
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 15623
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 15624
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 15625
    //MOV
    t2.x = _World2Object[0].y;
    //Instruction 15626
    //MOV
    t2.y = _World2Object[1].y;
    //Instruction 15627
    //MOV
    t2.z = _World2Object[2].y;
    //Instruction 15628
    //MUL
    t2.xyz = t2.xyz * in_NORMAL0.yyy;
    //Instruction 15629
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t2.xyz;
    //Instruction 15630
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 15631
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 15632
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 15633
    //MAD
    t1.xyz = t2.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 15634
    //DP3
    t22 = dot(t1.xyz, t1.xyz);
    //Instruction 15635
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 15636
    //MUL
    t1.xyz = vec3(t22) * t1.xyz;
    //Instruction 15637
    //MUL
    t16_0 = t1.yzzx * t1.xyzz;
    //Instruction 15638
    //DP4
    t16_6.x = dot(unity_SHBr, t16_0);
    //Instruction 15639
    //DP4
    t16_6.y = dot(unity_SHBg, t16_0);
    //Instruction 15640
    //DP4
    t16_6.z = dot(unity_SHBb, t16_0);
    //Instruction 15641
    //MUL
    t16_27 = t1.y * t1.y;
    //Instruction 15642
    //MAD
    t16_27 = t1.x * t1.x + (-t16_27);
    //Instruction 15643
    //MAD
    vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(t16_27) + t16_6.xyz;
    //Instruction 15644
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 15645
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 15646
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 15647
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 15648
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump float t16_14;
void main()
{
    //Instruction 15437
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 15438
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 15439
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 15440
    //LT
    tb0 = t10_1<0.0;
    //Instruction 15441
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 15442
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 15443
    //MOV
    t16_0.w = 1.0;
    //Instruction 15444
    //DP4
    t16_3.x = dot(unity_SHAr, t16_0);
    //Instruction 15445
    //DP4
    t16_3.y = dot(unity_SHAg, t16_0);
    //Instruction 15446
    //DP4
    t16_3.z = dot(unity_SHAb, t16_0);
    //Instruction 15447
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD4.xyz;
    //Instruction 15448
    //MUL
    t16_3.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 15449
    //MUL
    t16_2.xyz = t16_2.xyz * _LightColor0.xyz;
    //Instruction 15450
    //DP3
    t16_14 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 15451
    //MAX
    t16_14 = max(t16_14, 0.0);
    //Instruction 15452
    //MAD
    t16_2.xyz = t16_2.xyz * vec3(t16_14) + t16_3.xyz;
    //Instruction 15453
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 15454
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 15455
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_1;
  tmpvar_11 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  FinalPosition_14 = tmpvar_1.xyz;
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_14 = tmpvar_19;
  if ((tmpvar_16 == 5.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_19;
    highp float fOffset_21;
    fOffset_21 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_21 = 0.75;
    };
    highp vec4 tmpvar_22;
    tmpvar_22.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_22.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_21);
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    vPos_20 = (tmpvar_19 + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_23 * tmpvar_23)
       * 
        (3.0 - (2.0 * tmpvar_23))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_11 = tmpvar_2;
    FinalPosition_14 = vPos_20;
  };
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_24;
    vPos_24 = FinalPosition_14;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_25;
      vPos_25 = FinalPosition_14;
      highp float fTime_26;
      highp float fAdherenceScale_27;
      highp vec3 vWindVector_28;
      vWindVector_28 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_26 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.x = (fTime_26 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((fTime_26 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_26 + _glesMultiTexCoord0.w));
      tmpvar_33.w = ((fTime_26 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_29.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_30 = (fOscillation_30 * (1.0 + (vOscillations_29.w * _ST_WindBranchWhip.x)));
      vPos_25 = (FinalPosition_14 + ((vWindVector_28 * fOscillation_30) * _ST_WindBranch.y));
      highp vec4 tmpvar_36;
      tmpvar_36.zw = vec2(0.0, 0.0);
      tmpvar_36.x = ((fTime_26 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_36.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_37;
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      tmpvar_37 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      fAdherenceScale_27 = (1.0 - ((tmpvar_37.x * tmpvar_37.y) * (
        (tmpvar_37.x * tmpvar_37.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_27 = (fAdherenceScale_27 + ((vOscillations_29.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_25 = (vPos_25 + ((
        ((vRotatedBranchAnchor_12 - vPos_25) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_27) * _glesMultiTexCoord0.z));
      vPos_24 = vPos_25;
    } else {
      highp vec3 vPos_39;
      vPos_39 = vPos_24;
      highp float fTime_40;
      highp vec3 vWindVector_41;
      vWindVector_41 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_40 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_42;
      highp float fOscillation_43;
      fOscillation_43 = 1.0;
      highp float fAmount_44;
      highp float fTarget_45;
      highp vec4 tmpvar_46;
      tmpvar_46.w = 0.0;
      tmpvar_46.x = (fTime_40 + _glesMultiTexCoord0.w);
      tmpvar_46.y = ((fTime_40 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_46.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_40 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      vOscillations_42 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = (vOscillations_42.y * vOscillations_42.z);
      fTarget_45 = 1.0;
      fAmount_44 = tmpvar_48;
      if ((tmpvar_48 < 0.0)) {
        fTarget_45 = -1.0;
        fAmount_44 = -(tmpvar_48);
      };
      fOscillation_43 = (((
        mix (mix (tmpvar_48, fTarget_45, fAmount_44), fTarget_45, fAmount_44)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_42.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_39 = (vPos_24 + ((vWindVector_41 * fOscillation_43) * _ST_WindBranch.y));
      vPos_24 = vPos_39;
    };
    FinalPosition_14 = vPos_24;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_49;
    vPos_49 = FinalPosition_14;
    highp float fMoveAmount_50;
    highp float fAdjust_51;
    highp float fLength_52;
    fLength_52 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_53;
    tmpvar_53 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_51 = tmpvar_53;
    if ((tmpvar_53 != 0.0)) {
      fAdjust_51 = pow (tmpvar_53, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_54;
    tmpvar_54.zw = vec2(0.0, 0.0);
    tmpvar_54.x = (tmpvar_15.x + _ST_WindGlobal.x);
    tmpvar_54.y = (tmpvar_15.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_55;
    highp vec4 tmpvar_56;
    tmpvar_56 = abs(((
      fract((tmpvar_54 + 0.5))
     * 2.0) - 1.0));
    tmpvar_55 = (((
      (tmpvar_56 * tmpvar_56)
     * 
      (3.0 - (2.0 * tmpvar_56))
    ) - 0.5) * 2.0);
    fMoveAmount_50 = ((_ST_WindGlobal.y * (tmpvar_55.x + 
      (tmpvar_55.y * tmpvar_55.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_50 = (fMoveAmount_50 * fAdjust_51);
    vPos_49.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * fMoveAmount_50));
    vPos_49 = (normalize(vPos_49) * fLength_52);
    FinalPosition_14 = vPos_49;
  };
  tmpvar_10.xyz = FinalPosition_14;
  tmpvar_6 = tmpvar_8;
  highp vec4 v_57;
  v_57.x = _World2Object[0].x;
  v_57.y = _World2Object[1].x;
  v_57.z = _World2Object[2].x;
  v_57.w = _World2Object[3].x;
  highp vec4 v_58;
  v_58.x = _World2Object[0].y;
  v_58.y = _World2Object[1].y;
  v_58.z = _World2Object[2].y;
  v_58.w = _World2Object[3].y;
  highp vec4 v_59;
  v_59.x = _World2Object[0].z;
  v_59.y = _World2Object[1].z;
  v_59.z = _World2Object[2].z;
  v_59.w = _World2Object[3].z;
  highp vec3 tmpvar_60;
  tmpvar_60 = normalize(((
    (v_57.xyz * tmpvar_11.x)
   + 
    (v_58.xyz * tmpvar_11.y)
  ) + (v_59.xyz * tmpvar_11.z)));
  worldNormal_4 = tmpvar_60;
  tmpvar_5 = worldNormal_4;
  lowp vec4 tmpvar_61;
  tmpvar_61.w = 1.0;
  tmpvar_61.xyz = worldNormal_4;
  mediump vec4 normal_62;
  normal_62 = tmpvar_61;
  mediump vec3 x2_63;
  mediump vec4 tmpvar_64;
  tmpvar_64 = (normal_62.xyzz * normal_62.yzzx);
  x2_63.x = dot (unity_SHBr, tmpvar_64);
  x2_63.y = dot (unity_SHBg, tmpvar_64);
  x2_63.z = dot (unity_SHBb, tmpvar_64);
  tmpvar_7 = (unity_World2Shadow[0] * (_Object2World * tmpvar_10));
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = (x2_63 + (unity_SHC.xyz * (
    (normal_62.x * normal_62.x)
   - 
    (normal_62.y * normal_62.y)
  )));
  xlv_TEXCOORD5 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_10 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp float tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD5).x > 
    (xlv_TEXCOORD5.z / xlv_TEXCOORD5.w)
  )), _LightShadowData.x);
  tmpvar_14 = tmpvar_15;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_14;
  mediump vec3 normalWorld_16;
  normalWorld_16 = tmpvar_5;
  mediump vec3 tmpvar_17;
  mediump vec3 tmpvar_18;
  mediump vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = normalWorld_16;
  mediump vec3 x1_20;
  x1_20.x = dot (unity_SHAr, tmpvar_19);
  x1_20.y = dot (unity_SHAg, tmpvar_19);
  x1_20.z = dot (unity_SHAb, tmpvar_19);
  tmpvar_18 = (xlv_TEXCOORD4 + x1_20);
  tmpvar_17 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_17;
  lowp vec4 c_21;
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_23 = tmpvar_24;
  c_22.xyz = ((tmpvar_9 * tmpvar_17) * diff_23);
  c_22.w = tmpvar_10;
  c_21.w = c_22.w;
  c_21.xyz = (c_22.xyz + (tmpvar_9 * tmpvar_18));
  c_4.xyz = c_21.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_1;
  tmpvar_11 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  FinalPosition_14 = tmpvar_1.xyz;
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_14 = tmpvar_19;
  if ((tmpvar_16 == 5.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_19;
    highp float fOffset_21;
    fOffset_21 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_21 = 0.75;
    };
    highp vec4 tmpvar_22;
    tmpvar_22.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_22.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_21);
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    vPos_20 = (tmpvar_19 + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_23 * tmpvar_23)
       * 
        (3.0 - (2.0 * tmpvar_23))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_11 = tmpvar_2;
    FinalPosition_14 = vPos_20;
  };
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_24;
    vPos_24 = FinalPosition_14;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_25;
      vPos_25 = FinalPosition_14;
      highp float fTime_26;
      highp float fAdherenceScale_27;
      highp vec3 vWindVector_28;
      vWindVector_28 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_26 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.x = (fTime_26 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((fTime_26 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_26 + _glesMultiTexCoord0.w));
      tmpvar_33.w = ((fTime_26 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_29.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_30 = (fOscillation_30 * (1.0 + (vOscillations_29.w * _ST_WindBranchWhip.x)));
      vPos_25 = (FinalPosition_14 + ((vWindVector_28 * fOscillation_30) * _ST_WindBranch.y));
      highp vec4 tmpvar_36;
      tmpvar_36.zw = vec2(0.0, 0.0);
      tmpvar_36.x = ((fTime_26 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_36.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_37;
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      tmpvar_37 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      fAdherenceScale_27 = (1.0 - ((tmpvar_37.x * tmpvar_37.y) * (
        (tmpvar_37.x * tmpvar_37.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_27 = (fAdherenceScale_27 + ((vOscillations_29.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_25 = (vPos_25 + ((
        ((vRotatedBranchAnchor_12 - vPos_25) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_27) * _glesMultiTexCoord0.z));
      vPos_24 = vPos_25;
    } else {
      highp vec3 vPos_39;
      vPos_39 = vPos_24;
      highp float fTime_40;
      highp vec3 vWindVector_41;
      vWindVector_41 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_40 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_42;
      highp float fOscillation_43;
      fOscillation_43 = 1.0;
      highp float fAmount_44;
      highp float fTarget_45;
      highp vec4 tmpvar_46;
      tmpvar_46.w = 0.0;
      tmpvar_46.x = (fTime_40 + _glesMultiTexCoord0.w);
      tmpvar_46.y = ((fTime_40 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_46.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_40 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      vOscillations_42 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = (vOscillations_42.y * vOscillations_42.z);
      fTarget_45 = 1.0;
      fAmount_44 = tmpvar_48;
      if ((tmpvar_48 < 0.0)) {
        fTarget_45 = -1.0;
        fAmount_44 = -(tmpvar_48);
      };
      fOscillation_43 = (((
        mix (mix (tmpvar_48, fTarget_45, fAmount_44), fTarget_45, fAmount_44)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_42.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_39 = (vPos_24 + ((vWindVector_41 * fOscillation_43) * _ST_WindBranch.y));
      vPos_24 = vPos_39;
    };
    FinalPosition_14 = vPos_24;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_49;
    vPos_49 = FinalPosition_14;
    highp float fMoveAmount_50;
    highp float fAdjust_51;
    highp float fLength_52;
    fLength_52 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_53;
    tmpvar_53 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_51 = tmpvar_53;
    if ((tmpvar_53 != 0.0)) {
      fAdjust_51 = pow (tmpvar_53, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_54;
    tmpvar_54.zw = vec2(0.0, 0.0);
    tmpvar_54.x = (tmpvar_15.x + _ST_WindGlobal.x);
    tmpvar_54.y = (tmpvar_15.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_55;
    highp vec4 tmpvar_56;
    tmpvar_56 = abs(((
      fract((tmpvar_54 + 0.5))
     * 2.0) - 1.0));
    tmpvar_55 = (((
      (tmpvar_56 * tmpvar_56)
     * 
      (3.0 - (2.0 * tmpvar_56))
    ) - 0.5) * 2.0);
    fMoveAmount_50 = ((_ST_WindGlobal.y * (tmpvar_55.x + 
      (tmpvar_55.y * tmpvar_55.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_50 = (fMoveAmount_50 * fAdjust_51);
    vPos_49.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * fMoveAmount_50));
    vPos_49 = (normalize(vPos_49) * fLength_52);
    FinalPosition_14 = vPos_49;
  };
  tmpvar_10.xyz = FinalPosition_14;
  tmpvar_6 = tmpvar_8;
  highp vec3 tmpvar_57;
  tmpvar_57 = (_Object2World * tmpvar_10).xyz;
  highp vec4 v_58;
  v_58.x = _World2Object[0].x;
  v_58.y = _World2Object[1].x;
  v_58.z = _World2Object[2].x;
  v_58.w = _World2Object[3].x;
  highp vec4 v_59;
  v_59.x = _World2Object[0].y;
  v_59.y = _World2Object[1].y;
  v_59.z = _World2Object[2].y;
  v_59.w = _World2Object[3].y;
  highp vec4 v_60;
  v_60.x = _World2Object[0].z;
  v_60.y = _World2Object[1].z;
  v_60.z = _World2Object[2].z;
  v_60.w = _World2Object[3].z;
  highp vec3 tmpvar_61;
  tmpvar_61 = normalize(((
    (v_58.xyz * tmpvar_11.x)
   + 
    (v_59.xyz * tmpvar_11.y)
  ) + (v_60.xyz * tmpvar_11.z)));
  worldNormal_4 = tmpvar_61;
  tmpvar_5 = worldNormal_4;
  lowp vec4 tmpvar_62;
  tmpvar_62.w = 1.0;
  tmpvar_62.xyz = worldNormal_4;
  mediump vec4 normal_63;
  normal_63 = tmpvar_62;
  mediump vec3 x2_64;
  mediump vec4 tmpvar_65;
  tmpvar_65 = (normal_63.xyzz * normal_63.yzzx);
  x2_64.x = dot (unity_SHBr, tmpvar_65);
  x2_64.y = dot (unity_SHBg, tmpvar_65);
  x2_64.z = dot (unity_SHBb, tmpvar_65);
  highp vec3 lightColor0_66;
  lightColor0_66 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_67;
  lightColor1_67 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_68;
  lightColor2_68 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_69;
  lightColor3_69 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_70;
  lightAttenSq_70 = unity_4LightAtten0;
  highp vec3 normal_71;
  normal_71 = worldNormal_4;
  highp vec3 col_72;
  highp vec4 ndotl_73;
  highp vec4 lengthSq_74;
  highp vec4 tmpvar_75;
  tmpvar_75 = (unity_4LightPosX0 - tmpvar_57.x);
  highp vec4 tmpvar_76;
  tmpvar_76 = (unity_4LightPosY0 - tmpvar_57.y);
  highp vec4 tmpvar_77;
  tmpvar_77 = (unity_4LightPosZ0 - tmpvar_57.z);
  lengthSq_74 = (tmpvar_75 * tmpvar_75);
  lengthSq_74 = (lengthSq_74 + (tmpvar_76 * tmpvar_76));
  lengthSq_74 = (lengthSq_74 + (tmpvar_77 * tmpvar_77));
  ndotl_73 = (tmpvar_75 * normal_71.x);
  ndotl_73 = (ndotl_73 + (tmpvar_76 * normal_71.y));
  ndotl_73 = (ndotl_73 + (tmpvar_77 * normal_71.z));
  highp vec4 tmpvar_78;
  tmpvar_78 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_73 * inversesqrt(lengthSq_74)));
  ndotl_73 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = (tmpvar_78 * (1.0/((1.0 + 
    (lengthSq_74 * lightAttenSq_70)
  ))));
  col_72 = (lightColor0_66 * tmpvar_79.x);
  col_72 = (col_72 + (lightColor1_67 * tmpvar_79.y));
  col_72 = (col_72 + (lightColor2_68 * tmpvar_79.z));
  col_72 = (col_72 + (lightColor3_69 * tmpvar_79.w));
  tmpvar_7 = ((x2_64 + (unity_SHC.xyz * 
    ((normal_63.x * normal_63.x) - (normal_63.y * normal_63.y))
  )) + col_72);
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_57;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_9 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_13;
  normalWorld_13 = tmpvar_4;
  mediump vec3 tmpvar_14;
  mediump vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = normalWorld_13;
  mediump vec3 x1_16;
  x1_16.x = dot (unity_SHAr, tmpvar_15);
  x1_16.y = dot (unity_SHAg, tmpvar_15);
  x1_16.z = dot (unity_SHAb, tmpvar_15);
  tmpvar_14 = (xlv_TEXCOORD4 + x1_16);
  lowp vec4 c_17;
  lowp vec4 c_18;
  lowp float diff_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_19 = tmpvar_20;
  c_18.xyz = ((tmpvar_8 * tmpvar_1) * diff_19);
  c_18.w = tmpvar_9;
  c_17.w = c_18.w;
  c_17.xyz = (c_18.xyz + (tmpvar_8 * tmpvar_14));
  c_3.xyz = c_17.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec4 t3;
bool tb3;
highp vec4 t4;
highp vec4 t5;
mediump vec3 t16_6;
highp vec3 t8;
highp float t10;
highp float t15;
highp vec2 t17;
highp vec2 t19;
highp float t22;
bool tb22;
highp float t23;
bool tb23;
highp float t24;
highp float t25;
mediump float t16_27;
void main()
{
    //Instruction 15668
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 15669
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 15670
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 15671
    //MUL
    t8.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 15672
    //MAD
    t8.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t8.xyz;
    //Instruction 15673
    //MAD
    t8.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t8.xyz;
    //Instruction 15674
    //DP3
    t15 = dot(t8.xyz, t8.xyz);
    //Instruction 15675
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 15676
    //MUL
    t8.xy = vec2(t15) * t8.xz;
    //Instruction 15677
    //AND
    t8.xy = mix(vec2(0.0, 0.0), t8.xy, bvec2(tb1));
    //Instruction 15678
    //ADD
    t2.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 15679
    //MAD
    t2.xyz = unity_LODFade.xxx * t2.xyz + in_POSITION0.xyz;
    //Instruction 15680
    //EQ
    tb22 = t16_0.x==5.000000;
    //Instruction 15681
    //LT
    tb23 = in_TEXCOORD0.x<0.500000;
    //Instruction 15682
    //AND
    t23 = tb23 ? 0.750000 : float(0.0);
    //Instruction 15683
    //ADD
    t3.x = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 15684
    //MAD
    t23 = t3.x * _ST_WindFrondRipple.z + t23;
    //Instruction 15685
    //ADD
    t23 = t23 + 0.500000;
    //Instruction 15686
    //FRC
    t23 = fract(t23);
    //Instruction 15687
    //MAD
    t23 = t23 * 2.000000 + -1.0;
    //Instruction 15688
    //MUL
    t3.x = abs(t23) * abs(t23);
    //Instruction 15689
    //MAD
    t23 = -abs(t23) * 2.000000 + 3.000000;
    //Instruction 15690
    //MAD
    t23 = t3.x * t23 + -0.500000;
    //Instruction 15691
    //MUL
    t23 = t23 * in_TEXCOORD2.y;
    //Instruction 15692
    //DP2
    t23 = dot(_ST_WindFrondRipple.yy, vec2(t23));
    //Instruction 15693
    //MAD
    t3.xyz = vec3(t23) * in_NORMAL0.xyz + t2.xyz;
    //Instruction 15694
    //MOVC
    t2.xyz = (bool(tb22)) ? t3.xyz : t2.xyz;
    //Instruction 15695
    //GE
    tb23 = t16_0.x>=3.000000;
    //Instruction 15696
    //IF
    if(tb23){
        //Instruction 15697
        //IF
        if(tb22){
            //Instruction 15698
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 15699
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 15700
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 15701
            //DP3
            t22 = dot(t3.xyz, t3.xyz);
            //Instruction 15702
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 15703
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 15704
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 15705
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 15706
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 15707
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 15708
            //ADD
            t22 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 15709
            //ADD
            t22 = t22 + _ST_WindBranch.x;
            //Instruction 15710
            //ADD
            t0.x = t22 + in_TEXCOORD0.w;
            //Instruction 15711
            //MAD
            t0.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 15712
            //MUL
            t23 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 15713
            //MUL
            t0.z = t23 * 0.500000;
            //Instruction 15714
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 15715
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 15716
            //FRC
            t0 = fract(t0);
            //Instruction 15717
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 15718
            //MUL
            t5 = abs(t0) * abs(t0);
            //Instruction 15719
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 15720
            //MAD
            t0 = t5 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 15721
            //ADD
            t0 = t0 + t0;
            //Instruction 15722
            //MUL
            t5.w = t0.z * t0.y;
            //Instruction 15723
            //LT
            tb23 = t5.w<0.0;
            //Instruction 15724
            //MOV
            t5.y = (-t5.w);
            //Instruction 15725
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 15726
            //MOVC
            t5.xy = (bool(tb23)) ? t5.xy : t5.zw;
            //Instruction 15727
            //MAD
            t23 = (-t0.y) * t0.z + t5.x;
            //Instruction 15728
            //MAD
            t23 = t5.y * t23 + t5.w;
            //Instruction 15729
            //ADD
            t24 = (-t23) + t5.x;
            //Instruction 15730
            //MAD
            t23 = t5.y * t24 + t23;
            //Instruction 15731
            //MUL
            t23 = t23 * _ST_WindBranchTwitch.x;
            //Instruction 15732
            //ADD
            t24 = (-_ST_WindVector.w) + 1.0;
            //Instruction 15733
            //ADD
            t25 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 15734
            //MUL
            t25 = t0.x * t25;
            //Instruction 15735
            //MAD
            t23 = t23 * t24 + t25;
            //Instruction 15736
            //MAD
            t24 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 15737
            //MUL
            t23 = t23 * t24;
            //Instruction 15738
            //MUL
            t4.xyz = vec3(t23) * t4.xyz;
            //Instruction 15739
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 15740
            //MAD
            t5.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 15741
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 15742
            //MAD
            t5.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 15743
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 15744
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 15745
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 15746
            //MUL
            t19.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 15747
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 15748
            //MAD
            t5.xy = t19.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 15749
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 15750
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 15751
            //MUL
            t22 = t5.x * t5.y;
            //Instruction 15752
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 15753
            //MUL
            t23 = t0.w * _ST_WindVector.w;
            //Instruction 15754
            //MAD
            t22 = t23 * _ST_WindBranchWhip.x + t22;
            //Instruction 15755
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 15756
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 15757
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 15758
            //MAD
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 15759
        //ELSE
        } else {
            //Instruction 15760
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 15761
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 15762
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 15763
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 15764
            //ADD
            t22 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 15765
            //ADD
            t22 = t22 + _ST_WindBranch.x;
            //Instruction 15766
            //ADD
            t4.x = t22 + in_TEXCOORD0.w;
            //Instruction 15767
            //MAD
            t4.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 15768
            //MUL
            t22 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 15769
            //MUL
            t4.z = t22 * 0.500000;
            //Instruction 15770
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 15771
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 15772
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 15773
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 15774
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 15775
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 15776
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 15777
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 15778
            //LT
            tb22 = t0.w<0.0;
            //Instruction 15779
            //MOV
            t0.y = (-t0.w);
            //Instruction 15780
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 15781
            //MOVC
            t5.xy = (bool(tb22)) ? t0.xy : t0.zw;
            //Instruction 15782
            //MAD
            t22 = (-t4.y) * t4.z + t5.x;
            //Instruction 15783
            //MAD
            t22 = t5.y * t22 + t0.w;
            //Instruction 15784
            //ADD
            t23 = (-t22) + t5.x;
            //Instruction 15785
            //MAD
            t22 = t5.y * t23 + t22;
            //Instruction 15786
            //MUL
            t22 = t22 * _ST_WindBranchTwitch.x;
            //Instruction 15787
            //ADD
            t23 = (-_ST_WindVector.w) + 1.0;
            //Instruction 15788
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 15789
            //MUL
            t24 = t24 * t4.x;
            //Instruction 15790
            //MAD
            t22 = t22 * t23 + t24;
            //Instruction 15791
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 15792
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 15793
        //ENDIF
        }
        //Instruction 15794
    //ENDIF
    }
    //Instruction 15795
    //DP3
    t22 = dot(t2.xyz, t2.xyz);
    //Instruction 15796
    //SQRT
    t22 = sqrt(t22);
    //Instruction 15797
    //DIV
    t23 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 15798
    //MAD
    t23 = (-t23) * 0.250000 + t2.y;
    //Instruction 15799
    //MAX
    t23 = max(t23, 0.0);
    //Instruction 15800
    //MUL
    t23 = t23 * _ST_WindGlobal.z;
    //Instruction 15801
    //NE
    tb3 = t23!=0.0;
    //Instruction 15802
    //LOG
    t10 = log2(t23);
    //Instruction 15803
    //MUL
    t10 = t10 * _ST_WindGlobal.w;
    //Instruction 15804
    //EXP
    t10 = exp2(t10);
    //Instruction 15805
    //MOVC
    t23 = (tb3) ? t10 : t23;
    //Instruction 15806
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 15807
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 15808
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 15809
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 15810
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 15811
    //MUL
    t17.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 15812
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 15813
    //MAD
    t3.xy = t17.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 15814
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 15815
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 15816
    //DIV
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 15817
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t10;
    //Instruction 15818
    //MUL
    t23 = t23 * t3.x;
    //Instruction 15819
    //MAD
    t3.xz = t8.xy * vec2(t23) + t2.xz;
    //Instruction 15820
    //MOV
    t3.y = t2.y;
    //Instruction 15821
    //DP3
    t8.x = dot(t3.xyz, t3.xyz);
    //Instruction 15822
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 15823
    //MUL
    t3.xyz = t8.xxx * t3.xyz;
    //Instruction 15824
    //MUL
    t8.xyz = vec3(t22) * t3.xyz;
    //Instruction 15825
    //MOVC
    t1.xyz = (bool(tb1)) ? t8.xyz : t2.xyz;
    //Instruction 15826
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 15827
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 15828
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 15829
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 15830
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 15831
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 15832
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 15833
    //MAD
    t1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 15834
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 15835
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 15836
    //MOV
    t2.z = _World2Object[2].x;
    //Instruction 15837
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 15838
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 15839
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 15840
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 15841
    //MAD
    t2.xyz = t2.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 15842
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 15843
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 15844
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 15845
    //MAD
    t2.xyz = t3.xyz * in_NORMAL0.zzz + t2.xyz;
    //Instruction 15846
    //DP3
    t22 = dot(t2.xyz, t2.xyz);
    //Instruction 15847
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 15848
    //MUL
    t2.xyz = vec3(t22) * t2.xyz;
    //Instruction 15849
    //MUL
    t16_0 = t2.yzzx * t2.xyzz;
    //Instruction 15850
    //DP4
    t16_6.x = dot(unity_SHBr, t16_0);
    //Instruction 15851
    //DP4
    t16_6.y = dot(unity_SHBg, t16_0);
    //Instruction 15852
    //DP4
    t16_6.z = dot(unity_SHBb, t16_0);
    //Instruction 15853
    //MUL
    t16_27 = t2.y * t2.y;
    //Instruction 15854
    //MAD
    t16_27 = t2.x * t2.x + (-t16_27);
    //Instruction 15855
    //MAD
    t16_6.xyz = unity_SHC.xyz * vec3(t16_27) + t16_6.xyz;
    //Instruction 15856
    //ADD
    t0 = (-t1.xxxx) + unity_4LightPosX0;
    //Instruction 15857
    //ADD
    t3 = (-t1.yyyy) + unity_4LightPosY0;
    //Instruction 15858
    //ADD
    t4 = (-t1.zzzz) + unity_4LightPosZ0;
    //Instruction 15859
    //MUL
    t5 = t3 * t3;
    //Instruction 15860
    //MAD
    t5 = t0 * t0 + t5;
    //Instruction 15861
    //MAD
    t5 = t4 * t4 + t5;
    //Instruction 15862
    //MUL
    t3 = t2.yyyy * t3;
    //Instruction 15863
    //MAD
    t0 = t0 * t2.xxxx + t3;
    //Instruction 15864
    //MAD
    t0 = t4 * t2.zzzz + t0;
    //Instruction 15865
    //RSQ
    t3 = inversesqrt(t5);
    //Instruction 15866
    //MUL
    t0 = t0 * t3;
    //Instruction 15867
    //MAX
    t0 = max(t0, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 15868
    //MAD
    t3 = t5 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 15869
    //DIV
    t3 = vec4(1.0, 1.0, 1.0, 1.0) / t3;
    //Instruction 15870
    //MUL
    t0 = t0 * t3;
    //Instruction 15871
    //MUL
    t3.xyz = t0.yyy * unity_LightColor[1].xyz;
    //Instruction 15872
    //MAD
    t3.xyz = unity_LightColor[0].xyz * t0.xxx + t3.xyz;
    //Instruction 15873
    //MAD
    t3.xyz = unity_LightColor[2].xyz * t0.zzz + t3.xyz;
    //Instruction 15874
    //MAD
    t3.xyz = unity_LightColor[3].xyz * t0.www + t3.xyz;
    //Instruction 15875
    //ADD
    t3.xyz = t3.xyz + t16_6.xyz;
    //Instruction 15876
    //MOV
    vs_TEXCOORD0.xyz = t2.xyz;
    //Instruction 15877
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 15878
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 15879
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 15880
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 15881
    //MOV
    vs_TEXCOORD4.xyz = t3.xyz;
    //Instruction 15882
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump float t16_14;
void main()
{
    //Instruction 15649
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 15650
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 15651
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 15652
    //LT
    tb0 = t10_1<0.0;
    //Instruction 15653
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 15654
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 15655
    //MOV
    t16_0.w = 1.0;
    //Instruction 15656
    //DP4
    t16_3.x = dot(unity_SHAr, t16_0);
    //Instruction 15657
    //DP4
    t16_3.y = dot(unity_SHAg, t16_0);
    //Instruction 15658
    //DP4
    t16_3.z = dot(unity_SHAb, t16_0);
    //Instruction 15659
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD4.xyz;
    //Instruction 15660
    //MUL
    t16_3.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 15661
    //MUL
    t16_2.xyz = t16_2.xyz * _LightColor0.xyz;
    //Instruction 15662
    //DP3
    t16_14 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 15663
    //MAX
    t16_14 = max(t16_14, 0.0);
    //Instruction 15664
    //MAD
    t16_2.xyz = t16_2.xyz * vec3(t16_14) + t16_3.xyz;
    //Instruction 15665
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 15666
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 15667
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec4 tmpvar_8;
  lowp vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10.xy = tmpvar_3.xy;
  tmpvar_9.w = _Color.w;
  tmpvar_9.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_1;
  tmpvar_12 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  FinalPosition_15 = tmpvar_1.xyz;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_20;
  tmpvar_20 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_15 = tmpvar_20;
  if ((tmpvar_17 == 5.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_20;
    highp float fOffset_22;
    fOffset_22 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_22 = 0.75;
    };
    highp vec4 tmpvar_23;
    tmpvar_23.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_23.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_22);
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_23 + 0.5))
     * 2.0) - 1.0));
    vPos_21 = (tmpvar_20 + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_24 * tmpvar_24)
       * 
        (3.0 - (2.0 * tmpvar_24))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_12 = tmpvar_2;
    FinalPosition_15 = vPos_21;
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_25;
    vPos_25 = FinalPosition_15;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_26;
      vPos_26 = FinalPosition_15;
      highp float fTime_27;
      highp float fAdherenceScale_28;
      highp vec3 vWindVector_29;
      vWindVector_29 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_27 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_30;
      highp float fOscillation_31;
      fOscillation_31 = 1.0;
      highp float fAmount_32;
      highp float fTarget_33;
      highp vec4 tmpvar_34;
      tmpvar_34.x = (fTime_27 + _glesMultiTexCoord0.w);
      tmpvar_34.y = ((fTime_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_34.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_27 + _glesMultiTexCoord0.w));
      tmpvar_34.w = ((fTime_27 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      vOscillations_30 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      highp float tmpvar_36;
      tmpvar_36 = (vOscillations_30.y * vOscillations_30.z);
      fTarget_33 = 1.0;
      fAmount_32 = tmpvar_36;
      if ((tmpvar_36 < 0.0)) {
        fTarget_33 = -1.0;
        fAmount_32 = -(tmpvar_36);
      };
      fOscillation_31 = (((
        mix (mix (tmpvar_36, fTarget_33, fAmount_32), fTarget_33, fAmount_32)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_30.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_31 = (fOscillation_31 * (1.0 + (vOscillations_30.w * _ST_WindBranchWhip.x)));
      vPos_26 = (FinalPosition_15 + ((vWindVector_29 * fOscillation_31) * _ST_WindBranch.y));
      highp vec4 tmpvar_37;
      tmpvar_37.zw = vec2(0.0, 0.0);
      tmpvar_37.x = ((fTime_27 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_37.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_38;
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      tmpvar_38 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      fAdherenceScale_28 = (1.0 - ((tmpvar_38.x * tmpvar_38.y) * (
        (tmpvar_38.x * tmpvar_38.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_28 = (fAdherenceScale_28 + ((vOscillations_30.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_26 = (vPos_26 + ((
        ((vRotatedBranchAnchor_13 - vPos_26) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_28) * _glesMultiTexCoord0.z));
      vPos_25 = vPos_26;
    } else {
      highp vec3 vPos_40;
      vPos_40 = vPos_25;
      highp float fTime_41;
      highp vec3 vWindVector_42;
      vWindVector_42 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_41 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_43;
      highp float fOscillation_44;
      fOscillation_44 = 1.0;
      highp float fAmount_45;
      highp float fTarget_46;
      highp vec4 tmpvar_47;
      tmpvar_47.w = 0.0;
      tmpvar_47.x = (fTime_41 + _glesMultiTexCoord0.w);
      tmpvar_47.y = ((fTime_41 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_47.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_41 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      vOscillations_43 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      highp float tmpvar_49;
      tmpvar_49 = (vOscillations_43.y * vOscillations_43.z);
      fTarget_46 = 1.0;
      fAmount_45 = tmpvar_49;
      if ((tmpvar_49 < 0.0)) {
        fTarget_46 = -1.0;
        fAmount_45 = -(tmpvar_49);
      };
      fOscillation_44 = (((
        mix (mix (tmpvar_49, fTarget_46, fAmount_45), fTarget_46, fAmount_45)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_43.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_40 = (vPos_25 + ((vWindVector_42 * fOscillation_44) * _ST_WindBranch.y));
      vPos_25 = vPos_40;
    };
    FinalPosition_15 = vPos_25;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_50;
    vPos_50 = FinalPosition_15;
    highp float fMoveAmount_51;
    highp float fAdjust_52;
    highp float fLength_53;
    fLength_53 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_54;
    tmpvar_54 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_52 = tmpvar_54;
    if ((tmpvar_54 != 0.0)) {
      fAdjust_52 = pow (tmpvar_54, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_55;
    tmpvar_55.zw = vec2(0.0, 0.0);
    tmpvar_55.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_55.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_56;
    highp vec4 tmpvar_57;
    tmpvar_57 = abs(((
      fract((tmpvar_55 + 0.5))
     * 2.0) - 1.0));
    tmpvar_56 = (((
      (tmpvar_57 * tmpvar_57)
     * 
      (3.0 - (2.0 * tmpvar_57))
    ) - 0.5) * 2.0);
    fMoveAmount_51 = ((_ST_WindGlobal.y * (tmpvar_56.x + 
      (tmpvar_56.y * tmpvar_56.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_51 = (fMoveAmount_51 * fAdjust_52);
    vPos_50.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * fMoveAmount_51));
    vPos_50 = (normalize(vPos_50) * fLength_53);
    FinalPosition_15 = vPos_50;
  };
  tmpvar_11.xyz = FinalPosition_15;
  tmpvar_6 = tmpvar_9;
  highp vec3 tmpvar_58;
  tmpvar_58 = (_Object2World * tmpvar_11).xyz;
  highp vec4 v_59;
  v_59.x = _World2Object[0].x;
  v_59.y = _World2Object[1].x;
  v_59.z = _World2Object[2].x;
  v_59.w = _World2Object[3].x;
  highp vec4 v_60;
  v_60.x = _World2Object[0].y;
  v_60.y = _World2Object[1].y;
  v_60.z = _World2Object[2].y;
  v_60.w = _World2Object[3].y;
  highp vec4 v_61;
  v_61.x = _World2Object[0].z;
  v_61.y = _World2Object[1].z;
  v_61.z = _World2Object[2].z;
  v_61.w = _World2Object[3].z;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(((
    (v_59.xyz * tmpvar_12.x)
   + 
    (v_60.xyz * tmpvar_12.y)
  ) + (v_61.xyz * tmpvar_12.z)));
  worldNormal_4 = tmpvar_62;
  tmpvar_5 = worldNormal_4;
  lowp vec4 tmpvar_63;
  tmpvar_63.w = 1.0;
  tmpvar_63.xyz = worldNormal_4;
  mediump vec4 normal_64;
  normal_64 = tmpvar_63;
  mediump vec3 x2_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (normal_64.xyzz * normal_64.yzzx);
  x2_65.x = dot (unity_SHBr, tmpvar_66);
  x2_65.y = dot (unity_SHBg, tmpvar_66);
  x2_65.z = dot (unity_SHBb, tmpvar_66);
  highp vec3 lightColor0_67;
  lightColor0_67 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_68;
  lightColor1_68 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_69;
  lightColor2_69 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_70;
  lightColor3_70 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_71;
  lightAttenSq_71 = unity_4LightAtten0;
  highp vec3 normal_72;
  normal_72 = worldNormal_4;
  highp vec3 col_73;
  highp vec4 ndotl_74;
  highp vec4 lengthSq_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = (unity_4LightPosX0 - tmpvar_58.x);
  highp vec4 tmpvar_77;
  tmpvar_77 = (unity_4LightPosY0 - tmpvar_58.y);
  highp vec4 tmpvar_78;
  tmpvar_78 = (unity_4LightPosZ0 - tmpvar_58.z);
  lengthSq_75 = (tmpvar_76 * tmpvar_76);
  lengthSq_75 = (lengthSq_75 + (tmpvar_77 * tmpvar_77));
  lengthSq_75 = (lengthSq_75 + (tmpvar_78 * tmpvar_78));
  ndotl_74 = (tmpvar_76 * normal_72.x);
  ndotl_74 = (ndotl_74 + (tmpvar_77 * normal_72.y));
  ndotl_74 = (ndotl_74 + (tmpvar_78 * normal_72.z));
  highp vec4 tmpvar_79;
  tmpvar_79 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_74 * inversesqrt(lengthSq_75)));
  ndotl_74 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = (tmpvar_79 * (1.0/((1.0 + 
    (lengthSq_75 * lightAttenSq_71)
  ))));
  col_73 = (lightColor0_67 * tmpvar_80.x);
  col_73 = (col_73 + (lightColor1_68 * tmpvar_80.y));
  col_73 = (col_73 + (lightColor2_69 * tmpvar_80.z));
  col_73 = (col_73 + (lightColor3_70 * tmpvar_80.w));
  tmpvar_7 = ((x2_65 + (unity_SHC.xyz * 
    ((normal_64.x * normal_64.x) - (normal_64.y * normal_64.y))
  )) + col_73);
  tmpvar_8 = (unity_World2Shadow[0] * (_Object2World * tmpvar_11));
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_58;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_10;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_10 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp float tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD5).x > 
    (xlv_TEXCOORD5.z / xlv_TEXCOORD5.w)
  )), _LightShadowData.x);
  tmpvar_14 = tmpvar_15;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_14;
  mediump vec3 normalWorld_16;
  normalWorld_16 = tmpvar_5;
  mediump vec3 tmpvar_17;
  mediump vec3 tmpvar_18;
  mediump vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = normalWorld_16;
  mediump vec3 x1_20;
  x1_20.x = dot (unity_SHAr, tmpvar_19);
  x1_20.y = dot (unity_SHAg, tmpvar_19);
  x1_20.z = dot (unity_SHAb, tmpvar_19);
  tmpvar_18 = (xlv_TEXCOORD4 + x1_20);
  tmpvar_17 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_17;
  lowp vec4 c_21;
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_23 = tmpvar_24;
  c_22.xyz = ((tmpvar_9 * tmpvar_17) * diff_23);
  c_22.w = tmpvar_10;
  c_21.w = c_22.w;
  c_21.xyz = (c_22.xyz + (tmpvar_9 * tmpvar_18));
  c_4.xyz = c_21.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_1;
  tmpvar_11 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  FinalPosition_14 = tmpvar_1.xyz;
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_14 = tmpvar_19;
  if ((tmpvar_16 == 5.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_19;
    highp float fOffset_21;
    fOffset_21 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_21 = 0.75;
    };
    highp vec4 tmpvar_22;
    tmpvar_22.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_22.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_21);
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    vPos_20 = (tmpvar_19 + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_23 * tmpvar_23)
       * 
        (3.0 - (2.0 * tmpvar_23))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_11 = tmpvar_2;
    FinalPosition_14 = vPos_20;
  };
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_24;
    vPos_24 = FinalPosition_14;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_25;
      vPos_25 = FinalPosition_14;
      highp float fTime_26;
      highp float fAdherenceScale_27;
      highp vec3 vWindVector_28;
      vWindVector_28 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_26 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.x = (fTime_26 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((fTime_26 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_26 + _glesMultiTexCoord0.w));
      tmpvar_33.w = ((fTime_26 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_29.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_30 = (fOscillation_30 * (1.0 + (vOscillations_29.w * _ST_WindBranchWhip.x)));
      vPos_25 = (FinalPosition_14 + ((vWindVector_28 * fOscillation_30) * _ST_WindBranch.y));
      highp vec4 tmpvar_36;
      tmpvar_36.zw = vec2(0.0, 0.0);
      tmpvar_36.x = ((fTime_26 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_36.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_37;
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      tmpvar_37 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      fAdherenceScale_27 = (1.0 - ((tmpvar_37.x * tmpvar_37.y) * (
        (tmpvar_37.x * tmpvar_37.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_27 = (fAdherenceScale_27 + ((vOscillations_29.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_25 = (vPos_25 + ((
        ((vRotatedBranchAnchor_12 - vPos_25) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_27) * _glesMultiTexCoord0.z));
      vPos_24 = vPos_25;
    } else {
      highp vec3 vPos_39;
      vPos_39 = vPos_24;
      highp float fTime_40;
      highp vec3 vWindVector_41;
      vWindVector_41 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_40 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_42;
      highp float fOscillation_43;
      fOscillation_43 = 1.0;
      highp float fAmount_44;
      highp float fTarget_45;
      highp vec4 tmpvar_46;
      tmpvar_46.w = 0.0;
      tmpvar_46.x = (fTime_40 + _glesMultiTexCoord0.w);
      tmpvar_46.y = ((fTime_40 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_46.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_40 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      vOscillations_42 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = (vOscillations_42.y * vOscillations_42.z);
      fTarget_45 = 1.0;
      fAmount_44 = tmpvar_48;
      if ((tmpvar_48 < 0.0)) {
        fTarget_45 = -1.0;
        fAmount_44 = -(tmpvar_48);
      };
      fOscillation_43 = (((
        mix (mix (tmpvar_48, fTarget_45, fAmount_44), fTarget_45, fAmount_44)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_42.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_39 = (vPos_24 + ((vWindVector_41 * fOscillation_43) * _ST_WindBranch.y));
      vPos_24 = vPos_39;
    };
    FinalPosition_14 = vPos_24;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_49;
    vPos_49 = FinalPosition_14;
    highp float fMoveAmount_50;
    highp float fAdjust_51;
    highp float fLength_52;
    fLength_52 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_53;
    tmpvar_53 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_51 = tmpvar_53;
    if ((tmpvar_53 != 0.0)) {
      fAdjust_51 = pow (tmpvar_53, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_54;
    tmpvar_54.zw = vec2(0.0, 0.0);
    tmpvar_54.x = (tmpvar_15.x + _ST_WindGlobal.x);
    tmpvar_54.y = (tmpvar_15.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_55;
    highp vec4 tmpvar_56;
    tmpvar_56 = abs(((
      fract((tmpvar_54 + 0.5))
     * 2.0) - 1.0));
    tmpvar_55 = (((
      (tmpvar_56 * tmpvar_56)
     * 
      (3.0 - (2.0 * tmpvar_56))
    ) - 0.5) * 2.0);
    fMoveAmount_50 = ((_ST_WindGlobal.y * (tmpvar_55.x + 
      (tmpvar_55.y * tmpvar_55.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_50 = (fMoveAmount_50 * fAdjust_51);
    vPos_49.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * fMoveAmount_50));
    vPos_49 = (normalize(vPos_49) * fLength_52);
    FinalPosition_14 = vPos_49;
  };
  tmpvar_10.xyz = FinalPosition_14;
  tmpvar_6 = tmpvar_8;
  highp vec4 v_57;
  v_57.x = _World2Object[0].x;
  v_57.y = _World2Object[1].x;
  v_57.z = _World2Object[2].x;
  v_57.w = _World2Object[3].x;
  highp vec4 v_58;
  v_58.x = _World2Object[0].y;
  v_58.y = _World2Object[1].y;
  v_58.z = _World2Object[2].y;
  v_58.w = _World2Object[3].y;
  highp vec4 v_59;
  v_59.x = _World2Object[0].z;
  v_59.y = _World2Object[1].z;
  v_59.z = _World2Object[2].z;
  v_59.w = _World2Object[3].z;
  highp vec3 tmpvar_60;
  tmpvar_60 = normalize(((
    (v_57.xyz * tmpvar_11.x)
   + 
    (v_58.xyz * tmpvar_11.y)
  ) + (v_59.xyz * tmpvar_11.z)));
  worldNormal_4 = tmpvar_60;
  tmpvar_5 = worldNormal_4;
  lowp vec4 tmpvar_61;
  tmpvar_61.w = 1.0;
  tmpvar_61.xyz = worldNormal_4;
  mediump vec4 normal_62;
  normal_62 = tmpvar_61;
  mediump vec3 x2_63;
  mediump vec4 tmpvar_64;
  tmpvar_64 = (normal_62.xyzz * normal_62.yzzx);
  x2_63.x = dot (unity_SHBr, tmpvar_64);
  x2_63.y = dot (unity_SHBg, tmpvar_64);
  x2_63.z = dot (unity_SHBb, tmpvar_64);
  tmpvar_7 = (unity_World2Shadow[0] * (_Object2World * tmpvar_10));
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = (x2_63 + (unity_SHC.xyz * (
    (normal_62.x * normal_62.x)
   - 
    (normal_62.y * normal_62.y)
  )));
  xlv_TEXCOORD5 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_10 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp float shadow_14;
  shadow_14 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD5.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_14;
  mediump vec3 normalWorld_15;
  normalWorld_15 = tmpvar_5;
  mediump vec3 tmpvar_16;
  mediump vec3 tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = normalWorld_15;
  mediump vec3 x1_19;
  x1_19.x = dot (unity_SHAr, tmpvar_18);
  x1_19.y = dot (unity_SHAg, tmpvar_18);
  x1_19.z = dot (unity_SHAb, tmpvar_18);
  tmpvar_17 = (xlv_TEXCOORD4 + x1_19);
  tmpvar_16 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_16;
  lowp vec4 c_20;
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_22 = tmpvar_23;
  c_21.xyz = ((tmpvar_9 * tmpvar_16) * diff_22);
  c_21.w = tmpvar_10;
  c_20.w = c_21.w;
  c_20.xyz = (c_21.xyz + (tmpvar_9 * tmpvar_17));
  c_4.xyz = c_20.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
mediump vec3 t16_6;
highp vec3 t8;
highp float t10;
highp float t15;
highp vec2 t17;
highp vec2 t19;
highp float t22;
bool tb22;
highp float t23;
bool tb23;
highp float t24;
highp float t25;
mediump float t16_27;
void main()
{
    //Instruction 15906
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 15907
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 15908
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 15909
    //MUL
    t8.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 15910
    //MAD
    t8.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t8.xyz;
    //Instruction 15911
    //MAD
    t8.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t8.xyz;
    //Instruction 15912
    //DP3
    t15 = dot(t8.xyz, t8.xyz);
    //Instruction 15913
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 15914
    //MUL
    t8.xy = vec2(t15) * t8.xz;
    //Instruction 15915
    //AND
    t8.xy = mix(vec2(0.0, 0.0), t8.xy, bvec2(tb1));
    //Instruction 15916
    //ADD
    t2.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 15917
    //MAD
    t2.xyz = unity_LODFade.xxx * t2.xyz + in_POSITION0.xyz;
    //Instruction 15918
    //EQ
    tb22 = t16_0.x==5.000000;
    //Instruction 15919
    //LT
    tb23 = in_TEXCOORD0.x<0.500000;
    //Instruction 15920
    //AND
    t23 = tb23 ? 0.750000 : float(0.0);
    //Instruction 15921
    //ADD
    t3.x = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 15922
    //MAD
    t23 = t3.x * _ST_WindFrondRipple.z + t23;
    //Instruction 15923
    //ADD
    t23 = t23 + 0.500000;
    //Instruction 15924
    //FRC
    t23 = fract(t23);
    //Instruction 15925
    //MAD
    t23 = t23 * 2.000000 + -1.0;
    //Instruction 15926
    //MUL
    t3.x = abs(t23) * abs(t23);
    //Instruction 15927
    //MAD
    t23 = -abs(t23) * 2.000000 + 3.000000;
    //Instruction 15928
    //MAD
    t23 = t3.x * t23 + -0.500000;
    //Instruction 15929
    //MUL
    t23 = t23 * in_TEXCOORD2.y;
    //Instruction 15930
    //DP2
    t23 = dot(_ST_WindFrondRipple.yy, vec2(t23));
    //Instruction 15931
    //MAD
    t3.xyz = vec3(t23) * in_NORMAL0.xyz + t2.xyz;
    //Instruction 15932
    //MOVC
    t2.xyz = (bool(tb22)) ? t3.xyz : t2.xyz;
    //Instruction 15933
    //GE
    tb23 = t16_0.x>=3.000000;
    //Instruction 15934
    //IF
    if(tb23){
        //Instruction 15935
        //IF
        if(tb22){
            //Instruction 15936
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 15937
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 15938
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 15939
            //DP3
            t22 = dot(t3.xyz, t3.xyz);
            //Instruction 15940
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 15941
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 15942
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 15943
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 15944
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 15945
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 15946
            //ADD
            t22 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 15947
            //ADD
            t22 = t22 + _ST_WindBranch.x;
            //Instruction 15948
            //ADD
            t0.x = t22 + in_TEXCOORD0.w;
            //Instruction 15949
            //MAD
            t0.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 15950
            //MUL
            t23 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 15951
            //MUL
            t0.z = t23 * 0.500000;
            //Instruction 15952
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 15953
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 15954
            //FRC
            t0 = fract(t0);
            //Instruction 15955
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 15956
            //MUL
            t5 = abs(t0) * abs(t0);
            //Instruction 15957
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 15958
            //MAD
            t0 = t5 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 15959
            //ADD
            t0 = t0 + t0;
            //Instruction 15960
            //MUL
            t5.w = t0.z * t0.y;
            //Instruction 15961
            //LT
            tb23 = t5.w<0.0;
            //Instruction 15962
            //MOV
            t5.y = (-t5.w);
            //Instruction 15963
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 15964
            //MOVC
            t5.xy = (bool(tb23)) ? t5.xy : t5.zw;
            //Instruction 15965
            //MAD
            t23 = (-t0.y) * t0.z + t5.x;
            //Instruction 15966
            //MAD
            t23 = t5.y * t23 + t5.w;
            //Instruction 15967
            //ADD
            t24 = (-t23) + t5.x;
            //Instruction 15968
            //MAD
            t23 = t5.y * t24 + t23;
            //Instruction 15969
            //MUL
            t23 = t23 * _ST_WindBranchTwitch.x;
            //Instruction 15970
            //ADD
            t24 = (-_ST_WindVector.w) + 1.0;
            //Instruction 15971
            //ADD
            t25 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 15972
            //MUL
            t25 = t0.x * t25;
            //Instruction 15973
            //MAD
            t23 = t23 * t24 + t25;
            //Instruction 15974
            //MAD
            t24 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 15975
            //MUL
            t23 = t23 * t24;
            //Instruction 15976
            //MUL
            t4.xyz = vec3(t23) * t4.xyz;
            //Instruction 15977
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 15978
            //MAD
            t5.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 15979
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 15980
            //MAD
            t5.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 15981
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 15982
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 15983
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 15984
            //MUL
            t19.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 15985
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 15986
            //MAD
            t5.xy = t19.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 15987
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 15988
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 15989
            //MUL
            t22 = t5.x * t5.y;
            //Instruction 15990
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 15991
            //MUL
            t23 = t0.w * _ST_WindVector.w;
            //Instruction 15992
            //MAD
            t22 = t23 * _ST_WindBranchWhip.x + t22;
            //Instruction 15993
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 15994
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 15995
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 15996
            //MAD
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 15997
        //ELSE
        } else {
            //Instruction 15998
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 15999
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 16000
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 16001
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 16002
            //ADD
            t22 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 16003
            //ADD
            t22 = t22 + _ST_WindBranch.x;
            //Instruction 16004
            //ADD
            t4.x = t22 + in_TEXCOORD0.w;
            //Instruction 16005
            //MAD
            t4.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 16006
            //MUL
            t22 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 16007
            //MUL
            t4.z = t22 * 0.500000;
            //Instruction 16008
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 16009
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 16010
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 16011
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 16012
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 16013
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 16014
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 16015
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 16016
            //LT
            tb22 = t0.w<0.0;
            //Instruction 16017
            //MOV
            t0.y = (-t0.w);
            //Instruction 16018
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 16019
            //MOVC
            t5.xy = (bool(tb22)) ? t0.xy : t0.zw;
            //Instruction 16020
            //MAD
            t22 = (-t4.y) * t4.z + t5.x;
            //Instruction 16021
            //MAD
            t22 = t5.y * t22 + t0.w;
            //Instruction 16022
            //ADD
            t23 = (-t22) + t5.x;
            //Instruction 16023
            //MAD
            t22 = t5.y * t23 + t22;
            //Instruction 16024
            //MUL
            t22 = t22 * _ST_WindBranchTwitch.x;
            //Instruction 16025
            //ADD
            t23 = (-_ST_WindVector.w) + 1.0;
            //Instruction 16026
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 16027
            //MUL
            t24 = t24 * t4.x;
            //Instruction 16028
            //MAD
            t22 = t22 * t23 + t24;
            //Instruction 16029
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 16030
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 16031
        //ENDIF
        }
        //Instruction 16032
    //ENDIF
    }
    //Instruction 16033
    //DP3
    t22 = dot(t2.xyz, t2.xyz);
    //Instruction 16034
    //SQRT
    t22 = sqrt(t22);
    //Instruction 16035
    //DIV
    t23 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 16036
    //MAD
    t23 = (-t23) * 0.250000 + t2.y;
    //Instruction 16037
    //MAX
    t23 = max(t23, 0.0);
    //Instruction 16038
    //MUL
    t23 = t23 * _ST_WindGlobal.z;
    //Instruction 16039
    //NE
    tb3 = t23!=0.0;
    //Instruction 16040
    //LOG
    t10 = log2(t23);
    //Instruction 16041
    //MUL
    t10 = t10 * _ST_WindGlobal.w;
    //Instruction 16042
    //EXP
    t10 = exp2(t10);
    //Instruction 16043
    //MOVC
    t23 = (tb3) ? t10 : t23;
    //Instruction 16044
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 16045
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 16046
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 16047
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 16048
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 16049
    //MUL
    t17.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 16050
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 16051
    //MAD
    t3.xy = t17.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 16052
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 16053
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 16054
    //DIV
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 16055
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t10;
    //Instruction 16056
    //MUL
    t23 = t23 * t3.x;
    //Instruction 16057
    //MAD
    t3.xz = t8.xy * vec2(t23) + t2.xz;
    //Instruction 16058
    //MOV
    t3.y = t2.y;
    //Instruction 16059
    //DP3
    t8.x = dot(t3.xyz, t3.xyz);
    //Instruction 16060
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 16061
    //MUL
    t3.xyz = t8.xxx * t3.xyz;
    //Instruction 16062
    //MUL
    t8.xyz = vec3(t22) * t3.xyz;
    //Instruction 16063
    //MOVC
    t1.xyz = (bool(tb1)) ? t8.xyz : t2.xyz;
    //Instruction 16064
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 16065
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 16066
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 16067
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 16068
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 16069
    //MAD
    t2.xyz = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 16070
    //MAD
    t2.xyz = _Object2World[2].xyz * t1.zzz + t2.xyz;
    //Instruction 16071
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t2.xyz;
    //Instruction 16072
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 16073
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 16074
    //MOV
    t2.z = _World2Object[2].x;
    //Instruction 16075
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 16076
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 16077
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 16078
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 16079
    //MAD
    t2.xyz = t2.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 16080
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 16081
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 16082
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 16083
    //MAD
    t2.xyz = t3.xyz * in_NORMAL0.zzz + t2.xyz;
    //Instruction 16084
    //DP3
    t22 = dot(t2.xyz, t2.xyz);
    //Instruction 16085
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 16086
    //MUL
    t2.xyz = vec3(t22) * t2.xyz;
    //Instruction 16087
    //MUL
    t16_0 = t2.yzzx * t2.xyzz;
    //Instruction 16088
    //DP4
    t16_6.x = dot(unity_SHBr, t16_0);
    //Instruction 16089
    //DP4
    t16_6.y = dot(unity_SHBg, t16_0);
    //Instruction 16090
    //DP4
    t16_6.z = dot(unity_SHBb, t16_0);
    //Instruction 16091
    //MUL
    t16_27 = t2.y * t2.y;
    //Instruction 16092
    //MAD
    t16_27 = t2.x * t2.x + (-t16_27);
    //Instruction 16093
    //MAD
    vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(t16_27) + t16_6.xyz;
    //Instruction 16094
    //MUL
    t0 = t1.yyyy * _Object2World[1];
    //Instruction 16095
    //MAD
    t0 = _Object2World[0] * t1.xxxx + t0;
    //Instruction 16096
    //MAD
    t0 = _Object2World[2] * t1.zzzz + t0;
    //Instruction 16097
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 16098
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 16099
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 16100
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 16101
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 16102
    //MOV
    vs_TEXCOORD0.xyz = t2.xyz;
    //Instruction 16103
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 16104
    //MOV
    vs_TEXCOORD5 = t0;
    //Instruction 16105
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 16106
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 16107
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_17;
mediump float t16_18;
void main()
{
    //Instruction 15883
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 15884
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 15885
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 15886
    //LT
    tb0 = t10_1<0.0;
    //Instruction 15887
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 15888
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 15889
    //MOV
    t16_0.w = 1.0;
    //Instruction 15890
    //DP4
    t16_3.x = dot(unity_SHAr, t16_0);
    //Instruction 15891
    //DP4
    t16_3.y = dot(unity_SHAg, t16_0);
    //Instruction 15892
    //DP4
    t16_3.z = dot(unity_SHAb, t16_0);
    //Instruction 15893
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD4.xyz;
    //Instruction 15894
    //MUL
    t16_3.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 15895
    //SAMPLE_C_LZ
    vec3 txVec35 = vec3(vs_TEXCOORD5.xy,vs_TEXCOORD5.z);
    t16_17 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec35, 0.0);
    //Instruction 15896
    //ADD
    t16_18 = (-_LightShadowData.x) + 1.0;
    //Instruction 15897
    //MAD
    t16_17 = t16_17 * t16_18 + _LightShadowData.x;
    //Instruction 15898
    //MUL
    t16_4.xyz = vec3(t16_17) * _LightColor0.xyz;
    //Instruction 15899
    //MUL
    t16_2.xyz = t16_2.xyz * t16_4.xyz;
    //Instruction 15900
    //DP3
    t16_17 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 15901
    //MAX
    t16_17 = max(t16_17, 0.0);
    //Instruction 15902
    //MAD
    t16_2.xyz = t16_2.xyz * vec3(t16_17) + t16_3.xyz;
    //Instruction 15903
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 15904
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 15905
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec4 tmpvar_8;
  lowp vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10.xy = tmpvar_3.xy;
  tmpvar_9.w = _Color.w;
  tmpvar_9.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_1;
  tmpvar_12 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  FinalPosition_15 = tmpvar_1.xyz;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_20;
  tmpvar_20 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_15 = tmpvar_20;
  if ((tmpvar_17 == 5.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_20;
    highp float fOffset_22;
    fOffset_22 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_22 = 0.75;
    };
    highp vec4 tmpvar_23;
    tmpvar_23.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_23.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_22);
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_23 + 0.5))
     * 2.0) - 1.0));
    vPos_21 = (tmpvar_20 + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_24 * tmpvar_24)
       * 
        (3.0 - (2.0 * tmpvar_24))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_12 = tmpvar_2;
    FinalPosition_15 = vPos_21;
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_25;
    vPos_25 = FinalPosition_15;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_26;
      vPos_26 = FinalPosition_15;
      highp float fTime_27;
      highp float fAdherenceScale_28;
      highp vec3 vWindVector_29;
      vWindVector_29 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_27 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_30;
      highp float fOscillation_31;
      fOscillation_31 = 1.0;
      highp float fAmount_32;
      highp float fTarget_33;
      highp vec4 tmpvar_34;
      tmpvar_34.x = (fTime_27 + _glesMultiTexCoord0.w);
      tmpvar_34.y = ((fTime_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_34.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_27 + _glesMultiTexCoord0.w));
      tmpvar_34.w = ((fTime_27 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      vOscillations_30 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      highp float tmpvar_36;
      tmpvar_36 = (vOscillations_30.y * vOscillations_30.z);
      fTarget_33 = 1.0;
      fAmount_32 = tmpvar_36;
      if ((tmpvar_36 < 0.0)) {
        fTarget_33 = -1.0;
        fAmount_32 = -(tmpvar_36);
      };
      fOscillation_31 = (((
        mix (mix (tmpvar_36, fTarget_33, fAmount_32), fTarget_33, fAmount_32)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_30.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_31 = (fOscillation_31 * (1.0 + (vOscillations_30.w * _ST_WindBranchWhip.x)));
      vPos_26 = (FinalPosition_15 + ((vWindVector_29 * fOscillation_31) * _ST_WindBranch.y));
      highp vec4 tmpvar_37;
      tmpvar_37.zw = vec2(0.0, 0.0);
      tmpvar_37.x = ((fTime_27 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_37.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_38;
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      tmpvar_38 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      fAdherenceScale_28 = (1.0 - ((tmpvar_38.x * tmpvar_38.y) * (
        (tmpvar_38.x * tmpvar_38.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_28 = (fAdherenceScale_28 + ((vOscillations_30.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_26 = (vPos_26 + ((
        ((vRotatedBranchAnchor_13 - vPos_26) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_28) * _glesMultiTexCoord0.z));
      vPos_25 = vPos_26;
    } else {
      highp vec3 vPos_40;
      vPos_40 = vPos_25;
      highp float fTime_41;
      highp vec3 vWindVector_42;
      vWindVector_42 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_41 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_43;
      highp float fOscillation_44;
      fOscillation_44 = 1.0;
      highp float fAmount_45;
      highp float fTarget_46;
      highp vec4 tmpvar_47;
      tmpvar_47.w = 0.0;
      tmpvar_47.x = (fTime_41 + _glesMultiTexCoord0.w);
      tmpvar_47.y = ((fTime_41 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_47.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_41 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      vOscillations_43 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      highp float tmpvar_49;
      tmpvar_49 = (vOscillations_43.y * vOscillations_43.z);
      fTarget_46 = 1.0;
      fAmount_45 = tmpvar_49;
      if ((tmpvar_49 < 0.0)) {
        fTarget_46 = -1.0;
        fAmount_45 = -(tmpvar_49);
      };
      fOscillation_44 = (((
        mix (mix (tmpvar_49, fTarget_46, fAmount_45), fTarget_46, fAmount_45)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_43.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_40 = (vPos_25 + ((vWindVector_42 * fOscillation_44) * _ST_WindBranch.y));
      vPos_25 = vPos_40;
    };
    FinalPosition_15 = vPos_25;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_50;
    vPos_50 = FinalPosition_15;
    highp float fMoveAmount_51;
    highp float fAdjust_52;
    highp float fLength_53;
    fLength_53 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_54;
    tmpvar_54 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_52 = tmpvar_54;
    if ((tmpvar_54 != 0.0)) {
      fAdjust_52 = pow (tmpvar_54, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_55;
    tmpvar_55.zw = vec2(0.0, 0.0);
    tmpvar_55.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_55.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_56;
    highp vec4 tmpvar_57;
    tmpvar_57 = abs(((
      fract((tmpvar_55 + 0.5))
     * 2.0) - 1.0));
    tmpvar_56 = (((
      (tmpvar_57 * tmpvar_57)
     * 
      (3.0 - (2.0 * tmpvar_57))
    ) - 0.5) * 2.0);
    fMoveAmount_51 = ((_ST_WindGlobal.y * (tmpvar_56.x + 
      (tmpvar_56.y * tmpvar_56.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_51 = (fMoveAmount_51 * fAdjust_52);
    vPos_50.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * fMoveAmount_51));
    vPos_50 = (normalize(vPos_50) * fLength_53);
    FinalPosition_15 = vPos_50;
  };
  tmpvar_11.xyz = FinalPosition_15;
  tmpvar_6 = tmpvar_9;
  highp vec3 tmpvar_58;
  tmpvar_58 = (_Object2World * tmpvar_11).xyz;
  highp vec4 v_59;
  v_59.x = _World2Object[0].x;
  v_59.y = _World2Object[1].x;
  v_59.z = _World2Object[2].x;
  v_59.w = _World2Object[3].x;
  highp vec4 v_60;
  v_60.x = _World2Object[0].y;
  v_60.y = _World2Object[1].y;
  v_60.z = _World2Object[2].y;
  v_60.w = _World2Object[3].y;
  highp vec4 v_61;
  v_61.x = _World2Object[0].z;
  v_61.y = _World2Object[1].z;
  v_61.z = _World2Object[2].z;
  v_61.w = _World2Object[3].z;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(((
    (v_59.xyz * tmpvar_12.x)
   + 
    (v_60.xyz * tmpvar_12.y)
  ) + (v_61.xyz * tmpvar_12.z)));
  worldNormal_4 = tmpvar_62;
  tmpvar_5 = worldNormal_4;
  lowp vec4 tmpvar_63;
  tmpvar_63.w = 1.0;
  tmpvar_63.xyz = worldNormal_4;
  mediump vec4 normal_64;
  normal_64 = tmpvar_63;
  mediump vec3 x2_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (normal_64.xyzz * normal_64.yzzx);
  x2_65.x = dot (unity_SHBr, tmpvar_66);
  x2_65.y = dot (unity_SHBg, tmpvar_66);
  x2_65.z = dot (unity_SHBb, tmpvar_66);
  highp vec3 lightColor0_67;
  lightColor0_67 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_68;
  lightColor1_68 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_69;
  lightColor2_69 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_70;
  lightColor3_70 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_71;
  lightAttenSq_71 = unity_4LightAtten0;
  highp vec3 normal_72;
  normal_72 = worldNormal_4;
  highp vec3 col_73;
  highp vec4 ndotl_74;
  highp vec4 lengthSq_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = (unity_4LightPosX0 - tmpvar_58.x);
  highp vec4 tmpvar_77;
  tmpvar_77 = (unity_4LightPosY0 - tmpvar_58.y);
  highp vec4 tmpvar_78;
  tmpvar_78 = (unity_4LightPosZ0 - tmpvar_58.z);
  lengthSq_75 = (tmpvar_76 * tmpvar_76);
  lengthSq_75 = (lengthSq_75 + (tmpvar_77 * tmpvar_77));
  lengthSq_75 = (lengthSq_75 + (tmpvar_78 * tmpvar_78));
  ndotl_74 = (tmpvar_76 * normal_72.x);
  ndotl_74 = (ndotl_74 + (tmpvar_77 * normal_72.y));
  ndotl_74 = (ndotl_74 + (tmpvar_78 * normal_72.z));
  highp vec4 tmpvar_79;
  tmpvar_79 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_74 * inversesqrt(lengthSq_75)));
  ndotl_74 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = (tmpvar_79 * (1.0/((1.0 + 
    (lengthSq_75 * lightAttenSq_71)
  ))));
  col_73 = (lightColor0_67 * tmpvar_80.x);
  col_73 = (col_73 + (lightColor1_68 * tmpvar_80.y));
  col_73 = (col_73 + (lightColor2_69 * tmpvar_80.z));
  col_73 = (col_73 + (lightColor3_70 * tmpvar_80.w));
  tmpvar_7 = ((x2_65 + (unity_SHC.xyz * 
    ((normal_64.x * normal_64.x) - (normal_64.y * normal_64.y))
  )) + col_73);
  tmpvar_8 = (unity_World2Shadow[0] * (_Object2World * tmpvar_11));
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_58;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_10;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_10 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp float shadow_14;
  shadow_14 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD5.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_14;
  mediump vec3 normalWorld_15;
  normalWorld_15 = tmpvar_5;
  mediump vec3 tmpvar_16;
  mediump vec3 tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = normalWorld_15;
  mediump vec3 x1_19;
  x1_19.x = dot (unity_SHAr, tmpvar_18);
  x1_19.y = dot (unity_SHAg, tmpvar_18);
  x1_19.z = dot (unity_SHAb, tmpvar_18);
  tmpvar_17 = (xlv_TEXCOORD4 + x1_19);
  tmpvar_16 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_16;
  lowp vec4 c_20;
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_22 = tmpvar_23;
  c_21.xyz = ((tmpvar_9 * tmpvar_16) * diff_22);
  c_21.w = tmpvar_10;
  c_20.w = c_21.w;
  c_20.xyz = (c_21.xyz + (tmpvar_9 * tmpvar_17));
  c_4.xyz = c_20.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
bool tb3;
highp vec4 t4;
highp vec4 t5;
mediump vec3 t16_6;
highp vec4 t7;
highp vec3 t9;
highp float t11;
highp float t17;
highp vec2 t19;
highp vec2 t21;
highp float t25;
bool tb25;
highp float t26;
bool tb26;
highp float t27;
highp float t28;
mediump float t16_30;
void main()
{
    //Instruction 16686
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 16687
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 16688
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 16689
    //MUL
    t9.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 16690
    //MAD
    t9.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t9.xyz;
    //Instruction 16691
    //MAD
    t9.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t9.xyz;
    //Instruction 16692
    //DP3
    t17 = dot(t9.xyz, t9.xyz);
    //Instruction 16693
    //RSQ
    t17 = inversesqrt(t17);
    //Instruction 16694
    //MUL
    t9.xy = vec2(t17) * t9.xz;
    //Instruction 16695
    //AND
    t9.xy = mix(vec2(0.0, 0.0), t9.xy, bvec2(tb1));
    //Instruction 16696
    //ADD
    t2.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 16697
    //MAD
    t2.xyz = unity_LODFade.xxx * t2.xyz + in_POSITION0.xyz;
    //Instruction 16698
    //EQ
    tb25 = t16_0.x==5.000000;
    //Instruction 16699
    //LT
    tb26 = in_TEXCOORD0.x<0.500000;
    //Instruction 16700
    //AND
    t26 = tb26 ? 0.750000 : float(0.0);
    //Instruction 16701
    //ADD
    t3.x = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 16702
    //MAD
    t26 = t3.x * _ST_WindFrondRipple.z + t26;
    //Instruction 16703
    //ADD
    t26 = t26 + 0.500000;
    //Instruction 16704
    //FRC
    t26 = fract(t26);
    //Instruction 16705
    //MAD
    t26 = t26 * 2.000000 + -1.0;
    //Instruction 16706
    //MUL
    t3.x = abs(t26) * abs(t26);
    //Instruction 16707
    //MAD
    t26 = -abs(t26) * 2.000000 + 3.000000;
    //Instruction 16708
    //MAD
    t26 = t3.x * t26 + -0.500000;
    //Instruction 16709
    //MUL
    t26 = t26 * in_TEXCOORD2.y;
    //Instruction 16710
    //DP2
    t26 = dot(_ST_WindFrondRipple.yy, vec2(t26));
    //Instruction 16711
    //MAD
    t3.xyz = vec3(t26) * in_NORMAL0.xyz + t2.xyz;
    //Instruction 16712
    //MOVC
    t2.xyz = (bool(tb25)) ? t3.xyz : t2.xyz;
    //Instruction 16713
    //GE
    tb26 = t16_0.x>=3.000000;
    //Instruction 16714
    //IF
    if(tb26){
        //Instruction 16715
        //IF
        if(tb25){
            //Instruction 16716
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 16717
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 16718
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 16719
            //DP3
            t25 = dot(t3.xyz, t3.xyz);
            //Instruction 16720
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 16721
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 16722
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 16723
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 16724
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 16725
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 16726
            //ADD
            t25 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 16727
            //ADD
            t25 = t25 + _ST_WindBranch.x;
            //Instruction 16728
            //ADD
            t0.x = t25 + in_TEXCOORD0.w;
            //Instruction 16729
            //MAD
            t0.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 16730
            //MUL
            t26 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 16731
            //MUL
            t0.z = t26 * 0.500000;
            //Instruction 16732
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 16733
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 16734
            //FRC
            t0 = fract(t0);
            //Instruction 16735
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 16736
            //MUL
            t5 = abs(t0) * abs(t0);
            //Instruction 16737
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 16738
            //MAD
            t0 = t5 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 16739
            //ADD
            t0 = t0 + t0;
            //Instruction 16740
            //MUL
            t5.w = t0.z * t0.y;
            //Instruction 16741
            //LT
            tb26 = t5.w<0.0;
            //Instruction 16742
            //MOV
            t5.y = (-t5.w);
            //Instruction 16743
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 16744
            //MOVC
            t5.xy = (bool(tb26)) ? t5.xy : t5.zw;
            //Instruction 16745
            //MAD
            t26 = (-t0.y) * t0.z + t5.x;
            //Instruction 16746
            //MAD
            t26 = t5.y * t26 + t5.w;
            //Instruction 16747
            //ADD
            t27 = (-t26) + t5.x;
            //Instruction 16748
            //MAD
            t26 = t5.y * t27 + t26;
            //Instruction 16749
            //MUL
            t26 = t26 * _ST_WindBranchTwitch.x;
            //Instruction 16750
            //ADD
            t27 = (-_ST_WindVector.w) + 1.0;
            //Instruction 16751
            //ADD
            t28 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 16752
            //MUL
            t28 = t0.x * t28;
            //Instruction 16753
            //MAD
            t26 = t26 * t27 + t28;
            //Instruction 16754
            //MAD
            t27 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 16755
            //MUL
            t26 = t26 * t27;
            //Instruction 16756
            //MUL
            t4.xyz = vec3(t26) * t4.xyz;
            //Instruction 16757
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 16758
            //MAD
            t5.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 16759
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 16760
            //MAD
            t5.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 16761
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 16762
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 16763
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 16764
            //MUL
            t21.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 16765
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 16766
            //MAD
            t5.xy = t21.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 16767
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 16768
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 16769
            //MUL
            t25 = t5.x * t5.y;
            //Instruction 16770
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 16771
            //MUL
            t26 = t0.w * _ST_WindVector.w;
            //Instruction 16772
            //MAD
            t25 = t26 * _ST_WindBranchWhip.x + t25;
            //Instruction 16773
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 16774
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 16775
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 16776
            //MAD
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 16777
        //ELSE
        } else {
            //Instruction 16778
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 16779
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 16780
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 16781
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 16782
            //ADD
            t25 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 16783
            //ADD
            t25 = t25 + _ST_WindBranch.x;
            //Instruction 16784
            //ADD
            t4.x = t25 + in_TEXCOORD0.w;
            //Instruction 16785
            //MAD
            t4.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 16786
            //MUL
            t25 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 16787
            //MUL
            t4.z = t25 * 0.500000;
            //Instruction 16788
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 16789
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 16790
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 16791
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 16792
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 16793
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 16794
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 16795
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 16796
            //LT
            tb25 = t0.w<0.0;
            //Instruction 16797
            //MOV
            t0.y = (-t0.w);
            //Instruction 16798
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 16799
            //MOVC
            t5.xy = (bool(tb25)) ? t0.xy : t0.zw;
            //Instruction 16800
            //MAD
            t25 = (-t4.y) * t4.z + t5.x;
            //Instruction 16801
            //MAD
            t25 = t5.y * t25 + t0.w;
            //Instruction 16802
            //ADD
            t26 = (-t25) + t5.x;
            //Instruction 16803
            //MAD
            t25 = t5.y * t26 + t25;
            //Instruction 16804
            //MUL
            t25 = t25 * _ST_WindBranchTwitch.x;
            //Instruction 16805
            //ADD
            t26 = (-_ST_WindVector.w) + 1.0;
            //Instruction 16806
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 16807
            //MUL
            t27 = t27 * t4.x;
            //Instruction 16808
            //MAD
            t25 = t25 * t26 + t27;
            //Instruction 16809
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 16810
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 16811
        //ENDIF
        }
        //Instruction 16812
    //ENDIF
    }
    //Instruction 16813
    //DP3
    t25 = dot(t2.xyz, t2.xyz);
    //Instruction 16814
    //SQRT
    t25 = sqrt(t25);
    //Instruction 16815
    //DIV
    t26 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 16816
    //MAD
    t26 = (-t26) * 0.250000 + t2.y;
    //Instruction 16817
    //MAX
    t26 = max(t26, 0.0);
    //Instruction 16818
    //MUL
    t26 = t26 * _ST_WindGlobal.z;
    //Instruction 16819
    //NE
    tb3 = t26!=0.0;
    //Instruction 16820
    //LOG
    t11 = log2(t26);
    //Instruction 16821
    //MUL
    t11 = t11 * _ST_WindGlobal.w;
    //Instruction 16822
    //EXP
    t11 = exp2(t11);
    //Instruction 16823
    //MOVC
    t26 = (tb3) ? t11 : t26;
    //Instruction 16824
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 16825
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 16826
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 16827
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 16828
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 16829
    //MUL
    t19.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 16830
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 16831
    //MAD
    t3.xy = t19.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 16832
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 16833
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 16834
    //DIV
    t11 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 16835
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t11;
    //Instruction 16836
    //MUL
    t26 = t26 * t3.x;
    //Instruction 16837
    //MAD
    t3.xz = t9.xy * vec2(t26) + t2.xz;
    //Instruction 16838
    //MOV
    t3.y = t2.y;
    //Instruction 16839
    //DP3
    t9.x = dot(t3.xyz, t3.xyz);
    //Instruction 16840
    //RSQ
    t9.x = inversesqrt(t9.x);
    //Instruction 16841
    //MUL
    t3.xyz = t9.xxx * t3.xyz;
    //Instruction 16842
    //MUL
    t9.xyz = vec3(t25) * t3.xyz;
    //Instruction 16843
    //MOVC
    t1.xyz = (bool(tb1)) ? t9.xyz : t2.xyz;
    //Instruction 16844
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 16845
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 16846
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 16847
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 16848
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 16849
    //MAD
    t2.xyz = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 16850
    //MAD
    t2.xyz = _Object2World[2].xyz * t1.zzz + t2.xyz;
    //Instruction 16851
    //MAD
    t2.xyz = _Object2World[3].xyz * in_POSITION0.www + t2.xyz;
    //Instruction 16852
    //MOV
    t3.x = _World2Object[0].x;
    //Instruction 16853
    //MOV
    t3.y = _World2Object[1].x;
    //Instruction 16854
    //MOV
    t3.z = _World2Object[2].x;
    //Instruction 16855
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 16856
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 16857
    //MOV
    t4.z = _World2Object[2].y;
    //Instruction 16858
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 16859
    //MAD
    t3.xyz = t3.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 16860
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 16861
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 16862
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 16863
    //MAD
    t3.xyz = t4.xyz * in_NORMAL0.zzz + t3.xyz;
    //Instruction 16864
    //DP3
    t25 = dot(t3.xyz, t3.xyz);
    //Instruction 16865
    //RSQ
    t25 = inversesqrt(t25);
    //Instruction 16866
    //MUL
    t3.xyz = vec3(t25) * t3.xyz;
    //Instruction 16867
    //MUL
    t16_0 = t3.yzzx * t3.xyzz;
    //Instruction 16868
    //DP4
    t16_6.x = dot(unity_SHBr, t16_0);
    //Instruction 16869
    //DP4
    t16_6.y = dot(unity_SHBg, t16_0);
    //Instruction 16870
    //DP4
    t16_6.z = dot(unity_SHBb, t16_0);
    //Instruction 16871
    //MUL
    t16_30 = t3.y * t3.y;
    //Instruction 16872
    //MAD
    t16_30 = t3.x * t3.x + (-t16_30);
    //Instruction 16873
    //MAD
    t16_6.xyz = unity_SHC.xyz * vec3(t16_30) + t16_6.xyz;
    //Instruction 16874
    //ADD
    t0 = (-t2.xxxx) + unity_4LightPosX0;
    //Instruction 16875
    //ADD
    t4 = (-t2.yyyy) + unity_4LightPosY0;
    //Instruction 16876
    //ADD
    t5 = (-t2.zzzz) + unity_4LightPosZ0;
    //Instruction 16877
    //MUL
    t7 = t4 * t4;
    //Instruction 16878
    //MAD
    t7 = t0 * t0 + t7;
    //Instruction 16879
    //MAD
    t7 = t5 * t5 + t7;
    //Instruction 16880
    //MUL
    t4 = t3.yyyy * t4;
    //Instruction 16881
    //MAD
    t0 = t0 * t3.xxxx + t4;
    //Instruction 16882
    //MAD
    t0 = t5 * t3.zzzz + t0;
    //Instruction 16883
    //RSQ
    t4 = inversesqrt(t7);
    //Instruction 16884
    //MUL
    t0 = t0 * t4;
    //Instruction 16885
    //MAX
    t0 = max(t0, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 16886
    //MAD
    t4 = t7 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 16887
    //DIV
    t4 = vec4(1.0, 1.0, 1.0, 1.0) / t4;
    //Instruction 16888
    //MUL
    t0 = t0 * t4;
    //Instruction 16889
    //MUL
    t4.xyz = t0.yyy * unity_LightColor[1].xyz;
    //Instruction 16890
    //MAD
    t4.xyz = unity_LightColor[0].xyz * t0.xxx + t4.xyz;
    //Instruction 16891
    //MAD
    t4.xyz = unity_LightColor[2].xyz * t0.zzz + t4.xyz;
    //Instruction 16892
    //MAD
    t4.xyz = unity_LightColor[3].xyz * t0.www + t4.xyz;
    //Instruction 16893
    //ADD
    t4.xyz = t4.xyz + t16_6.xyz;
    //Instruction 16894
    //MUL
    t0 = t1.yyyy * _Object2World[1];
    //Instruction 16895
    //MAD
    t0 = _Object2World[0] * t1.xxxx + t0;
    //Instruction 16896
    //MAD
    t0 = _Object2World[2] * t1.zzzz + t0;
    //Instruction 16897
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 16898
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 16899
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 16900
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 16901
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 16902
    //MOV
    vs_TEXCOORD0.xyz = t3.xyz;
    //Instruction 16903
    //MOV
    vs_TEXCOORD1.xyz = t2.xyz;
    //Instruction 16904
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 16905
    //MOV
    vs_TEXCOORD5 = t0;
    //Instruction 16906
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 16907
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 16908
    //MOV
    vs_TEXCOORD4.xyz = t4.xyz;
    //Instruction 16909
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_17;
mediump float t16_18;
void main()
{
    //Instruction 16663
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 16664
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 16665
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 16666
    //LT
    tb0 = t10_1<0.0;
    //Instruction 16667
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 16668
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 16669
    //MOV
    t16_0.w = 1.0;
    //Instruction 16670
    //DP4
    t16_3.x = dot(unity_SHAr, t16_0);
    //Instruction 16671
    //DP4
    t16_3.y = dot(unity_SHAg, t16_0);
    //Instruction 16672
    //DP4
    t16_3.z = dot(unity_SHAb, t16_0);
    //Instruction 16673
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD4.xyz;
    //Instruction 16674
    //MUL
    t16_3.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 16675
    //SAMPLE_C_LZ
    vec3 txVec42 = vec3(vs_TEXCOORD5.xy,vs_TEXCOORD5.z);
    t16_17 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec42, 0.0);
    //Instruction 16676
    //ADD
    t16_18 = (-_LightShadowData.x) + 1.0;
    //Instruction 16677
    //MAD
    t16_17 = t16_17 * t16_18 + _LightShadowData.x;
    //Instruction 16678
    //MUL
    t16_4.xyz = vec3(t16_17) * _LightColor0.xyz;
    //Instruction 16679
    //MUL
    t16_2.xyz = t16_2.xyz * t16_4.xyz;
    //Instruction 16680
    //DP3
    t16_17 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 16681
    //MAX
    t16_17 = max(t16_17, 0.0);
    //Instruction 16682
    //MAD
    t16_2.xyz = t16_2.xyz * vec3(t16_17) + t16_3.xyz;
    //Instruction 16683
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 16684
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 16685
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_3.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_1;
  tmpvar_13 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  FinalPosition_16 = tmpvar_1.xyz;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_20;
  tmpvar_20 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_16 = tmpvar_20;
  if ((tmpvar_17 == 5.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_20;
    highp float fOffset_22;
    fOffset_22 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_22 = 0.75;
    };
    highp vec4 tmpvar_23;
    tmpvar_23.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_23.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_22);
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_23 + 0.5))
     * 2.0) - 1.0));
    vPos_21 = (tmpvar_20 + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_24 * tmpvar_24)
       * 
        (3.0 - (2.0 * tmpvar_24))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_13 = tmpvar_2;
    FinalPosition_16 = vPos_21;
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_25;
    vPos_25 = FinalPosition_16;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_26;
      vPos_26 = FinalPosition_16;
      highp float fTime_27;
      highp float fAdherenceScale_28;
      highp vec3 vWindVector_29;
      vWindVector_29 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_27 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_30;
      highp float fOscillation_31;
      fOscillation_31 = 1.0;
      highp float fAmount_32;
      highp float fTarget_33;
      highp vec4 tmpvar_34;
      tmpvar_34.x = (fTime_27 + _glesMultiTexCoord0.w);
      tmpvar_34.y = ((fTime_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_34.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_27 + _glesMultiTexCoord0.w));
      tmpvar_34.w = ((fTime_27 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      vOscillations_30 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      highp float tmpvar_36;
      tmpvar_36 = (vOscillations_30.y * vOscillations_30.z);
      fTarget_33 = 1.0;
      fAmount_32 = tmpvar_36;
      if ((tmpvar_36 < 0.0)) {
        fTarget_33 = -1.0;
        fAmount_32 = -(tmpvar_36);
      };
      fOscillation_31 = (((
        mix (mix (tmpvar_36, fTarget_33, fAmount_32), fTarget_33, fAmount_32)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_30.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_31 = (fOscillation_31 * (1.0 + (vOscillations_30.w * _ST_WindBranchWhip.x)));
      vPos_26 = (FinalPosition_16 + ((vWindVector_29 * fOscillation_31) * _ST_WindBranch.y));
      highp vec4 tmpvar_37;
      tmpvar_37.zw = vec2(0.0, 0.0);
      tmpvar_37.x = ((fTime_27 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_37.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_38;
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      tmpvar_38 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      fAdherenceScale_28 = (1.0 - ((tmpvar_38.x * tmpvar_38.y) * (
        (tmpvar_38.x * tmpvar_38.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_28 = (fAdherenceScale_28 + ((vOscillations_30.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_26 = (vPos_26 + ((
        ((vRotatedBranchAnchor_14 - vPos_26) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_28) * _glesMultiTexCoord0.z));
      vPos_25 = vPos_26;
    } else {
      highp vec3 vPos_40;
      vPos_40 = vPos_25;
      highp float fTime_41;
      highp vec3 vWindVector_42;
      vWindVector_42 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_41 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_43;
      highp float fOscillation_44;
      fOscillation_44 = 1.0;
      highp float fAmount_45;
      highp float fTarget_46;
      highp vec4 tmpvar_47;
      tmpvar_47.w = 0.0;
      tmpvar_47.x = (fTime_41 + _glesMultiTexCoord0.w);
      tmpvar_47.y = ((fTime_41 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_47.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_41 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      vOscillations_43 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      highp float tmpvar_49;
      tmpvar_49 = (vOscillations_43.y * vOscillations_43.z);
      fTarget_46 = 1.0;
      fAmount_45 = tmpvar_49;
      if ((tmpvar_49 < 0.0)) {
        fTarget_46 = -1.0;
        fAmount_45 = -(tmpvar_49);
      };
      fOscillation_44 = (((
        mix (mix (tmpvar_49, fTarget_46, fAmount_45), fTarget_46, fAmount_45)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_43.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_40 = (vPos_25 + ((vWindVector_42 * fOscillation_44) * _ST_WindBranch.y));
      vPos_25 = vPos_40;
    };
    FinalPosition_16 = vPos_25;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_50;
    vPos_50 = FinalPosition_16;
    highp float fMoveAmount_51;
    highp float fAdjust_52;
    highp float fLength_53;
    fLength_53 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_54;
    tmpvar_54 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_52 = tmpvar_54;
    if ((tmpvar_54 != 0.0)) {
      fAdjust_52 = pow (tmpvar_54, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_55;
    tmpvar_55.zw = vec2(0.0, 0.0);
    tmpvar_55.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_55.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_56;
    highp vec4 tmpvar_57;
    tmpvar_57 = abs(((
      fract((tmpvar_55 + 0.5))
     * 2.0) - 1.0));
    tmpvar_56 = (((
      (tmpvar_57 * tmpvar_57)
     * 
      (3.0 - (2.0 * tmpvar_57))
    ) - 0.5) * 2.0);
    fMoveAmount_51 = ((_ST_WindGlobal.y * (tmpvar_56.x + 
      (tmpvar_56.y * tmpvar_56.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_51 = (fMoveAmount_51 * fAdjust_52);
    vPos_50.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * fMoveAmount_51));
    vPos_50 = (normalize(vPos_50) * fLength_53);
    FinalPosition_16 = vPos_50;
  };
  tmpvar_12.xyz = FinalPosition_16;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_58;
  v_58.x = _World2Object[0].x;
  v_58.y = _World2Object[1].x;
  v_58.z = _World2Object[2].x;
  v_58.w = _World2Object[3].x;
  highp vec4 v_59;
  v_59.x = _World2Object[0].y;
  v_59.y = _World2Object[1].y;
  v_59.z = _World2Object[2].y;
  v_59.w = _World2Object[3].y;
  highp vec4 v_60;
  v_60.x = _World2Object[0].z;
  v_60.y = _World2Object[1].z;
  v_60.z = _World2Object[2].z;
  v_60.w = _World2Object[3].z;
  highp vec3 tmpvar_61;
  tmpvar_61 = normalize(((
    (v_58.xyz * tmpvar_13.x)
   + 
    (v_59.xyz * tmpvar_13.y)
  ) + (v_60.xyz * tmpvar_13.z)));
  worldNormal_4 = tmpvar_61;
  tmpvar_5 = worldNormal_4;
  lowp vec4 tmpvar_62;
  tmpvar_62.w = 1.0;
  tmpvar_62.xyz = worldNormal_4;
  mediump vec4 normal_63;
  normal_63 = tmpvar_62;
  mediump vec3 x2_64;
  mediump vec4 tmpvar_65;
  tmpvar_65 = (normal_63.xyzz * normal_63.yzzx);
  x2_64.x = dot (unity_SHBr, tmpvar_65);
  x2_64.y = dot (unity_SHBg, tmpvar_65);
  x2_64.z = dot (unity_SHBb, tmpvar_65);
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = (x2_64 + (unity_SHC.xyz * (
    (normal_63.x * normal_63.x)
   - 
    (normal_63.y * normal_63.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_15;
  normalWorld_15 = tmpvar_4;
  mediump vec3 tmpvar_16;
  mediump vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = normalWorld_15;
  mediump vec3 x1_18;
  x1_18.x = dot (unity_SHAr, tmpvar_17);
  x1_18.y = dot (unity_SHAg, tmpvar_17);
  x1_18.z = dot (unity_SHAb, tmpvar_17);
  tmpvar_16 = (xlv_TEXCOORD4 + x1_18);
  lowp vec4 c_19;
  lowp vec4 c_20;
  lowp float diff_21;
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_21 = tmpvar_22;
  c_20.xyz = ((tmpvar_8 * tmpvar_1) * diff_21);
  c_20.w = tmpvar_9;
  c_19.w = c_20.w;
  c_19.xyz = (c_20.xyz + (tmpvar_8 * tmpvar_16));
  c_3.xyz = c_19.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec3 t3;
highp vec3 t4;
highp vec3 t5;
highp vec4 t6;
mediump vec3 t16_7;
highp vec2 t8;
bool tb8;
highp vec2 t16;
highp vec2 t20;
highp vec2 t22;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
highp float t29;
mediump float t16_31;
void main()
{
    //Instruction 15832
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 15833
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 15834
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 15835
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 15836
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 15837
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 15838
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 15839
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 15840
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 15841
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 15842
    //LT
    tb8 = 0.0<t16_2.x;
    //Instruction 15843
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 15844
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 15845
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 15846
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 15847
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 15848
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 15849
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 15850
    //ADD
    t3.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 15851
    //MAD
    t3.xyz = unity_LODFade.xxx * t3.xyz + in_POSITION0.xyz;
    //Instruction 15852
    //EQ
    tb25 = t16_2.x==5.000000;
    //Instruction 15853
    //LT
    tb27 = in_TEXCOORD0.x<0.500000;
    //Instruction 15854
    //AND
    t27 = tb27 ? 0.750000 : float(0.0);
    //Instruction 15855
    //ADD
    t4.x = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 15856
    //MAD
    t27 = t4.x * _ST_WindFrondRipple.z + t27;
    //Instruction 15857
    //ADD
    t27 = t27 + 0.500000;
    //Instruction 15858
    //FRC
    t27 = fract(t27);
    //Instruction 15859
    //MAD
    t27 = t27 * 2.000000 + -1.0;
    //Instruction 15860
    //MUL
    t4.x = abs(t27) * abs(t27);
    //Instruction 15861
    //MAD
    t27 = -abs(t27) * 2.000000 + 3.000000;
    //Instruction 15862
    //MAD
    t27 = t4.x * t27 + -0.500000;
    //Instruction 15863
    //MUL
    t27 = t27 * in_TEXCOORD2.y;
    //Instruction 15864
    //DP2
    t27 = dot(_ST_WindFrondRipple.yy, vec2(t27));
    //Instruction 15865
    //MAD
    t4.xyz = vec3(t27) * in_NORMAL0.xyz + t3.xyz;
    //Instruction 15866
    //MOVC
    t3.xyz = (bool(tb25)) ? t4.xyz : t3.xyz;
    //Instruction 15867
    //GE
    tb27 = t16_2.x>=3.000000;
    //Instruction 15868
    //IF
    if(tb27){
        //Instruction 15869
        //IF
        if(tb25){
            //Instruction 15870
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 15871
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 15872
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 15873
            //DP3
            t25 = dot(t4.xyz, t4.xyz);
            //Instruction 15874
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 15875
            //MUL
            t4.xyz = vec3(t25) * t4.xyz;
            //Instruction 15876
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 15877
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 15878
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 15879
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 15880
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 15881
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 15882
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 15883
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 15884
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 15885
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 15886
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 15887
            //FRC
            t2 = fract(t2);
            //Instruction 15888
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 15889
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 15890
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 15891
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 15892
            //ADD
            t2 = t2 + t2;
            //Instruction 15893
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 15894
            //LT
            tb27 = t6.w<0.0;
            //Instruction 15895
            //MOV
            t6.y = (-t6.w);
            //Instruction 15896
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 15897
            //MOVC
            t6.xy = (bool(tb27)) ? t6.xy : t6.zw;
            //Instruction 15898
            //MAD
            t27 = (-t2.y) * t2.z + t6.x;
            //Instruction 15899
            //MAD
            t27 = t6.y * t27 + t6.w;
            //Instruction 15900
            //ADD
            t28 = (-t27) + t6.x;
            //Instruction 15901
            //MAD
            t27 = t6.y * t28 + t27;
            //Instruction 15902
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 15903
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 15904
            //ADD
            t29 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 15905
            //MUL
            t29 = t2.x * t29;
            //Instruction 15906
            //MAD
            t27 = t27 * t28 + t29;
            //Instruction 15907
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 15908
            //MUL
            t27 = t27 * t28;
            //Instruction 15909
            //MUL
            t5.xyz = vec3(t27) * t5.xyz;
            //Instruction 15910
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 15911
            //MAD
            t6.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 15912
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 15913
            //MAD
            t6.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 15914
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 15915
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 15916
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 15917
            //MUL
            t22.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 15918
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 15919
            //MAD
            t6.xy = t22.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 15920
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 15921
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 15922
            //MUL
            t25 = t6.x * t6.y;
            //Instruction 15923
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 15924
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 15925
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 15926
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 15927
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 15928
            //MUL
            t4.xyz = vec3(t25) * t4.xyz;
            //Instruction 15929
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 15930
        //ELSE
        } else {
            //Instruction 15931
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 15932
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 15933
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 15934
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 15935
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 15936
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 15937
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 15938
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 15939
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 15940
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 15941
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 15942
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 15943
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 15944
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 15945
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 15946
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 15947
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 15948
            //LT
            tb0 = t2.w<0.0;
            //Instruction 15949
            //MOV
            t2.y = (-t2.w);
            //Instruction 15950
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 15951
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 15952
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 15953
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 15954
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 15955
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 15956
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 15957
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 15958
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 15959
            //MUL
            t27 = t27 * t5.x;
            //Instruction 15960
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 15961
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 15962
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 15963
        //ENDIF
        }
        //Instruction 15964
    //ENDIF
    }
    //Instruction 15965
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 15966
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 15967
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 15968
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 15969
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 15970
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 15971
    //NE
    tb27 = t25!=0.0;
    //Instruction 15972
    //LOG
    t4.x = log2(t25);
    //Instruction 15973
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 15974
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 15975
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 15976
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 15977
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 15978
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 15979
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 15980
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 15981
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 15982
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 15983
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 15984
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 15985
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 15986
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 15987
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 15988
    //MUL
    t25 = t25 * t27;
    //Instruction 15989
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 15990
    //MOV
    t4.y = t3.y;
    //Instruction 15991
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 15992
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 15993
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 15994
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 15995
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 15996
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 15997
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 15998
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 15999
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 16000
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 16001
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 16002
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 16003
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 16004
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 16005
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 16006
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 16007
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 16008
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 16009
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 16010
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 16011
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 16012
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 16013
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 16014
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 16015
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 16016
    //DP3
    t24 = dot(t0.xyz, t0.xyz);
    //Instruction 16017
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 16018
    //MUL
    t0.xyz = vec3(t24) * t0.xyz;
    //Instruction 16019
    //MUL
    t16_2 = t0.yzzx * t0.xyzz;
    //Instruction 16020
    //DP4
    t16_7.x = dot(unity_SHBr, t16_2);
    //Instruction 16021
    //DP4
    t16_7.y = dot(unity_SHBg, t16_2);
    //Instruction 16022
    //DP4
    t16_7.z = dot(unity_SHBb, t16_2);
    //Instruction 16023
    //MUL
    t16_31 = t0.y * t0.y;
    //Instruction 16024
    //MAD
    t16_31 = t0.x * t0.x + (-t16_31);
    //Instruction 16025
    //MAD
    vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(t16_31) + t16_7.xyz;
    //Instruction 16026
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 16027
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 16028
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 16029
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 16030
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_7;
bool tb15;
mediump float t16_17;
void main()
{
    //Instruction 15804
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 15805
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 15806
    //LT
    tb15 = t10_1<0.0;
    //Instruction 15807
    //DISCARD
    if((int(tb15))!=0){discard;}
    //Instruction 15808
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 15809
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 15810
    //ADD
    t16_7.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 15811
    //MAD
    t16_7.xyz = vs_TEXCOORD3.zzz * t16_7.xyz + t10_0.xyz;
    //Instruction 15812
    //MAX
    t16_3.x = max(t16_7.z, t16_7.y);
    //Instruction 15813
    //MAX
    t16_3.x = max(t16_7.x, t16_3.x);
    //Instruction 15814
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 15815
    //MAD
    t16_0.x = t16_2.x * 0.500000 + 0.500000;
    //Instruction 15816
    //MUL
    t16_2.xyz = t16_0.xxx * t16_7.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 15817
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    //Instruction 15818
    //MUL
    t16_3.xyz = t16_2.xyz * _LightColor0.xyz;
    //Instruction 15819
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 15820
    //MOV
    t16_0.w = 1.0;
    //Instruction 15821
    //DP4
    t16_4.x = dot(unity_SHAr, t16_0);
    //Instruction 15822
    //DP4
    t16_4.y = dot(unity_SHAg, t16_0);
    //Instruction 15823
    //DP4
    t16_4.z = dot(unity_SHAb, t16_0);
    //Instruction 15824
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD4.xyz;
    //Instruction 15825
    //MUL
    t16_2.xyz = t16_2.xyz * t16_4.xyz;
    //Instruction 15826
    //DP3
    t16_17 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 15827
    //MAX
    t16_17 = max(t16_17, 0.0);
    //Instruction 15828
    //MAD
    t16_2.xyz = t16_3.xyz * vec3(t16_17) + t16_2.xyz;
    //Instruction 15829
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 15830
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 15831
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  FinalPosition_17 = tmpvar_1.xyz;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_17 = tmpvar_21;
  if ((tmpvar_18 == 5.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_21;
    highp float fOffset_23;
    fOffset_23 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_23 = 0.75;
    };
    highp vec4 tmpvar_24;
    tmpvar_24.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_24.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_23);
    highp vec4 tmpvar_25;
    tmpvar_25 = abs(((
      fract((tmpvar_24 + 0.5))
     * 2.0) - 1.0));
    vPos_22 = (tmpvar_21 + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_14 = tmpvar_2;
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_26;
    vPos_26 = FinalPosition_17;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_27;
      vPos_27 = FinalPosition_17;
      highp float fTime_28;
      highp float fAdherenceScale_29;
      highp vec3 vWindVector_30;
      vWindVector_30 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_28 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_31;
      highp float fOscillation_32;
      fOscillation_32 = 1.0;
      highp float fAmount_33;
      highp float fTarget_34;
      highp vec4 tmpvar_35;
      tmpvar_35.x = (fTime_28 + _glesMultiTexCoord0.w);
      tmpvar_35.y = ((fTime_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_35.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_28 + _glesMultiTexCoord0.w));
      tmpvar_35.w = ((fTime_28 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      vOscillations_31 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      highp float tmpvar_37;
      tmpvar_37 = (vOscillations_31.y * vOscillations_31.z);
      fTarget_34 = 1.0;
      fAmount_33 = tmpvar_37;
      if ((tmpvar_37 < 0.0)) {
        fTarget_34 = -1.0;
        fAmount_33 = -(tmpvar_37);
      };
      fOscillation_32 = (((
        mix (mix (tmpvar_37, fTarget_34, fAmount_33), fTarget_34, fAmount_33)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_31.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_32 = (fOscillation_32 * (1.0 + (vOscillations_31.w * _ST_WindBranchWhip.x)));
      vPos_27 = (FinalPosition_17 + ((vWindVector_30 * fOscillation_32) * _ST_WindBranch.y));
      highp vec4 tmpvar_38;
      tmpvar_38.zw = vec2(0.0, 0.0);
      tmpvar_38.x = ((fTime_28 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_38.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_39;
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      tmpvar_39 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      fAdherenceScale_29 = (1.0 - ((tmpvar_39.x * tmpvar_39.y) * (
        (tmpvar_39.x * tmpvar_39.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_29 = (fAdherenceScale_29 + ((vOscillations_31.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_27 = (vPos_27 + ((
        ((vRotatedBranchAnchor_15 - vPos_27) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_29) * _glesMultiTexCoord0.z));
      vPos_26 = vPos_27;
    } else {
      highp vec3 vPos_41;
      vPos_41 = vPos_26;
      highp float fTime_42;
      highp vec3 vWindVector_43;
      vWindVector_43 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_42 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_44;
      highp float fOscillation_45;
      fOscillation_45 = 1.0;
      highp float fAmount_46;
      highp float fTarget_47;
      highp vec4 tmpvar_48;
      tmpvar_48.w = 0.0;
      tmpvar_48.x = (fTime_42 + _glesMultiTexCoord0.w);
      tmpvar_48.y = ((fTime_42 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_48.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_42 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_49;
      tmpvar_49 = abs(((
        fract((tmpvar_48 + 0.5))
       * 2.0) - 1.0));
      vOscillations_44 = (((
        (tmpvar_49 * tmpvar_49)
       * 
        (3.0 - (2.0 * tmpvar_49))
      ) - 0.5) * 2.0);
      highp float tmpvar_50;
      tmpvar_50 = (vOscillations_44.y * vOscillations_44.z);
      fTarget_47 = 1.0;
      fAmount_46 = tmpvar_50;
      if ((tmpvar_50 < 0.0)) {
        fTarget_47 = -1.0;
        fAmount_46 = -(tmpvar_50);
      };
      fOscillation_45 = (((
        mix (mix (tmpvar_50, fTarget_47, fAmount_46), fTarget_47, fAmount_46)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_44.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_41 = (vPos_26 + ((vWindVector_43 * fOscillation_45) * _ST_WindBranch.y));
      vPos_26 = vPos_41;
    };
    FinalPosition_17 = vPos_26;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_51;
    vPos_51 = FinalPosition_17;
    highp float fMoveAmount_52;
    highp float fAdjust_53;
    highp float fLength_54;
    fLength_54 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_55;
    tmpvar_55 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_53 = tmpvar_55;
    if ((tmpvar_55 != 0.0)) {
      fAdjust_53 = pow (tmpvar_55, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_56;
    tmpvar_56.zw = vec2(0.0, 0.0);
    tmpvar_56.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_56.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_57;
    highp vec4 tmpvar_58;
    tmpvar_58 = abs(((
      fract((tmpvar_56 + 0.5))
     * 2.0) - 1.0));
    tmpvar_57 = (((
      (tmpvar_58 * tmpvar_58)
     * 
      (3.0 - (2.0 * tmpvar_58))
    ) - 0.5) * 2.0);
    fMoveAmount_52 = ((_ST_WindGlobal.y * (tmpvar_57.x + 
      (tmpvar_57.y * tmpvar_57.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_52 = (fMoveAmount_52 * fAdjust_53);
    vPos_51.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_52));
    vPos_51 = (normalize(vPos_51) * fLength_54);
    FinalPosition_17 = vPos_51;
  };
  tmpvar_13.xyz = FinalPosition_17;
  tmpvar_6 = tmpvar_8;
  highp vec4 v_59;
  v_59.x = _World2Object[0].x;
  v_59.y = _World2Object[1].x;
  v_59.z = _World2Object[2].x;
  v_59.w = _World2Object[3].x;
  highp vec4 v_60;
  v_60.x = _World2Object[0].y;
  v_60.y = _World2Object[1].y;
  v_60.z = _World2Object[2].y;
  v_60.w = _World2Object[3].y;
  highp vec4 v_61;
  v_61.x = _World2Object[0].z;
  v_61.y = _World2Object[1].z;
  v_61.z = _World2Object[2].z;
  v_61.w = _World2Object[3].z;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(((
    (v_59.xyz * tmpvar_14.x)
   + 
    (v_60.xyz * tmpvar_14.y)
  ) + (v_61.xyz * tmpvar_14.z)));
  worldNormal_4 = tmpvar_62;
  tmpvar_5 = worldNormal_4;
  lowp vec4 tmpvar_63;
  tmpvar_63.w = 1.0;
  tmpvar_63.xyz = worldNormal_4;
  mediump vec4 normal_64;
  normal_64 = tmpvar_63;
  mediump vec3 x2_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (normal_64.xyzz * normal_64.yzzx);
  x2_65.x = dot (unity_SHBr, tmpvar_66);
  x2_65.y = dot (unity_SHBg, tmpvar_66);
  x2_65.z = dot (unity_SHBb, tmpvar_66);
  tmpvar_7 = (unity_World2Shadow[0] * (_Object2World * tmpvar_13));
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = (x2_65 + (unity_SHC.xyz * (
    (normal_64.x * normal_64.x)
   - 
    (normal_64.y * normal_64.y)
  )));
  xlv_TEXCOORD5 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_15 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD5).x > 
    (xlv_TEXCOORD5.z / xlv_TEXCOORD5.w)
  )), _LightShadowData.x);
  tmpvar_16 = tmpvar_17;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_16;
  mediump vec3 normalWorld_18;
  normalWorld_18 = tmpvar_5;
  mediump vec3 tmpvar_19;
  mediump vec3 tmpvar_20;
  mediump vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = normalWorld_18;
  mediump vec3 x1_22;
  x1_22.x = dot (unity_SHAr, tmpvar_21);
  x1_22.y = dot (unity_SHAg, tmpvar_21);
  x1_22.z = dot (unity_SHAb, tmpvar_21);
  tmpvar_20 = (xlv_TEXCOORD4 + x1_22);
  tmpvar_19 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_19;
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_9 * tmpvar_19) * diff_25);
  c_24.w = tmpvar_10;
  c_23.w = c_24.w;
  c_23.xyz = (c_24.xyz + (tmpvar_9 * tmpvar_20));
  c_4.xyz = c_23.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  FinalPosition_17 = tmpvar_1.xyz;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_17 = tmpvar_21;
  if ((tmpvar_18 == 5.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_21;
    highp float fOffset_23;
    fOffset_23 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_23 = 0.75;
    };
    highp vec4 tmpvar_24;
    tmpvar_24.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_24.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_23);
    highp vec4 tmpvar_25;
    tmpvar_25 = abs(((
      fract((tmpvar_24 + 0.5))
     * 2.0) - 1.0));
    vPos_22 = (tmpvar_21 + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_14 = tmpvar_2;
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_26;
    vPos_26 = FinalPosition_17;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_27;
      vPos_27 = FinalPosition_17;
      highp float fTime_28;
      highp float fAdherenceScale_29;
      highp vec3 vWindVector_30;
      vWindVector_30 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_28 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_31;
      highp float fOscillation_32;
      fOscillation_32 = 1.0;
      highp float fAmount_33;
      highp float fTarget_34;
      highp vec4 tmpvar_35;
      tmpvar_35.x = (fTime_28 + _glesMultiTexCoord0.w);
      tmpvar_35.y = ((fTime_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_35.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_28 + _glesMultiTexCoord0.w));
      tmpvar_35.w = ((fTime_28 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      vOscillations_31 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      highp float tmpvar_37;
      tmpvar_37 = (vOscillations_31.y * vOscillations_31.z);
      fTarget_34 = 1.0;
      fAmount_33 = tmpvar_37;
      if ((tmpvar_37 < 0.0)) {
        fTarget_34 = -1.0;
        fAmount_33 = -(tmpvar_37);
      };
      fOscillation_32 = (((
        mix (mix (tmpvar_37, fTarget_34, fAmount_33), fTarget_34, fAmount_33)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_31.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_32 = (fOscillation_32 * (1.0 + (vOscillations_31.w * _ST_WindBranchWhip.x)));
      vPos_27 = (FinalPosition_17 + ((vWindVector_30 * fOscillation_32) * _ST_WindBranch.y));
      highp vec4 tmpvar_38;
      tmpvar_38.zw = vec2(0.0, 0.0);
      tmpvar_38.x = ((fTime_28 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_38.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_39;
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      tmpvar_39 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      fAdherenceScale_29 = (1.0 - ((tmpvar_39.x * tmpvar_39.y) * (
        (tmpvar_39.x * tmpvar_39.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_29 = (fAdherenceScale_29 + ((vOscillations_31.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_27 = (vPos_27 + ((
        ((vRotatedBranchAnchor_15 - vPos_27) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_29) * _glesMultiTexCoord0.z));
      vPos_26 = vPos_27;
    } else {
      highp vec3 vPos_41;
      vPos_41 = vPos_26;
      highp float fTime_42;
      highp vec3 vWindVector_43;
      vWindVector_43 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_42 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_44;
      highp float fOscillation_45;
      fOscillation_45 = 1.0;
      highp float fAmount_46;
      highp float fTarget_47;
      highp vec4 tmpvar_48;
      tmpvar_48.w = 0.0;
      tmpvar_48.x = (fTime_42 + _glesMultiTexCoord0.w);
      tmpvar_48.y = ((fTime_42 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_48.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_42 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_49;
      tmpvar_49 = abs(((
        fract((tmpvar_48 + 0.5))
       * 2.0) - 1.0));
      vOscillations_44 = (((
        (tmpvar_49 * tmpvar_49)
       * 
        (3.0 - (2.0 * tmpvar_49))
      ) - 0.5) * 2.0);
      highp float tmpvar_50;
      tmpvar_50 = (vOscillations_44.y * vOscillations_44.z);
      fTarget_47 = 1.0;
      fAmount_46 = tmpvar_50;
      if ((tmpvar_50 < 0.0)) {
        fTarget_47 = -1.0;
        fAmount_46 = -(tmpvar_50);
      };
      fOscillation_45 = (((
        mix (mix (tmpvar_50, fTarget_47, fAmount_46), fTarget_47, fAmount_46)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_44.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_41 = (vPos_26 + ((vWindVector_43 * fOscillation_45) * _ST_WindBranch.y));
      vPos_26 = vPos_41;
    };
    FinalPosition_17 = vPos_26;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_51;
    vPos_51 = FinalPosition_17;
    highp float fMoveAmount_52;
    highp float fAdjust_53;
    highp float fLength_54;
    fLength_54 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_55;
    tmpvar_55 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_53 = tmpvar_55;
    if ((tmpvar_55 != 0.0)) {
      fAdjust_53 = pow (tmpvar_55, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_56;
    tmpvar_56.zw = vec2(0.0, 0.0);
    tmpvar_56.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_56.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_57;
    highp vec4 tmpvar_58;
    tmpvar_58 = abs(((
      fract((tmpvar_56 + 0.5))
     * 2.0) - 1.0));
    tmpvar_57 = (((
      (tmpvar_58 * tmpvar_58)
     * 
      (3.0 - (2.0 * tmpvar_58))
    ) - 0.5) * 2.0);
    fMoveAmount_52 = ((_ST_WindGlobal.y * (tmpvar_57.x + 
      (tmpvar_57.y * tmpvar_57.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_52 = (fMoveAmount_52 * fAdjust_53);
    vPos_51.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_52));
    vPos_51 = (normalize(vPos_51) * fLength_54);
    FinalPosition_17 = vPos_51;
  };
  tmpvar_13.xyz = FinalPosition_17;
  tmpvar_6 = tmpvar_8;
  highp vec3 tmpvar_59;
  tmpvar_59 = (_Object2World * tmpvar_13).xyz;
  highp vec4 v_60;
  v_60.x = _World2Object[0].x;
  v_60.y = _World2Object[1].x;
  v_60.z = _World2Object[2].x;
  v_60.w = _World2Object[3].x;
  highp vec4 v_61;
  v_61.x = _World2Object[0].y;
  v_61.y = _World2Object[1].y;
  v_61.z = _World2Object[2].y;
  v_61.w = _World2Object[3].y;
  highp vec4 v_62;
  v_62.x = _World2Object[0].z;
  v_62.y = _World2Object[1].z;
  v_62.z = _World2Object[2].z;
  v_62.w = _World2Object[3].z;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize(((
    (v_60.xyz * tmpvar_14.x)
   + 
    (v_61.xyz * tmpvar_14.y)
  ) + (v_62.xyz * tmpvar_14.z)));
  worldNormal_4 = tmpvar_63;
  tmpvar_5 = worldNormal_4;
  lowp vec4 tmpvar_64;
  tmpvar_64.w = 1.0;
  tmpvar_64.xyz = worldNormal_4;
  mediump vec4 normal_65;
  normal_65 = tmpvar_64;
  mediump vec3 x2_66;
  mediump vec4 tmpvar_67;
  tmpvar_67 = (normal_65.xyzz * normal_65.yzzx);
  x2_66.x = dot (unity_SHBr, tmpvar_67);
  x2_66.y = dot (unity_SHBg, tmpvar_67);
  x2_66.z = dot (unity_SHBb, tmpvar_67);
  highp vec3 lightColor0_68;
  lightColor0_68 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_69;
  lightColor1_69 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_70;
  lightColor2_70 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_71;
  lightColor3_71 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_72;
  lightAttenSq_72 = unity_4LightAtten0;
  highp vec3 normal_73;
  normal_73 = worldNormal_4;
  highp vec3 col_74;
  highp vec4 ndotl_75;
  highp vec4 lengthSq_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = (unity_4LightPosX0 - tmpvar_59.x);
  highp vec4 tmpvar_78;
  tmpvar_78 = (unity_4LightPosY0 - tmpvar_59.y);
  highp vec4 tmpvar_79;
  tmpvar_79 = (unity_4LightPosZ0 - tmpvar_59.z);
  lengthSq_76 = (tmpvar_77 * tmpvar_77);
  lengthSq_76 = (lengthSq_76 + (tmpvar_78 * tmpvar_78));
  lengthSq_76 = (lengthSq_76 + (tmpvar_79 * tmpvar_79));
  ndotl_75 = (tmpvar_77 * normal_73.x);
  ndotl_75 = (ndotl_75 + (tmpvar_78 * normal_73.y));
  ndotl_75 = (ndotl_75 + (tmpvar_79 * normal_73.z));
  highp vec4 tmpvar_80;
  tmpvar_80 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_75 * inversesqrt(lengthSq_76)));
  ndotl_75 = tmpvar_80;
  highp vec4 tmpvar_81;
  tmpvar_81 = (tmpvar_80 * (1.0/((1.0 + 
    (lengthSq_76 * lightAttenSq_72)
  ))));
  col_74 = (lightColor0_68 * tmpvar_81.x);
  col_74 = (col_74 + (lightColor1_69 * tmpvar_81.y));
  col_74 = (col_74 + (lightColor2_70 * tmpvar_81.z));
  col_74 = (col_74 + (lightColor3_71 * tmpvar_81.w));
  tmpvar_7 = ((x2_66 + (unity_SHC.xyz * 
    ((normal_65.x * normal_65.x) - (normal_65.y * normal_65.y))
  )) + col_74);
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_59;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_15;
  normalWorld_15 = tmpvar_4;
  mediump vec3 tmpvar_16;
  mediump vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = normalWorld_15;
  mediump vec3 x1_18;
  x1_18.x = dot (unity_SHAr, tmpvar_17);
  x1_18.y = dot (unity_SHAg, tmpvar_17);
  x1_18.z = dot (unity_SHAb, tmpvar_17);
  tmpvar_16 = (xlv_TEXCOORD4 + x1_18);
  lowp vec4 c_19;
  lowp vec4 c_20;
  lowp float diff_21;
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_21 = tmpvar_22;
  c_20.xyz = ((tmpvar_8 * tmpvar_1) * diff_21);
  c_20.w = tmpvar_9;
  c_19.w = c_20.w;
  c_19.xyz = (c_20.xyz + (tmpvar_8 * tmpvar_16));
  c_3.xyz = c_19.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
mediump vec3 t16_7;
highp vec2 t8;
bool tb8;
highp vec2 t16;
highp vec2 t20;
highp vec2 t22;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
highp float t29;
mediump float t16_31;
void main()
{
    //Instruction 16059
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 16060
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 16061
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 16062
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 16063
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 16064
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 16065
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 16066
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 16067
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 16068
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 16069
    //LT
    tb8 = 0.0<t16_2.x;
    //Instruction 16070
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 16071
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 16072
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 16073
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 16074
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 16075
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 16076
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 16077
    //ADD
    t3.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 16078
    //MAD
    t3.xyz = unity_LODFade.xxx * t3.xyz + in_POSITION0.xyz;
    //Instruction 16079
    //EQ
    tb25 = t16_2.x==5.000000;
    //Instruction 16080
    //LT
    tb27 = in_TEXCOORD0.x<0.500000;
    //Instruction 16081
    //AND
    t27 = tb27 ? 0.750000 : float(0.0);
    //Instruction 16082
    //ADD
    t4.x = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 16083
    //MAD
    t27 = t4.x * _ST_WindFrondRipple.z + t27;
    //Instruction 16084
    //ADD
    t27 = t27 + 0.500000;
    //Instruction 16085
    //FRC
    t27 = fract(t27);
    //Instruction 16086
    //MAD
    t27 = t27 * 2.000000 + -1.0;
    //Instruction 16087
    //MUL
    t4.x = abs(t27) * abs(t27);
    //Instruction 16088
    //MAD
    t27 = -abs(t27) * 2.000000 + 3.000000;
    //Instruction 16089
    //MAD
    t27 = t4.x * t27 + -0.500000;
    //Instruction 16090
    //MUL
    t27 = t27 * in_TEXCOORD2.y;
    //Instruction 16091
    //DP2
    t27 = dot(_ST_WindFrondRipple.yy, vec2(t27));
    //Instruction 16092
    //MAD
    t4.xyz = vec3(t27) * in_NORMAL0.xyz + t3.xyz;
    //Instruction 16093
    //MOVC
    t3.xyz = (bool(tb25)) ? t4.xyz : t3.xyz;
    //Instruction 16094
    //GE
    tb27 = t16_2.x>=3.000000;
    //Instruction 16095
    //IF
    if(tb27){
        //Instruction 16096
        //IF
        if(tb25){
            //Instruction 16097
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 16098
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 16099
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 16100
            //DP3
            t25 = dot(t4.xyz, t4.xyz);
            //Instruction 16101
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 16102
            //MUL
            t4.xyz = vec3(t25) * t4.xyz;
            //Instruction 16103
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 16104
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 16105
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 16106
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 16107
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 16108
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 16109
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 16110
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 16111
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 16112
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 16113
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 16114
            //FRC
            t2 = fract(t2);
            //Instruction 16115
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 16116
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 16117
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 16118
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 16119
            //ADD
            t2 = t2 + t2;
            //Instruction 16120
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 16121
            //LT
            tb27 = t6.w<0.0;
            //Instruction 16122
            //MOV
            t6.y = (-t6.w);
            //Instruction 16123
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 16124
            //MOVC
            t6.xy = (bool(tb27)) ? t6.xy : t6.zw;
            //Instruction 16125
            //MAD
            t27 = (-t2.y) * t2.z + t6.x;
            //Instruction 16126
            //MAD
            t27 = t6.y * t27 + t6.w;
            //Instruction 16127
            //ADD
            t28 = (-t27) + t6.x;
            //Instruction 16128
            //MAD
            t27 = t6.y * t28 + t27;
            //Instruction 16129
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 16130
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 16131
            //ADD
            t29 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 16132
            //MUL
            t29 = t2.x * t29;
            //Instruction 16133
            //MAD
            t27 = t27 * t28 + t29;
            //Instruction 16134
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 16135
            //MUL
            t27 = t27 * t28;
            //Instruction 16136
            //MUL
            t5.xyz = vec3(t27) * t5.xyz;
            //Instruction 16137
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 16138
            //MAD
            t6.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 16139
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 16140
            //MAD
            t6.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 16141
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 16142
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 16143
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 16144
            //MUL
            t22.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 16145
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 16146
            //MAD
            t6.xy = t22.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 16147
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 16148
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 16149
            //MUL
            t25 = t6.x * t6.y;
            //Instruction 16150
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 16151
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 16152
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 16153
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 16154
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 16155
            //MUL
            t4.xyz = vec3(t25) * t4.xyz;
            //Instruction 16156
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 16157
        //ELSE
        } else {
            //Instruction 16158
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 16159
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 16160
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 16161
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 16162
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 16163
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 16164
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 16165
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 16166
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 16167
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 16168
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 16169
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 16170
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 16171
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 16172
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 16173
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 16174
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 16175
            //LT
            tb0 = t2.w<0.0;
            //Instruction 16176
            //MOV
            t2.y = (-t2.w);
            //Instruction 16177
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 16178
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 16179
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 16180
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 16181
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 16182
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 16183
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 16184
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 16185
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 16186
            //MUL
            t27 = t27 * t5.x;
            //Instruction 16187
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 16188
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 16189
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 16190
        //ENDIF
        }
        //Instruction 16191
    //ENDIF
    }
    //Instruction 16192
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 16193
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 16194
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 16195
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 16196
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 16197
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 16198
    //NE
    tb27 = t25!=0.0;
    //Instruction 16199
    //LOG
    t4.x = log2(t25);
    //Instruction 16200
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 16201
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 16202
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 16203
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 16204
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 16205
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 16206
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 16207
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 16208
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 16209
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 16210
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 16211
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 16212
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 16213
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 16214
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 16215
    //MUL
    t25 = t25 * t27;
    //Instruction 16216
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 16217
    //MOV
    t4.y = t3.y;
    //Instruction 16218
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 16219
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 16220
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 16221
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 16222
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 16223
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 16224
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 16225
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 16226
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 16227
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 16228
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 16229
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 16230
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 16231
    //MOV
    t3.x = _World2Object[0].x;
    //Instruction 16232
    //MOV
    t3.y = _World2Object[1].x;
    //Instruction 16233
    //MOV
    t3.z = _World2Object[2].x;
    //Instruction 16234
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 16235
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 16236
    //MOV
    t4.z = _World2Object[2].y;
    //Instruction 16237
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 16238
    //MAD
    t3.xyz = t3.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 16239
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 16240
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 16241
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 16242
    //MAD
    t3.xyz = t4.xyz * in_NORMAL0.zzz + t3.xyz;
    //Instruction 16243
    //DP3
    t24 = dot(t3.xyz, t3.xyz);
    //Instruction 16244
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 16245
    //MUL
    t3.xyz = vec3(t24) * t3.xyz;
    //Instruction 16246
    //MUL
    t16_2 = t3.yzzx * t3.xyzz;
    //Instruction 16247
    //DP4
    t16_7.x = dot(unity_SHBr, t16_2);
    //Instruction 16248
    //DP4
    t16_7.y = dot(unity_SHBg, t16_2);
    //Instruction 16249
    //DP4
    t16_7.z = dot(unity_SHBb, t16_2);
    //Instruction 16250
    //MUL
    t16_31 = t3.y * t3.y;
    //Instruction 16251
    //MAD
    t16_31 = t3.x * t3.x + (-t16_31);
    //Instruction 16252
    //MAD
    t16_7.xyz = unity_SHC.xyz * vec3(t16_31) + t16_7.xyz;
    //Instruction 16253
    //ADD
    t2 = (-t0.xxxx) + unity_4LightPosX0;
    //Instruction 16254
    //ADD
    t4 = (-t0.yyyy) + unity_4LightPosY0;
    //Instruction 16255
    //ADD
    t5 = (-t0.zzzz) + unity_4LightPosZ0;
    //Instruction 16256
    //MUL
    t6 = t4 * t4;
    //Instruction 16257
    //MAD
    t6 = t2 * t2 + t6;
    //Instruction 16258
    //MAD
    t6 = t5 * t5 + t6;
    //Instruction 16259
    //MUL
    t4 = t3.yyyy * t4;
    //Instruction 16260
    //MAD
    t2 = t2 * t3.xxxx + t4;
    //Instruction 16261
    //MAD
    t2 = t5 * t3.zzzz + t2;
    //Instruction 16262
    //RSQ
    t4 = inversesqrt(t6);
    //Instruction 16263
    //MUL
    t2 = t2 * t4;
    //Instruction 16264
    //MAX
    t2 = max(t2, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 16265
    //MAD
    t4 = t6 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 16266
    //DIV
    t4 = vec4(1.0, 1.0, 1.0, 1.0) / t4;
    //Instruction 16267
    //MUL
    t2 = t2 * t4;
    //Instruction 16268
    //MUL
    t4.xyz = t2.yyy * unity_LightColor[1].xyz;
    //Instruction 16269
    //MAD
    t4.xyz = unity_LightColor[0].xyz * t2.xxx + t4.xyz;
    //Instruction 16270
    //MAD
    t4.xyz = unity_LightColor[2].xyz * t2.zzz + t4.xyz;
    //Instruction 16271
    //MAD
    t4.xyz = unity_LightColor[3].xyz * t2.www + t4.xyz;
    //Instruction 16272
    //ADD
    t4.xyz = t4.xyz + t16_7.xyz;
    //Instruction 16273
    //MOV
    vs_TEXCOORD0.xyz = t3.xyz;
    //Instruction 16274
    //MOV
    vs_TEXCOORD1.xyz = t0.xyz;
    //Instruction 16275
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 16276
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 16277
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 16278
    //MOV
    vs_TEXCOORD4.xyz = t4.xyz;
    //Instruction 16279
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_7;
bool tb15;
mediump float t16_17;
void main()
{
    //Instruction 16031
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 16032
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 16033
    //LT
    tb15 = t10_1<0.0;
    //Instruction 16034
    //DISCARD
    if((int(tb15))!=0){discard;}
    //Instruction 16035
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 16036
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 16037
    //ADD
    t16_7.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 16038
    //MAD
    t16_7.xyz = vs_TEXCOORD3.zzz * t16_7.xyz + t10_0.xyz;
    //Instruction 16039
    //MAX
    t16_3.x = max(t16_7.z, t16_7.y);
    //Instruction 16040
    //MAX
    t16_3.x = max(t16_7.x, t16_3.x);
    //Instruction 16041
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 16042
    //MAD
    t16_0.x = t16_2.x * 0.500000 + 0.500000;
    //Instruction 16043
    //MUL
    t16_2.xyz = t16_0.xxx * t16_7.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 16044
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    //Instruction 16045
    //MUL
    t16_3.xyz = t16_2.xyz * _LightColor0.xyz;
    //Instruction 16046
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 16047
    //MOV
    t16_0.w = 1.0;
    //Instruction 16048
    //DP4
    t16_4.x = dot(unity_SHAr, t16_0);
    //Instruction 16049
    //DP4
    t16_4.y = dot(unity_SHAg, t16_0);
    //Instruction 16050
    //DP4
    t16_4.z = dot(unity_SHAb, t16_0);
    //Instruction 16051
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD4.xyz;
    //Instruction 16052
    //MUL
    t16_2.xyz = t16_2.xyz * t16_4.xyz;
    //Instruction 16053
    //DP3
    t16_17 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 16054
    //MAX
    t16_17 = max(t16_17, 0.0);
    //Instruction 16055
    //MAD
    t16_2.xyz = t16_3.xyz * vec3(t16_17) + t16_2.xyz;
    //Instruction 16056
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 16057
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 16058
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec4 tmpvar_8;
  lowp vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10.xy = tmpvar_3.xy;
  tmpvar_9.w = _Color.w;
  tmpvar_9.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].x;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].y;
  tmpvar_11 = clamp (((
    fract(((tmpvar_12 + tmpvar_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_10.z = tmpvar_11;
  highp vec4 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_1;
  tmpvar_15 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  FinalPosition_18 = tmpvar_1.xyz;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_18 = tmpvar_22;
  if ((tmpvar_19 == 5.0)) {
    highp vec3 vPos_23;
    vPos_23 = tmpvar_22;
    highp float fOffset_24;
    fOffset_24 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_24 = 0.75;
    };
    highp vec4 tmpvar_25;
    tmpvar_25.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_25.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_24);
    highp vec4 tmpvar_26;
    tmpvar_26 = abs(((
      fract((tmpvar_25 + 0.5))
     * 2.0) - 1.0));
    vPos_23 = (tmpvar_22 + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_26 * tmpvar_26)
       * 
        (3.0 - (2.0 * tmpvar_26))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_15 = tmpvar_2;
    FinalPosition_18 = vPos_23;
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_27;
    vPos_27 = FinalPosition_18;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_28;
      vPos_28 = FinalPosition_18;
      highp float fTime_29;
      highp float fAdherenceScale_30;
      highp vec3 vWindVector_31;
      vWindVector_31 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_29 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_32;
      highp float fOscillation_33;
      fOscillation_33 = 1.0;
      highp float fAmount_34;
      highp float fTarget_35;
      highp vec4 tmpvar_36;
      tmpvar_36.x = (fTime_29 + _glesMultiTexCoord0.w);
      tmpvar_36.y = ((fTime_29 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_36.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_29 + _glesMultiTexCoord0.w));
      tmpvar_36.w = ((fTime_29 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      vOscillations_32 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      highp float tmpvar_38;
      tmpvar_38 = (vOscillations_32.y * vOscillations_32.z);
      fTarget_35 = 1.0;
      fAmount_34 = tmpvar_38;
      if ((tmpvar_38 < 0.0)) {
        fTarget_35 = -1.0;
        fAmount_34 = -(tmpvar_38);
      };
      fOscillation_33 = (((
        mix (mix (tmpvar_38, fTarget_35, fAmount_34), fTarget_35, fAmount_34)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_32.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_33 = (fOscillation_33 * (1.0 + (vOscillations_32.w * _ST_WindBranchWhip.x)));
      vPos_28 = (FinalPosition_18 + ((vWindVector_31 * fOscillation_33) * _ST_WindBranch.y));
      highp vec4 tmpvar_39;
      tmpvar_39.zw = vec2(0.0, 0.0);
      tmpvar_39.x = ((fTime_29 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_39.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_40;
      highp vec4 tmpvar_41;
      tmpvar_41 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      tmpvar_40 = (((
        (tmpvar_41 * tmpvar_41)
       * 
        (3.0 - (2.0 * tmpvar_41))
      ) - 0.5) * 2.0);
      fAdherenceScale_30 = (1.0 - ((tmpvar_40.x * tmpvar_40.y) * (
        (tmpvar_40.x * tmpvar_40.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_30 = (fAdherenceScale_30 + ((vOscillations_32.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_28 = (vPos_28 + ((
        ((vRotatedBranchAnchor_16 - vPos_28) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_30) * _glesMultiTexCoord0.z));
      vPos_27 = vPos_28;
    } else {
      highp vec3 vPos_42;
      vPos_42 = vPos_27;
      highp float fTime_43;
      highp vec3 vWindVector_44;
      vWindVector_44 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_43 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_45;
      highp float fOscillation_46;
      fOscillation_46 = 1.0;
      highp float fAmount_47;
      highp float fTarget_48;
      highp vec4 tmpvar_49;
      tmpvar_49.w = 0.0;
      tmpvar_49.x = (fTime_43 + _glesMultiTexCoord0.w);
      tmpvar_49.y = ((fTime_43 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_49.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_43 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_50;
      tmpvar_50 = abs(((
        fract((tmpvar_49 + 0.5))
       * 2.0) - 1.0));
      vOscillations_45 = (((
        (tmpvar_50 * tmpvar_50)
       * 
        (3.0 - (2.0 * tmpvar_50))
      ) - 0.5) * 2.0);
      highp float tmpvar_51;
      tmpvar_51 = (vOscillations_45.y * vOscillations_45.z);
      fTarget_48 = 1.0;
      fAmount_47 = tmpvar_51;
      if ((tmpvar_51 < 0.0)) {
        fTarget_48 = -1.0;
        fAmount_47 = -(tmpvar_51);
      };
      fOscillation_46 = (((
        mix (mix (tmpvar_51, fTarget_48, fAmount_47), fTarget_48, fAmount_47)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_45.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_42 = (vPos_27 + ((vWindVector_44 * fOscillation_46) * _ST_WindBranch.y));
      vPos_27 = vPos_42;
    };
    FinalPosition_18 = vPos_27;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_52;
    vPos_52 = FinalPosition_18;
    highp float fMoveAmount_53;
    highp float fAdjust_54;
    highp float fLength_55;
    fLength_55 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_56;
    tmpvar_56 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_54 = tmpvar_56;
    if ((tmpvar_56 != 0.0)) {
      fAdjust_54 = pow (tmpvar_56, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_57;
    tmpvar_57.zw = vec2(0.0, 0.0);
    tmpvar_57.x = (tmpvar_12 + _ST_WindGlobal.x);
    tmpvar_57.y = (tmpvar_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_58;
    highp vec4 tmpvar_59;
    tmpvar_59 = abs(((
      fract((tmpvar_57 + 0.5))
     * 2.0) - 1.0));
    tmpvar_58 = (((
      (tmpvar_59 * tmpvar_59)
     * 
      (3.0 - (2.0 * tmpvar_59))
    ) - 0.5) * 2.0);
    fMoveAmount_53 = ((_ST_WindGlobal.y * (tmpvar_58.x + 
      (tmpvar_58.y * tmpvar_58.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_53 = (fMoveAmount_53 * fAdjust_54);
    vPos_52.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * fMoveAmount_53));
    vPos_52 = (normalize(vPos_52) * fLength_55);
    FinalPosition_18 = vPos_52;
  };
  tmpvar_14.xyz = FinalPosition_18;
  tmpvar_6 = tmpvar_9;
  highp vec3 tmpvar_60;
  tmpvar_60 = (_Object2World * tmpvar_14).xyz;
  highp vec4 v_61;
  v_61.x = _World2Object[0].x;
  v_61.y = _World2Object[1].x;
  v_61.z = _World2Object[2].x;
  v_61.w = _World2Object[3].x;
  highp vec4 v_62;
  v_62.x = _World2Object[0].y;
  v_62.y = _World2Object[1].y;
  v_62.z = _World2Object[2].y;
  v_62.w = _World2Object[3].y;
  highp vec4 v_63;
  v_63.x = _World2Object[0].z;
  v_63.y = _World2Object[1].z;
  v_63.z = _World2Object[2].z;
  v_63.w = _World2Object[3].z;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(((
    (v_61.xyz * tmpvar_15.x)
   + 
    (v_62.xyz * tmpvar_15.y)
  ) + (v_63.xyz * tmpvar_15.z)));
  worldNormal_4 = tmpvar_64;
  tmpvar_5 = worldNormal_4;
  lowp vec4 tmpvar_65;
  tmpvar_65.w = 1.0;
  tmpvar_65.xyz = worldNormal_4;
  mediump vec4 normal_66;
  normal_66 = tmpvar_65;
  mediump vec3 x2_67;
  mediump vec4 tmpvar_68;
  tmpvar_68 = (normal_66.xyzz * normal_66.yzzx);
  x2_67.x = dot (unity_SHBr, tmpvar_68);
  x2_67.y = dot (unity_SHBg, tmpvar_68);
  x2_67.z = dot (unity_SHBb, tmpvar_68);
  highp vec3 lightColor0_69;
  lightColor0_69 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_70;
  lightColor1_70 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_71;
  lightColor2_71 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_72;
  lightColor3_72 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_73;
  lightAttenSq_73 = unity_4LightAtten0;
  highp vec3 normal_74;
  normal_74 = worldNormal_4;
  highp vec3 col_75;
  highp vec4 ndotl_76;
  highp vec4 lengthSq_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = (unity_4LightPosX0 - tmpvar_60.x);
  highp vec4 tmpvar_79;
  tmpvar_79 = (unity_4LightPosY0 - tmpvar_60.y);
  highp vec4 tmpvar_80;
  tmpvar_80 = (unity_4LightPosZ0 - tmpvar_60.z);
  lengthSq_77 = (tmpvar_78 * tmpvar_78);
  lengthSq_77 = (lengthSq_77 + (tmpvar_79 * tmpvar_79));
  lengthSq_77 = (lengthSq_77 + (tmpvar_80 * tmpvar_80));
  ndotl_76 = (tmpvar_78 * normal_74.x);
  ndotl_76 = (ndotl_76 + (tmpvar_79 * normal_74.y));
  ndotl_76 = (ndotl_76 + (tmpvar_80 * normal_74.z));
  highp vec4 tmpvar_81;
  tmpvar_81 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_76 * inversesqrt(lengthSq_77)));
  ndotl_76 = tmpvar_81;
  highp vec4 tmpvar_82;
  tmpvar_82 = (tmpvar_81 * (1.0/((1.0 + 
    (lengthSq_77 * lightAttenSq_73)
  ))));
  col_75 = (lightColor0_69 * tmpvar_82.x);
  col_75 = (col_75 + (lightColor1_70 * tmpvar_82.y));
  col_75 = (col_75 + (lightColor2_71 * tmpvar_82.z));
  col_75 = (col_75 + (lightColor3_72 * tmpvar_82.w));
  tmpvar_7 = ((x2_67 + (unity_SHC.xyz * 
    ((normal_66.x * normal_66.x) - (normal_66.y * normal_66.y))
  )) + col_75);
  tmpvar_8 = (unity_World2Shadow[0] * (_Object2World * tmpvar_14));
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_60;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_10;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_15 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD5).x > 
    (xlv_TEXCOORD5.z / xlv_TEXCOORD5.w)
  )), _LightShadowData.x);
  tmpvar_16 = tmpvar_17;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_16;
  mediump vec3 normalWorld_18;
  normalWorld_18 = tmpvar_5;
  mediump vec3 tmpvar_19;
  mediump vec3 tmpvar_20;
  mediump vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = normalWorld_18;
  mediump vec3 x1_22;
  x1_22.x = dot (unity_SHAr, tmpvar_21);
  x1_22.y = dot (unity_SHAg, tmpvar_21);
  x1_22.z = dot (unity_SHAb, tmpvar_21);
  tmpvar_20 = (xlv_TEXCOORD4 + x1_22);
  tmpvar_19 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_19;
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_9 * tmpvar_19) * diff_25);
  c_24.w = tmpvar_10;
  c_23.w = c_24.w;
  c_23.xyz = (c_24.xyz + (tmpvar_9 * tmpvar_20));
  c_4.xyz = c_23.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  FinalPosition_17 = tmpvar_1.xyz;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_17 = tmpvar_21;
  if ((tmpvar_18 == 5.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_21;
    highp float fOffset_23;
    fOffset_23 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_23 = 0.75;
    };
    highp vec4 tmpvar_24;
    tmpvar_24.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_24.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_23);
    highp vec4 tmpvar_25;
    tmpvar_25 = abs(((
      fract((tmpvar_24 + 0.5))
     * 2.0) - 1.0));
    vPos_22 = (tmpvar_21 + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_14 = tmpvar_2;
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_26;
    vPos_26 = FinalPosition_17;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_27;
      vPos_27 = FinalPosition_17;
      highp float fTime_28;
      highp float fAdherenceScale_29;
      highp vec3 vWindVector_30;
      vWindVector_30 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_28 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_31;
      highp float fOscillation_32;
      fOscillation_32 = 1.0;
      highp float fAmount_33;
      highp float fTarget_34;
      highp vec4 tmpvar_35;
      tmpvar_35.x = (fTime_28 + _glesMultiTexCoord0.w);
      tmpvar_35.y = ((fTime_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_35.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_28 + _glesMultiTexCoord0.w));
      tmpvar_35.w = ((fTime_28 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      vOscillations_31 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      highp float tmpvar_37;
      tmpvar_37 = (vOscillations_31.y * vOscillations_31.z);
      fTarget_34 = 1.0;
      fAmount_33 = tmpvar_37;
      if ((tmpvar_37 < 0.0)) {
        fTarget_34 = -1.0;
        fAmount_33 = -(tmpvar_37);
      };
      fOscillation_32 = (((
        mix (mix (tmpvar_37, fTarget_34, fAmount_33), fTarget_34, fAmount_33)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_31.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_32 = (fOscillation_32 * (1.0 + (vOscillations_31.w * _ST_WindBranchWhip.x)));
      vPos_27 = (FinalPosition_17 + ((vWindVector_30 * fOscillation_32) * _ST_WindBranch.y));
      highp vec4 tmpvar_38;
      tmpvar_38.zw = vec2(0.0, 0.0);
      tmpvar_38.x = ((fTime_28 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_38.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_39;
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      tmpvar_39 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      fAdherenceScale_29 = (1.0 - ((tmpvar_39.x * tmpvar_39.y) * (
        (tmpvar_39.x * tmpvar_39.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_29 = (fAdherenceScale_29 + ((vOscillations_31.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_27 = (vPos_27 + ((
        ((vRotatedBranchAnchor_15 - vPos_27) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_29) * _glesMultiTexCoord0.z));
      vPos_26 = vPos_27;
    } else {
      highp vec3 vPos_41;
      vPos_41 = vPos_26;
      highp float fTime_42;
      highp vec3 vWindVector_43;
      vWindVector_43 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_42 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_44;
      highp float fOscillation_45;
      fOscillation_45 = 1.0;
      highp float fAmount_46;
      highp float fTarget_47;
      highp vec4 tmpvar_48;
      tmpvar_48.w = 0.0;
      tmpvar_48.x = (fTime_42 + _glesMultiTexCoord0.w);
      tmpvar_48.y = ((fTime_42 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_48.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_42 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_49;
      tmpvar_49 = abs(((
        fract((tmpvar_48 + 0.5))
       * 2.0) - 1.0));
      vOscillations_44 = (((
        (tmpvar_49 * tmpvar_49)
       * 
        (3.0 - (2.0 * tmpvar_49))
      ) - 0.5) * 2.0);
      highp float tmpvar_50;
      tmpvar_50 = (vOscillations_44.y * vOscillations_44.z);
      fTarget_47 = 1.0;
      fAmount_46 = tmpvar_50;
      if ((tmpvar_50 < 0.0)) {
        fTarget_47 = -1.0;
        fAmount_46 = -(tmpvar_50);
      };
      fOscillation_45 = (((
        mix (mix (tmpvar_50, fTarget_47, fAmount_46), fTarget_47, fAmount_46)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_44.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_41 = (vPos_26 + ((vWindVector_43 * fOscillation_45) * _ST_WindBranch.y));
      vPos_26 = vPos_41;
    };
    FinalPosition_17 = vPos_26;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_51;
    vPos_51 = FinalPosition_17;
    highp float fMoveAmount_52;
    highp float fAdjust_53;
    highp float fLength_54;
    fLength_54 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_55;
    tmpvar_55 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_53 = tmpvar_55;
    if ((tmpvar_55 != 0.0)) {
      fAdjust_53 = pow (tmpvar_55, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_56;
    tmpvar_56.zw = vec2(0.0, 0.0);
    tmpvar_56.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_56.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_57;
    highp vec4 tmpvar_58;
    tmpvar_58 = abs(((
      fract((tmpvar_56 + 0.5))
     * 2.0) - 1.0));
    tmpvar_57 = (((
      (tmpvar_58 * tmpvar_58)
     * 
      (3.0 - (2.0 * tmpvar_58))
    ) - 0.5) * 2.0);
    fMoveAmount_52 = ((_ST_WindGlobal.y * (tmpvar_57.x + 
      (tmpvar_57.y * tmpvar_57.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_52 = (fMoveAmount_52 * fAdjust_53);
    vPos_51.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_52));
    vPos_51 = (normalize(vPos_51) * fLength_54);
    FinalPosition_17 = vPos_51;
  };
  tmpvar_13.xyz = FinalPosition_17;
  tmpvar_6 = tmpvar_8;
  highp vec4 v_59;
  v_59.x = _World2Object[0].x;
  v_59.y = _World2Object[1].x;
  v_59.z = _World2Object[2].x;
  v_59.w = _World2Object[3].x;
  highp vec4 v_60;
  v_60.x = _World2Object[0].y;
  v_60.y = _World2Object[1].y;
  v_60.z = _World2Object[2].y;
  v_60.w = _World2Object[3].y;
  highp vec4 v_61;
  v_61.x = _World2Object[0].z;
  v_61.y = _World2Object[1].z;
  v_61.z = _World2Object[2].z;
  v_61.w = _World2Object[3].z;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(((
    (v_59.xyz * tmpvar_14.x)
   + 
    (v_60.xyz * tmpvar_14.y)
  ) + (v_61.xyz * tmpvar_14.z)));
  worldNormal_4 = tmpvar_62;
  tmpvar_5 = worldNormal_4;
  lowp vec4 tmpvar_63;
  tmpvar_63.w = 1.0;
  tmpvar_63.xyz = worldNormal_4;
  mediump vec4 normal_64;
  normal_64 = tmpvar_63;
  mediump vec3 x2_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (normal_64.xyzz * normal_64.yzzx);
  x2_65.x = dot (unity_SHBr, tmpvar_66);
  x2_65.y = dot (unity_SHBg, tmpvar_66);
  x2_65.z = dot (unity_SHBb, tmpvar_66);
  tmpvar_7 = (unity_World2Shadow[0] * (_Object2World * tmpvar_13));
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = (x2_65 + (unity_SHC.xyz * (
    (normal_64.x * normal_64.x)
   - 
    (normal_64.y * normal_64.y)
  )));
  xlv_TEXCOORD5 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_15 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp float shadow_16;
  shadow_16 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD5.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_16;
  mediump vec3 normalWorld_17;
  normalWorld_17 = tmpvar_5;
  mediump vec3 tmpvar_18;
  mediump vec3 tmpvar_19;
  mediump vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = normalWorld_17;
  mediump vec3 x1_21;
  x1_21.x = dot (unity_SHAr, tmpvar_20);
  x1_21.y = dot (unity_SHAg, tmpvar_20);
  x1_21.z = dot (unity_SHAb, tmpvar_20);
  tmpvar_19 = (xlv_TEXCOORD4 + x1_21);
  tmpvar_18 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_18;
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_24 = tmpvar_25;
  c_23.xyz = ((tmpvar_9 * tmpvar_18) * diff_24);
  c_23.w = tmpvar_10;
  c_22.w = c_23.w;
  c_22.xyz = (c_23.xyz + (tmpvar_9 * tmpvar_19));
  c_4.xyz = c_22.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec3 t3;
highp vec3 t4;
highp vec3 t5;
highp vec4 t6;
mediump vec3 t16_7;
highp vec2 t8;
bool tb8;
highp vec2 t16;
highp vec2 t20;
highp vec2 t22;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
highp float t29;
mediump float t16_31;
void main()
{
    //Instruction 16312
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 16313
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 16314
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 16315
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 16316
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 16317
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 16318
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 16319
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 16320
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 16321
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 16322
    //LT
    tb8 = 0.0<t16_2.x;
    //Instruction 16323
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 16324
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 16325
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 16326
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 16327
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 16328
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 16329
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 16330
    //ADD
    t3.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 16331
    //MAD
    t3.xyz = unity_LODFade.xxx * t3.xyz + in_POSITION0.xyz;
    //Instruction 16332
    //EQ
    tb25 = t16_2.x==5.000000;
    //Instruction 16333
    //LT
    tb27 = in_TEXCOORD0.x<0.500000;
    //Instruction 16334
    //AND
    t27 = tb27 ? 0.750000 : float(0.0);
    //Instruction 16335
    //ADD
    t4.x = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 16336
    //MAD
    t27 = t4.x * _ST_WindFrondRipple.z + t27;
    //Instruction 16337
    //ADD
    t27 = t27 + 0.500000;
    //Instruction 16338
    //FRC
    t27 = fract(t27);
    //Instruction 16339
    //MAD
    t27 = t27 * 2.000000 + -1.0;
    //Instruction 16340
    //MUL
    t4.x = abs(t27) * abs(t27);
    //Instruction 16341
    //MAD
    t27 = -abs(t27) * 2.000000 + 3.000000;
    //Instruction 16342
    //MAD
    t27 = t4.x * t27 + -0.500000;
    //Instruction 16343
    //MUL
    t27 = t27 * in_TEXCOORD2.y;
    //Instruction 16344
    //DP2
    t27 = dot(_ST_WindFrondRipple.yy, vec2(t27));
    //Instruction 16345
    //MAD
    t4.xyz = vec3(t27) * in_NORMAL0.xyz + t3.xyz;
    //Instruction 16346
    //MOVC
    t3.xyz = (bool(tb25)) ? t4.xyz : t3.xyz;
    //Instruction 16347
    //GE
    tb27 = t16_2.x>=3.000000;
    //Instruction 16348
    //IF
    if(tb27){
        //Instruction 16349
        //IF
        if(tb25){
            //Instruction 16350
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 16351
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 16352
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 16353
            //DP3
            t25 = dot(t4.xyz, t4.xyz);
            //Instruction 16354
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 16355
            //MUL
            t4.xyz = vec3(t25) * t4.xyz;
            //Instruction 16356
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 16357
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 16358
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 16359
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 16360
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 16361
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 16362
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 16363
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 16364
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 16365
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 16366
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 16367
            //FRC
            t2 = fract(t2);
            //Instruction 16368
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 16369
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 16370
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 16371
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 16372
            //ADD
            t2 = t2 + t2;
            //Instruction 16373
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 16374
            //LT
            tb27 = t6.w<0.0;
            //Instruction 16375
            //MOV
            t6.y = (-t6.w);
            //Instruction 16376
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 16377
            //MOVC
            t6.xy = (bool(tb27)) ? t6.xy : t6.zw;
            //Instruction 16378
            //MAD
            t27 = (-t2.y) * t2.z + t6.x;
            //Instruction 16379
            //MAD
            t27 = t6.y * t27 + t6.w;
            //Instruction 16380
            //ADD
            t28 = (-t27) + t6.x;
            //Instruction 16381
            //MAD
            t27 = t6.y * t28 + t27;
            //Instruction 16382
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 16383
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 16384
            //ADD
            t29 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 16385
            //MUL
            t29 = t2.x * t29;
            //Instruction 16386
            //MAD
            t27 = t27 * t28 + t29;
            //Instruction 16387
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 16388
            //MUL
            t27 = t27 * t28;
            //Instruction 16389
            //MUL
            t5.xyz = vec3(t27) * t5.xyz;
            //Instruction 16390
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 16391
            //MAD
            t6.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 16392
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 16393
            //MAD
            t6.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 16394
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 16395
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 16396
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 16397
            //MUL
            t22.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 16398
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 16399
            //MAD
            t6.xy = t22.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 16400
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 16401
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 16402
            //MUL
            t25 = t6.x * t6.y;
            //Instruction 16403
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 16404
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 16405
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 16406
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 16407
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 16408
            //MUL
            t4.xyz = vec3(t25) * t4.xyz;
            //Instruction 16409
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 16410
        //ELSE
        } else {
            //Instruction 16411
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 16412
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 16413
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 16414
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 16415
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 16416
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 16417
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 16418
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 16419
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 16420
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 16421
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 16422
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 16423
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 16424
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 16425
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 16426
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 16427
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 16428
            //LT
            tb0 = t2.w<0.0;
            //Instruction 16429
            //MOV
            t2.y = (-t2.w);
            //Instruction 16430
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 16431
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 16432
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 16433
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 16434
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 16435
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 16436
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 16437
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 16438
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 16439
            //MUL
            t27 = t27 * t5.x;
            //Instruction 16440
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 16441
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 16442
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 16443
        //ENDIF
        }
        //Instruction 16444
    //ENDIF
    }
    //Instruction 16445
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 16446
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 16447
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 16448
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 16449
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 16450
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 16451
    //NE
    tb27 = t25!=0.0;
    //Instruction 16452
    //LOG
    t4.x = log2(t25);
    //Instruction 16453
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 16454
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 16455
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 16456
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 16457
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 16458
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 16459
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 16460
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 16461
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 16462
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 16463
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 16464
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 16465
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 16466
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 16467
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 16468
    //MUL
    t25 = t25 * t27;
    //Instruction 16469
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 16470
    //MOV
    t4.y = t3.y;
    //Instruction 16471
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 16472
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 16473
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 16474
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 16475
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 16476
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 16477
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 16478
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 16479
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 16480
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 16481
    //MAD
    t3.xyz = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 16482
    //MAD
    t3.xyz = _Object2World[2].xyz * t0.zzz + t3.xyz;
    //Instruction 16483
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xyz;
    //Instruction 16484
    //MOV
    t3.x = _World2Object[0].x;
    //Instruction 16485
    //MOV
    t3.y = _World2Object[1].x;
    //Instruction 16486
    //MOV
    t3.z = _World2Object[2].x;
    //Instruction 16487
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 16488
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 16489
    //MOV
    t4.z = _World2Object[2].y;
    //Instruction 16490
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 16491
    //MAD
    t3.xyz = t3.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 16492
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 16493
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 16494
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 16495
    //MAD
    t3.xyz = t4.xyz * in_NORMAL0.zzz + t3.xyz;
    //Instruction 16496
    //DP3
    t24 = dot(t3.xyz, t3.xyz);
    //Instruction 16497
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 16498
    //MUL
    t3.xyz = vec3(t24) * t3.xyz;
    //Instruction 16499
    //MUL
    t16_2 = t3.yzzx * t3.xyzz;
    //Instruction 16500
    //DP4
    t16_7.x = dot(unity_SHBr, t16_2);
    //Instruction 16501
    //DP4
    t16_7.y = dot(unity_SHBg, t16_2);
    //Instruction 16502
    //DP4
    t16_7.z = dot(unity_SHBb, t16_2);
    //Instruction 16503
    //MUL
    t16_31 = t3.y * t3.y;
    //Instruction 16504
    //MAD
    t16_31 = t3.x * t3.x + (-t16_31);
    //Instruction 16505
    //MAD
    vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(t16_31) + t16_7.xyz;
    //Instruction 16506
    //MUL
    t2 = t0.yyyy * _Object2World[1];
    //Instruction 16507
    //MAD
    t2 = _Object2World[0] * t0.xxxx + t2;
    //Instruction 16508
    //MAD
    t0 = _Object2World[2] * t0.zzzz + t2;
    //Instruction 16509
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 16510
    //MUL
    t2 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 16511
    //MAD
    t2 = unity_World2Shadow[0][0] * t0.xxxx + t2;
    //Instruction 16512
    //MAD
    t2 = unity_World2Shadow[0][2] * t0.zzzz + t2;
    //Instruction 16513
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t2;
    //Instruction 16514
    //MOV
    vs_TEXCOORD0.xyz = t3.xyz;
    //Instruction 16515
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 16516
    //MOV
    vs_TEXCOORD5 = t0;
    //Instruction 16517
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 16518
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 16519
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_7;
bool tb15;
mediump float t16_17;
void main()
{
    //Instruction 16280
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 16281
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 16282
    //LT
    tb15 = t10_1<0.0;
    //Instruction 16283
    //DISCARD
    if((int(tb15))!=0){discard;}
    //Instruction 16284
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 16285
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 16286
    //ADD
    t16_7.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 16287
    //MAD
    t16_7.xyz = vs_TEXCOORD3.zzz * t16_7.xyz + t10_0.xyz;
    //Instruction 16288
    //MAX
    t16_3.x = max(t16_7.z, t16_7.y);
    //Instruction 16289
    //MAX
    t16_3.x = max(t16_7.x, t16_3.x);
    //Instruction 16290
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 16291
    //MAD
    t16_0.x = t16_2.x * 0.500000 + 0.500000;
    //Instruction 16292
    //MUL
    t16_2.xyz = t16_0.xxx * t16_7.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 16293
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    //Instruction 16294
    //SAMPLE_C_LZ
    vec3 txVec50 = vec3(vs_TEXCOORD5.xy,vs_TEXCOORD5.z);
    t16_17 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec50, 0.0);
    //Instruction 16295
    //ADD
    t16_3.x = (-_LightShadowData.x) + 1.0;
    //Instruction 16296
    //MAD
    t16_17 = t16_17 * t16_3.x + _LightShadowData.x;
    //Instruction 16297
    //MUL
    t16_3.xyz = vec3(t16_17) * _LightColor0.xyz;
    //Instruction 16298
    //MUL
    t16_3.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 16299
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 16300
    //MOV
    t16_0.w = 1.0;
    //Instruction 16301
    //DP4
    t16_4.x = dot(unity_SHAr, t16_0);
    //Instruction 16302
    //DP4
    t16_4.y = dot(unity_SHAg, t16_0);
    //Instruction 16303
    //DP4
    t16_4.z = dot(unity_SHAb, t16_0);
    //Instruction 16304
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD4.xyz;
    //Instruction 16305
    //MUL
    t16_2.xyz = t16_2.xyz * t16_4.xyz;
    //Instruction 16306
    //DP3
    t16_17 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 16307
    //MAX
    t16_17 = max(t16_17, 0.0);
    //Instruction 16308
    //MAD
    t16_2.xyz = t16_3.xyz * vec3(t16_17) + t16_2.xyz;
    //Instruction 16309
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 16310
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 16311
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec4 tmpvar_8;
  lowp vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10.xy = tmpvar_3.xy;
  tmpvar_9.w = _Color.w;
  tmpvar_9.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].x;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].y;
  tmpvar_11 = clamp (((
    fract(((tmpvar_12 + tmpvar_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_10.z = tmpvar_11;
  highp vec4 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_1;
  tmpvar_15 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  FinalPosition_18 = tmpvar_1.xyz;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_18 = tmpvar_22;
  if ((tmpvar_19 == 5.0)) {
    highp vec3 vPos_23;
    vPos_23 = tmpvar_22;
    highp float fOffset_24;
    fOffset_24 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_24 = 0.75;
    };
    highp vec4 tmpvar_25;
    tmpvar_25.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_25.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_24);
    highp vec4 tmpvar_26;
    tmpvar_26 = abs(((
      fract((tmpvar_25 + 0.5))
     * 2.0) - 1.0));
    vPos_23 = (tmpvar_22 + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_26 * tmpvar_26)
       * 
        (3.0 - (2.0 * tmpvar_26))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_15 = tmpvar_2;
    FinalPosition_18 = vPos_23;
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_27;
    vPos_27 = FinalPosition_18;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_28;
      vPos_28 = FinalPosition_18;
      highp float fTime_29;
      highp float fAdherenceScale_30;
      highp vec3 vWindVector_31;
      vWindVector_31 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_29 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_32;
      highp float fOscillation_33;
      fOscillation_33 = 1.0;
      highp float fAmount_34;
      highp float fTarget_35;
      highp vec4 tmpvar_36;
      tmpvar_36.x = (fTime_29 + _glesMultiTexCoord0.w);
      tmpvar_36.y = ((fTime_29 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_36.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_29 + _glesMultiTexCoord0.w));
      tmpvar_36.w = ((fTime_29 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      vOscillations_32 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      highp float tmpvar_38;
      tmpvar_38 = (vOscillations_32.y * vOscillations_32.z);
      fTarget_35 = 1.0;
      fAmount_34 = tmpvar_38;
      if ((tmpvar_38 < 0.0)) {
        fTarget_35 = -1.0;
        fAmount_34 = -(tmpvar_38);
      };
      fOscillation_33 = (((
        mix (mix (tmpvar_38, fTarget_35, fAmount_34), fTarget_35, fAmount_34)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_32.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_33 = (fOscillation_33 * (1.0 + (vOscillations_32.w * _ST_WindBranchWhip.x)));
      vPos_28 = (FinalPosition_18 + ((vWindVector_31 * fOscillation_33) * _ST_WindBranch.y));
      highp vec4 tmpvar_39;
      tmpvar_39.zw = vec2(0.0, 0.0);
      tmpvar_39.x = ((fTime_29 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_39.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_40;
      highp vec4 tmpvar_41;
      tmpvar_41 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      tmpvar_40 = (((
        (tmpvar_41 * tmpvar_41)
       * 
        (3.0 - (2.0 * tmpvar_41))
      ) - 0.5) * 2.0);
      fAdherenceScale_30 = (1.0 - ((tmpvar_40.x * tmpvar_40.y) * (
        (tmpvar_40.x * tmpvar_40.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_30 = (fAdherenceScale_30 + ((vOscillations_32.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_28 = (vPos_28 + ((
        ((vRotatedBranchAnchor_16 - vPos_28) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_30) * _glesMultiTexCoord0.z));
      vPos_27 = vPos_28;
    } else {
      highp vec3 vPos_42;
      vPos_42 = vPos_27;
      highp float fTime_43;
      highp vec3 vWindVector_44;
      vWindVector_44 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_43 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_45;
      highp float fOscillation_46;
      fOscillation_46 = 1.0;
      highp float fAmount_47;
      highp float fTarget_48;
      highp vec4 tmpvar_49;
      tmpvar_49.w = 0.0;
      tmpvar_49.x = (fTime_43 + _glesMultiTexCoord0.w);
      tmpvar_49.y = ((fTime_43 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_49.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_43 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_50;
      tmpvar_50 = abs(((
        fract((tmpvar_49 + 0.5))
       * 2.0) - 1.0));
      vOscillations_45 = (((
        (tmpvar_50 * tmpvar_50)
       * 
        (3.0 - (2.0 * tmpvar_50))
      ) - 0.5) * 2.0);
      highp float tmpvar_51;
      tmpvar_51 = (vOscillations_45.y * vOscillations_45.z);
      fTarget_48 = 1.0;
      fAmount_47 = tmpvar_51;
      if ((tmpvar_51 < 0.0)) {
        fTarget_48 = -1.0;
        fAmount_47 = -(tmpvar_51);
      };
      fOscillation_46 = (((
        mix (mix (tmpvar_51, fTarget_48, fAmount_47), fTarget_48, fAmount_47)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_45.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_42 = (vPos_27 + ((vWindVector_44 * fOscillation_46) * _ST_WindBranch.y));
      vPos_27 = vPos_42;
    };
    FinalPosition_18 = vPos_27;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_52;
    vPos_52 = FinalPosition_18;
    highp float fMoveAmount_53;
    highp float fAdjust_54;
    highp float fLength_55;
    fLength_55 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_56;
    tmpvar_56 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_54 = tmpvar_56;
    if ((tmpvar_56 != 0.0)) {
      fAdjust_54 = pow (tmpvar_56, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_57;
    tmpvar_57.zw = vec2(0.0, 0.0);
    tmpvar_57.x = (tmpvar_12 + _ST_WindGlobal.x);
    tmpvar_57.y = (tmpvar_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_58;
    highp vec4 tmpvar_59;
    tmpvar_59 = abs(((
      fract((tmpvar_57 + 0.5))
     * 2.0) - 1.0));
    tmpvar_58 = (((
      (tmpvar_59 * tmpvar_59)
     * 
      (3.0 - (2.0 * tmpvar_59))
    ) - 0.5) * 2.0);
    fMoveAmount_53 = ((_ST_WindGlobal.y * (tmpvar_58.x + 
      (tmpvar_58.y * tmpvar_58.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_53 = (fMoveAmount_53 * fAdjust_54);
    vPos_52.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * fMoveAmount_53));
    vPos_52 = (normalize(vPos_52) * fLength_55);
    FinalPosition_18 = vPos_52;
  };
  tmpvar_14.xyz = FinalPosition_18;
  tmpvar_6 = tmpvar_9;
  highp vec3 tmpvar_60;
  tmpvar_60 = (_Object2World * tmpvar_14).xyz;
  highp vec4 v_61;
  v_61.x = _World2Object[0].x;
  v_61.y = _World2Object[1].x;
  v_61.z = _World2Object[2].x;
  v_61.w = _World2Object[3].x;
  highp vec4 v_62;
  v_62.x = _World2Object[0].y;
  v_62.y = _World2Object[1].y;
  v_62.z = _World2Object[2].y;
  v_62.w = _World2Object[3].y;
  highp vec4 v_63;
  v_63.x = _World2Object[0].z;
  v_63.y = _World2Object[1].z;
  v_63.z = _World2Object[2].z;
  v_63.w = _World2Object[3].z;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(((
    (v_61.xyz * tmpvar_15.x)
   + 
    (v_62.xyz * tmpvar_15.y)
  ) + (v_63.xyz * tmpvar_15.z)));
  worldNormal_4 = tmpvar_64;
  tmpvar_5 = worldNormal_4;
  lowp vec4 tmpvar_65;
  tmpvar_65.w = 1.0;
  tmpvar_65.xyz = worldNormal_4;
  mediump vec4 normal_66;
  normal_66 = tmpvar_65;
  mediump vec3 x2_67;
  mediump vec4 tmpvar_68;
  tmpvar_68 = (normal_66.xyzz * normal_66.yzzx);
  x2_67.x = dot (unity_SHBr, tmpvar_68);
  x2_67.y = dot (unity_SHBg, tmpvar_68);
  x2_67.z = dot (unity_SHBb, tmpvar_68);
  highp vec3 lightColor0_69;
  lightColor0_69 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_70;
  lightColor1_70 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_71;
  lightColor2_71 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_72;
  lightColor3_72 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_73;
  lightAttenSq_73 = unity_4LightAtten0;
  highp vec3 normal_74;
  normal_74 = worldNormal_4;
  highp vec3 col_75;
  highp vec4 ndotl_76;
  highp vec4 lengthSq_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = (unity_4LightPosX0 - tmpvar_60.x);
  highp vec4 tmpvar_79;
  tmpvar_79 = (unity_4LightPosY0 - tmpvar_60.y);
  highp vec4 tmpvar_80;
  tmpvar_80 = (unity_4LightPosZ0 - tmpvar_60.z);
  lengthSq_77 = (tmpvar_78 * tmpvar_78);
  lengthSq_77 = (lengthSq_77 + (tmpvar_79 * tmpvar_79));
  lengthSq_77 = (lengthSq_77 + (tmpvar_80 * tmpvar_80));
  ndotl_76 = (tmpvar_78 * normal_74.x);
  ndotl_76 = (ndotl_76 + (tmpvar_79 * normal_74.y));
  ndotl_76 = (ndotl_76 + (tmpvar_80 * normal_74.z));
  highp vec4 tmpvar_81;
  tmpvar_81 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_76 * inversesqrt(lengthSq_77)));
  ndotl_76 = tmpvar_81;
  highp vec4 tmpvar_82;
  tmpvar_82 = (tmpvar_81 * (1.0/((1.0 + 
    (lengthSq_77 * lightAttenSq_73)
  ))));
  col_75 = (lightColor0_69 * tmpvar_82.x);
  col_75 = (col_75 + (lightColor1_70 * tmpvar_82.y));
  col_75 = (col_75 + (lightColor2_71 * tmpvar_82.z));
  col_75 = (col_75 + (lightColor3_72 * tmpvar_82.w));
  tmpvar_7 = ((x2_67 + (unity_SHC.xyz * 
    ((normal_66.x * normal_66.x) - (normal_66.y * normal_66.y))
  )) + col_75);
  tmpvar_8 = (unity_World2Shadow[0] * (_Object2World * tmpvar_14));
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_60;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_10;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_15 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp float shadow_16;
  shadow_16 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD5.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_16;
  mediump vec3 normalWorld_17;
  normalWorld_17 = tmpvar_5;
  mediump vec3 tmpvar_18;
  mediump vec3 tmpvar_19;
  mediump vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = normalWorld_17;
  mediump vec3 x1_21;
  x1_21.x = dot (unity_SHAr, tmpvar_20);
  x1_21.y = dot (unity_SHAg, tmpvar_20);
  x1_21.z = dot (unity_SHAb, tmpvar_20);
  tmpvar_19 = (xlv_TEXCOORD4 + x1_21);
  tmpvar_18 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_18;
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_24 = tmpvar_25;
  c_23.xyz = ((tmpvar_9 * tmpvar_18) * diff_24);
  c_23.w = tmpvar_10;
  c_22.w = c_23.w;
  c_22.xyz = (c_23.xyz + (tmpvar_9 * tmpvar_19));
  c_4.xyz = c_22.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec3 t3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
mediump vec3 t16_7;
highp vec4 t8;
highp vec2 t9;
bool tb9;
highp vec2 t18;
highp vec2 t22;
highp vec2 t24;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
highp float t32;
mediump float t16_34;
void main()
{
    //Instruction 16140
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 16141
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 16142
    //ADD
    t9.x = t0.x + _Object2World[3].z;
    //Instruction 16143
    //ADD
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 16144
    //ADD
    t9.y = t18.x + in_NORMAL0.x;
    //Instruction 16145
    //FRC
    t9.xy = fract(t9.xy);
    //Instruction 16146
    //MAD
    t9.x = t9.y * 0.500000 + t9.x;
    //Instruction 16147
    //ADD
    t9.x = t9.x + -0.300000;
    //Instruction 16148
    //MUL
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 16149
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 16150
    //LT
    tb9 = 0.0<t16_2.x;
    //Instruction 16151
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 16152
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 16153
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 16154
    //DP3
    t18.x = dot(t3.xyz, t3.xyz);
    //Instruction 16155
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 16156
    //MUL
    t18.xy = t18.xx * t3.xz;
    //Instruction 16157
    //AND
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, bvec2(tb9));
    //Instruction 16158
    //ADD
    t3.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 16159
    //MAD
    t3.xyz = unity_LODFade.xxx * t3.xyz + in_POSITION0.xyz;
    //Instruction 16160
    //EQ
    tb28 = t16_2.x==5.000000;
    //Instruction 16161
    //LT
    tb30 = in_TEXCOORD0.x<0.500000;
    //Instruction 16162
    //AND
    t30 = tb30 ? 0.750000 : float(0.0);
    //Instruction 16163
    //ADD
    t4.x = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 16164
    //MAD
    t30 = t4.x * _ST_WindFrondRipple.z + t30;
    //Instruction 16165
    //ADD
    t30 = t30 + 0.500000;
    //Instruction 16166
    //FRC
    t30 = fract(t30);
    //Instruction 16167
    //MAD
    t30 = t30 * 2.000000 + -1.0;
    //Instruction 16168
    //MUL
    t4.x = abs(t30) * abs(t30);
    //Instruction 16169
    //MAD
    t30 = -abs(t30) * 2.000000 + 3.000000;
    //Instruction 16170
    //MAD
    t30 = t4.x * t30 + -0.500000;
    //Instruction 16171
    //MUL
    t30 = t30 * in_TEXCOORD2.y;
    //Instruction 16172
    //DP2
    t30 = dot(_ST_WindFrondRipple.yy, vec2(t30));
    //Instruction 16173
    //MAD
    t4.xyz = vec3(t30) * in_NORMAL0.xyz + t3.xyz;
    //Instruction 16174
    //MOVC
    t3.xyz = (bool(tb28)) ? t4.xyz : t3.xyz;
    //Instruction 16175
    //GE
    tb30 = t16_2.x>=3.000000;
    //Instruction 16176
    //IF
    if(tb30){
        //Instruction 16177
        //IF
        if(tb28){
            //Instruction 16178
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 16179
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 16180
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 16181
            //DP3
            t28 = dot(t4.xyz, t4.xyz);
            //Instruction 16182
            //RSQ
            t28 = inversesqrt(t28);
            //Instruction 16183
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 16184
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 16185
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 16186
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 16187
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 16188
            //ADD
            t28 = t0.x + _ST_WindBranch.x;
            //Instruction 16189
            //ADD
            t2.x = t28 + in_TEXCOORD0.w;
            //Instruction 16190
            //MAD
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 16191
            //MUL
            t30 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 16192
            //MUL
            t2.z = t30 * 0.500000;
            //Instruction 16193
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 16194
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 16195
            //FRC
            t2 = fract(t2);
            //Instruction 16196
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 16197
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 16198
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 16199
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 16200
            //ADD
            t2 = t2 + t2;
            //Instruction 16201
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 16202
            //LT
            tb30 = t6.w<0.0;
            //Instruction 16203
            //MOV
            t6.y = (-t6.w);
            //Instruction 16204
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 16205
            //MOVC
            t6.xy = (bool(tb30)) ? t6.xy : t6.zw;
            //Instruction 16206
            //MAD
            t30 = (-t2.y) * t2.z + t6.x;
            //Instruction 16207
            //MAD
            t30 = t6.y * t30 + t6.w;
            //Instruction 16208
            //ADD
            t31 = (-t30) + t6.x;
            //Instruction 16209
            //MAD
            t30 = t6.y * t31 + t30;
            //Instruction 16210
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 16211
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 16212
            //ADD
            t32 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 16213
            //MUL
            t32 = t2.x * t32;
            //Instruction 16214
            //MAD
            t30 = t30 * t31 + t32;
            //Instruction 16215
            //MAD
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 16216
            //MUL
            t30 = t30 * t31;
            //Instruction 16217
            //MUL
            t5.xyz = vec3(t30) * t5.xyz;
            //Instruction 16218
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 16219
            //MAD
            t6.x = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 16220
            //MUL
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 16221
            //MAD
            t6.y = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 16222
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 16223
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 16224
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 16225
            //MUL
            t24.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 16226
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 16227
            //MAD
            t6.xy = t24.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 16228
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 16229
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 16230
            //MUL
            t28 = t6.x * t6.y;
            //Instruction 16231
            //MAD
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            //Instruction 16232
            //MUL
            t30 = t2.w * _ST_WindVector.w;
            //Instruction 16233
            //MAD
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            //Instruction 16234
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 16235
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 16236
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 16237
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 16238
        //ELSE
        } else {
            //Instruction 16239
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 16240
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 16241
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 16242
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 16243
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 16244
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 16245
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 16246
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 16247
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 16248
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 16249
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 16250
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 16251
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 16252
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 16253
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 16254
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 16255
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 16256
            //LT
            tb0 = t2.w<0.0;
            //Instruction 16257
            //MOV
            t2.y = (-t2.w);
            //Instruction 16258
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 16259
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 16260
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 16261
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 16262
            //ADD
            t28 = (-t0.x) + t6.x;
            //Instruction 16263
            //MAD
            t0.x = t6.y * t28 + t0.x;
            //Instruction 16264
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 16265
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 16266
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 16267
            //MUL
            t30 = t30 * t5.x;
            //Instruction 16268
            //MAD
            t0.x = t0.x * t28 + t30;
            //Instruction 16269
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 16270
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 16271
        //ENDIF
        }
        //Instruction 16272
    //ENDIF
    }
    //Instruction 16273
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 16274
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 16275
    //DIV
    t28 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 16276
    //MAD
    t28 = (-t28) * 0.250000 + t3.y;
    //Instruction 16277
    //MAX
    t28 = max(t28, 0.0);
    //Instruction 16278
    //MUL
    t28 = t28 * _ST_WindGlobal.z;
    //Instruction 16279
    //NE
    tb30 = t28!=0.0;
    //Instruction 16280
    //LOG
    t4.x = log2(t28);
    //Instruction 16281
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 16282
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 16283
    //MOVC
    t28 = (tb30) ? t4.x : t28;
    //Instruction 16284
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 16285
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 16286
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 16287
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 16288
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 16289
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 16290
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 16291
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 16292
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 16293
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 16294
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 16295
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 16296
    //MUL
    t28 = t28 * t30;
    //Instruction 16297
    //MAD
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    //Instruction 16298
    //MOV
    t4.y = t3.y;
    //Instruction 16299
    //DP3
    t18.x = dot(t4.xyz, t4.xyz);
    //Instruction 16300
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 16301
    //MUL
    t4.xyz = t18.xxx * t4.xyz;
    //Instruction 16302
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 16303
    //MOVC
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    //Instruction 16304
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 16305
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 16306
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 16307
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 16308
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 16309
    //MAD
    t3.xyz = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 16310
    //MAD
    t3.xyz = _Object2World[2].xyz * t0.zzz + t3.xyz;
    //Instruction 16311
    //MAD
    t3.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xyz;
    //Instruction 16312
    //MOV
    t4.x = _World2Object[0].x;
    //Instruction 16313
    //MOV
    t4.y = _World2Object[1].x;
    //Instruction 16314
    //MOV
    t4.z = _World2Object[2].x;
    //Instruction 16315
    //MOV
    t5.x = _World2Object[0].y;
    //Instruction 16316
    //MOV
    t5.y = _World2Object[1].y;
    //Instruction 16317
    //MOV
    t5.z = _World2Object[2].y;
    //Instruction 16318
    //MUL
    t5.xyz = t5.xyz * in_NORMAL0.yyy;
    //Instruction 16319
    //MAD
    t4.xyz = t4.xyz * in_NORMAL0.xxx + t5.xyz;
    //Instruction 16320
    //MOV
    t5.x = _World2Object[0].z;
    //Instruction 16321
    //MOV
    t5.y = _World2Object[1].z;
    //Instruction 16322
    //MOV
    t5.z = _World2Object[2].z;
    //Instruction 16323
    //MAD
    t4.xyz = t5.xyz * in_NORMAL0.zzz + t4.xyz;
    //Instruction 16324
    //DP3
    t27 = dot(t4.xyz, t4.xyz);
    //Instruction 16325
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 16326
    //MUL
    t4.xyz = vec3(t27) * t4.xyz;
    //Instruction 16327
    //MUL
    t16_2 = t4.yzzx * t4.xyzz;
    //Instruction 16328
    //DP4
    t16_7.x = dot(unity_SHBr, t16_2);
    //Instruction 16329
    //DP4
    t16_7.y = dot(unity_SHBg, t16_2);
    //Instruction 16330
    //DP4
    t16_7.z = dot(unity_SHBb, t16_2);
    //Instruction 16331
    //MUL
    t16_34 = t4.y * t4.y;
    //Instruction 16332
    //MAD
    t16_34 = t4.x * t4.x + (-t16_34);
    //Instruction 16333
    //MAD
    t16_7.xyz = unity_SHC.xyz * vec3(t16_34) + t16_7.xyz;
    //Instruction 16334
    //ADD
    t2 = (-t3.xxxx) + unity_4LightPosX0;
    //Instruction 16335
    //ADD
    t5 = (-t3.yyyy) + unity_4LightPosY0;
    //Instruction 16336
    //ADD
    t6 = (-t3.zzzz) + unity_4LightPosZ0;
    //Instruction 16337
    //MUL
    t8 = t5 * t5;
    //Instruction 16338
    //MAD
    t8 = t2 * t2 + t8;
    //Instruction 16339
    //MAD
    t8 = t6 * t6 + t8;
    //Instruction 16340
    //MUL
    t5 = t4.yyyy * t5;
    //Instruction 16341
    //MAD
    t2 = t2 * t4.xxxx + t5;
    //Instruction 16342
    //MAD
    t2 = t6 * t4.zzzz + t2;
    //Instruction 16343
    //RSQ
    t5 = inversesqrt(t8);
    //Instruction 16344
    //MUL
    t2 = t2 * t5;
    //Instruction 16345
    //MAX
    t2 = max(t2, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 16346
    //MAD
    t5 = t8 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 16347
    //DIV
    t5 = vec4(1.0, 1.0, 1.0, 1.0) / t5;
    //Instruction 16348
    //MUL
    t2 = t2 * t5;
    //Instruction 16349
    //MUL
    t5.xyz = t2.yyy * unity_LightColor[1].xyz;
    //Instruction 16350
    //MAD
    t5.xyz = unity_LightColor[0].xyz * t2.xxx + t5.xyz;
    //Instruction 16351
    //MAD
    t5.xyz = unity_LightColor[2].xyz * t2.zzz + t5.xyz;
    //Instruction 16352
    //MAD
    t5.xyz = unity_LightColor[3].xyz * t2.www + t5.xyz;
    //Instruction 16353
    //ADD
    t5.xyz = t5.xyz + t16_7.xyz;
    //Instruction 16354
    //MUL
    t2 = t0.yyyy * _Object2World[1];
    //Instruction 16355
    //MAD
    t2 = _Object2World[0] * t0.xxxx + t2;
    //Instruction 16356
    //MAD
    t0 = _Object2World[2] * t0.zzzz + t2;
    //Instruction 16357
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 16358
    //MUL
    t2 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 16359
    //MAD
    t2 = unity_World2Shadow[0][0] * t0.xxxx + t2;
    //Instruction 16360
    //MAD
    t2 = unity_World2Shadow[0][2] * t0.zzzz + t2;
    //Instruction 16361
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t2;
    //Instruction 16362
    //MOV
    vs_TEXCOORD0.xyz = t4.xyz;
    //Instruction 16363
    //MOV
    vs_TEXCOORD1.xyz = t3.xyz;
    //Instruction 16364
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 16365
    //MOV
    vs_TEXCOORD5 = t0;
    //Instruction 16366
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 16367
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 16368
    //MOV
    vs_TEXCOORD4.xyz = t5.xyz;
    //Instruction 16369
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_7;
bool tb15;
mediump float t16_17;
void main()
{
    //Instruction 16108
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 16109
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 16110
    //LT
    tb15 = t10_1<0.0;
    //Instruction 16111
    //DISCARD
    if((int(tb15))!=0){discard;}
    //Instruction 16112
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 16113
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 16114
    //ADD
    t16_7.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 16115
    //MAD
    t16_7.xyz = vs_TEXCOORD3.zzz * t16_7.xyz + t10_0.xyz;
    //Instruction 16116
    //MAX
    t16_3.x = max(t16_7.z, t16_7.y);
    //Instruction 16117
    //MAX
    t16_3.x = max(t16_7.x, t16_3.x);
    //Instruction 16118
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 16119
    //MAD
    t16_0.x = t16_2.x * 0.500000 + 0.500000;
    //Instruction 16120
    //MUL
    t16_2.xyz = t16_0.xxx * t16_7.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 16121
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    //Instruction 16122
    //SAMPLE_C_LZ
    vec3 txVec36 = vec3(vs_TEXCOORD5.xy,vs_TEXCOORD5.z);
    t16_17 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec36, 0.0);
    //Instruction 16123
    //ADD
    t16_3.x = (-_LightShadowData.x) + 1.0;
    //Instruction 16124
    //MAD
    t16_17 = t16_17 * t16_3.x + _LightShadowData.x;
    //Instruction 16125
    //MUL
    t16_3.xyz = vec3(t16_17) * _LightColor0.xyz;
    //Instruction 16126
    //MUL
    t16_3.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 16127
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 16128
    //MOV
    t16_0.w = 1.0;
    //Instruction 16129
    //DP4
    t16_4.x = dot(unity_SHAr, t16_0);
    //Instruction 16130
    //DP4
    t16_4.y = dot(unity_SHAg, t16_0);
    //Instruction 16131
    //DP4
    t16_4.z = dot(unity_SHAb, t16_0);
    //Instruction 16132
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD4.xyz;
    //Instruction 16133
    //MUL
    t16_2.xyz = t16_2.xyz * t16_4.xyz;
    //Instruction 16134
    //DP3
    t16_17 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 16135
    //MAX
    t16_17 = max(t16_17, 0.0);
    //Instruction 16136
    //MAD
    t16_2.xyz = t16_3.xyz * vec3(t16_17) + t16_2.xyz;
    //Instruction 16137
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 16138
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 16139
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_4;
  lowp vec3 worldTangent_5;
  lowp vec3 worldNormal_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  FinalPosition_17 = tmpvar_1.xyz;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_17 = tmpvar_21;
  if ((tmpvar_18 == 5.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_21;
    highp float fOffset_23;
    fOffset_23 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_23 = 0.75;
    };
    highp vec4 tmpvar_24;
    tmpvar_24.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_24.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_23);
    highp vec4 tmpvar_25;
    tmpvar_25 = abs(((
      fract((tmpvar_24 + 0.5))
     * 2.0) - 1.0));
    vPos_22 = (tmpvar_21 + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_14 = tmpvar_2;
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_26;
    vPos_26 = FinalPosition_17;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_27;
      vPos_27 = FinalPosition_17;
      highp float fTime_28;
      highp float fAdherenceScale_29;
      highp vec3 vWindVector_30;
      vWindVector_30 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_28 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_31;
      highp float fOscillation_32;
      fOscillation_32 = 1.0;
      highp float fAmount_33;
      highp float fTarget_34;
      highp vec4 tmpvar_35;
      tmpvar_35.x = (fTime_28 + _glesMultiTexCoord0.w);
      tmpvar_35.y = ((fTime_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_35.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_28 + _glesMultiTexCoord0.w));
      tmpvar_35.w = ((fTime_28 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      vOscillations_31 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      highp float tmpvar_37;
      tmpvar_37 = (vOscillations_31.y * vOscillations_31.z);
      fTarget_34 = 1.0;
      fAmount_33 = tmpvar_37;
      if ((tmpvar_37 < 0.0)) {
        fTarget_34 = -1.0;
        fAmount_33 = -(tmpvar_37);
      };
      fOscillation_32 = (((
        mix (mix (tmpvar_37, fTarget_34, fAmount_33), fTarget_34, fAmount_33)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_31.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_32 = (fOscillation_32 * (1.0 + (vOscillations_31.w * _ST_WindBranchWhip.x)));
      vPos_27 = (FinalPosition_17 + ((vWindVector_30 * fOscillation_32) * _ST_WindBranch.y));
      highp vec4 tmpvar_38;
      tmpvar_38.zw = vec2(0.0, 0.0);
      tmpvar_38.x = ((fTime_28 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_38.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_39;
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      tmpvar_39 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      fAdherenceScale_29 = (1.0 - ((tmpvar_39.x * tmpvar_39.y) * (
        (tmpvar_39.x * tmpvar_39.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_29 = (fAdherenceScale_29 + ((vOscillations_31.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_27 = (vPos_27 + ((
        ((vRotatedBranchAnchor_15 - vPos_27) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_29) * _glesMultiTexCoord0.z));
      vPos_26 = vPos_27;
    } else {
      highp vec3 vPos_41;
      vPos_41 = vPos_26;
      highp float fTime_42;
      highp vec3 vWindVector_43;
      vWindVector_43 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_42 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_44;
      highp float fOscillation_45;
      fOscillation_45 = 1.0;
      highp float fAmount_46;
      highp float fTarget_47;
      highp vec4 tmpvar_48;
      tmpvar_48.w = 0.0;
      tmpvar_48.x = (fTime_42 + _glesMultiTexCoord0.w);
      tmpvar_48.y = ((fTime_42 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_48.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_42 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_49;
      tmpvar_49 = abs(((
        fract((tmpvar_48 + 0.5))
       * 2.0) - 1.0));
      vOscillations_44 = (((
        (tmpvar_49 * tmpvar_49)
       * 
        (3.0 - (2.0 * tmpvar_49))
      ) - 0.5) * 2.0);
      highp float tmpvar_50;
      tmpvar_50 = (vOscillations_44.y * vOscillations_44.z);
      fTarget_47 = 1.0;
      fAmount_46 = tmpvar_50;
      if ((tmpvar_50 < 0.0)) {
        fTarget_47 = -1.0;
        fAmount_46 = -(tmpvar_50);
      };
      fOscillation_45 = (((
        mix (mix (tmpvar_50, fTarget_47, fAmount_46), fTarget_47, fAmount_46)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_44.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_41 = (vPos_26 + ((vWindVector_43 * fOscillation_45) * _ST_WindBranch.y));
      vPos_26 = vPos_41;
    };
    FinalPosition_17 = vPos_26;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_51;
    vPos_51 = FinalPosition_17;
    highp float fMoveAmount_52;
    highp float fAdjust_53;
    highp float fLength_54;
    fLength_54 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_55;
    tmpvar_55 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_53 = tmpvar_55;
    if ((tmpvar_55 != 0.0)) {
      fAdjust_53 = pow (tmpvar_55, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_56;
    tmpvar_56.zw = vec2(0.0, 0.0);
    tmpvar_56.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_56.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_57;
    highp vec4 tmpvar_58;
    tmpvar_58 = abs(((
      fract((tmpvar_56 + 0.5))
     * 2.0) - 1.0));
    tmpvar_57 = (((
      (tmpvar_58 * tmpvar_58)
     * 
      (3.0 - (2.0 * tmpvar_58))
    ) - 0.5) * 2.0);
    fMoveAmount_52 = ((_ST_WindGlobal.y * (tmpvar_57.x + 
      (tmpvar_57.y * tmpvar_57.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_52 = (fMoveAmount_52 * fAdjust_53);
    vPos_51.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_52));
    vPos_51 = (normalize(vPos_51) * fLength_54);
    FinalPosition_17 = vPos_51;
  };
  tmpvar_13.xyz = FinalPosition_17;
  tmpvar_7 = tmpvar_8;
  highp vec3 tmpvar_59;
  tmpvar_59 = (_Object2World * tmpvar_13).xyz;
  highp vec4 v_60;
  v_60.x = _World2Object[0].x;
  v_60.y = _World2Object[1].x;
  v_60.z = _World2Object[2].x;
  v_60.w = _World2Object[3].x;
  highp vec4 v_61;
  v_61.x = _World2Object[0].y;
  v_61.y = _World2Object[1].y;
  v_61.z = _World2Object[2].y;
  v_61.w = _World2Object[3].y;
  highp vec4 v_62;
  v_62.x = _World2Object[0].z;
  v_62.y = _World2Object[1].z;
  v_62.z = _World2Object[2].z;
  v_62.w = _World2Object[3].z;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize(((
    (v_60.xyz * tmpvar_14.x)
   + 
    (v_61.xyz * tmpvar_14.y)
  ) + (v_62.xyz * tmpvar_14.z)));
  worldNormal_6 = tmpvar_63;
  highp mat3 tmpvar_64;
  tmpvar_64[0] = _Object2World[0].xyz;
  tmpvar_64[1] = _Object2World[1].xyz;
  tmpvar_64[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_65;
  tmpvar_65 = normalize((tmpvar_64 * _glesTANGENT.xyz));
  worldTangent_5 = tmpvar_65;
  lowp vec3 tmpvar_66;
  tmpvar_66 = ((worldNormal_6.yzx * worldTangent_5.zxy) - (worldNormal_6.zxy * worldTangent_5.yzx));
  highp vec3 tmpvar_67;
  tmpvar_67 = (tmpvar_66 * _glesTANGENT.w);
  worldBinormal_4 = tmpvar_67;
  highp vec4 tmpvar_68;
  tmpvar_68.x = worldTangent_5.x;
  tmpvar_68.y = worldBinormal_4.x;
  tmpvar_68.z = worldNormal_6.x;
  tmpvar_68.w = tmpvar_59.x;
  highp vec4 tmpvar_69;
  tmpvar_69.x = worldTangent_5.y;
  tmpvar_69.y = worldBinormal_4.y;
  tmpvar_69.z = worldNormal_6.y;
  tmpvar_69.w = tmpvar_59.y;
  highp vec4 tmpvar_70;
  tmpvar_70.x = worldTangent_5.z;
  tmpvar_70.y = worldBinormal_4.z;
  tmpvar_70.z = worldNormal_6.z;
  tmpvar_70.w = tmpvar_59.z;
  lowp vec4 tmpvar_71;
  tmpvar_71.w = 1.0;
  tmpvar_71.xyz = worldNormal_6;
  mediump vec4 normal_72;
  normal_72 = tmpvar_71;
  mediump vec3 x2_73;
  mediump vec4 tmpvar_74;
  tmpvar_74 = (normal_72.xyzz * normal_72.yzzx);
  x2_73.x = dot (unity_SHBr, tmpvar_74);
  x2_73.y = dot (unity_SHBg, tmpvar_74);
  x2_73.z = dot (unity_SHBb, tmpvar_74);
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_68;
  xlv_TEXCOORD1 = tmpvar_69;
  xlv_TEXCOORD2 = tmpvar_70;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = (x2_73 + (unity_SHC.xyz * (
    (normal_72.x * normal_72.x)
   - 
    (normal_72.y * normal_72.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_15;
  tmpvar_15 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_16;
  tmpvar_16 = dot (xlv_TEXCOORD0.xyz, tmpvar_15);
  worldN_3.x = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD1.xyz, tmpvar_15);
  worldN_3.y = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD2.xyz, tmpvar_15);
  worldN_3.z = tmpvar_18;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_19;
  normalWorld_19 = worldN_3;
  mediump vec3 tmpvar_20;
  mediump vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = normalWorld_19;
  mediump vec3 x1_22;
  x1_22.x = dot (unity_SHAr, tmpvar_21);
  x1_22.y = dot (unity_SHAg, tmpvar_21);
  x1_22.z = dot (unity_SHAb, tmpvar_21);
  tmpvar_20 = (xlv_TEXCOORD5 + x1_22);
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_8 * tmpvar_1) * diff_25);
  c_24.w = tmpvar_9;
  c_23.w = c_24.w;
  c_23.xyz = (c_24.xyz + (tmpvar_8 * tmpvar_20));
  c_4.xyz = c_23.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
highp vec3 t4;
highp vec3 t5;
mediump vec4 t16_5;
highp vec4 t6;
lowp vec3 t10_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp vec2 t18;
highp vec2 t22;
highp vec2 t24;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
highp float t32;
mediump float t16_35;
void main()
{
    //Instruction 16942
    //MUL
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 16943
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 16944
    //ADD
    t9.x = t0.x + _Object2World[3].z;
    //Instruction 16945
    //ADD
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 16946
    //ADD
    t9.y = t18.x + in_NORMAL0.x;
    //Instruction 16947
    //FRC
    t9.xy = fract(t9.xy);
    //Instruction 16948
    //MAD
    t9.x = t9.y * 0.500000 + t9.x;
    //Instruction 16949
    //ADD
    t9.x = t9.x + -0.300000;
    //Instruction 16950
    //MUL
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 16951
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 16952
    //LT
    tb9 = 0.0<t16_2;
    //Instruction 16953
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 16954
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 16955
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 16956
    //DP3
    t18.x = dot(t3.xyz, t3.xyz);
    //Instruction 16957
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 16958
    //MUL
    t18.xy = t18.xx * t3.xz;
    //Instruction 16959
    //AND
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, bvec2(tb9));
    //Instruction 16960
    //ADD
    t3.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 16961
    //MAD
    t3.xyz = unity_LODFade.xxx * t3.xyz + in_POSITION0.xyz;
    //Instruction 16962
    //EQ
    tb28 = t16_2==5.000000;
    //Instruction 16963
    //LT
    tb30 = in_TEXCOORD0.x<0.500000;
    //Instruction 16964
    //AND
    t30 = tb30 ? 0.750000 : float(0.0);
    //Instruction 16965
    //ADD
    t4.x = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 16966
    //MAD
    t30 = t4.x * _ST_WindFrondRipple.z + t30;
    //Instruction 16967
    //ADD
    t30 = t30 + 0.500000;
    //Instruction 16968
    //FRC
    t30 = fract(t30);
    //Instruction 16969
    //MAD
    t30 = t30 * 2.000000 + -1.0;
    //Instruction 16970
    //MUL
    t4.x = abs(t30) * abs(t30);
    //Instruction 16971
    //MAD
    t30 = -abs(t30) * 2.000000 + 3.000000;
    //Instruction 16972
    //MAD
    t30 = t4.x * t30 + -0.500000;
    //Instruction 16973
    //MUL
    t30 = t30 * in_TEXCOORD2.y;
    //Instruction 16974
    //DP2
    t30 = dot(_ST_WindFrondRipple.yy, vec2(t30));
    //Instruction 16975
    //MAD
    t4.xyz = vec3(t30) * in_NORMAL0.xyz + t3.xyz;
    //Instruction 16976
    //MOVC
    t3.xyz = (bool(tb28)) ? t4.xyz : t3.xyz;
    //Instruction 16977
    //GE
    tb30 = t16_2>=3.000000;
    //Instruction 16978
    //IF
    if(tb30){
        //Instruction 16979
        //IF
        if(tb28){
            //Instruction 16980
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 16981
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 16982
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 16983
            //DP3
            t28 = dot(t4.xyz, t4.xyz);
            //Instruction 16984
            //RSQ
            t28 = inversesqrt(t28);
            //Instruction 16985
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 16986
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 16987
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 16988
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 16989
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 16990
            //ADD
            t28 = t0.x + _ST_WindBranch.x;
            //Instruction 16991
            //ADD
            t2.x = t28 + in_TEXCOORD0.w;
            //Instruction 16992
            //MAD
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 16993
            //MUL
            t30 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 16994
            //MUL
            t2.z = t30 * 0.500000;
            //Instruction 16995
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 16996
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 16997
            //FRC
            t2 = fract(t2);
            //Instruction 16998
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 16999
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 17000
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 17001
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 17002
            //ADD
            t2 = t2 + t2;
            //Instruction 17003
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 17004
            //LT
            tb30 = t6.w<0.0;
            //Instruction 17005
            //MOV
            t6.y = (-t6.w);
            //Instruction 17006
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 17007
            //MOVC
            t6.xy = (bool(tb30)) ? t6.xy : t6.zw;
            //Instruction 17008
            //MAD
            t30 = (-t2.y) * t2.z + t6.x;
            //Instruction 17009
            //MAD
            t30 = t6.y * t30 + t6.w;
            //Instruction 17010
            //ADD
            t31 = (-t30) + t6.x;
            //Instruction 17011
            //MAD
            t30 = t6.y * t31 + t30;
            //Instruction 17012
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 17013
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 17014
            //ADD
            t32 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 17015
            //MUL
            t32 = t2.x * t32;
            //Instruction 17016
            //MAD
            t30 = t30 * t31 + t32;
            //Instruction 17017
            //MAD
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 17018
            //MUL
            t30 = t30 * t31;
            //Instruction 17019
            //MUL
            t5.xyz = vec3(t30) * t5.xyz;
            //Instruction 17020
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 17021
            //MAD
            t6.x = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 17022
            //MUL
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 17023
            //MAD
            t6.y = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 17024
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 17025
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 17026
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 17027
            //MUL
            t24.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 17028
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 17029
            //MAD
            t6.xy = t24.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 17030
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 17031
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 17032
            //MUL
            t28 = t6.x * t6.y;
            //Instruction 17033
            //MAD
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            //Instruction 17034
            //MUL
            t30 = t2.w * _ST_WindVector.w;
            //Instruction 17035
            //MAD
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            //Instruction 17036
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 17037
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 17038
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 17039
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 17040
        //ELSE
        } else {
            //Instruction 17041
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 17042
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 17043
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 17044
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 17045
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 17046
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 17047
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 17048
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 17049
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 17050
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 17051
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 17052
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 17053
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 17054
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 17055
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 17056
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 17057
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 17058
            //LT
            tb0 = t2.w<0.0;
            //Instruction 17059
            //MOV
            t2.y = (-t2.w);
            //Instruction 17060
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 17061
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 17062
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 17063
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 17064
            //ADD
            t28 = (-t0.x) + t6.x;
            //Instruction 17065
            //MAD
            t0.x = t6.y * t28 + t0.x;
            //Instruction 17066
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 17067
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 17068
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 17069
            //MUL
            t30 = t30 * t5.x;
            //Instruction 17070
            //MAD
            t0.x = t0.x * t28 + t30;
            //Instruction 17071
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 17072
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 17073
        //ENDIF
        }
        //Instruction 17074
    //ENDIF
    }
    //Instruction 17075
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 17076
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 17077
    //DIV
    t28 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 17078
    //MAD
    t28 = (-t28) * 0.250000 + t3.y;
    //Instruction 17079
    //MAX
    t28 = max(t28, 0.0);
    //Instruction 17080
    //MUL
    t28 = t28 * _ST_WindGlobal.z;
    //Instruction 17081
    //NE
    tb30 = t28!=0.0;
    //Instruction 17082
    //LOG
    t4.x = log2(t28);
    //Instruction 17083
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 17084
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 17085
    //MOVC
    t28 = (tb30) ? t4.x : t28;
    //Instruction 17086
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 17087
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 17088
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 17089
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 17090
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 17091
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 17092
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 17093
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 17094
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 17095
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 17096
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 17097
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 17098
    //MUL
    t28 = t28 * t30;
    //Instruction 17099
    //MAD
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    //Instruction 17100
    //MOV
    t4.y = t3.y;
    //Instruction 17101
    //DP3
    t18.x = dot(t4.xyz, t4.xyz);
    //Instruction 17102
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 17103
    //MUL
    t4.xyz = t18.xxx * t4.xyz;
    //Instruction 17104
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 17105
    //MOVC
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    //Instruction 17106
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 17107
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 17108
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 17109
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 17110
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 17111
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 17112
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 17113
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 17114
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 17115
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 17116
    //MOV
    t2.zw = _World2Object[2].xx;
    //Instruction 17117
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 17118
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 17119
    //MOV
    t3.zw = _World2Object[2].yy;
    //Instruction 17120
    //MUL
    t3 = t3 * in_NORMAL0.yyyy;
    //Instruction 17121
    //MAD
    t2 = t2 * in_NORMAL0.xxxx + t3;
    //Instruction 17122
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 17123
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 17124
    //MOV
    t3.zw = _World2Object[2].zz;
    //Instruction 17125
    //MAD
    t2 = t3 * in_NORMAL0.zzzz + t2;
    //Instruction 17126
    //DP3
    t27 = dot(t2.xyw, t2.xyw);
    //Instruction 17127
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 17128
    //MUL
    t2 = vec4(t27) * t2;
    //Instruction 17129
    //MUL
    t3.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 17130
    //MAD
    t3.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t3.xyz;
    //Instruction 17131
    //MAD
    t3.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t3.xyz;
    //Instruction 17132
    //DP3
    t27 = dot(t3.xyz, t3.xyz);
    //Instruction 17133
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 17134
    //MUL
    t3.xyz = vec3(t27) * t3.xyz;
    //Instruction 17135
    //MUL
    t10_7.xyz = t2.wxy * t3.xyz;
    //Instruction 17136
    //MAD
    t10_7.xyz = t2.ywx * t3.yzx + (-t10_7.xyz);
    //Instruction 17137
    //MUL
    t4.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 17138
    //MUL
    t16_5 = t2.ywzx * t2;
    //Instruction 17139
    //DP4
    t16_8.x = dot(unity_SHBr, t16_5);
    //Instruction 17140
    //DP4
    t16_8.y = dot(unity_SHBg, t16_5);
    //Instruction 17141
    //DP4
    t16_8.z = dot(unity_SHBb, t16_5);
    //Instruction 17142
    //MUL
    t16_35 = t2.y * t2.y;
    //Instruction 17143
    //MAD
    t16_35 = t2.x * t2.x + (-t16_35);
    //Instruction 17144
    //MAD
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(t16_35) + t16_8.xyz;
    //Instruction 17145
    //MOV
    vs_TEXCOORD0.x = t3.z;
    //Instruction 17146
    //MOV
    vs_TEXCOORD0.y = t4.x;
    //Instruction 17147
    //MOV
    vs_TEXCOORD0.z = t2.x;
    //Instruction 17148
    //MOV
    vs_TEXCOORD0.w = t0.x;
    //Instruction 17149
    //MOV
    vs_TEXCOORD1.x = t3.x;
    //Instruction 17150
    //MOV
    vs_TEXCOORD1.y = t4.y;
    //Instruction 17151
    //MOV
    vs_TEXCOORD1.z = t2.y;
    //Instruction 17152
    //MOV
    vs_TEXCOORD1.w = t0.y;
    //Instruction 17153
    //MOV
    vs_TEXCOORD2.x = t3.y;
    //Instruction 17154
    //MOV
    vs_TEXCOORD2.y = t4.z;
    //Instruction 17155
    //MOV
    vs_TEXCOORD2.z = t2.w;
    //Instruction 17156
    //MOV
    vs_TEXCOORD2.w = t0.z;
    //Instruction 17157
    //MOV
    vs_TEXCOORD3.w = _Color.w;
    //Instruction 17158
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 17159
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 17160
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_7;
bool tb15;
mediump float t16_17;
void main()
{
    //Instruction 16910
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    //Instruction 16911
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 16912
    //LT
    tb15 = t10_1.x<0.0;
    //Instruction 16913
    //DISCARD
    if((int(tb15))!=0){discard;}
    //Instruction 16914
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 16915
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 16916
    //ADD
    t16_7.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 16917
    //MAD
    t16_7.xyz = vs_TEXCOORD4.zzz * t16_7.xyz + t10_0.xyz;
    //Instruction 16918
    //MAX
    t16_3.x = max(t16_7.z, t16_7.y);
    //Instruction 16919
    //MAX
    t16_3.x = max(t16_7.x, t16_3.x);
    //Instruction 16920
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 16921
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 16922
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_7.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 16923
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD3.xyz;
    //Instruction 16924
    //MUL
    t16_3.xyz = t16_2.xyz * _LightColor0.xyz;
    //Instruction 16925
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 16926
    //MAD
    t10_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 16927
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 16928
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 16929
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 16930
    //MOV
    t0.w = 1.0;
    //Instruction 16931
    //DP4
    t16_4.x = dot(unity_SHAr, t0);
    //Instruction 16932
    //DP4
    t16_4.y = dot(unity_SHAg, t0);
    //Instruction 16933
    //DP4
    t16_4.z = dot(unity_SHAb, t0);
    //Instruction 16934
    //DP3
    t16_17 = dot(t0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 16935
    //MAX
    t16_17 = max(t16_17, 0.0);
    //Instruction 16936
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD5.xyz;
    //Instruction 16937
    //MUL
    t16_2.xyz = t16_2.xyz * t16_4.xyz;
    //Instruction 16938
    //MAD
    t16_2.xyz = t16_3.xyz * vec3(t16_17) + t16_2.xyz;
    //Instruction 16939
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 16940
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 16941
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_4;
  lowp vec3 worldTangent_5;
  lowp vec3 worldNormal_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  lowp vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10.xy = tmpvar_3.xy;
  tmpvar_9.w = _Color.w;
  tmpvar_9.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].x;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].y;
  tmpvar_11 = clamp (((
    fract(((tmpvar_12 + tmpvar_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_10.z = tmpvar_11;
  highp vec4 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_1;
  tmpvar_15 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  FinalPosition_18 = tmpvar_1.xyz;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_18 = tmpvar_22;
  if ((tmpvar_19 == 5.0)) {
    highp vec3 vPos_23;
    vPos_23 = tmpvar_22;
    highp float fOffset_24;
    fOffset_24 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_24 = 0.75;
    };
    highp vec4 tmpvar_25;
    tmpvar_25.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_25.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_24);
    highp vec4 tmpvar_26;
    tmpvar_26 = abs(((
      fract((tmpvar_25 + 0.5))
     * 2.0) - 1.0));
    vPos_23 = (tmpvar_22 + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_26 * tmpvar_26)
       * 
        (3.0 - (2.0 * tmpvar_26))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_15 = tmpvar_2;
    FinalPosition_18 = vPos_23;
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_27;
    vPos_27 = FinalPosition_18;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_28;
      vPos_28 = FinalPosition_18;
      highp float fTime_29;
      highp float fAdherenceScale_30;
      highp vec3 vWindVector_31;
      vWindVector_31 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_29 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_32;
      highp float fOscillation_33;
      fOscillation_33 = 1.0;
      highp float fAmount_34;
      highp float fTarget_35;
      highp vec4 tmpvar_36;
      tmpvar_36.x = (fTime_29 + _glesMultiTexCoord0.w);
      tmpvar_36.y = ((fTime_29 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_36.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_29 + _glesMultiTexCoord0.w));
      tmpvar_36.w = ((fTime_29 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      vOscillations_32 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      highp float tmpvar_38;
      tmpvar_38 = (vOscillations_32.y * vOscillations_32.z);
      fTarget_35 = 1.0;
      fAmount_34 = tmpvar_38;
      if ((tmpvar_38 < 0.0)) {
        fTarget_35 = -1.0;
        fAmount_34 = -(tmpvar_38);
      };
      fOscillation_33 = (((
        mix (mix (tmpvar_38, fTarget_35, fAmount_34), fTarget_35, fAmount_34)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_32.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_33 = (fOscillation_33 * (1.0 + (vOscillations_32.w * _ST_WindBranchWhip.x)));
      vPos_28 = (FinalPosition_18 + ((vWindVector_31 * fOscillation_33) * _ST_WindBranch.y));
      highp vec4 tmpvar_39;
      tmpvar_39.zw = vec2(0.0, 0.0);
      tmpvar_39.x = ((fTime_29 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_39.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_40;
      highp vec4 tmpvar_41;
      tmpvar_41 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      tmpvar_40 = (((
        (tmpvar_41 * tmpvar_41)
       * 
        (3.0 - (2.0 * tmpvar_41))
      ) - 0.5) * 2.0);
      fAdherenceScale_30 = (1.0 - ((tmpvar_40.x * tmpvar_40.y) * (
        (tmpvar_40.x * tmpvar_40.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_30 = (fAdherenceScale_30 + ((vOscillations_32.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_28 = (vPos_28 + ((
        ((vRotatedBranchAnchor_16 - vPos_28) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_30) * _glesMultiTexCoord0.z));
      vPos_27 = vPos_28;
    } else {
      highp vec3 vPos_42;
      vPos_42 = vPos_27;
      highp float fTime_43;
      highp vec3 vWindVector_44;
      vWindVector_44 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_43 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_45;
      highp float fOscillation_46;
      fOscillation_46 = 1.0;
      highp float fAmount_47;
      highp float fTarget_48;
      highp vec4 tmpvar_49;
      tmpvar_49.w = 0.0;
      tmpvar_49.x = (fTime_43 + _glesMultiTexCoord0.w);
      tmpvar_49.y = ((fTime_43 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_49.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_43 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_50;
      tmpvar_50 = abs(((
        fract((tmpvar_49 + 0.5))
       * 2.0) - 1.0));
      vOscillations_45 = (((
        (tmpvar_50 * tmpvar_50)
       * 
        (3.0 - (2.0 * tmpvar_50))
      ) - 0.5) * 2.0);
      highp float tmpvar_51;
      tmpvar_51 = (vOscillations_45.y * vOscillations_45.z);
      fTarget_48 = 1.0;
      fAmount_47 = tmpvar_51;
      if ((tmpvar_51 < 0.0)) {
        fTarget_48 = -1.0;
        fAmount_47 = -(tmpvar_51);
      };
      fOscillation_46 = (((
        mix (mix (tmpvar_51, fTarget_48, fAmount_47), fTarget_48, fAmount_47)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_45.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_42 = (vPos_27 + ((vWindVector_44 * fOscillation_46) * _ST_WindBranch.y));
      vPos_27 = vPos_42;
    };
    FinalPosition_18 = vPos_27;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_52;
    vPos_52 = FinalPosition_18;
    highp float fMoveAmount_53;
    highp float fAdjust_54;
    highp float fLength_55;
    fLength_55 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_56;
    tmpvar_56 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_54 = tmpvar_56;
    if ((tmpvar_56 != 0.0)) {
      fAdjust_54 = pow (tmpvar_56, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_57;
    tmpvar_57.zw = vec2(0.0, 0.0);
    tmpvar_57.x = (tmpvar_12 + _ST_WindGlobal.x);
    tmpvar_57.y = (tmpvar_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_58;
    highp vec4 tmpvar_59;
    tmpvar_59 = abs(((
      fract((tmpvar_57 + 0.5))
     * 2.0) - 1.0));
    tmpvar_58 = (((
      (tmpvar_59 * tmpvar_59)
     * 
      (3.0 - (2.0 * tmpvar_59))
    ) - 0.5) * 2.0);
    fMoveAmount_53 = ((_ST_WindGlobal.y * (tmpvar_58.x + 
      (tmpvar_58.y * tmpvar_58.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_53 = (fMoveAmount_53 * fAdjust_54);
    vPos_52.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * fMoveAmount_53));
    vPos_52 = (normalize(vPos_52) * fLength_55);
    FinalPosition_18 = vPos_52;
  };
  tmpvar_14.xyz = FinalPosition_18;
  tmpvar_7 = tmpvar_9;
  highp vec3 tmpvar_60;
  tmpvar_60 = (_Object2World * tmpvar_14).xyz;
  highp vec4 v_61;
  v_61.x = _World2Object[0].x;
  v_61.y = _World2Object[1].x;
  v_61.z = _World2Object[2].x;
  v_61.w = _World2Object[3].x;
  highp vec4 v_62;
  v_62.x = _World2Object[0].y;
  v_62.y = _World2Object[1].y;
  v_62.z = _World2Object[2].y;
  v_62.w = _World2Object[3].y;
  highp vec4 v_63;
  v_63.x = _World2Object[0].z;
  v_63.y = _World2Object[1].z;
  v_63.z = _World2Object[2].z;
  v_63.w = _World2Object[3].z;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(((
    (v_61.xyz * tmpvar_15.x)
   + 
    (v_62.xyz * tmpvar_15.y)
  ) + (v_63.xyz * tmpvar_15.z)));
  worldNormal_6 = tmpvar_64;
  highp mat3 tmpvar_65;
  tmpvar_65[0] = _Object2World[0].xyz;
  tmpvar_65[1] = _Object2World[1].xyz;
  tmpvar_65[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize((tmpvar_65 * _glesTANGENT.xyz));
  worldTangent_5 = tmpvar_66;
  lowp vec3 tmpvar_67;
  tmpvar_67 = ((worldNormal_6.yzx * worldTangent_5.zxy) - (worldNormal_6.zxy * worldTangent_5.yzx));
  highp vec3 tmpvar_68;
  tmpvar_68 = (tmpvar_67 * _glesTANGENT.w);
  worldBinormal_4 = tmpvar_68;
  highp vec4 tmpvar_69;
  tmpvar_69.x = worldTangent_5.x;
  tmpvar_69.y = worldBinormal_4.x;
  tmpvar_69.z = worldNormal_6.x;
  tmpvar_69.w = tmpvar_60.x;
  highp vec4 tmpvar_70;
  tmpvar_70.x = worldTangent_5.y;
  tmpvar_70.y = worldBinormal_4.y;
  tmpvar_70.z = worldNormal_6.y;
  tmpvar_70.w = tmpvar_60.y;
  highp vec4 tmpvar_71;
  tmpvar_71.x = worldTangent_5.z;
  tmpvar_71.y = worldBinormal_4.z;
  tmpvar_71.z = worldNormal_6.z;
  tmpvar_71.w = tmpvar_60.z;
  lowp vec4 tmpvar_72;
  tmpvar_72.w = 1.0;
  tmpvar_72.xyz = worldNormal_6;
  mediump vec4 normal_73;
  normal_73 = tmpvar_72;
  mediump vec3 x2_74;
  mediump vec4 tmpvar_75;
  tmpvar_75 = (normal_73.xyzz * normal_73.yzzx);
  x2_74.x = dot (unity_SHBr, tmpvar_75);
  x2_74.y = dot (unity_SHBg, tmpvar_75);
  x2_74.z = dot (unity_SHBb, tmpvar_75);
  tmpvar_8 = (unity_World2Shadow[0] * (_Object2World * tmpvar_14));
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_69;
  xlv_TEXCOORD1 = tmpvar_70;
  xlv_TEXCOORD2 = tmpvar_71;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = (x2_74 + (unity_SHC.xyz * (
    (normal_73.x * normal_73.x)
   - 
    (normal_73.y * normal_73.y)
  )));
  xlv_TEXCOORD6 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_15 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_16;
  tmpvar_16 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_17 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD0.xyz, tmpvar_16);
  worldN_4.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD1.xyz, tmpvar_16);
  worldN_4.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (xlv_TEXCOORD2.xyz, tmpvar_16);
  worldN_4.z = tmpvar_21;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_17;
  mediump vec3 normalWorld_22;
  normalWorld_22 = worldN_4;
  mediump vec3 tmpvar_23;
  mediump vec3 tmpvar_24;
  mediump vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = normalWorld_22;
  mediump vec3 x1_26;
  x1_26.x = dot (unity_SHAr, tmpvar_25);
  x1_26.y = dot (unity_SHAg, tmpvar_25);
  x1_26.z = dot (unity_SHAb, tmpvar_25);
  tmpvar_24 = (xlv_TEXCOORD5 + x1_26);
  tmpvar_23 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_23;
  lowp vec4 c_27;
  lowp vec4 c_28;
  lowp float diff_29;
  mediump float tmpvar_30;
  tmpvar_30 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_29 = tmpvar_30;
  c_28.xyz = ((tmpvar_9 * tmpvar_23) * diff_29);
  c_28.w = tmpvar_10;
  c_27.w = c_28.w;
  c_27.xyz = (c_28.xyz + (tmpvar_9 * tmpvar_24));
  c_5.xyz = c_27.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_4;
  lowp vec3 worldTangent_5;
  lowp vec3 worldNormal_6;
  mediump vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  lowp vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10.xy = tmpvar_3.xy;
  tmpvar_9.w = _Color.w;
  tmpvar_9.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].x;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].y;
  tmpvar_11 = clamp (((
    fract(((tmpvar_12 + tmpvar_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_10.z = tmpvar_11;
  highp vec4 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_1;
  tmpvar_15 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  FinalPosition_18 = tmpvar_1.xyz;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_18 = tmpvar_22;
  if ((tmpvar_19 == 5.0)) {
    highp vec3 vPos_23;
    vPos_23 = tmpvar_22;
    highp float fOffset_24;
    fOffset_24 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_24 = 0.75;
    };
    highp vec4 tmpvar_25;
    tmpvar_25.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_25.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_24);
    highp vec4 tmpvar_26;
    tmpvar_26 = abs(((
      fract((tmpvar_25 + 0.5))
     * 2.0) - 1.0));
    vPos_23 = (tmpvar_22 + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_26 * tmpvar_26)
       * 
        (3.0 - (2.0 * tmpvar_26))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_15 = tmpvar_2;
    FinalPosition_18 = vPos_23;
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_27;
    vPos_27 = FinalPosition_18;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_28;
      vPos_28 = FinalPosition_18;
      highp float fTime_29;
      highp float fAdherenceScale_30;
      highp vec3 vWindVector_31;
      vWindVector_31 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_29 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_32;
      highp float fOscillation_33;
      fOscillation_33 = 1.0;
      highp float fAmount_34;
      highp float fTarget_35;
      highp vec4 tmpvar_36;
      tmpvar_36.x = (fTime_29 + _glesMultiTexCoord0.w);
      tmpvar_36.y = ((fTime_29 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_36.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_29 + _glesMultiTexCoord0.w));
      tmpvar_36.w = ((fTime_29 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      vOscillations_32 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      highp float tmpvar_38;
      tmpvar_38 = (vOscillations_32.y * vOscillations_32.z);
      fTarget_35 = 1.0;
      fAmount_34 = tmpvar_38;
      if ((tmpvar_38 < 0.0)) {
        fTarget_35 = -1.0;
        fAmount_34 = -(tmpvar_38);
      };
      fOscillation_33 = (((
        mix (mix (tmpvar_38, fTarget_35, fAmount_34), fTarget_35, fAmount_34)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_32.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_33 = (fOscillation_33 * (1.0 + (vOscillations_32.w * _ST_WindBranchWhip.x)));
      vPos_28 = (FinalPosition_18 + ((vWindVector_31 * fOscillation_33) * _ST_WindBranch.y));
      highp vec4 tmpvar_39;
      tmpvar_39.zw = vec2(0.0, 0.0);
      tmpvar_39.x = ((fTime_29 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_39.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_40;
      highp vec4 tmpvar_41;
      tmpvar_41 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      tmpvar_40 = (((
        (tmpvar_41 * tmpvar_41)
       * 
        (3.0 - (2.0 * tmpvar_41))
      ) - 0.5) * 2.0);
      fAdherenceScale_30 = (1.0 - ((tmpvar_40.x * tmpvar_40.y) * (
        (tmpvar_40.x * tmpvar_40.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_30 = (fAdherenceScale_30 + ((vOscillations_32.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_28 = (vPos_28 + ((
        ((vRotatedBranchAnchor_16 - vPos_28) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_30) * _glesMultiTexCoord0.z));
      vPos_27 = vPos_28;
    } else {
      highp vec3 vPos_42;
      vPos_42 = vPos_27;
      highp float fTime_43;
      highp vec3 vWindVector_44;
      vWindVector_44 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_43 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_45;
      highp float fOscillation_46;
      fOscillation_46 = 1.0;
      highp float fAmount_47;
      highp float fTarget_48;
      highp vec4 tmpvar_49;
      tmpvar_49.w = 0.0;
      tmpvar_49.x = (fTime_43 + _glesMultiTexCoord0.w);
      tmpvar_49.y = ((fTime_43 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_49.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_43 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_50;
      tmpvar_50 = abs(((
        fract((tmpvar_49 + 0.5))
       * 2.0) - 1.0));
      vOscillations_45 = (((
        (tmpvar_50 * tmpvar_50)
       * 
        (3.0 - (2.0 * tmpvar_50))
      ) - 0.5) * 2.0);
      highp float tmpvar_51;
      tmpvar_51 = (vOscillations_45.y * vOscillations_45.z);
      fTarget_48 = 1.0;
      fAmount_47 = tmpvar_51;
      if ((tmpvar_51 < 0.0)) {
        fTarget_48 = -1.0;
        fAmount_47 = -(tmpvar_51);
      };
      fOscillation_46 = (((
        mix (mix (tmpvar_51, fTarget_48, fAmount_47), fTarget_48, fAmount_47)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_45.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_42 = (vPos_27 + ((vWindVector_44 * fOscillation_46) * _ST_WindBranch.y));
      vPos_27 = vPos_42;
    };
    FinalPosition_18 = vPos_27;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_52;
    vPos_52 = FinalPosition_18;
    highp float fMoveAmount_53;
    highp float fAdjust_54;
    highp float fLength_55;
    fLength_55 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_56;
    tmpvar_56 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_54 = tmpvar_56;
    if ((tmpvar_56 != 0.0)) {
      fAdjust_54 = pow (tmpvar_56, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_57;
    tmpvar_57.zw = vec2(0.0, 0.0);
    tmpvar_57.x = (tmpvar_12 + _ST_WindGlobal.x);
    tmpvar_57.y = (tmpvar_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_58;
    highp vec4 tmpvar_59;
    tmpvar_59 = abs(((
      fract((tmpvar_57 + 0.5))
     * 2.0) - 1.0));
    tmpvar_58 = (((
      (tmpvar_59 * tmpvar_59)
     * 
      (3.0 - (2.0 * tmpvar_59))
    ) - 0.5) * 2.0);
    fMoveAmount_53 = ((_ST_WindGlobal.y * (tmpvar_58.x + 
      (tmpvar_58.y * tmpvar_58.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_53 = (fMoveAmount_53 * fAdjust_54);
    vPos_52.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * fMoveAmount_53));
    vPos_52 = (normalize(vPos_52) * fLength_55);
    FinalPosition_18 = vPos_52;
  };
  tmpvar_14.xyz = FinalPosition_18;
  tmpvar_7 = tmpvar_9;
  highp vec3 tmpvar_60;
  tmpvar_60 = (_Object2World * tmpvar_14).xyz;
  highp vec4 v_61;
  v_61.x = _World2Object[0].x;
  v_61.y = _World2Object[1].x;
  v_61.z = _World2Object[2].x;
  v_61.w = _World2Object[3].x;
  highp vec4 v_62;
  v_62.x = _World2Object[0].y;
  v_62.y = _World2Object[1].y;
  v_62.z = _World2Object[2].y;
  v_62.w = _World2Object[3].y;
  highp vec4 v_63;
  v_63.x = _World2Object[0].z;
  v_63.y = _World2Object[1].z;
  v_63.z = _World2Object[2].z;
  v_63.w = _World2Object[3].z;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(((
    (v_61.xyz * tmpvar_15.x)
   + 
    (v_62.xyz * tmpvar_15.y)
  ) + (v_63.xyz * tmpvar_15.z)));
  worldNormal_6 = tmpvar_64;
  highp mat3 tmpvar_65;
  tmpvar_65[0] = _Object2World[0].xyz;
  tmpvar_65[1] = _Object2World[1].xyz;
  tmpvar_65[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize((tmpvar_65 * _glesTANGENT.xyz));
  worldTangent_5 = tmpvar_66;
  lowp vec3 tmpvar_67;
  tmpvar_67 = ((worldNormal_6.yzx * worldTangent_5.zxy) - (worldNormal_6.zxy * worldTangent_5.yzx));
  highp vec3 tmpvar_68;
  tmpvar_68 = (tmpvar_67 * _glesTANGENT.w);
  worldBinormal_4 = tmpvar_68;
  highp vec4 tmpvar_69;
  tmpvar_69.x = worldTangent_5.x;
  tmpvar_69.y = worldBinormal_4.x;
  tmpvar_69.z = worldNormal_6.x;
  tmpvar_69.w = tmpvar_60.x;
  highp vec4 tmpvar_70;
  tmpvar_70.x = worldTangent_5.y;
  tmpvar_70.y = worldBinormal_4.y;
  tmpvar_70.z = worldNormal_6.y;
  tmpvar_70.w = tmpvar_60.y;
  highp vec4 tmpvar_71;
  tmpvar_71.x = worldTangent_5.z;
  tmpvar_71.y = worldBinormal_4.z;
  tmpvar_71.z = worldNormal_6.z;
  tmpvar_71.w = tmpvar_60.z;
  lowp vec4 tmpvar_72;
  tmpvar_72.w = 1.0;
  tmpvar_72.xyz = worldNormal_6;
  mediump vec4 normal_73;
  normal_73 = tmpvar_72;
  mediump vec3 x2_74;
  mediump vec4 tmpvar_75;
  tmpvar_75 = (normal_73.xyzz * normal_73.yzzx);
  x2_74.x = dot (unity_SHBr, tmpvar_75);
  x2_74.y = dot (unity_SHBg, tmpvar_75);
  x2_74.z = dot (unity_SHBb, tmpvar_75);
  highp vec3 lightColor0_76;
  lightColor0_76 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_77;
  lightColor1_77 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_78;
  lightColor2_78 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_79;
  lightColor3_79 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_80;
  lightAttenSq_80 = unity_4LightAtten0;
  highp vec3 normal_81;
  normal_81 = worldNormal_6;
  highp vec3 col_82;
  highp vec4 ndotl_83;
  highp vec4 lengthSq_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = (unity_4LightPosX0 - tmpvar_60.x);
  highp vec4 tmpvar_86;
  tmpvar_86 = (unity_4LightPosY0 - tmpvar_60.y);
  highp vec4 tmpvar_87;
  tmpvar_87 = (unity_4LightPosZ0 - tmpvar_60.z);
  lengthSq_84 = (tmpvar_85 * tmpvar_85);
  lengthSq_84 = (lengthSq_84 + (tmpvar_86 * tmpvar_86));
  lengthSq_84 = (lengthSq_84 + (tmpvar_87 * tmpvar_87));
  ndotl_83 = (tmpvar_85 * normal_81.x);
  ndotl_83 = (ndotl_83 + (tmpvar_86 * normal_81.y));
  ndotl_83 = (ndotl_83 + (tmpvar_87 * normal_81.z));
  highp vec4 tmpvar_88;
  tmpvar_88 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_83 * inversesqrt(lengthSq_84)));
  ndotl_83 = tmpvar_88;
  highp vec4 tmpvar_89;
  tmpvar_89 = (tmpvar_88 * (1.0/((1.0 + 
    (lengthSq_84 * lightAttenSq_80)
  ))));
  col_82 = (lightColor0_76 * tmpvar_89.x);
  col_82 = (col_82 + (lightColor1_77 * tmpvar_89.y));
  col_82 = (col_82 + (lightColor2_78 * tmpvar_89.z));
  col_82 = (col_82 + (lightColor3_79 * tmpvar_89.w));
  tmpvar_8 = ((x2_74 + (unity_SHC.xyz * 
    ((normal_73.x * normal_73.x) - (normal_73.y * normal_73.y))
  )) + col_82);
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_69;
  xlv_TEXCOORD1 = tmpvar_70;
  xlv_TEXCOORD2 = tmpvar_71;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_15;
  tmpvar_15 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_16;
  tmpvar_16 = dot (xlv_TEXCOORD0.xyz, tmpvar_15);
  worldN_3.x = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD1.xyz, tmpvar_15);
  worldN_3.y = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD2.xyz, tmpvar_15);
  worldN_3.z = tmpvar_18;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_19;
  normalWorld_19 = worldN_3;
  mediump vec3 tmpvar_20;
  mediump vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = normalWorld_19;
  mediump vec3 x1_22;
  x1_22.x = dot (unity_SHAr, tmpvar_21);
  x1_22.y = dot (unity_SHAg, tmpvar_21);
  x1_22.z = dot (unity_SHAb, tmpvar_21);
  tmpvar_20 = (xlv_TEXCOORD5 + x1_22);
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_8 * tmpvar_1) * diff_25);
  c_24.w = tmpvar_9;
  c_23.w = c_24.w;
  c_23.xyz = (c_24.xyz + (tmpvar_8 * tmpvar_20));
  c_4.xyz = c_23.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
highp vec3 t4;
highp vec4 t5;
mediump vec4 t16_5;
highp vec4 t6;
highp vec4 t7;
lowp vec3 t10_7;
mediump vec3 t16_8;
highp vec4 t9;
highp vec2 t10;
bool tb10;
highp vec2 t20;
highp vec2 t24;
highp vec2 t26;
highp float t30;
highp float t31;
bool tb31;
highp float t33;
bool tb33;
highp float t34;
highp float t35;
mediump float t16_38;
void main()
{
    //Instruction 17193
    //MUL
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 17194
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 17195
    //ADD
    t10.x = t0.x + _Object2World[3].z;
    //Instruction 17196
    //ADD
    t20.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 17197
    //ADD
    t10.y = t20.x + in_NORMAL0.x;
    //Instruction 17198
    //FRC
    t10.xy = fract(t10.xy);
    //Instruction 17199
    //MAD
    t10.x = t10.y * 0.500000 + t10.x;
    //Instruction 17200
    //ADD
    t10.x = t10.x + -0.300000;
    //Instruction 17201
    //MUL
    t1.z = t10.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 17202
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 17203
    //LT
    tb10 = 0.0<t16_2;
    //Instruction 17204
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 17205
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 17206
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 17207
    //DP3
    t20.x = dot(t3.xyz, t3.xyz);
    //Instruction 17208
    //RSQ
    t20.x = inversesqrt(t20.x);
    //Instruction 17209
    //MUL
    t20.xy = t20.xx * t3.xz;
    //Instruction 17210
    //AND
    t20.xy = mix(vec2(0.0, 0.0), t20.xy, bvec2(tb10));
    //Instruction 17211
    //ADD
    t3.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 17212
    //MAD
    t3.xyz = unity_LODFade.xxx * t3.xyz + in_POSITION0.xyz;
    //Instruction 17213
    //EQ
    tb31 = t16_2==5.000000;
    //Instruction 17214
    //LT
    tb33 = in_TEXCOORD0.x<0.500000;
    //Instruction 17215
    //AND
    t33 = tb33 ? 0.750000 : float(0.0);
    //Instruction 17216
    //ADD
    t4.x = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 17217
    //MAD
    t33 = t4.x * _ST_WindFrondRipple.z + t33;
    //Instruction 17218
    //ADD
    t33 = t33 + 0.500000;
    //Instruction 17219
    //FRC
    t33 = fract(t33);
    //Instruction 17220
    //MAD
    t33 = t33 * 2.000000 + -1.0;
    //Instruction 17221
    //MUL
    t4.x = abs(t33) * abs(t33);
    //Instruction 17222
    //MAD
    t33 = -abs(t33) * 2.000000 + 3.000000;
    //Instruction 17223
    //MAD
    t33 = t4.x * t33 + -0.500000;
    //Instruction 17224
    //MUL
    t33 = t33 * in_TEXCOORD2.y;
    //Instruction 17225
    //DP2
    t33 = dot(_ST_WindFrondRipple.yy, vec2(t33));
    //Instruction 17226
    //MAD
    t4.xyz = vec3(t33) * in_NORMAL0.xyz + t3.xyz;
    //Instruction 17227
    //MOVC
    t3.xyz = (bool(tb31)) ? t4.xyz : t3.xyz;
    //Instruction 17228
    //GE
    tb33 = t16_2>=3.000000;
    //Instruction 17229
    //IF
    if(tb33){
        //Instruction 17230
        //IF
        if(tb31){
            //Instruction 17231
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 17232
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 17233
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 17234
            //DP3
            t31 = dot(t4.xyz, t4.xyz);
            //Instruction 17235
            //RSQ
            t31 = inversesqrt(t31);
            //Instruction 17236
            //MUL
            t4.xyz = vec3(t31) * t4.xyz;
            //Instruction 17237
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 17238
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 17239
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 17240
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 17241
            //ADD
            t31 = t0.x + _ST_WindBranch.x;
            //Instruction 17242
            //ADD
            t2.x = t31 + in_TEXCOORD0.w;
            //Instruction 17243
            //MAD
            t2.y = t31 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 17244
            //MUL
            t33 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 17245
            //MUL
            t2.z = t33 * 0.500000;
            //Instruction 17246
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 17247
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 17248
            //FRC
            t2 = fract(t2);
            //Instruction 17249
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 17250
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 17251
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 17252
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 17253
            //ADD
            t2 = t2 + t2;
            //Instruction 17254
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 17255
            //LT
            tb33 = t6.w<0.0;
            //Instruction 17256
            //MOV
            t6.y = (-t6.w);
            //Instruction 17257
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 17258
            //MOVC
            t6.xy = (bool(tb33)) ? t6.xy : t6.zw;
            //Instruction 17259
            //MAD
            t33 = (-t2.y) * t2.z + t6.x;
            //Instruction 17260
            //MAD
            t33 = t6.y * t33 + t6.w;
            //Instruction 17261
            //ADD
            t34 = (-t33) + t6.x;
            //Instruction 17262
            //MAD
            t33 = t6.y * t34 + t33;
            //Instruction 17263
            //MUL
            t33 = t33 * _ST_WindBranchTwitch.x;
            //Instruction 17264
            //ADD
            t34 = (-_ST_WindVector.w) + 1.0;
            //Instruction 17265
            //ADD
            t35 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 17266
            //MUL
            t35 = t2.x * t35;
            //Instruction 17267
            //MAD
            t33 = t33 * t34 + t35;
            //Instruction 17268
            //MAD
            t34 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 17269
            //MUL
            t33 = t33 * t34;
            //Instruction 17270
            //MUL
            t5.xyz = vec3(t33) * t5.xyz;
            //Instruction 17271
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 17272
            //MAD
            t6.x = t31 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 17273
            //MUL
            t31 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 17274
            //MAD
            t6.y = t31 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 17275
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 17276
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 17277
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 17278
            //MUL
            t26.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 17279
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 17280
            //MAD
            t6.xy = t26.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 17281
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 17282
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 17283
            //MUL
            t31 = t6.x * t6.y;
            //Instruction 17284
            //MAD
            t31 = (-t31) * _ST_WindTurbulences.x + 1.0;
            //Instruction 17285
            //MUL
            t33 = t2.w * _ST_WindVector.w;
            //Instruction 17286
            //MAD
            t31 = t33 * _ST_WindBranchWhip.x + t31;
            //Instruction 17287
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 17288
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 17289
            //MUL
            t4.xyz = vec3(t31) * t4.xyz;
            //Instruction 17290
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 17291
        //ELSE
        } else {
            //Instruction 17292
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 17293
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 17294
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 17295
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 17296
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 17297
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 17298
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 17299
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 17300
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 17301
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 17302
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 17303
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 17304
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 17305
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 17306
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 17307
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 17308
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 17309
            //LT
            tb0 = t2.w<0.0;
            //Instruction 17310
            //MOV
            t2.y = (-t2.w);
            //Instruction 17311
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 17312
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 17313
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 17314
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 17315
            //ADD
            t31 = (-t0.x) + t6.x;
            //Instruction 17316
            //MAD
            t0.x = t6.y * t31 + t0.x;
            //Instruction 17317
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 17318
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 17319
            //ADD
            t33 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 17320
            //MUL
            t33 = t33 * t5.x;
            //Instruction 17321
            //MAD
            t0.x = t0.x * t31 + t33;
            //Instruction 17322
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 17323
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 17324
        //ENDIF
        }
        //Instruction 17325
    //ENDIF
    }
    //Instruction 17326
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 17327
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 17328
    //DIV
    t31 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 17329
    //MAD
    t31 = (-t31) * 0.250000 + t3.y;
    //Instruction 17330
    //MAX
    t31 = max(t31, 0.0);
    //Instruction 17331
    //MUL
    t31 = t31 * _ST_WindGlobal.z;
    //Instruction 17332
    //NE
    tb33 = t31!=0.0;
    //Instruction 17333
    //LOG
    t4.x = log2(t31);
    //Instruction 17334
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 17335
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 17336
    //MOVC
    t31 = (tb33) ? t4.x : t31;
    //Instruction 17337
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 17338
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 17339
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 17340
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 17341
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 17342
    //MUL
    t24.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 17343
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 17344
    //MAD
    t4.xy = t24.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 17345
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 17346
    //MAD
    t33 = t4.y * t4.y + t4.x;
    //Instruction 17347
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 17348
    //MAD
    t33 = _ST_WindGlobal.y * t33 + t4.x;
    //Instruction 17349
    //MUL
    t31 = t31 * t33;
    //Instruction 17350
    //MAD
    t4.xz = t20.xy * vec2(t31) + t3.xz;
    //Instruction 17351
    //MOV
    t4.y = t3.y;
    //Instruction 17352
    //DP3
    t20.x = dot(t4.xyz, t4.xyz);
    //Instruction 17353
    //RSQ
    t20.x = inversesqrt(t20.x);
    //Instruction 17354
    //MUL
    t4.xyz = t20.xxx * t4.xyz;
    //Instruction 17355
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 17356
    //MOVC
    t0.xyz = (bool(tb10)) ? t0.xzw : t3.xyz;
    //Instruction 17357
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 17358
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 17359
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 17360
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 17361
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 17362
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 17363
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 17364
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 17365
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 17366
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 17367
    //MOV
    t2.zw = _World2Object[2].xx;
    //Instruction 17368
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 17369
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 17370
    //MOV
    t3.zw = _World2Object[2].yy;
    //Instruction 17371
    //MUL
    t3 = t3 * in_NORMAL0.yyyy;
    //Instruction 17372
    //MAD
    t2 = t2 * in_NORMAL0.xxxx + t3;
    //Instruction 17373
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 17374
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 17375
    //MOV
    t3.zw = _World2Object[2].zz;
    //Instruction 17376
    //MAD
    t2 = t3 * in_NORMAL0.zzzz + t2;
    //Instruction 17377
    //DP3
    t30 = dot(t2.xyw, t2.xyw);
    //Instruction 17378
    //RSQ
    t30 = inversesqrt(t30);
    //Instruction 17379
    //MUL
    t2 = vec4(t30) * t2;
    //Instruction 17380
    //MUL
    t3.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 17381
    //MAD
    t3.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t3.xyz;
    //Instruction 17382
    //MAD
    t3.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t3.xyz;
    //Instruction 17383
    //DP3
    t30 = dot(t3.xyz, t3.xyz);
    //Instruction 17384
    //RSQ
    t30 = inversesqrt(t30);
    //Instruction 17385
    //MUL
    t3.xyz = vec3(t30) * t3.xyz;
    //Instruction 17386
    //MUL
    t10_7.xyz = t2.wxy * t3.xyz;
    //Instruction 17387
    //MAD
    t10_7.xyz = t2.ywx * t3.yzx + (-t10_7.xyz);
    //Instruction 17388
    //MUL
    t4.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 17389
    //MUL
    t16_5 = t2.ywzx * t2;
    //Instruction 17390
    //DP4
    t16_8.x = dot(unity_SHBr, t16_5);
    //Instruction 17391
    //DP4
    t16_8.y = dot(unity_SHBg, t16_5);
    //Instruction 17392
    //DP4
    t16_8.z = dot(unity_SHBb, t16_5);
    //Instruction 17393
    //MUL
    t16_38 = t2.y * t2.y;
    //Instruction 17394
    //MAD
    t16_38 = t2.x * t2.x + (-t16_38);
    //Instruction 17395
    //MAD
    t16_8.xyz = unity_SHC.xyz * vec3(t16_38) + t16_8.xyz;
    //Instruction 17396
    //ADD
    t5 = (-t0.xxxx) + unity_4LightPosX0;
    //Instruction 17397
    //ADD
    t6 = (-t0.yyyy) + unity_4LightPosY0;
    //Instruction 17398
    //ADD
    t7 = (-t0.zzzz) + unity_4LightPosZ0;
    //Instruction 17399
    //MUL
    t9 = t6 * t6;
    //Instruction 17400
    //MAD
    t9 = t5 * t5 + t9;
    //Instruction 17401
    //MAD
    t9 = t7 * t7 + t9;
    //Instruction 17402
    //MUL
    t6 = t2.yyyy * t6;
    //Instruction 17403
    //MAD
    t5 = t5 * t2.xxxx + t6;
    //Instruction 17404
    //MAD
    t5 = t7 * t2.wwww + t5;
    //Instruction 17405
    //RSQ
    t6 = inversesqrt(t9);
    //Instruction 17406
    //MUL
    t5 = t5 * t6;
    //Instruction 17407
    //MAX
    t5 = max(t5, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 17408
    //MAD
    t6 = t9 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 17409
    //DIV
    t6 = vec4(1.0, 1.0, 1.0, 1.0) / t6;
    //Instruction 17410
    //MUL
    t5 = t5 * t6;
    //Instruction 17411
    //MUL
    t6.xyz = t5.yyy * unity_LightColor[1].xyz;
    //Instruction 17412
    //MAD
    t6.xyz = unity_LightColor[0].xyz * t5.xxx + t6.xyz;
    //Instruction 17413
    //MAD
    t6.xyz = unity_LightColor[2].xyz * t5.zzz + t6.xyz;
    //Instruction 17414
    //MAD
    t6.xyz = unity_LightColor[3].xyz * t5.www + t6.xyz;
    //Instruction 17415
    //ADD
    t6.xyz = t6.xyz + t16_8.xyz;
    //Instruction 17416
    //MOV
    vs_TEXCOORD0.x = t3.z;
    //Instruction 17417
    //MOV
    vs_TEXCOORD0.y = t4.x;
    //Instruction 17418
    //MOV
    vs_TEXCOORD0.z = t2.x;
    //Instruction 17419
    //MOV
    vs_TEXCOORD0.w = t0.x;
    //Instruction 17420
    //MOV
    vs_TEXCOORD1.x = t3.x;
    //Instruction 17421
    //MOV
    vs_TEXCOORD1.y = t4.y;
    //Instruction 17422
    //MOV
    vs_TEXCOORD1.z = t2.y;
    //Instruction 17423
    //MOV
    vs_TEXCOORD1.w = t0.y;
    //Instruction 17424
    //MOV
    vs_TEXCOORD2.x = t3.y;
    //Instruction 17425
    //MOV
    vs_TEXCOORD2.y = t4.z;
    //Instruction 17426
    //MOV
    vs_TEXCOORD2.z = t2.w;
    //Instruction 17427
    //MOV
    vs_TEXCOORD2.w = t0.z;
    //Instruction 17428
    //MOV
    vs_TEXCOORD3.w = _Color.w;
    //Instruction 17429
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 17430
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 17431
    //MOV
    vs_TEXCOORD5.xyz = t6.xyz;
    //Instruction 17432
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_7;
bool tb15;
mediump float t16_17;
void main()
{
    //Instruction 17161
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    //Instruction 17162
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 17163
    //LT
    tb15 = t10_1.x<0.0;
    //Instruction 17164
    //DISCARD
    if((int(tb15))!=0){discard;}
    //Instruction 17165
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 17166
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 17167
    //ADD
    t16_7.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 17168
    //MAD
    t16_7.xyz = vs_TEXCOORD4.zzz * t16_7.xyz + t10_0.xyz;
    //Instruction 17169
    //MAX
    t16_3.x = max(t16_7.z, t16_7.y);
    //Instruction 17170
    //MAX
    t16_3.x = max(t16_7.x, t16_3.x);
    //Instruction 17171
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 17172
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 17173
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_7.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 17174
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD3.xyz;
    //Instruction 17175
    //MUL
    t16_3.xyz = t16_2.xyz * _LightColor0.xyz;
    //Instruction 17176
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 17177
    //MAD
    t10_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 17178
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 17179
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 17180
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 17181
    //MOV
    t0.w = 1.0;
    //Instruction 17182
    //DP4
    t16_4.x = dot(unity_SHAr, t0);
    //Instruction 17183
    //DP4
    t16_4.y = dot(unity_SHAg, t0);
    //Instruction 17184
    //DP4
    t16_4.z = dot(unity_SHAb, t0);
    //Instruction 17185
    //DP3
    t16_17 = dot(t0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 17186
    //MAX
    t16_17 = max(t16_17, 0.0);
    //Instruction 17187
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD5.xyz;
    //Instruction 17188
    //MUL
    t16_2.xyz = t16_2.xyz * t16_4.xyz;
    //Instruction 17189
    //MAD
    t16_2.xyz = t16_3.xyz * vec3(t16_17) + t16_2.xyz;
    //Instruction 17190
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 17191
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 17192
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_4;
  lowp vec3 worldTangent_5;
  lowp vec3 worldNormal_6;
  mediump vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec4 tmpvar_9;
  lowp vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  tmpvar_11.xy = tmpvar_3.xy;
  tmpvar_10.w = _Color.w;
  tmpvar_10.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].x;
  highp float tmpvar_14;
  tmpvar_14 = _Object2World[3].y;
  tmpvar_12 = clamp (((
    fract(((tmpvar_13 + tmpvar_14) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_11.z = tmpvar_12;
  highp vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_15 = tmpvar_1;
  tmpvar_16 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  FinalPosition_19 = tmpvar_1.xyz;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_19 = tmpvar_23;
  if ((tmpvar_20 == 5.0)) {
    highp vec3 vPos_24;
    vPos_24 = tmpvar_23;
    highp float fOffset_25;
    fOffset_25 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_25 = 0.75;
    };
    highp vec4 tmpvar_26;
    tmpvar_26.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_26.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_25);
    highp vec4 tmpvar_27;
    tmpvar_27 = abs(((
      fract((tmpvar_26 + 0.5))
     * 2.0) - 1.0));
    vPos_24 = (tmpvar_23 + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_16 = tmpvar_2;
    FinalPosition_19 = vPos_24;
  };
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_28;
    vPos_28 = FinalPosition_19;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_29;
      vPos_29 = FinalPosition_19;
      highp float fTime_30;
      highp float fAdherenceScale_31;
      highp vec3 vWindVector_32;
      vWindVector_32 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_30 = (_ST_WindBranch.x + (tmpvar_13 + tmpvar_14));
      highp vec4 vOscillations_33;
      highp float fOscillation_34;
      fOscillation_34 = 1.0;
      highp float fAmount_35;
      highp float fTarget_36;
      highp vec4 tmpvar_37;
      tmpvar_37.x = (fTime_30 + _glesMultiTexCoord0.w);
      tmpvar_37.y = ((fTime_30 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_37.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_30 + _glesMultiTexCoord0.w));
      tmpvar_37.w = ((fTime_30 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      vOscillations_33 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      highp float tmpvar_39;
      tmpvar_39 = (vOscillations_33.y * vOscillations_33.z);
      fTarget_36 = 1.0;
      fAmount_35 = tmpvar_39;
      if ((tmpvar_39 < 0.0)) {
        fTarget_36 = -1.0;
        fAmount_35 = -(tmpvar_39);
      };
      fOscillation_34 = (((
        mix (mix (tmpvar_39, fTarget_36, fAmount_35), fTarget_36, fAmount_35)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_33.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_34 = (fOscillation_34 * (1.0 + (vOscillations_33.w * _ST_WindBranchWhip.x)));
      vPos_29 = (FinalPosition_19 + ((vWindVector_32 * fOscillation_34) * _ST_WindBranch.y));
      highp vec4 tmpvar_40;
      tmpvar_40.zw = vec2(0.0, 0.0);
      tmpvar_40.x = ((fTime_30 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_40.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_41;
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_40 + 0.5))
       * 2.0) - 1.0));
      tmpvar_41 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      fAdherenceScale_31 = (1.0 - ((tmpvar_41.x * tmpvar_41.y) * (
        (tmpvar_41.x * tmpvar_41.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_31 = (fAdherenceScale_31 + ((vOscillations_33.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_29 = (vPos_29 + ((
        ((vRotatedBranchAnchor_17 - vPos_29) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_31) * _glesMultiTexCoord0.z));
      vPos_28 = vPos_29;
    } else {
      highp vec3 vPos_43;
      vPos_43 = vPos_28;
      highp float fTime_44;
      highp vec3 vWindVector_45;
      vWindVector_45 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_44 = (_ST_WindBranch.x + (tmpvar_13 + tmpvar_14));
      highp vec4 vOscillations_46;
      highp float fOscillation_47;
      fOscillation_47 = 1.0;
      highp float fAmount_48;
      highp float fTarget_49;
      highp vec4 tmpvar_50;
      tmpvar_50.w = 0.0;
      tmpvar_50.x = (fTime_44 + _glesMultiTexCoord0.w);
      tmpvar_50.y = ((fTime_44 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_50.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_44 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_51;
      tmpvar_51 = abs(((
        fract((tmpvar_50 + 0.5))
       * 2.0) - 1.0));
      vOscillations_46 = (((
        (tmpvar_51 * tmpvar_51)
       * 
        (3.0 - (2.0 * tmpvar_51))
      ) - 0.5) * 2.0);
      highp float tmpvar_52;
      tmpvar_52 = (vOscillations_46.y * vOscillations_46.z);
      fTarget_49 = 1.0;
      fAmount_48 = tmpvar_52;
      if ((tmpvar_52 < 0.0)) {
        fTarget_49 = -1.0;
        fAmount_48 = -(tmpvar_52);
      };
      fOscillation_47 = (((
        mix (mix (tmpvar_52, fTarget_49, fAmount_48), fTarget_49, fAmount_48)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_46.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_43 = (vPos_28 + ((vWindVector_45 * fOscillation_47) * _ST_WindBranch.y));
      vPos_28 = vPos_43;
    };
    FinalPosition_19 = vPos_28;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_53;
    vPos_53 = FinalPosition_19;
    highp float fMoveAmount_54;
    highp float fAdjust_55;
    highp float fLength_56;
    fLength_56 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_57;
    tmpvar_57 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_55 = tmpvar_57;
    if ((tmpvar_57 != 0.0)) {
      fAdjust_55 = pow (tmpvar_57, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_58;
    tmpvar_58.zw = vec2(0.0, 0.0);
    tmpvar_58.x = (tmpvar_13 + _ST_WindGlobal.x);
    tmpvar_58.y = (tmpvar_14 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_59;
    highp vec4 tmpvar_60;
    tmpvar_60 = abs(((
      fract((tmpvar_58 + 0.5))
     * 2.0) - 1.0));
    tmpvar_59 = (((
      (tmpvar_60 * tmpvar_60)
     * 
      (3.0 - (2.0 * tmpvar_60))
    ) - 0.5) * 2.0);
    fMoveAmount_54 = ((_ST_WindGlobal.y * (tmpvar_59.x + 
      (tmpvar_59.y * tmpvar_59.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_54 = (fMoveAmount_54 * fAdjust_55);
    vPos_53.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * fMoveAmount_54));
    vPos_53 = (normalize(vPos_53) * fLength_56);
    FinalPosition_19 = vPos_53;
  };
  tmpvar_15.xyz = FinalPosition_19;
  tmpvar_7 = tmpvar_10;
  highp vec3 tmpvar_61;
  tmpvar_61 = (_Object2World * tmpvar_15).xyz;
  highp vec4 v_62;
  v_62.x = _World2Object[0].x;
  v_62.y = _World2Object[1].x;
  v_62.z = _World2Object[2].x;
  v_62.w = _World2Object[3].x;
  highp vec4 v_63;
  v_63.x = _World2Object[0].y;
  v_63.y = _World2Object[1].y;
  v_63.z = _World2Object[2].y;
  v_63.w = _World2Object[3].y;
  highp vec4 v_64;
  v_64.x = _World2Object[0].z;
  v_64.y = _World2Object[1].z;
  v_64.z = _World2Object[2].z;
  v_64.w = _World2Object[3].z;
  highp vec3 tmpvar_65;
  tmpvar_65 = normalize(((
    (v_62.xyz * tmpvar_16.x)
   + 
    (v_63.xyz * tmpvar_16.y)
  ) + (v_64.xyz * tmpvar_16.z)));
  worldNormal_6 = tmpvar_65;
  highp mat3 tmpvar_66;
  tmpvar_66[0] = _Object2World[0].xyz;
  tmpvar_66[1] = _Object2World[1].xyz;
  tmpvar_66[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((tmpvar_66 * _glesTANGENT.xyz));
  worldTangent_5 = tmpvar_67;
  lowp vec3 tmpvar_68;
  tmpvar_68 = ((worldNormal_6.yzx * worldTangent_5.zxy) - (worldNormal_6.zxy * worldTangent_5.yzx));
  highp vec3 tmpvar_69;
  tmpvar_69 = (tmpvar_68 * _glesTANGENT.w);
  worldBinormal_4 = tmpvar_69;
  highp vec4 tmpvar_70;
  tmpvar_70.x = worldTangent_5.x;
  tmpvar_70.y = worldBinormal_4.x;
  tmpvar_70.z = worldNormal_6.x;
  tmpvar_70.w = tmpvar_61.x;
  highp vec4 tmpvar_71;
  tmpvar_71.x = worldTangent_5.y;
  tmpvar_71.y = worldBinormal_4.y;
  tmpvar_71.z = worldNormal_6.y;
  tmpvar_71.w = tmpvar_61.y;
  highp vec4 tmpvar_72;
  tmpvar_72.x = worldTangent_5.z;
  tmpvar_72.y = worldBinormal_4.z;
  tmpvar_72.z = worldNormal_6.z;
  tmpvar_72.w = tmpvar_61.z;
  lowp vec4 tmpvar_73;
  tmpvar_73.w = 1.0;
  tmpvar_73.xyz = worldNormal_6;
  mediump vec4 normal_74;
  normal_74 = tmpvar_73;
  mediump vec3 x2_75;
  mediump vec4 tmpvar_76;
  tmpvar_76 = (normal_74.xyzz * normal_74.yzzx);
  x2_75.x = dot (unity_SHBr, tmpvar_76);
  x2_75.y = dot (unity_SHBg, tmpvar_76);
  x2_75.z = dot (unity_SHBb, tmpvar_76);
  highp vec3 lightColor0_77;
  lightColor0_77 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_78;
  lightColor1_78 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_79;
  lightColor2_79 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_80;
  lightColor3_80 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_81;
  lightAttenSq_81 = unity_4LightAtten0;
  highp vec3 normal_82;
  normal_82 = worldNormal_6;
  highp vec3 col_83;
  highp vec4 ndotl_84;
  highp vec4 lengthSq_85;
  highp vec4 tmpvar_86;
  tmpvar_86 = (unity_4LightPosX0 - tmpvar_61.x);
  highp vec4 tmpvar_87;
  tmpvar_87 = (unity_4LightPosY0 - tmpvar_61.y);
  highp vec4 tmpvar_88;
  tmpvar_88 = (unity_4LightPosZ0 - tmpvar_61.z);
  lengthSq_85 = (tmpvar_86 * tmpvar_86);
  lengthSq_85 = (lengthSq_85 + (tmpvar_87 * tmpvar_87));
  lengthSq_85 = (lengthSq_85 + (tmpvar_88 * tmpvar_88));
  ndotl_84 = (tmpvar_86 * normal_82.x);
  ndotl_84 = (ndotl_84 + (tmpvar_87 * normal_82.y));
  ndotl_84 = (ndotl_84 + (tmpvar_88 * normal_82.z));
  highp vec4 tmpvar_89;
  tmpvar_89 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_84 * inversesqrt(lengthSq_85)));
  ndotl_84 = tmpvar_89;
  highp vec4 tmpvar_90;
  tmpvar_90 = (tmpvar_89 * (1.0/((1.0 + 
    (lengthSq_85 * lightAttenSq_81)
  ))));
  col_83 = (lightColor0_77 * tmpvar_90.x);
  col_83 = (col_83 + (lightColor1_78 * tmpvar_90.y));
  col_83 = (col_83 + (lightColor2_79 * tmpvar_90.z));
  col_83 = (col_83 + (lightColor3_80 * tmpvar_90.w));
  tmpvar_8 = ((x2_75 + (unity_SHC.xyz * 
    ((normal_74.x * normal_74.x) - (normal_74.y * normal_74.y))
  )) + col_83);
  tmpvar_9 = (unity_World2Shadow[0] * (_Object2World * tmpvar_15));
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_70;
  xlv_TEXCOORD1 = tmpvar_71;
  xlv_TEXCOORD2 = tmpvar_72;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_11;
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_15 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_16;
  tmpvar_16 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_17 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD0.xyz, tmpvar_16);
  worldN_4.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD1.xyz, tmpvar_16);
  worldN_4.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (xlv_TEXCOORD2.xyz, tmpvar_16);
  worldN_4.z = tmpvar_21;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_17;
  mediump vec3 normalWorld_22;
  normalWorld_22 = worldN_4;
  mediump vec3 tmpvar_23;
  mediump vec3 tmpvar_24;
  mediump vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = normalWorld_22;
  mediump vec3 x1_26;
  x1_26.x = dot (unity_SHAr, tmpvar_25);
  x1_26.y = dot (unity_SHAg, tmpvar_25);
  x1_26.z = dot (unity_SHAb, tmpvar_25);
  tmpvar_24 = (xlv_TEXCOORD5 + x1_26);
  tmpvar_23 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_23;
  lowp vec4 c_27;
  lowp vec4 c_28;
  lowp float diff_29;
  mediump float tmpvar_30;
  tmpvar_30 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_29 = tmpvar_30;
  c_28.xyz = ((tmpvar_9 * tmpvar_23) * diff_29);
  c_28.w = tmpvar_10;
  c_27.w = c_28.w;
  c_27.xyz = (c_28.xyz + (tmpvar_9 * tmpvar_24));
  c_5.xyz = c_27.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_4;
  lowp vec3 worldTangent_5;
  lowp vec3 worldNormal_6;
  mediump vec4 tmpvar_7;
  mediump vec4 tmpvar_8;
  lowp vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10.xy = tmpvar_3.xy;
  tmpvar_9.w = _Color.w;
  tmpvar_9.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].x;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].y;
  tmpvar_11 = clamp (((
    fract(((tmpvar_12 + tmpvar_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_10.z = tmpvar_11;
  highp vec4 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_1;
  tmpvar_15 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  FinalPosition_18 = tmpvar_1.xyz;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_18 = tmpvar_22;
  if ((tmpvar_19 == 5.0)) {
    highp vec3 vPos_23;
    vPos_23 = tmpvar_22;
    highp float fOffset_24;
    fOffset_24 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_24 = 0.75;
    };
    highp vec4 tmpvar_25;
    tmpvar_25.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_25.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_24);
    highp vec4 tmpvar_26;
    tmpvar_26 = abs(((
      fract((tmpvar_25 + 0.5))
     * 2.0) - 1.0));
    vPos_23 = (tmpvar_22 + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_26 * tmpvar_26)
       * 
        (3.0 - (2.0 * tmpvar_26))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_15 = tmpvar_2;
    FinalPosition_18 = vPos_23;
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_27;
    vPos_27 = FinalPosition_18;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_28;
      vPos_28 = FinalPosition_18;
      highp float fTime_29;
      highp float fAdherenceScale_30;
      highp vec3 vWindVector_31;
      vWindVector_31 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_29 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_32;
      highp float fOscillation_33;
      fOscillation_33 = 1.0;
      highp float fAmount_34;
      highp float fTarget_35;
      highp vec4 tmpvar_36;
      tmpvar_36.x = (fTime_29 + _glesMultiTexCoord0.w);
      tmpvar_36.y = ((fTime_29 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_36.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_29 + _glesMultiTexCoord0.w));
      tmpvar_36.w = ((fTime_29 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      vOscillations_32 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      highp float tmpvar_38;
      tmpvar_38 = (vOscillations_32.y * vOscillations_32.z);
      fTarget_35 = 1.0;
      fAmount_34 = tmpvar_38;
      if ((tmpvar_38 < 0.0)) {
        fTarget_35 = -1.0;
        fAmount_34 = -(tmpvar_38);
      };
      fOscillation_33 = (((
        mix (mix (tmpvar_38, fTarget_35, fAmount_34), fTarget_35, fAmount_34)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_32.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_33 = (fOscillation_33 * (1.0 + (vOscillations_32.w * _ST_WindBranchWhip.x)));
      vPos_28 = (FinalPosition_18 + ((vWindVector_31 * fOscillation_33) * _ST_WindBranch.y));
      highp vec4 tmpvar_39;
      tmpvar_39.zw = vec2(0.0, 0.0);
      tmpvar_39.x = ((fTime_29 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_39.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_40;
      highp vec4 tmpvar_41;
      tmpvar_41 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      tmpvar_40 = (((
        (tmpvar_41 * tmpvar_41)
       * 
        (3.0 - (2.0 * tmpvar_41))
      ) - 0.5) * 2.0);
      fAdherenceScale_30 = (1.0 - ((tmpvar_40.x * tmpvar_40.y) * (
        (tmpvar_40.x * tmpvar_40.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_30 = (fAdherenceScale_30 + ((vOscillations_32.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_28 = (vPos_28 + ((
        ((vRotatedBranchAnchor_16 - vPos_28) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_30) * _glesMultiTexCoord0.z));
      vPos_27 = vPos_28;
    } else {
      highp vec3 vPos_42;
      vPos_42 = vPos_27;
      highp float fTime_43;
      highp vec3 vWindVector_44;
      vWindVector_44 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_43 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_45;
      highp float fOscillation_46;
      fOscillation_46 = 1.0;
      highp float fAmount_47;
      highp float fTarget_48;
      highp vec4 tmpvar_49;
      tmpvar_49.w = 0.0;
      tmpvar_49.x = (fTime_43 + _glesMultiTexCoord0.w);
      tmpvar_49.y = ((fTime_43 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_49.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_43 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_50;
      tmpvar_50 = abs(((
        fract((tmpvar_49 + 0.5))
       * 2.0) - 1.0));
      vOscillations_45 = (((
        (tmpvar_50 * tmpvar_50)
       * 
        (3.0 - (2.0 * tmpvar_50))
      ) - 0.5) * 2.0);
      highp float tmpvar_51;
      tmpvar_51 = (vOscillations_45.y * vOscillations_45.z);
      fTarget_48 = 1.0;
      fAmount_47 = tmpvar_51;
      if ((tmpvar_51 < 0.0)) {
        fTarget_48 = -1.0;
        fAmount_47 = -(tmpvar_51);
      };
      fOscillation_46 = (((
        mix (mix (tmpvar_51, fTarget_48, fAmount_47), fTarget_48, fAmount_47)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_45.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_42 = (vPos_27 + ((vWindVector_44 * fOscillation_46) * _ST_WindBranch.y));
      vPos_27 = vPos_42;
    };
    FinalPosition_18 = vPos_27;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_52;
    vPos_52 = FinalPosition_18;
    highp float fMoveAmount_53;
    highp float fAdjust_54;
    highp float fLength_55;
    fLength_55 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_56;
    tmpvar_56 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_54 = tmpvar_56;
    if ((tmpvar_56 != 0.0)) {
      fAdjust_54 = pow (tmpvar_56, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_57;
    tmpvar_57.zw = vec2(0.0, 0.0);
    tmpvar_57.x = (tmpvar_12 + _ST_WindGlobal.x);
    tmpvar_57.y = (tmpvar_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_58;
    highp vec4 tmpvar_59;
    tmpvar_59 = abs(((
      fract((tmpvar_57 + 0.5))
     * 2.0) - 1.0));
    tmpvar_58 = (((
      (tmpvar_59 * tmpvar_59)
     * 
      (3.0 - (2.0 * tmpvar_59))
    ) - 0.5) * 2.0);
    fMoveAmount_53 = ((_ST_WindGlobal.y * (tmpvar_58.x + 
      (tmpvar_58.y * tmpvar_58.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_53 = (fMoveAmount_53 * fAdjust_54);
    vPos_52.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * fMoveAmount_53));
    vPos_52 = (normalize(vPos_52) * fLength_55);
    FinalPosition_18 = vPos_52;
  };
  tmpvar_14.xyz = FinalPosition_18;
  tmpvar_7 = tmpvar_9;
  highp vec3 tmpvar_60;
  tmpvar_60 = (_Object2World * tmpvar_14).xyz;
  highp vec4 v_61;
  v_61.x = _World2Object[0].x;
  v_61.y = _World2Object[1].x;
  v_61.z = _World2Object[2].x;
  v_61.w = _World2Object[3].x;
  highp vec4 v_62;
  v_62.x = _World2Object[0].y;
  v_62.y = _World2Object[1].y;
  v_62.z = _World2Object[2].y;
  v_62.w = _World2Object[3].y;
  highp vec4 v_63;
  v_63.x = _World2Object[0].z;
  v_63.y = _World2Object[1].z;
  v_63.z = _World2Object[2].z;
  v_63.w = _World2Object[3].z;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(((
    (v_61.xyz * tmpvar_15.x)
   + 
    (v_62.xyz * tmpvar_15.y)
  ) + (v_63.xyz * tmpvar_15.z)));
  worldNormal_6 = tmpvar_64;
  highp mat3 tmpvar_65;
  tmpvar_65[0] = _Object2World[0].xyz;
  tmpvar_65[1] = _Object2World[1].xyz;
  tmpvar_65[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize((tmpvar_65 * _glesTANGENT.xyz));
  worldTangent_5 = tmpvar_66;
  lowp vec3 tmpvar_67;
  tmpvar_67 = ((worldNormal_6.yzx * worldTangent_5.zxy) - (worldNormal_6.zxy * worldTangent_5.yzx));
  highp vec3 tmpvar_68;
  tmpvar_68 = (tmpvar_67 * _glesTANGENT.w);
  worldBinormal_4 = tmpvar_68;
  highp vec4 tmpvar_69;
  tmpvar_69.x = worldTangent_5.x;
  tmpvar_69.y = worldBinormal_4.x;
  tmpvar_69.z = worldNormal_6.x;
  tmpvar_69.w = tmpvar_60.x;
  highp vec4 tmpvar_70;
  tmpvar_70.x = worldTangent_5.y;
  tmpvar_70.y = worldBinormal_4.y;
  tmpvar_70.z = worldNormal_6.y;
  tmpvar_70.w = tmpvar_60.y;
  highp vec4 tmpvar_71;
  tmpvar_71.x = worldTangent_5.z;
  tmpvar_71.y = worldBinormal_4.z;
  tmpvar_71.z = worldNormal_6.z;
  tmpvar_71.w = tmpvar_60.z;
  lowp vec4 tmpvar_72;
  tmpvar_72.w = 1.0;
  tmpvar_72.xyz = worldNormal_6;
  mediump vec4 normal_73;
  normal_73 = tmpvar_72;
  mediump vec3 x2_74;
  mediump vec4 tmpvar_75;
  tmpvar_75 = (normal_73.xyzz * normal_73.yzzx);
  x2_74.x = dot (unity_SHBr, tmpvar_75);
  x2_74.y = dot (unity_SHBg, tmpvar_75);
  x2_74.z = dot (unity_SHBb, tmpvar_75);
  tmpvar_8 = (unity_World2Shadow[0] * (_Object2World * tmpvar_14));
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_69;
  xlv_TEXCOORD1 = tmpvar_70;
  xlv_TEXCOORD2 = tmpvar_71;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = (x2_74 + (unity_SHC.xyz * (
    (normal_73.x * normal_73.x)
   - 
    (normal_73.y * normal_73.y)
  )));
  xlv_TEXCOORD6 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_15 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_16;
  tmpvar_16 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float shadow_17;
  shadow_17 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD0.xyz, tmpvar_16);
  worldN_4.x = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD1.xyz, tmpvar_16);
  worldN_4.y = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD2.xyz, tmpvar_16);
  worldN_4.z = tmpvar_20;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_17;
  mediump vec3 normalWorld_21;
  normalWorld_21 = worldN_4;
  mediump vec3 tmpvar_22;
  mediump vec3 tmpvar_23;
  mediump vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = normalWorld_21;
  mediump vec3 x1_25;
  x1_25.x = dot (unity_SHAr, tmpvar_24);
  x1_25.y = dot (unity_SHAg, tmpvar_24);
  x1_25.z = dot (unity_SHAb, tmpvar_24);
  tmpvar_23 = (xlv_TEXCOORD5 + x1_25);
  tmpvar_22 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_22;
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_28 = tmpvar_29;
  c_27.xyz = ((tmpvar_9 * tmpvar_22) * diff_28);
  c_27.w = tmpvar_10;
  c_26.w = c_27.w;
  c_26.xyz = (c_27.xyz + (tmpvar_9 * tmpvar_23));
  c_5.xyz = c_26.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec4 t4;
highp vec3 t5;
highp vec4 t6;
mediump vec4 t16_6;
lowp vec3 t10_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp vec2 t18;
highp vec2 t22;
highp vec2 t24;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
highp float t32;
mediump float t16_35;
void main()
{
    //Instruction 17469
    //MUL
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 17470
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 17471
    //ADD
    t9.x = t0.x + _Object2World[3].z;
    //Instruction 17472
    //ADD
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 17473
    //ADD
    t9.y = t18.x + in_NORMAL0.x;
    //Instruction 17474
    //FRC
    t9.xy = fract(t9.xy);
    //Instruction 17475
    //MAD
    t9.x = t9.y * 0.500000 + t9.x;
    //Instruction 17476
    //ADD
    t9.x = t9.x + -0.300000;
    //Instruction 17477
    //MUL
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 17478
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 17479
    //LT
    tb9 = 0.0<t16_2;
    //Instruction 17480
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 17481
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 17482
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 17483
    //DP3
    t18.x = dot(t3.xyz, t3.xyz);
    //Instruction 17484
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 17485
    //MUL
    t18.xy = t18.xx * t3.xz;
    //Instruction 17486
    //AND
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, bvec2(tb9));
    //Instruction 17487
    //ADD
    t3.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 17488
    //MAD
    t3.xyz = unity_LODFade.xxx * t3.xyz + in_POSITION0.xyz;
    //Instruction 17489
    //EQ
    tb28 = t16_2==5.000000;
    //Instruction 17490
    //LT
    tb30 = in_TEXCOORD0.x<0.500000;
    //Instruction 17491
    //AND
    t30 = tb30 ? 0.750000 : float(0.0);
    //Instruction 17492
    //ADD
    t4.x = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 17493
    //MAD
    t30 = t4.x * _ST_WindFrondRipple.z + t30;
    //Instruction 17494
    //ADD
    t30 = t30 + 0.500000;
    //Instruction 17495
    //FRC
    t30 = fract(t30);
    //Instruction 17496
    //MAD
    t30 = t30 * 2.000000 + -1.0;
    //Instruction 17497
    //MUL
    t4.x = abs(t30) * abs(t30);
    //Instruction 17498
    //MAD
    t30 = -abs(t30) * 2.000000 + 3.000000;
    //Instruction 17499
    //MAD
    t30 = t4.x * t30 + -0.500000;
    //Instruction 17500
    //MUL
    t30 = t30 * in_TEXCOORD2.y;
    //Instruction 17501
    //DP2
    t30 = dot(_ST_WindFrondRipple.yy, vec2(t30));
    //Instruction 17502
    //MAD
    t4.xyz = vec3(t30) * in_NORMAL0.xyz + t3.xyz;
    //Instruction 17503
    //MOVC
    t3.xyz = (bool(tb28)) ? t4.xyz : t3.xyz;
    //Instruction 17504
    //GE
    tb30 = t16_2>=3.000000;
    //Instruction 17505
    //IF
    if(tb30){
        //Instruction 17506
        //IF
        if(tb28){
            //Instruction 17507
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 17508
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 17509
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 17510
            //DP3
            t28 = dot(t4.xyz, t4.xyz);
            //Instruction 17511
            //RSQ
            t28 = inversesqrt(t28);
            //Instruction 17512
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 17513
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 17514
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 17515
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 17516
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 17517
            //ADD
            t28 = t0.x + _ST_WindBranch.x;
            //Instruction 17518
            //ADD
            t2.x = t28 + in_TEXCOORD0.w;
            //Instruction 17519
            //MAD
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 17520
            //MUL
            t30 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 17521
            //MUL
            t2.z = t30 * 0.500000;
            //Instruction 17522
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 17523
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 17524
            //FRC
            t2 = fract(t2);
            //Instruction 17525
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 17526
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 17527
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 17528
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 17529
            //ADD
            t2 = t2 + t2;
            //Instruction 17530
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 17531
            //LT
            tb30 = t6.w<0.0;
            //Instruction 17532
            //MOV
            t6.y = (-t6.w);
            //Instruction 17533
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 17534
            //MOVC
            t6.xy = (bool(tb30)) ? t6.xy : t6.zw;
            //Instruction 17535
            //MAD
            t30 = (-t2.y) * t2.z + t6.x;
            //Instruction 17536
            //MAD
            t30 = t6.y * t30 + t6.w;
            //Instruction 17537
            //ADD
            t31 = (-t30) + t6.x;
            //Instruction 17538
            //MAD
            t30 = t6.y * t31 + t30;
            //Instruction 17539
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 17540
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 17541
            //ADD
            t32 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 17542
            //MUL
            t32 = t2.x * t32;
            //Instruction 17543
            //MAD
            t30 = t30 * t31 + t32;
            //Instruction 17544
            //MAD
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 17545
            //MUL
            t30 = t30 * t31;
            //Instruction 17546
            //MUL
            t5.xyz = vec3(t30) * t5.xyz;
            //Instruction 17547
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 17548
            //MAD
            t6.x = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 17549
            //MUL
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 17550
            //MAD
            t6.y = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 17551
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 17552
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 17553
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 17554
            //MUL
            t24.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 17555
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 17556
            //MAD
            t6.xy = t24.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 17557
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 17558
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 17559
            //MUL
            t28 = t6.x * t6.y;
            //Instruction 17560
            //MAD
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            //Instruction 17561
            //MUL
            t30 = t2.w * _ST_WindVector.w;
            //Instruction 17562
            //MAD
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            //Instruction 17563
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 17564
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 17565
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 17566
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 17567
        //ELSE
        } else {
            //Instruction 17568
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 17569
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 17570
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 17571
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 17572
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 17573
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 17574
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 17575
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 17576
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 17577
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 17578
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 17579
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 17580
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 17581
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 17582
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 17583
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 17584
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 17585
            //LT
            tb0 = t2.w<0.0;
            //Instruction 17586
            //MOV
            t2.y = (-t2.w);
            //Instruction 17587
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 17588
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 17589
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 17590
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 17591
            //ADD
            t28 = (-t0.x) + t6.x;
            //Instruction 17592
            //MAD
            t0.x = t6.y * t28 + t0.x;
            //Instruction 17593
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 17594
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 17595
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 17596
            //MUL
            t30 = t30 * t5.x;
            //Instruction 17597
            //MAD
            t0.x = t0.x * t28 + t30;
            //Instruction 17598
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 17599
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 17600
        //ENDIF
        }
        //Instruction 17601
    //ENDIF
    }
    //Instruction 17602
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 17603
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 17604
    //DIV
    t28 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 17605
    //MAD
    t28 = (-t28) * 0.250000 + t3.y;
    //Instruction 17606
    //MAX
    t28 = max(t28, 0.0);
    //Instruction 17607
    //MUL
    t28 = t28 * _ST_WindGlobal.z;
    //Instruction 17608
    //NE
    tb30 = t28!=0.0;
    //Instruction 17609
    //LOG
    t4.x = log2(t28);
    //Instruction 17610
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 17611
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 17612
    //MOVC
    t28 = (tb30) ? t4.x : t28;
    //Instruction 17613
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 17614
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 17615
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 17616
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 17617
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 17618
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 17619
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 17620
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 17621
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 17622
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 17623
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 17624
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 17625
    //MUL
    t28 = t28 * t30;
    //Instruction 17626
    //MAD
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    //Instruction 17627
    //MOV
    t4.y = t3.y;
    //Instruction 17628
    //DP3
    t18.x = dot(t4.xyz, t4.xyz);
    //Instruction 17629
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 17630
    //MUL
    t4.xyz = t18.xxx * t4.xyz;
    //Instruction 17631
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 17632
    //MOVC
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    //Instruction 17633
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 17634
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 17635
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 17636
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 17637
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 17638
    //MAD
    t3.xyz = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 17639
    //MAD
    t3.xyz = _Object2World[2].xyz * t0.zzz + t3.xyz;
    //Instruction 17640
    //MAD
    t3.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xyz;
    //Instruction 17641
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 17642
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 17643
    //MOV
    t2.zw = _World2Object[2].xx;
    //Instruction 17644
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 17645
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 17646
    //MOV
    t4.zw = _World2Object[2].yy;
    //Instruction 17647
    //MUL
    t4 = t4 * in_NORMAL0.yyyy;
    //Instruction 17648
    //MAD
    t2 = t2 * in_NORMAL0.xxxx + t4;
    //Instruction 17649
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 17650
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 17651
    //MOV
    t4.zw = _World2Object[2].zz;
    //Instruction 17652
    //MAD
    t2 = t4 * in_NORMAL0.zzzz + t2;
    //Instruction 17653
    //DP3
    t27 = dot(t2.xyw, t2.xyw);
    //Instruction 17654
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 17655
    //MUL
    t2 = vec4(t27) * t2;
    //Instruction 17656
    //MUL
    t4.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 17657
    //MAD
    t4.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t4.xyz;
    //Instruction 17658
    //MAD
    t4.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t4.xyz;
    //Instruction 17659
    //DP3
    t27 = dot(t4.xyz, t4.xyz);
    //Instruction 17660
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 17661
    //MUL
    t4.xyz = vec3(t27) * t4.xyz;
    //Instruction 17662
    //MUL
    t10_7.xyz = t2.wxy * t4.xyz;
    //Instruction 17663
    //MAD
    t10_7.xyz = t2.ywx * t4.yzx + (-t10_7.xyz);
    //Instruction 17664
    //MUL
    t5.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 17665
    //MUL
    t16_6 = t2.ywzx * t2;
    //Instruction 17666
    //DP4
    t16_8.x = dot(unity_SHBr, t16_6);
    //Instruction 17667
    //DP4
    t16_8.y = dot(unity_SHBg, t16_6);
    //Instruction 17668
    //DP4
    t16_8.z = dot(unity_SHBb, t16_6);
    //Instruction 17669
    //MUL
    t16_35 = t2.y * t2.y;
    //Instruction 17670
    //MAD
    t16_35 = t2.x * t2.x + (-t16_35);
    //Instruction 17671
    //MAD
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(t16_35) + t16_8.xyz;
    //Instruction 17672
    //MUL
    t6 = t0.yyyy * _Object2World[1];
    //Instruction 17673
    //MAD
    t6 = _Object2World[0] * t0.xxxx + t6;
    //Instruction 17674
    //MAD
    t0 = _Object2World[2] * t0.zzzz + t6;
    //Instruction 17675
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 17676
    //MUL
    t6 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 17677
    //MAD
    t6 = unity_World2Shadow[0][0] * t0.xxxx + t6;
    //Instruction 17678
    //MAD
    t6 = unity_World2Shadow[0][2] * t0.zzzz + t6;
    //Instruction 17679
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t6;
    //Instruction 17680
    //MOV
    vs_TEXCOORD0.x = t4.z;
    //Instruction 17681
    //MOV
    vs_TEXCOORD0.y = t5.x;
    //Instruction 17682
    //MOV
    vs_TEXCOORD0.z = t2.x;
    //Instruction 17683
    //MOV
    vs_TEXCOORD0.w = t3.x;
    //Instruction 17684
    //MOV
    vs_TEXCOORD1.x = t4.x;
    //Instruction 17685
    //MOV
    vs_TEXCOORD1.y = t5.y;
    //Instruction 17686
    //MOV
    vs_TEXCOORD1.z = t2.y;
    //Instruction 17687
    //MOV
    vs_TEXCOORD1.w = t3.y;
    //Instruction 17688
    //MOV
    vs_TEXCOORD2.x = t4.y;
    //Instruction 17689
    //MOV
    vs_TEXCOORD2.y = t5.z;
    //Instruction 17690
    //MOV
    vs_TEXCOORD2.z = t2.w;
    //Instruction 17691
    //MOV
    vs_TEXCOORD2.w = t3.z;
    //Instruction 17692
    //MOV
    vs_TEXCOORD3.w = _Color.w;
    //Instruction 17693
    //MOV
    vs_TEXCOORD6 = t0;
    //Instruction 17694
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 17695
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 17696
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_7;
bool tb15;
mediump float t16_17;
void main()
{
    //Instruction 17433
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    //Instruction 17434
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 17435
    //LT
    tb15 = t10_1.x<0.0;
    //Instruction 17436
    //DISCARD
    if((int(tb15))!=0){discard;}
    //Instruction 17437
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 17438
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 17439
    //ADD
    t16_7.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 17440
    //MAD
    t16_7.xyz = vs_TEXCOORD4.zzz * t16_7.xyz + t10_0.xyz;
    //Instruction 17441
    //MAX
    t16_3.x = max(t16_7.z, t16_7.y);
    //Instruction 17442
    //MAX
    t16_3.x = max(t16_7.x, t16_3.x);
    //Instruction 17443
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 17444
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 17445
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_7.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 17446
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD3.xyz;
    //Instruction 17447
    //SAMPLE_C_LZ
    vec3 txVec43 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_17 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec43, 0.0);
    //Instruction 17448
    //ADD
    t16_3.x = (-_LightShadowData.x) + 1.0;
    //Instruction 17449
    //MAD
    t16_17 = t16_17 * t16_3.x + _LightShadowData.x;
    //Instruction 17450
    //MUL
    t16_3.xyz = vec3(t16_17) * _LightColor0.xyz;
    //Instruction 17451
    //MUL
    t16_3.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 17452
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 17453
    //MAD
    t10_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 17454
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 17455
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 17456
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 17457
    //MOV
    t0.w = 1.0;
    //Instruction 17458
    //DP4
    t16_4.x = dot(unity_SHAr, t0);
    //Instruction 17459
    //DP4
    t16_4.y = dot(unity_SHAg, t0);
    //Instruction 17460
    //DP4
    t16_4.z = dot(unity_SHAb, t0);
    //Instruction 17461
    //DP3
    t16_17 = dot(t0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 17462
    //MAX
    t16_17 = max(t16_17, 0.0);
    //Instruction 17463
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD5.xyz;
    //Instruction 17464
    //MUL
    t16_2.xyz = t16_2.xyz * t16_4.xyz;
    //Instruction 17465
    //MAD
    t16_2.xyz = t16_3.xyz * vec3(t16_17) + t16_2.xyz;
    //Instruction 17466
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 17467
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 17468
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_4;
  lowp vec3 worldTangent_5;
  lowp vec3 worldNormal_6;
  mediump vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec4 tmpvar_9;
  lowp vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  tmpvar_11.xy = tmpvar_3.xy;
  tmpvar_10.w = _Color.w;
  tmpvar_10.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].x;
  highp float tmpvar_14;
  tmpvar_14 = _Object2World[3].y;
  tmpvar_12 = clamp (((
    fract(((tmpvar_13 + tmpvar_14) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_11.z = tmpvar_12;
  highp vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_15 = tmpvar_1;
  tmpvar_16 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  FinalPosition_19 = tmpvar_1.xyz;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_19 = tmpvar_23;
  if ((tmpvar_20 == 5.0)) {
    highp vec3 vPos_24;
    vPos_24 = tmpvar_23;
    highp float fOffset_25;
    fOffset_25 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_25 = 0.75;
    };
    highp vec4 tmpvar_26;
    tmpvar_26.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_26.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_25);
    highp vec4 tmpvar_27;
    tmpvar_27 = abs(((
      fract((tmpvar_26 + 0.5))
     * 2.0) - 1.0));
    vPos_24 = (tmpvar_23 + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_16 = tmpvar_2;
    FinalPosition_19 = vPos_24;
  };
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_28;
    vPos_28 = FinalPosition_19;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_29;
      vPos_29 = FinalPosition_19;
      highp float fTime_30;
      highp float fAdherenceScale_31;
      highp vec3 vWindVector_32;
      vWindVector_32 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_30 = (_ST_WindBranch.x + (tmpvar_13 + tmpvar_14));
      highp vec4 vOscillations_33;
      highp float fOscillation_34;
      fOscillation_34 = 1.0;
      highp float fAmount_35;
      highp float fTarget_36;
      highp vec4 tmpvar_37;
      tmpvar_37.x = (fTime_30 + _glesMultiTexCoord0.w);
      tmpvar_37.y = ((fTime_30 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_37.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_30 + _glesMultiTexCoord0.w));
      tmpvar_37.w = ((fTime_30 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      vOscillations_33 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      highp float tmpvar_39;
      tmpvar_39 = (vOscillations_33.y * vOscillations_33.z);
      fTarget_36 = 1.0;
      fAmount_35 = tmpvar_39;
      if ((tmpvar_39 < 0.0)) {
        fTarget_36 = -1.0;
        fAmount_35 = -(tmpvar_39);
      };
      fOscillation_34 = (((
        mix (mix (tmpvar_39, fTarget_36, fAmount_35), fTarget_36, fAmount_35)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_33.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_34 = (fOscillation_34 * (1.0 + (vOscillations_33.w * _ST_WindBranchWhip.x)));
      vPos_29 = (FinalPosition_19 + ((vWindVector_32 * fOscillation_34) * _ST_WindBranch.y));
      highp vec4 tmpvar_40;
      tmpvar_40.zw = vec2(0.0, 0.0);
      tmpvar_40.x = ((fTime_30 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_40.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_41;
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_40 + 0.5))
       * 2.0) - 1.0));
      tmpvar_41 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      fAdherenceScale_31 = (1.0 - ((tmpvar_41.x * tmpvar_41.y) * (
        (tmpvar_41.x * tmpvar_41.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_31 = (fAdherenceScale_31 + ((vOscillations_33.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_29 = (vPos_29 + ((
        ((vRotatedBranchAnchor_17 - vPos_29) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_31) * _glesMultiTexCoord0.z));
      vPos_28 = vPos_29;
    } else {
      highp vec3 vPos_43;
      vPos_43 = vPos_28;
      highp float fTime_44;
      highp vec3 vWindVector_45;
      vWindVector_45 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_44 = (_ST_WindBranch.x + (tmpvar_13 + tmpvar_14));
      highp vec4 vOscillations_46;
      highp float fOscillation_47;
      fOscillation_47 = 1.0;
      highp float fAmount_48;
      highp float fTarget_49;
      highp vec4 tmpvar_50;
      tmpvar_50.w = 0.0;
      tmpvar_50.x = (fTime_44 + _glesMultiTexCoord0.w);
      tmpvar_50.y = ((fTime_44 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_50.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_44 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_51;
      tmpvar_51 = abs(((
        fract((tmpvar_50 + 0.5))
       * 2.0) - 1.0));
      vOscillations_46 = (((
        (tmpvar_51 * tmpvar_51)
       * 
        (3.0 - (2.0 * tmpvar_51))
      ) - 0.5) * 2.0);
      highp float tmpvar_52;
      tmpvar_52 = (vOscillations_46.y * vOscillations_46.z);
      fTarget_49 = 1.0;
      fAmount_48 = tmpvar_52;
      if ((tmpvar_52 < 0.0)) {
        fTarget_49 = -1.0;
        fAmount_48 = -(tmpvar_52);
      };
      fOscillation_47 = (((
        mix (mix (tmpvar_52, fTarget_49, fAmount_48), fTarget_49, fAmount_48)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_46.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_43 = (vPos_28 + ((vWindVector_45 * fOscillation_47) * _ST_WindBranch.y));
      vPos_28 = vPos_43;
    };
    FinalPosition_19 = vPos_28;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_53;
    vPos_53 = FinalPosition_19;
    highp float fMoveAmount_54;
    highp float fAdjust_55;
    highp float fLength_56;
    fLength_56 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_57;
    tmpvar_57 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_55 = tmpvar_57;
    if ((tmpvar_57 != 0.0)) {
      fAdjust_55 = pow (tmpvar_57, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_58;
    tmpvar_58.zw = vec2(0.0, 0.0);
    tmpvar_58.x = (tmpvar_13 + _ST_WindGlobal.x);
    tmpvar_58.y = (tmpvar_14 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_59;
    highp vec4 tmpvar_60;
    tmpvar_60 = abs(((
      fract((tmpvar_58 + 0.5))
     * 2.0) - 1.0));
    tmpvar_59 = (((
      (tmpvar_60 * tmpvar_60)
     * 
      (3.0 - (2.0 * tmpvar_60))
    ) - 0.5) * 2.0);
    fMoveAmount_54 = ((_ST_WindGlobal.y * (tmpvar_59.x + 
      (tmpvar_59.y * tmpvar_59.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_54 = (fMoveAmount_54 * fAdjust_55);
    vPos_53.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * fMoveAmount_54));
    vPos_53 = (normalize(vPos_53) * fLength_56);
    FinalPosition_19 = vPos_53;
  };
  tmpvar_15.xyz = FinalPosition_19;
  tmpvar_7 = tmpvar_10;
  highp vec3 tmpvar_61;
  tmpvar_61 = (_Object2World * tmpvar_15).xyz;
  highp vec4 v_62;
  v_62.x = _World2Object[0].x;
  v_62.y = _World2Object[1].x;
  v_62.z = _World2Object[2].x;
  v_62.w = _World2Object[3].x;
  highp vec4 v_63;
  v_63.x = _World2Object[0].y;
  v_63.y = _World2Object[1].y;
  v_63.z = _World2Object[2].y;
  v_63.w = _World2Object[3].y;
  highp vec4 v_64;
  v_64.x = _World2Object[0].z;
  v_64.y = _World2Object[1].z;
  v_64.z = _World2Object[2].z;
  v_64.w = _World2Object[3].z;
  highp vec3 tmpvar_65;
  tmpvar_65 = normalize(((
    (v_62.xyz * tmpvar_16.x)
   + 
    (v_63.xyz * tmpvar_16.y)
  ) + (v_64.xyz * tmpvar_16.z)));
  worldNormal_6 = tmpvar_65;
  highp mat3 tmpvar_66;
  tmpvar_66[0] = _Object2World[0].xyz;
  tmpvar_66[1] = _Object2World[1].xyz;
  tmpvar_66[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((tmpvar_66 * _glesTANGENT.xyz));
  worldTangent_5 = tmpvar_67;
  lowp vec3 tmpvar_68;
  tmpvar_68 = ((worldNormal_6.yzx * worldTangent_5.zxy) - (worldNormal_6.zxy * worldTangent_5.yzx));
  highp vec3 tmpvar_69;
  tmpvar_69 = (tmpvar_68 * _glesTANGENT.w);
  worldBinormal_4 = tmpvar_69;
  highp vec4 tmpvar_70;
  tmpvar_70.x = worldTangent_5.x;
  tmpvar_70.y = worldBinormal_4.x;
  tmpvar_70.z = worldNormal_6.x;
  tmpvar_70.w = tmpvar_61.x;
  highp vec4 tmpvar_71;
  tmpvar_71.x = worldTangent_5.y;
  tmpvar_71.y = worldBinormal_4.y;
  tmpvar_71.z = worldNormal_6.y;
  tmpvar_71.w = tmpvar_61.y;
  highp vec4 tmpvar_72;
  tmpvar_72.x = worldTangent_5.z;
  tmpvar_72.y = worldBinormal_4.z;
  tmpvar_72.z = worldNormal_6.z;
  tmpvar_72.w = tmpvar_61.z;
  lowp vec4 tmpvar_73;
  tmpvar_73.w = 1.0;
  tmpvar_73.xyz = worldNormal_6;
  mediump vec4 normal_74;
  normal_74 = tmpvar_73;
  mediump vec3 x2_75;
  mediump vec4 tmpvar_76;
  tmpvar_76 = (normal_74.xyzz * normal_74.yzzx);
  x2_75.x = dot (unity_SHBr, tmpvar_76);
  x2_75.y = dot (unity_SHBg, tmpvar_76);
  x2_75.z = dot (unity_SHBb, tmpvar_76);
  highp vec3 lightColor0_77;
  lightColor0_77 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_78;
  lightColor1_78 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_79;
  lightColor2_79 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_80;
  lightColor3_80 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_81;
  lightAttenSq_81 = unity_4LightAtten0;
  highp vec3 normal_82;
  normal_82 = worldNormal_6;
  highp vec3 col_83;
  highp vec4 ndotl_84;
  highp vec4 lengthSq_85;
  highp vec4 tmpvar_86;
  tmpvar_86 = (unity_4LightPosX0 - tmpvar_61.x);
  highp vec4 tmpvar_87;
  tmpvar_87 = (unity_4LightPosY0 - tmpvar_61.y);
  highp vec4 tmpvar_88;
  tmpvar_88 = (unity_4LightPosZ0 - tmpvar_61.z);
  lengthSq_85 = (tmpvar_86 * tmpvar_86);
  lengthSq_85 = (lengthSq_85 + (tmpvar_87 * tmpvar_87));
  lengthSq_85 = (lengthSq_85 + (tmpvar_88 * tmpvar_88));
  ndotl_84 = (tmpvar_86 * normal_82.x);
  ndotl_84 = (ndotl_84 + (tmpvar_87 * normal_82.y));
  ndotl_84 = (ndotl_84 + (tmpvar_88 * normal_82.z));
  highp vec4 tmpvar_89;
  tmpvar_89 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_84 * inversesqrt(lengthSq_85)));
  ndotl_84 = tmpvar_89;
  highp vec4 tmpvar_90;
  tmpvar_90 = (tmpvar_89 * (1.0/((1.0 + 
    (lengthSq_85 * lightAttenSq_81)
  ))));
  col_83 = (lightColor0_77 * tmpvar_90.x);
  col_83 = (col_83 + (lightColor1_78 * tmpvar_90.y));
  col_83 = (col_83 + (lightColor2_79 * tmpvar_90.z));
  col_83 = (col_83 + (lightColor3_80 * tmpvar_90.w));
  tmpvar_8 = ((x2_75 + (unity_SHC.xyz * 
    ((normal_74.x * normal_74.x) - (normal_74.y * normal_74.y))
  )) + col_83);
  tmpvar_9 = (unity_World2Shadow[0] * (_Object2World * tmpvar_15));
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_70;
  xlv_TEXCOORD1 = tmpvar_71;
  xlv_TEXCOORD2 = tmpvar_72;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_11;
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_15 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_16;
  tmpvar_16 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float shadow_17;
  shadow_17 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD0.xyz, tmpvar_16);
  worldN_4.x = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD1.xyz, tmpvar_16);
  worldN_4.y = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD2.xyz, tmpvar_16);
  worldN_4.z = tmpvar_20;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_17;
  mediump vec3 normalWorld_21;
  normalWorld_21 = worldN_4;
  mediump vec3 tmpvar_22;
  mediump vec3 tmpvar_23;
  mediump vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = normalWorld_21;
  mediump vec3 x1_25;
  x1_25.x = dot (unity_SHAr, tmpvar_24);
  x1_25.y = dot (unity_SHAg, tmpvar_24);
  x1_25.z = dot (unity_SHAb, tmpvar_24);
  tmpvar_23 = (xlv_TEXCOORD5 + x1_25);
  tmpvar_22 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_22;
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_28 = tmpvar_29;
  c_27.xyz = ((tmpvar_9 * tmpvar_22) * diff_28);
  c_27.w = tmpvar_10;
  c_26.w = c_27.w;
  c_26.xyz = (c_27.xyz + (tmpvar_9 * tmpvar_23));
  c_5.xyz = c_26.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec4 t4;
highp vec3 t5;
highp vec4 t6;
mediump vec4 t16_6;
highp vec4 t7;
lowp vec3 t10_7;
mediump vec3 t16_8;
highp vec4 t9;
highp vec4 t10;
highp vec2 t11;
bool tb11;
highp vec2 t22;
highp vec2 t26;
highp vec2 t28;
highp float t33;
highp float t34;
bool tb34;
highp float t36;
bool tb36;
highp float t37;
highp float t38;
mediump float t16_41;
void main()
{
    //Instruction 17733
    //MUL
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 17734
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 17735
    //ADD
    t11.x = t0.x + _Object2World[3].z;
    //Instruction 17736
    //ADD
    t22.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 17737
    //ADD
    t11.y = t22.x + in_NORMAL0.x;
    //Instruction 17738
    //FRC
    t11.xy = fract(t11.xy);
    //Instruction 17739
    //MAD
    t11.x = t11.y * 0.500000 + t11.x;
    //Instruction 17740
    //ADD
    t11.x = t11.x + -0.300000;
    //Instruction 17741
    //MUL
    t1.z = t11.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 17742
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 17743
    //LT
    tb11 = 0.0<t16_2;
    //Instruction 17744
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 17745
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 17746
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 17747
    //DP3
    t22.x = dot(t3.xyz, t3.xyz);
    //Instruction 17748
    //RSQ
    t22.x = inversesqrt(t22.x);
    //Instruction 17749
    //MUL
    t22.xy = t22.xx * t3.xz;
    //Instruction 17750
    //AND
    t22.xy = mix(vec2(0.0, 0.0), t22.xy, bvec2(tb11));
    //Instruction 17751
    //ADD
    t3.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 17752
    //MAD
    t3.xyz = unity_LODFade.xxx * t3.xyz + in_POSITION0.xyz;
    //Instruction 17753
    //EQ
    tb34 = t16_2==5.000000;
    //Instruction 17754
    //LT
    tb36 = in_TEXCOORD0.x<0.500000;
    //Instruction 17755
    //AND
    t36 = tb36 ? 0.750000 : float(0.0);
    //Instruction 17756
    //ADD
    t4.x = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 17757
    //MAD
    t36 = t4.x * _ST_WindFrondRipple.z + t36;
    //Instruction 17758
    //ADD
    t36 = t36 + 0.500000;
    //Instruction 17759
    //FRC
    t36 = fract(t36);
    //Instruction 17760
    //MAD
    t36 = t36 * 2.000000 + -1.0;
    //Instruction 17761
    //MUL
    t4.x = abs(t36) * abs(t36);
    //Instruction 17762
    //MAD
    t36 = -abs(t36) * 2.000000 + 3.000000;
    //Instruction 17763
    //MAD
    t36 = t4.x * t36 + -0.500000;
    //Instruction 17764
    //MUL
    t36 = t36 * in_TEXCOORD2.y;
    //Instruction 17765
    //DP2
    t36 = dot(_ST_WindFrondRipple.yy, vec2(t36));
    //Instruction 17766
    //MAD
    t4.xyz = vec3(t36) * in_NORMAL0.xyz + t3.xyz;
    //Instruction 17767
    //MOVC
    t3.xyz = (bool(tb34)) ? t4.xyz : t3.xyz;
    //Instruction 17768
    //GE
    tb36 = t16_2>=3.000000;
    //Instruction 17769
    //IF
    if(tb36){
        //Instruction 17770
        //IF
        if(tb34){
            //Instruction 17771
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 17772
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 17773
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 17774
            //DP3
            t34 = dot(t4.xyz, t4.xyz);
            //Instruction 17775
            //RSQ
            t34 = inversesqrt(t34);
            //Instruction 17776
            //MUL
            t4.xyz = vec3(t34) * t4.xyz;
            //Instruction 17777
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 17778
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 17779
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 17780
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 17781
            //ADD
            t34 = t0.x + _ST_WindBranch.x;
            //Instruction 17782
            //ADD
            t2.x = t34 + in_TEXCOORD0.w;
            //Instruction 17783
            //MAD
            t2.y = t34 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 17784
            //MUL
            t36 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 17785
            //MUL
            t2.z = t36 * 0.500000;
            //Instruction 17786
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 17787
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 17788
            //FRC
            t2 = fract(t2);
            //Instruction 17789
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 17790
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 17791
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 17792
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 17793
            //ADD
            t2 = t2 + t2;
            //Instruction 17794
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 17795
            //LT
            tb36 = t6.w<0.0;
            //Instruction 17796
            //MOV
            t6.y = (-t6.w);
            //Instruction 17797
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 17798
            //MOVC
            t6.xy = (bool(tb36)) ? t6.xy : t6.zw;
            //Instruction 17799
            //MAD
            t36 = (-t2.y) * t2.z + t6.x;
            //Instruction 17800
            //MAD
            t36 = t6.y * t36 + t6.w;
            //Instruction 17801
            //ADD
            t37 = (-t36) + t6.x;
            //Instruction 17802
            //MAD
            t36 = t6.y * t37 + t36;
            //Instruction 17803
            //MUL
            t36 = t36 * _ST_WindBranchTwitch.x;
            //Instruction 17804
            //ADD
            t37 = (-_ST_WindVector.w) + 1.0;
            //Instruction 17805
            //ADD
            t38 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 17806
            //MUL
            t38 = t2.x * t38;
            //Instruction 17807
            //MAD
            t36 = t36 * t37 + t38;
            //Instruction 17808
            //MAD
            t37 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 17809
            //MUL
            t36 = t36 * t37;
            //Instruction 17810
            //MUL
            t5.xyz = vec3(t36) * t5.xyz;
            //Instruction 17811
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 17812
            //MAD
            t6.x = t34 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 17813
            //MUL
            t34 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 17814
            //MAD
            t6.y = t34 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 17815
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 17816
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 17817
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 17818
            //MUL
            t28.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 17819
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 17820
            //MAD
            t6.xy = t28.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 17821
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 17822
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 17823
            //MUL
            t34 = t6.x * t6.y;
            //Instruction 17824
            //MAD
            t34 = (-t34) * _ST_WindTurbulences.x + 1.0;
            //Instruction 17825
            //MUL
            t36 = t2.w * _ST_WindVector.w;
            //Instruction 17826
            //MAD
            t34 = t36 * _ST_WindBranchWhip.x + t34;
            //Instruction 17827
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 17828
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 17829
            //MUL
            t4.xyz = vec3(t34) * t4.xyz;
            //Instruction 17830
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 17831
        //ELSE
        } else {
            //Instruction 17832
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 17833
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 17834
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 17835
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 17836
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 17837
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 17838
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 17839
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 17840
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 17841
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 17842
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 17843
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 17844
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 17845
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 17846
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 17847
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 17848
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 17849
            //LT
            tb0 = t2.w<0.0;
            //Instruction 17850
            //MOV
            t2.y = (-t2.w);
            //Instruction 17851
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 17852
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 17853
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 17854
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 17855
            //ADD
            t34 = (-t0.x) + t6.x;
            //Instruction 17856
            //MAD
            t0.x = t6.y * t34 + t0.x;
            //Instruction 17857
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 17858
            //ADD
            t34 = (-_ST_WindVector.w) + 1.0;
            //Instruction 17859
            //ADD
            t36 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 17860
            //MUL
            t36 = t36 * t5.x;
            //Instruction 17861
            //MAD
            t0.x = t0.x * t34 + t36;
            //Instruction 17862
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 17863
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 17864
        //ENDIF
        }
        //Instruction 17865
    //ENDIF
    }
    //Instruction 17866
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 17867
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 17868
    //DIV
    t34 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 17869
    //MAD
    t34 = (-t34) * 0.250000 + t3.y;
    //Instruction 17870
    //MAX
    t34 = max(t34, 0.0);
    //Instruction 17871
    //MUL
    t34 = t34 * _ST_WindGlobal.z;
    //Instruction 17872
    //NE
    tb36 = t34!=0.0;
    //Instruction 17873
    //LOG
    t4.x = log2(t34);
    //Instruction 17874
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 17875
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 17876
    //MOVC
    t34 = (tb36) ? t4.x : t34;
    //Instruction 17877
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 17878
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 17879
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 17880
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 17881
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 17882
    //MUL
    t26.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 17883
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 17884
    //MAD
    t4.xy = t26.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 17885
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 17886
    //MAD
    t36 = t4.y * t4.y + t4.x;
    //Instruction 17887
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 17888
    //MAD
    t36 = _ST_WindGlobal.y * t36 + t4.x;
    //Instruction 17889
    //MUL
    t34 = t34 * t36;
    //Instruction 17890
    //MAD
    t4.xz = t22.xy * vec2(t34) + t3.xz;
    //Instruction 17891
    //MOV
    t4.y = t3.y;
    //Instruction 17892
    //DP3
    t22.x = dot(t4.xyz, t4.xyz);
    //Instruction 17893
    //RSQ
    t22.x = inversesqrt(t22.x);
    //Instruction 17894
    //MUL
    t4.xyz = t22.xxx * t4.xyz;
    //Instruction 17895
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 17896
    //MOVC
    t0.xyz = (bool(tb11)) ? t0.xzw : t3.xyz;
    //Instruction 17897
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 17898
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 17899
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 17900
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 17901
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 17902
    //MAD
    t3.xyz = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 17903
    //MAD
    t3.xyz = _Object2World[2].xyz * t0.zzz + t3.xyz;
    //Instruction 17904
    //MAD
    t3.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xyz;
    //Instruction 17905
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 17906
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 17907
    //MOV
    t2.zw = _World2Object[2].xx;
    //Instruction 17908
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 17909
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 17910
    //MOV
    t4.zw = _World2Object[2].yy;
    //Instruction 17911
    //MUL
    t4 = t4 * in_NORMAL0.yyyy;
    //Instruction 17912
    //MAD
    t2 = t2 * in_NORMAL0.xxxx + t4;
    //Instruction 17913
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 17914
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 17915
    //MOV
    t4.zw = _World2Object[2].zz;
    //Instruction 17916
    //MAD
    t2 = t4 * in_NORMAL0.zzzz + t2;
    //Instruction 17917
    //DP3
    t33 = dot(t2.xyw, t2.xyw);
    //Instruction 17918
    //RSQ
    t33 = inversesqrt(t33);
    //Instruction 17919
    //MUL
    t2 = vec4(t33) * t2;
    //Instruction 17920
    //MUL
    t4.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 17921
    //MAD
    t4.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t4.xyz;
    //Instruction 17922
    //MAD
    t4.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t4.xyz;
    //Instruction 17923
    //DP3
    t33 = dot(t4.xyz, t4.xyz);
    //Instruction 17924
    //RSQ
    t33 = inversesqrt(t33);
    //Instruction 17925
    //MUL
    t4.xyz = vec3(t33) * t4.xyz;
    //Instruction 17926
    //MUL
    t10_7.xyz = t2.wxy * t4.xyz;
    //Instruction 17927
    //MAD
    t10_7.xyz = t2.ywx * t4.yzx + (-t10_7.xyz);
    //Instruction 17928
    //MUL
    t5.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 17929
    //MUL
    t16_6 = t2.ywzx * t2;
    //Instruction 17930
    //DP4
    t16_8.x = dot(unity_SHBr, t16_6);
    //Instruction 17931
    //DP4
    t16_8.y = dot(unity_SHBg, t16_6);
    //Instruction 17932
    //DP4
    t16_8.z = dot(unity_SHBb, t16_6);
    //Instruction 17933
    //MUL
    t16_41 = t2.y * t2.y;
    //Instruction 17934
    //MAD
    t16_41 = t2.x * t2.x + (-t16_41);
    //Instruction 17935
    //MAD
    t16_8.xyz = unity_SHC.xyz * vec3(t16_41) + t16_8.xyz;
    //Instruction 17936
    //ADD
    t6 = (-t3.xxxx) + unity_4LightPosX0;
    //Instruction 17937
    //ADD
    t7 = (-t3.yyyy) + unity_4LightPosY0;
    //Instruction 17938
    //ADD
    t9 = (-t3.zzzz) + unity_4LightPosZ0;
    //Instruction 17939
    //MUL
    t10 = t7 * t7;
    //Instruction 17940
    //MAD
    t10 = t6 * t6 + t10;
    //Instruction 17941
    //MAD
    t10 = t9 * t9 + t10;
    //Instruction 17942
    //MUL
    t7 = t2.yyyy * t7;
    //Instruction 17943
    //MAD
    t6 = t6 * t2.xxxx + t7;
    //Instruction 17944
    //MAD
    t6 = t9 * t2.wwww + t6;
    //Instruction 17945
    //RSQ
    t7 = inversesqrt(t10);
    //Instruction 17946
    //MUL
    t6 = t6 * t7;
    //Instruction 17947
    //MAX
    t6 = max(t6, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 17948
    //MAD
    t7 = t10 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 17949
    //DIV
    t7 = vec4(1.0, 1.0, 1.0, 1.0) / t7;
    //Instruction 17950
    //MUL
    t6 = t6 * t7;
    //Instruction 17951
    //MUL
    t9.xyz = t6.yyy * unity_LightColor[1].xyz;
    //Instruction 17952
    //MAD
    t9.xyz = unity_LightColor[0].xyz * t6.xxx + t9.xyz;
    //Instruction 17953
    //MAD
    t9.xyz = unity_LightColor[2].xyz * t6.zzz + t9.xyz;
    //Instruction 17954
    //MAD
    t9.xyz = unity_LightColor[3].xyz * t6.www + t9.xyz;
    //Instruction 17955
    //ADD
    t9.xyz = t16_8.xyz + t9.xyz;
    //Instruction 17956
    //MUL
    t6 = t0.yyyy * _Object2World[1];
    //Instruction 17957
    //MAD
    t6 = _Object2World[0] * t0.xxxx + t6;
    //Instruction 17958
    //MAD
    t0 = _Object2World[2] * t0.zzzz + t6;
    //Instruction 17959
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 17960
    //MUL
    t6 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 17961
    //MAD
    t6 = unity_World2Shadow[0][0] * t0.xxxx + t6;
    //Instruction 17962
    //MAD
    t6 = unity_World2Shadow[0][2] * t0.zzzz + t6;
    //Instruction 17963
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t6;
    //Instruction 17964
    //MOV
    vs_TEXCOORD0.x = t4.z;
    //Instruction 17965
    //MOV
    vs_TEXCOORD0.y = t5.x;
    //Instruction 17966
    //MOV
    vs_TEXCOORD0.z = t2.x;
    //Instruction 17967
    //MOV
    vs_TEXCOORD0.w = t3.x;
    //Instruction 17968
    //MOV
    vs_TEXCOORD1.x = t4.x;
    //Instruction 17969
    //MOV
    vs_TEXCOORD1.y = t5.y;
    //Instruction 17970
    //MOV
    vs_TEXCOORD1.z = t2.y;
    //Instruction 17971
    //MOV
    vs_TEXCOORD1.w = t3.y;
    //Instruction 17972
    //MOV
    vs_TEXCOORD2.x = t4.y;
    //Instruction 17973
    //MOV
    vs_TEXCOORD2.y = t5.z;
    //Instruction 17974
    //MOV
    vs_TEXCOORD2.z = t2.w;
    //Instruction 17975
    //MOV
    vs_TEXCOORD2.w = t3.z;
    //Instruction 17976
    //MOV
    vs_TEXCOORD3.w = _Color.w;
    //Instruction 17977
    //MOV
    vs_TEXCOORD6 = t0;
    //Instruction 17978
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 17979
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 17980
    //MOV
    vs_TEXCOORD5.xyz = t9.xyz;
    //Instruction 17981
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_7;
bool tb15;
mediump float t16_17;
void main()
{
    //Instruction 17697
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    //Instruction 17698
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 17699
    //LT
    tb15 = t10_1.x<0.0;
    //Instruction 17700
    //DISCARD
    if((int(tb15))!=0){discard;}
    //Instruction 17701
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 17702
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 17703
    //ADD
    t16_7.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 17704
    //MAD
    t16_7.xyz = vs_TEXCOORD4.zzz * t16_7.xyz + t10_0.xyz;
    //Instruction 17705
    //MAX
    t16_3.x = max(t16_7.z, t16_7.y);
    //Instruction 17706
    //MAX
    t16_3.x = max(t16_7.x, t16_3.x);
    //Instruction 17707
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 17708
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 17709
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_7.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 17710
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD3.xyz;
    //Instruction 17711
    //SAMPLE_C_LZ
    vec3 txVec44 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_17 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec44, 0.0);
    //Instruction 17712
    //ADD
    t16_3.x = (-_LightShadowData.x) + 1.0;
    //Instruction 17713
    //MAD
    t16_17 = t16_17 * t16_3.x + _LightShadowData.x;
    //Instruction 17714
    //MUL
    t16_3.xyz = vec3(t16_17) * _LightColor0.xyz;
    //Instruction 17715
    //MUL
    t16_3.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 17716
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 17717
    //MAD
    t10_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 17718
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 17719
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 17720
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 17721
    //MOV
    t0.w = 1.0;
    //Instruction 17722
    //DP4
    t16_4.x = dot(unity_SHAr, t0);
    //Instruction 17723
    //DP4
    t16_4.y = dot(unity_SHAg, t0);
    //Instruction 17724
    //DP4
    t16_4.z = dot(unity_SHAb, t0);
    //Instruction 17725
    //DP3
    t16_17 = dot(t0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 17726
    //MAX
    t16_17 = max(t16_17, 0.0);
    //Instruction 17727
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD5.xyz;
    //Instruction 17728
    //MUL
    t16_2.xyz = t16_2.xyz * t16_4.xyz;
    //Instruction 17729
    //MAD
    t16_2.xyz = t16_3.xyz * vec3(t16_17) + t16_2.xyz;
    //Instruction 17730
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 17731
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 17732
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesMultiTexCoord3;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  tmpvar_4 = _glesMultiTexCoord1;
  highp vec2 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord3.xy;
  lowp vec3 worldNormal_6;
  mediump vec3 tmpvar_7;
  mediump vec4 tmpvar_8;
  lowp vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10.xy = tmpvar_3.xy;
  tmpvar_9.w = _Color.w;
  tmpvar_9.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_1;
  tmpvar_12 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  FinalPosition_15 = tmpvar_1.xyz;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_15 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp vec3 tmpvar_20;
  tmpvar_20.x = tmpvar_4.w;
  tmpvar_20.y = tmpvar_5.x;
  tmpvar_20.z = tmpvar_5.y;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (FinalPosition_15, tmpvar_20, unity_LODFade.xxx);
  FinalPosition_15 = tmpvar_21;
  if (((tmpvar_17 > 1.0) && (tmpvar_17 < 5.0))) {
    highp float tmpvar_22;
    tmpvar_22 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_23;
    isBestWind_23 = (tmpvar_17 == 4.0);
    bool bLeaf2_24;
    bLeaf2_24 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_25;
    vPos_25 = tmpvar_21;
    highp vec3 vDirection_26;
    vDirection_26 = tmpvar_2;
    highp float tmpvar_27;
    if (bLeaf2_24) {
      tmpvar_27 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_28;
    if (bLeaf2_24) {
      tmpvar_28 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_28 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_29;
    highp vec4 tmpvar_30;
    tmpvar_30.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_30.x = (tmpvar_27 + tmpvar_22);
    highp vec4 tmpvar_31;
    tmpvar_31 = abs(((
      fract((tmpvar_30 + 0.5))
     * 2.0) - 1.0));
    vPos_29 = (tmpvar_21 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_28 * (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_26 = tmpvar_2;
    vPos_25 = vPos_29;
    if (isBestWind_23) {
      highp vec3 tmpvar_32;
      tmpvar_32 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_33;
      if (bLeaf2_24) {
        tmpvar_33 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_34;
      if (bLeaf2_24) {
        tmpvar_34 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_35;
      if (bLeaf2_24) {
        tmpvar_35 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_36;
      if (bLeaf2_24) {
        tmpvar_36 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_37;
      if (bLeaf2_24) {
        tmpvar_37 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_37 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_38;
      if (bLeaf2_24) {
        tmpvar_38 = bool(1);
      } else {
        tmpvar_38 = bool(1);
      };
      highp float fTwitch_39;
      highp vec3 vAxis_40;
      highp float fOsc_41;
      highp vec3 vOriginPos_42;
      highp vec3 tmpvar_43;
      tmpvar_43 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_44;
      tmpvar_44 = ((tmpvar_43.x + tmpvar_43.y) + tmpvar_43.z);
      highp vec4 tmpvar_45;
      tmpvar_45.x = (tmpvar_33 + tmpvar_44);
      tmpvar_45.y = ((tmpvar_33 * 0.75) - tmpvar_44);
      tmpvar_45.z = ((tmpvar_33 * 0.01) + tmpvar_44);
      tmpvar_45.w = (tmpvar_33 + tmpvar_44);
      highp vec4 tmpvar_46;
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      tmpvar_46 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      vOriginPos_42 = vPos_29;
      highp float tmpvar_48;
      tmpvar_48 = sqrt(dot (vPos_29, vPos_29));
      highp float fAngle_49;
      fAngle_49 = ((_glesMultiTexCoord2.x * tmpvar_35) * (tmpvar_46.x + (tmpvar_46.y * tmpvar_46.y)));
      highp vec2 vSinCos_50;
      vSinCos_50.x = sin(fAngle_49);
      vSinCos_50.y = cos(fAngle_49);
      highp float tmpvar_51;
      tmpvar_51 = (1.0 - vSinCos_50.y);
      highp mat3 tmpvar_52;
      tmpvar_52[0].x = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.x) + vSinCos_50.y);
      tmpvar_52[0].y = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.y) + (vSinCos_50.x * tmpvar_32.z));
      tmpvar_52[0].z = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.z) - (vSinCos_50.x * tmpvar_32.y));
      tmpvar_52[1].x = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.y) - (vSinCos_50.x * tmpvar_32.z));
      tmpvar_52[1].y = (((tmpvar_51 * tmpvar_32.y) * tmpvar_32.y) + vSinCos_50.y);
      tmpvar_52[1].z = (((tmpvar_51 * tmpvar_32.y) * tmpvar_32.z) + (vSinCos_50.x * tmpvar_32.x));
      tmpvar_52[2].x = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.z) + (vSinCos_50.x * tmpvar_32.y));
      tmpvar_52[2].y = (((tmpvar_51 * tmpvar_32.y) * tmpvar_32.z) - (vSinCos_50.x * tmpvar_32.x));
      tmpvar_52[2].z = (((tmpvar_51 * tmpvar_32.z) * tmpvar_32.z) + vSinCos_50.y);
      highp vec3 tmpvar_53;
      tmpvar_53 = ((tmpvar_32.yzx * vRotatedWindVector_14.zxy) - (tmpvar_32.zxy * vRotatedWindVector_14.yzx));
      vAxis_40.xz = tmpvar_53.xz;
      highp float tmpvar_54;
      tmpvar_54 = clamp (dot (vRotatedWindVector_14, tmpvar_32), -1.0, 1.0);
      vAxis_40.y = (tmpvar_53.y + tmpvar_54);
      highp vec3 tmpvar_55;
      tmpvar_55 = normalize(vAxis_40);
      vAxis_40 = tmpvar_55;
      highp float tmpvar_56;
      tmpvar_56 = (1.570796 - (sign(tmpvar_54) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_54))) * (1.570796 + (abs(tmpvar_54) * (-0.2146018 + 
          (abs(tmpvar_54) * (0.08656672 + (abs(tmpvar_54) * -0.03102955)))
        ))))
      )));
      fOsc_41 = (tmpvar_46.y - (tmpvar_46.x * tmpvar_46.x));
      fTwitch_39 = 0.0;
      if (tmpvar_38) {
        highp float fTime_57;
        fTime_57 = (tmpvar_37.z + tmpvar_44);
        highp vec4 tmpvar_58;
        tmpvar_58.zw = vec2(0.0, 0.0);
        tmpvar_58.x = fTime_57;
        tmpvar_58.y = (0.87 * fTime_57);
        highp vec4 tmpvar_59;
        highp vec4 tmpvar_60;
        tmpvar_60 = abs(((
          fract((tmpvar_58 + 0.5))
         * 2.0) - 1.0));
        tmpvar_59 = (((
          (tmpvar_60 * tmpvar_60)
         * 
          (3.0 - (2.0 * tmpvar_60))
        ) - 0.5) * 2.0);
        fTwitch_39 = (tmpvar_37.x * pow (clamp (
          ((((tmpvar_59.x * tmpvar_59.y) * tmpvar_59.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_37.y));
      };
      highp float fAngle_61;
      fAngle_61 = (_glesMultiTexCoord2.x * ((
        (tmpvar_56 * tmpvar_36)
       + 
        (fOsc_41 * tmpvar_34)
      ) + fTwitch_39));
      highp vec2 vSinCos_62;
      vSinCos_62.x = sin(fAngle_61);
      vSinCos_62.y = cos(fAngle_61);
      highp float tmpvar_63;
      tmpvar_63 = (1.0 - vSinCos_62.y);
      highp mat3 tmpvar_64;
      tmpvar_64[0].x = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.x) + vSinCos_62.y);
      tmpvar_64[0].y = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.y) + (vSinCos_62.x * tmpvar_55.z));
      tmpvar_64[0].z = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.z) - (vSinCos_62.x * tmpvar_55.y));
      tmpvar_64[1].x = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.y) - (vSinCos_62.x * tmpvar_55.z));
      tmpvar_64[1].y = (((tmpvar_63 * tmpvar_55.y) * tmpvar_55.y) + vSinCos_62.y);
      tmpvar_64[1].z = (((tmpvar_63 * tmpvar_55.y) * tmpvar_55.z) + (vSinCos_62.x * tmpvar_55.x));
      tmpvar_64[2].x = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.z) + (vSinCos_62.x * tmpvar_55.y));
      tmpvar_64[2].y = (((tmpvar_63 * tmpvar_55.y) * tmpvar_55.z) - (vSinCos_62.x * tmpvar_55.x));
      tmpvar_64[2].z = (((tmpvar_63 * tmpvar_55.z) * tmpvar_55.z) + vSinCos_62.y);
      highp mat3 tmpvar_65;
      tmpvar_65 = (tmpvar_52 * tmpvar_64);
      vOriginPos_42 = (normalize((tmpvar_65 * vPos_29)) * tmpvar_48);
      vDirection_26 = (tmpvar_65 * _glesNormal);
      vPos_25 = vOriginPos_42;
    };
    tmpvar_12 = vDirection_26;
    FinalPosition_15 = vPos_25;
  };
  FinalPosition_15 = (FinalPosition_15 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_66;
    vPos_66 = FinalPosition_15;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_67;
      vPos_67 = FinalPosition_15;
      highp float fTime_68;
      highp float fAdherenceScale_69;
      highp vec3 vWindVector_70;
      vWindVector_70 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_68 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_71;
      highp float fOscillation_72;
      fOscillation_72 = 1.0;
      highp float fAmount_73;
      highp float fTarget_74;
      highp vec4 tmpvar_75;
      tmpvar_75.x = (fTime_68 + _glesMultiTexCoord0.w);
      tmpvar_75.y = ((fTime_68 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_75.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_68 + _glesMultiTexCoord0.w));
      tmpvar_75.w = ((fTime_68 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_76;
      tmpvar_76 = abs(((
        fract((tmpvar_75 + 0.5))
       * 2.0) - 1.0));
      vOscillations_71 = (((
        (tmpvar_76 * tmpvar_76)
       * 
        (3.0 - (2.0 * tmpvar_76))
      ) - 0.5) * 2.0);
      highp float tmpvar_77;
      tmpvar_77 = (vOscillations_71.y * vOscillations_71.z);
      fTarget_74 = 1.0;
      fAmount_73 = tmpvar_77;
      if ((tmpvar_77 < 0.0)) {
        fTarget_74 = -1.0;
        fAmount_73 = -(tmpvar_77);
      };
      fOscillation_72 = (((
        mix (mix (tmpvar_77, fTarget_74, fAmount_73), fTarget_74, fAmount_73)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_71.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_72 = (fOscillation_72 * (1.0 + (vOscillations_71.w * _ST_WindBranchWhip.x)));
      vPos_67 = (FinalPosition_15 + ((vWindVector_70 * fOscillation_72) * _ST_WindBranch.y));
      highp vec4 tmpvar_78;
      tmpvar_78.zw = vec2(0.0, 0.0);
      tmpvar_78.x = ((fTime_68 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_78.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_79;
      highp vec4 tmpvar_80;
      tmpvar_80 = abs(((
        fract((tmpvar_78 + 0.5))
       * 2.0) - 1.0));
      tmpvar_79 = (((
        (tmpvar_80 * tmpvar_80)
       * 
        (3.0 - (2.0 * tmpvar_80))
      ) - 0.5) * 2.0);
      fAdherenceScale_69 = (1.0 - ((tmpvar_79.x * tmpvar_79.y) * (
        (tmpvar_79.x * tmpvar_79.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_69 = (fAdherenceScale_69 + ((vOscillations_71.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_67 = (vPos_67 + ((
        ((vRotatedBranchAnchor_13 - vPos_67) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_69) * _glesMultiTexCoord0.z));
      vPos_66 = vPos_67;
    } else {
      highp vec3 vPos_81;
      vPos_81 = vPos_66;
      highp float fTime_82;
      highp vec3 vWindVector_83;
      vWindVector_83 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_82 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_84;
      highp float fOscillation_85;
      fOscillation_85 = 1.0;
      highp float fAmount_86;
      highp float fTarget_87;
      highp vec4 tmpvar_88;
      tmpvar_88.w = 0.0;
      tmpvar_88.x = (fTime_82 + _glesMultiTexCoord0.w);
      tmpvar_88.y = ((fTime_82 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_88.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_82 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_89;
      tmpvar_89 = abs(((
        fract((tmpvar_88 + 0.5))
       * 2.0) - 1.0));
      vOscillations_84 = (((
        (tmpvar_89 * tmpvar_89)
       * 
        (3.0 - (2.0 * tmpvar_89))
      ) - 0.5) * 2.0);
      highp float tmpvar_90;
      tmpvar_90 = (vOscillations_84.y * vOscillations_84.z);
      fTarget_87 = 1.0;
      fAmount_86 = tmpvar_90;
      if ((tmpvar_90 < 0.0)) {
        fTarget_87 = -1.0;
        fAmount_86 = -(tmpvar_90);
      };
      fOscillation_85 = (((
        mix (mix (tmpvar_90, fTarget_87, fAmount_86), fTarget_87, fAmount_86)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_84.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_81 = (vPos_66 + ((vWindVector_83 * fOscillation_85) * _ST_WindBranch.y));
      vPos_66 = vPos_81;
    };
    FinalPosition_15 = vPos_66;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_91;
    vPos_91 = FinalPosition_15;
    highp float fMoveAmount_92;
    highp float fAdjust_93;
    highp float fLength_94;
    fLength_94 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_95;
    tmpvar_95 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_93 = tmpvar_95;
    if ((tmpvar_95 != 0.0)) {
      fAdjust_93 = pow (tmpvar_95, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_96;
    tmpvar_96.zw = vec2(0.0, 0.0);
    tmpvar_96.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_96.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_97;
    highp vec4 tmpvar_98;
    tmpvar_98 = abs(((
      fract((tmpvar_96 + 0.5))
     * 2.0) - 1.0));
    tmpvar_97 = (((
      (tmpvar_98 * tmpvar_98)
     * 
      (3.0 - (2.0 * tmpvar_98))
    ) - 0.5) * 2.0);
    fMoveAmount_92 = ((_ST_WindGlobal.y * (tmpvar_97.x + 
      (tmpvar_97.y * tmpvar_97.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_92 = (fMoveAmount_92 * fAdjust_93);
    vPos_91.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * fMoveAmount_92));
    vPos_91 = (normalize(vPos_91) * fLength_94);
    FinalPosition_15 = vPos_91;
  };
  tmpvar_11.xyz = FinalPosition_15;
  tmpvar_8 = tmpvar_9;
  highp vec4 v_99;
  v_99.x = _World2Object[0].x;
  v_99.y = _World2Object[1].x;
  v_99.z = _World2Object[2].x;
  v_99.w = _World2Object[3].x;
  highp vec4 v_100;
  v_100.x = _World2Object[0].y;
  v_100.y = _World2Object[1].y;
  v_100.z = _World2Object[2].y;
  v_100.w = _World2Object[3].y;
  highp vec4 v_101;
  v_101.x = _World2Object[0].z;
  v_101.y = _World2Object[1].z;
  v_101.z = _World2Object[2].z;
  v_101.w = _World2Object[3].z;
  highp vec3 tmpvar_102;
  tmpvar_102 = normalize(((
    (v_99.xyz * tmpvar_12.x)
   + 
    (v_100.xyz * tmpvar_12.y)
  ) + (v_101.xyz * tmpvar_12.z)));
  worldNormal_6 = tmpvar_102;
  tmpvar_7 = worldNormal_6;
  lowp vec4 tmpvar_103;
  tmpvar_103.w = 1.0;
  tmpvar_103.xyz = worldNormal_6;
  mediump vec4 normal_104;
  normal_104 = tmpvar_103;
  mediump vec3 x2_105;
  mediump vec4 tmpvar_106;
  tmpvar_106 = (normal_104.xyzz * normal_104.yzzx);
  x2_105.x = dot (unity_SHBr, tmpvar_106);
  x2_105.y = dot (unity_SHBg, tmpvar_106);
  x2_105.z = dot (unity_SHBb, tmpvar_106);
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_7;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD3 = tmpvar_10;
  xlv_TEXCOORD4 = (x2_105 + (unity_SHC.xyz * (
    (normal_104.x * normal_104.x)
   - 
    (normal_104.y * normal_104.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_9 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_13;
  normalWorld_13 = tmpvar_4;
  mediump vec3 tmpvar_14;
  mediump vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = normalWorld_13;
  mediump vec3 x1_16;
  x1_16.x = dot (unity_SHAr, tmpvar_15);
  x1_16.y = dot (unity_SHAg, tmpvar_15);
  x1_16.z = dot (unity_SHAb, tmpvar_15);
  tmpvar_14 = (xlv_TEXCOORD4 + x1_16);
  lowp vec4 c_17;
  lowp vec4 c_18;
  lowp float diff_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_19 = tmpvar_20;
  c_18.xyz = ((tmpvar_8 * tmpvar_1) * diff_19);
  c_18.w = tmpvar_9;
  c_17.w = c_18.w;
  c_17.xyz = (c_18.xyz + (tmpvar_8 * tmpvar_14));
  c_3.xyz = c_17.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec2 in_TEXCOORD3;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
mediump vec4 t16_0;
highp vec3 t1;
bvec2 tb1;
highp vec4 t2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
mediump vec3 t16_14;
highp vec3 t16;
highp int ti16;
highp vec3 t17;
bool tb17;
highp vec3 t22;
highp float t31;
bool tb31;
highp vec2 t34;
highp float t35;
highp vec2 t36;
highp float t46;
bool tb46;
highp float t47;
bool tb47;
highp float t48;
bool tb48;
highp float t49;
mediump float t16_59;
void main()
{
    //Instruction 16389
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 16390
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 16391
    //LT
    tb1.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), t16_0.xxxx).xy;
    //Instruction 16392
    //MUL
    t2.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 16393
    //MAD
    t2.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t2.xyz;
    //Instruction 16394
    //MAD
    t2.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t2.xyz;
    //Instruction 16395
    //DP3
    t31 = dot(t2.xyz, t2.xyz);
    //Instruction 16396
    //RSQ
    t31 = inversesqrt(t31);
    //Instruction 16397
    //MUL
    t2.xyz = vec3(t31) * t2.xyz;
    //Instruction 16398
    //AND
    t2.xyz = mix(vec3(0.0, 0.0, 0.0), t2.xyz, tb1.xxx);
    //Instruction 16399
    //ADD
    t3.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 16400
    //MOV
    t4.x = in_TEXCOORD1.w;
    //Instruction 16401
    //MOV
    t4.yz = in_TEXCOORD3.xy;
    //Instruction 16402
    //ADD
    t4.xyz = (-t3.xyz) + t4.xyz;
    //Instruction 16403
    //MAD
    t3.xyz = unity_LODFade.xxx * t4.xyz + t3.xyz;
    //Instruction 16404
    //LT
    tb31 = t16_0.x<5.000000;
    //Instruction 16405
    //AND
    ti16 = int(uint(tb31) & uint(tb1.y));
    //Instruction 16406
    //IF
    if((uint(ti16))!=uint(0u)){
        //Instruction 16407
        //ADD
        t16.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 16408
        //EQ
        tb31 = t16_0.x==4.000000;
        //Instruction 16409
        //LT
        tb46 = 0.0<in_TEXCOORD2.w;
        //Instruction 16410
        //MOVC
        t4.xy = (bool(tb46)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 16411
        //ADD
        t16.x = t16.x + t4.x;
        //Instruction 16412
        //ADD
        t16.x = t16.x + 0.500000;
        //Instruction 16413
        //FRC
        t16.x = fract(t16.x);
        //Instruction 16414
        //MAD
        t16.x = t16.x * 2.000000 + -1.0;
        //Instruction 16415
        //MUL
        t47 = abs(t16.x) * abs(t16.x);
        //Instruction 16416
        //MAD
        t16.x = -abs(t16.x) * 2.000000 + 3.000000;
        //Instruction 16417
        //MAD
        t16.x = t47 * t16.x + -0.500000;
        //Instruction 16418
        //DP2
        t16.x = dot(t16.xx, t4.yy);
        //Instruction 16419
        //MUL
        t4.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 16420
        //FRC
        t4.xyz = fract(t4.xyz);
        //Instruction 16421
        //MAD
        t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 16422
        //MUL
        t4.xyz = t16.xxx * t4.xyz;
        //Instruction 16423
        //MAD
        t3.xyz = t4.xyz * in_TEXCOORD2.xxx + t3.xyz;
        //Instruction 16424
        //IF
        if(tb31){
            //Instruction 16425
            //MUL
            t4 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 16426
            //FRC
            t4 = fract(t4);
            //Instruction 16427
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 16428
            //MOVC
            t5 = (bool(tb46)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 16429
            //MOVC
            t16.xyz = (bool(tb46)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 16430
            //MUL
            t47 = t4.w * 3.000000;
            //Instruction 16431
            //MAD
            t6.y = t4.w * 3.000000 + t5.x;
            //Instruction 16432
            //MAD
            t6.x = t5.x * 0.750000 + (-t47);
            //Instruction 16433
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 16434
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 16435
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 16436
            //MUL
            t36.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 16437
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 16438
            //MAD
            t6.xy = t36.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 16439
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 16440
            //DP3
            t47 = dot(t3.xyz, t3.xyz);
            //Instruction 16441
            //SQRT
            t47 = sqrt(t47);
            //Instruction 16442
            //MAD
            t48 = t6.x * t6.x + t6.y;
            //Instruction 16443
            //MUL
            t5.x = t5.z * in_TEXCOORD2.x;
            //Instruction 16444
            //MUL
            t48 = t48 * t5.x;
            //Instruction 16445
            //SINCOS
            t5.x = sin(t48);
            t7.x = cos(t48);
            //Instruction 16446
            //ADD
            t48 = (-t7.x) + 1.0;
            //Instruction 16447
            //MUL
            t8 = t4.xxxy * vec4(t48);
            //Instruction 16448
            //MUL
            t22.xyz = t4.zxy * t5.xxx;
            //Instruction 16449
            //MAD
            t9.xy = t8.zy * t4.zy + t22.zx;
            //Instruction 16450
            //MAD
            t10.xy = t8.xw * t4.xy + t7.xx;
            //Instruction 16451
            //MAD
            t9.z = t8.w * t4.z + (-t22.y);
            //Instruction 16452
            //MAD
            t11.xy = t8.yz * t4.yz + (-t22.xz);
            //Instruction 16453
            //MAD
            t11.z = t8.w * t4.z + t22.y;
            //Instruction 16454
            //MUL
            t5.x = t4.z * t4.z;
            //Instruction 16455
            //MAD
            t11.w = t5.x * t48 + t7.x;
            //Instruction 16456
            //MUL
            t7.xyz = t2.yzx * t4.zxy;
            //Instruction 16457
            //MAD
            t7.xyz = t4.yzx * t2.zxy + (-t7.xyz);
            //Instruction 16458
            //DP3
            t17.x = dot(t2.xyz, t4.xyz);
            //Instruction 16459
            //MAX
            t17.x = max(t17.x, -1.0);
            //Instruction 16460
            //MIN
            t17.x = min(t17.x, 1.0);
            //Instruction 16461
            //ADD
            t7.w = t17.x + t7.y;
            //Instruction 16462
            //DP3
            t48 = dot(t7.xzw, t7.xzw);
            //Instruction 16463
            //RSQ
            t48 = inversesqrt(t48);
            //Instruction 16464
            //MUL
            t4.xyz = vec3(t48) * t7.zxw;
            //Instruction 16465
            //ADD
            t48 = -abs(t17.x) + 1.0;
            //Instruction 16466
            //SQRT
            t48 = sqrt(t48);
            //Instruction 16467
            //MAD
            t5.x = abs(t17.x) * -0.018729 + 0.074261;
            //Instruction 16468
            //MAD
            t5.x = t5.x * abs(t17.x) + -0.212114;
            //Instruction 16469
            //MAD
            t5.x = t5.x * abs(t17.x) + 1.570729;
            //Instruction 16470
            //MUL
            t35 = t48 * t5.x;
            //Instruction 16471
            //MAD
            t35 = t35 * -2.000000 + 3.141593;
            //Instruction 16472
            //LT
            tb17 = t17.x<(-t17.x);
            //Instruction 16473
            //AND
            t17.x = tb17 ? t35 : float(0.0);
            //Instruction 16474
            //MAD
            t17.x = t5.x * t48 + t17.x;
            //Instruction 16475
            //MAD
            t48 = (-t6.y) * t6.y + t6.x;
            //Instruction 16476
            //MAD
            t6.x = t4.w * 3.000000 + t16.z;
            //Instruction 16477
            //MUL
            t6.y = t6.x * 0.870000;
            //Instruction 16478
            //ADD
            t5.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 16479
            //FRC
            t5.xz = fract(t5.xz);
            //Instruction 16480
            //MAD
            t5.xz = t5.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 16481
            //MUL
            t6.xy = abs(t5.xz) * abs(t5.xz);
            //Instruction 16482
            //MAD
            t5.xz = -abs(t5.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 16483
            //MAD
            t5.xz = t6.xy * t5.xz + vec2(-0.500000, -0.500000);
            //Instruction 16484
            //ADD
            t5.xz = t5.xz + t5.xz;
            //Instruction 16485
            //MUL
            t46 = t5.z * t5.z;
            //Instruction 16486
            //MAD
            t46 = t46 * t5.x + 1.0;
            //Instruction 16487
            //MUL
            t46 = t46 * 0.500000;
            t46 = clamp(t46, 0.0, 1.0);
            //Instruction 16488
            //LOG
            t46 = log2(t46);
            //Instruction 16489
            //MUL
            t31 = t46 * t16.y;
            //Instruction 16490
            //EXP
            t31 = exp2(t31);
            //Instruction 16491
            //MUL
            t46 = t5.y * t48;
            //Instruction 16492
            //MAD
            t46 = t17.x * t5.w + t46;
            //Instruction 16493
            //MAD
            t16.x = t16.x * t31 + t46;
            //Instruction 16494
            //MUL
            t16.x = t16.x * in_TEXCOORD2.x;
            //Instruction 16495
            //SINCOS
            t5.x = sin(t16.x);
            t6.x = cos(t16.x);
            //Instruction 16496
            //ADD
            t16.x = (-t6.x) + 1.0;
            //Instruction 16497
            //MUL
            t7 = vec4(t4.y * t16.x, t4.y * t16.x, t4.y * t16.x, t4.z * t16.x);
            //Instruction 16498
            //MUL
            t5.xyz = t4.xyz * t5.xxx;
            //Instruction 16499
            //MAD
            t8.xy = t7.zy * t4.xz + t5.zx;
            //Instruction 16500
            //MAD
            t12.xy = t7.xw * t4.yz + t6.xx;
            //Instruction 16501
            //MAD
            t8.z = t7.w * t4.x + (-t5.y);
            //Instruction 16502
            //MAD
            t13.xy = t7.yz * t4.zx + (-t5.xz);
            //Instruction 16503
            //MAD
            t13.z = t7.w * t4.x + t5.y;
            //Instruction 16504
            //MUL
            t31 = t4.x * t4.x;
            //Instruction 16505
            //MAD
            t8.w = t31 * t16.x + t6.x;
            //Instruction 16506
            //MOV
            t10.z = t11.x;
            //Instruction 16507
            //MOV
            t10.w = t9.x;
            //Instruction 16508
            //MOV
            t12.z = t8.y;
            //Instruction 16509
            //MOV
            t12.w = t13.y;
            //Instruction 16510
            //DP3
            t4.x = dot(t10.xzw, t12.xzw);
            //Instruction 16511
            //MOV
            t13.w = t12.y;
            //Instruction 16512
            //DP3
            t4.y = dot(t10.xwz, t13.xzw);
            //Instruction 16513
            //DP3
            t4.z = dot(t10.xzw, t8.xzw);
            //Instruction 16514
            //MOV
            t9.w = t10.y;
            //Instruction 16515
            //DP3
            t5.x = dot(t9.ywz, t12.xzw);
            //Instruction 16516
            //DP3
            t5.y = dot(t9.yzw, t13.xzw);
            //Instruction 16517
            //DP3
            t5.z = dot(t9.ywz, t8.xzw);
            //Instruction 16518
            //DP3
            t6.x = dot(t11.yzw, t12.xzw);
            //Instruction 16519
            //DP3
            t6.y = dot(t11.ywz, t13.xzw);
            //Instruction 16520
            //DP3
            t6.z = dot(t11.yzw, t8.xzw);
            //Instruction 16521
            //DP3
            t16.x = dot(t4.xyz, in_NORMAL0.xyz);
            //Instruction 16522
            //DP3
            t16.y = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 16523
            //DP3
            t16.z = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 16524
            //DP3
            t4.x = dot(t4.xyz, t3.xyz);
            //Instruction 16525
            //DP3
            t4.y = dot(t5.xyz, t3.xyz);
            //Instruction 16526
            //DP3
            t4.z = dot(t6.xyz, t3.xyz);
            //Instruction 16527
            //DP3
            t17.x = dot(t4.xyz, t4.xyz);
            //Instruction 16528
            //RSQ
            t17.x = inversesqrt(t17.x);
            //Instruction 16529
            //MUL
            t4.xyz = t17.xxx * t4.xyz;
            //Instruction 16530
            //MUL
            t3.xyz = vec3(t47) * t4.xyz;
            //Instruction 16531
        //ELSE
        } else {
            //Instruction 16532
            //MOV
            t16.xyz = in_NORMAL0.xyz;
            //Instruction 16533
        //ENDIF
        }
        //Instruction 16534
    //ELSE
    } else {
        //Instruction 16535
        //MOV
        t16.xyz = in_NORMAL0.xyz;
        //Instruction 16536
    //ENDIF
    }
    //Instruction 16537
    //ADD
    t3.xyz = t3.xyz + in_TEXCOORD1.xyz;
    //Instruction 16538
    //GE
    tb17 = t16_0.x>=3.000000;
    //Instruction 16539
    //IF
    if(tb17){
        //Instruction 16540
        //EQ
        tb17 = t16_0.x==5.000000;
        //Instruction 16541
        //IF
        if(tb17){
            //Instruction 16542
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 16543
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 16544
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 16545
            //DP3
            t17.x = dot(t4.xyz, t4.xyz);
            //Instruction 16546
            //RSQ
            t17.x = inversesqrt(t17.x);
            //Instruction 16547
            //MUL
            t4.xyz = t17.xxx * t4.xyz;
            //Instruction 16548
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 16549
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 16550
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 16551
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 16552
            //ADD
            t17.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 16553
            //ADD
            t17.x = t17.x + _ST_WindBranch.x;
            //Instruction 16554
            //ADD
            t0.x = t17.x + in_TEXCOORD0.w;
            //Instruction 16555
            //MAD
            t0.y = t17.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 16556
            //MUL
            t47 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 16557
            //MUL
            t0.z = t47 * 0.500000;
            //Instruction 16558
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 16559
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 16560
            //FRC
            t0 = fract(t0);
            //Instruction 16561
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 16562
            //MUL
            t6 = abs(t0) * abs(t0);
            //Instruction 16563
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 16564
            //MAD
            t0 = t6 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 16565
            //ADD
            t0 = t0 + t0;
            //Instruction 16566
            //MUL
            t6.w = t0.z * t0.y;
            //Instruction 16567
            //LT
            tb47 = t6.w<0.0;
            //Instruction 16568
            //MOV
            t6.y = (-t6.w);
            //Instruction 16569
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 16570
            //MOVC
            t6.xy = (bool(tb47)) ? t6.xy : t6.zw;
            //Instruction 16571
            //MAD
            t47 = (-t0.y) * t0.z + t6.x;
            //Instruction 16572
            //MAD
            t47 = t6.y * t47 + t6.w;
            //Instruction 16573
            //ADD
            t48 = (-t47) + t6.x;
            //Instruction 16574
            //MAD
            t47 = t6.y * t48 + t47;
            //Instruction 16575
            //MUL
            t47 = t47 * _ST_WindBranchTwitch.x;
            //Instruction 16576
            //ADD
            t48 = (-_ST_WindVector.w) + 1.0;
            //Instruction 16577
            //ADD
            t49 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 16578
            //MUL
            t49 = t0.x * t49;
            //Instruction 16579
            //MAD
            t47 = t47 * t48 + t49;
            //Instruction 16580
            //MAD
            t48 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 16581
            //MUL
            t47 = t47 * t48;
            //Instruction 16582
            //MUL
            t5.xyz = vec3(t47) * t5.xyz;
            //Instruction 16583
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 16584
            //MAD
            t6.x = t17.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 16585
            //MUL
            t17.x = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 16586
            //MAD
            t6.y = t17.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 16587
            //ADD
            t17.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 16588
            //FRC
            t17.xz = fract(t17.xz);
            //Instruction 16589
            //MAD
            t17.xz = t17.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 16590
            //MUL
            t6.xy = abs(t17.xz) * abs(t17.xz);
            //Instruction 16591
            //MAD
            t17.xz = -abs(t17.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 16592
            //MAD
            t17.xz = t6.xy * t17.xz + vec2(-0.500000, -0.500000);
            //Instruction 16593
            //ADD
            t17.xz = t17.xz + t17.xz;
            //Instruction 16594
            //MUL
            t17.xz = t17.xz * t17.xz;
            //Instruction 16595
            //MUL
            t17.x = t17.x * t17.z;
            //Instruction 16596
            //MAD
            t17.x = (-t17.x) * _ST_WindTurbulences.x + 1.0;
            //Instruction 16597
            //MUL
            t47 = t0.w * _ST_WindVector.w;
            //Instruction 16598
            //MAD
            t17.x = t47 * _ST_WindBranchWhip.x + t17.x;
            //Instruction 16599
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 16600
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 16601
            //MUL
            t4.xyz = t17.xxx * t4.xyz;
            //Instruction 16602
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 16603
        //ELSE
        } else {
            //Instruction 16604
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 16605
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 16606
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 16607
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 16608
            //ADD
            t17.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 16609
            //ADD
            t17.x = t17.x + _ST_WindBranch.x;
            //Instruction 16610
            //ADD
            t5.x = t17.x + in_TEXCOORD0.w;
            //Instruction 16611
            //MAD
            t5.y = t17.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 16612
            //MUL
            t17.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 16613
            //MUL
            t5.z = t17.x * 0.500000;
            //Instruction 16614
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 16615
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 16616
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 16617
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 16618
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 16619
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 16620
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 16621
            //MUL
            t0.w = t5.z * t5.y;
            //Instruction 16622
            //LT
            tb17 = t0.w<0.0;
            //Instruction 16623
            //MOV
            t0.y = (-t0.w);
            //Instruction 16624
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 16625
            //MOVC
            t17.xz = (bool(tb17)) ? t0.xy : t0.zw;
            //Instruction 16626
            //MAD
            t48 = (-t5.y) * t5.z + t17.x;
            //Instruction 16627
            //MAD
            t48 = t17.z * t48 + t0.w;
            //Instruction 16628
            //ADD
            t17.x = t17.x + (-t48);
            //Instruction 16629
            //MAD
            t17.x = t17.z * t17.x + t48;
            //Instruction 16630
            //MUL
            t17.x = t17.x * _ST_WindBranchTwitch.x;
            //Instruction 16631
            //ADD
            t47 = (-_ST_WindVector.w) + 1.0;
            //Instruction 16632
            //ADD
            t48 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 16633
            //MUL
            t48 = t48 * t5.x;
            //Instruction 16634
            //MAD
            t17.x = t17.x * t47 + t48;
            //Instruction 16635
            //MUL
            t4.xyz = t17.xxx * t4.xyz;
            //Instruction 16636
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 16637
        //ENDIF
        }
        //Instruction 16638
    //ENDIF
    }
    //Instruction 16639
    //DP3
    t17.x = dot(t3.xyz, t3.xyz);
    //Instruction 16640
    //SQRT
    t17.x = sqrt(t17.x);
    //Instruction 16641
    //DIV
    t47 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 16642
    //MAD
    t47 = (-t47) * 0.250000 + t3.y;
    //Instruction 16643
    //MAX
    t47 = max(t47, 0.0);
    //Instruction 16644
    //MUL
    t47 = t47 * _ST_WindGlobal.z;
    //Instruction 16645
    //NE
    tb48 = t47!=0.0;
    //Instruction 16646
    //LOG
    t4.x = log2(t47);
    //Instruction 16647
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 16648
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 16649
    //MOVC
    t47 = (tb48) ? t4.x : t47;
    //Instruction 16650
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 16651
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 16652
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 16653
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 16654
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 16655
    //MUL
    t34.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 16656
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 16657
    //MAD
    t4.xy = t34.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 16658
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 16659
    //MAD
    t48 = t4.y * t4.y + t4.x;
    //Instruction 16660
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 16661
    //MAD
    t48 = _ST_WindGlobal.y * t48 + t4.x;
    //Instruction 16662
    //MUL
    t47 = t47 * t48;
    //Instruction 16663
    //MAD
    t4.xz = t2.xz * vec2(t47) + t3.xz;
    //Instruction 16664
    //MOV
    t4.y = t3.y;
    //Instruction 16665
    //DP3
    t2.x = dot(t4.xyz, t4.xyz);
    //Instruction 16666
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 16667
    //MUL
    t2.xzw = t2.xxx * t4.xyz;
    //Instruction 16668
    //MUL
    t2.xyz = t17.xxx * t2.xzw;
    //Instruction 16669
    //MOVC
    t2.xyz = (tb1.x) ? t2.xyz : t3.xyz;
    //Instruction 16670
    //MUL
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 16671
    //MAD
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    //Instruction 16672
    //MAD
    t0 = glstate_matrix_mvp[2] * t2.zzzz + t0;
    //Instruction 16673
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 16674
    //MUL
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 16675
    //MAD
    t2.xyw = _Object2World[0].xyz * t2.xxx + t3.xyz;
    //Instruction 16676
    //MAD
    t2.xyz = _Object2World[2].xyz * t2.zzz + t2.xyw;
    //Instruction 16677
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t2.xyz;
    //Instruction 16678
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 16679
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 16680
    //MOV
    t2.z = _World2Object[2].x;
    //Instruction 16681
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 16682
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 16683
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 16684
    //MUL
    t3.xyz = t16.yyy * t3.xyz;
    //Instruction 16685
    //MAD
    t1.xyz = t2.xyz * t16.xxx + t3.xyz;
    //Instruction 16686
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 16687
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 16688
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 16689
    //MAD
    t1.xyz = t2.xyz * t16.zzz + t1.xyz;
    //Instruction 16690
    //DP3
    t46 = dot(t1.xyz, t1.xyz);
    //Instruction 16691
    //RSQ
    t46 = inversesqrt(t46);
    //Instruction 16692
    //MUL
    t1.xyz = vec3(t46) * t1.xyz;
    //Instruction 16693
    //MUL
    t16_0 = t1.yzzx * t1.xyzz;
    //Instruction 16694
    //DP4
    t16_14.x = dot(unity_SHBr, t16_0);
    //Instruction 16695
    //DP4
    t16_14.y = dot(unity_SHBg, t16_0);
    //Instruction 16696
    //DP4
    t16_14.z = dot(unity_SHBb, t16_0);
    //Instruction 16697
    //MUL
    t16_59 = t1.y * t1.y;
    //Instruction 16698
    //MAD
    t16_59 = t1.x * t1.x + (-t16_59);
    //Instruction 16699
    //MAD
    vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(t16_59) + t16_14.xyz;
    //Instruction 16700
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 16701
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 16702
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 16703
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 16704
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump float t16_14;
void main()
{
    //Instruction 16370
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 16371
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 16372
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 16373
    //LT
    tb0 = t10_1<0.0;
    //Instruction 16374
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 16375
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 16376
    //MOV
    t16_0.w = 1.0;
    //Instruction 16377
    //DP4
    t16_3.x = dot(unity_SHAr, t16_0);
    //Instruction 16378
    //DP4
    t16_3.y = dot(unity_SHAg, t16_0);
    //Instruction 16379
    //DP4
    t16_3.z = dot(unity_SHAb, t16_0);
    //Instruction 16380
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD4.xyz;
    //Instruction 16381
    //MUL
    t16_3.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 16382
    //MUL
    t16_2.xyz = t16_2.xyz * _LightColor0.xyz;
    //Instruction 16383
    //DP3
    t16_14 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 16384
    //MAX
    t16_14 = max(t16_14, 0.0);
    //Instruction 16385
    //MAD
    t16_2.xyz = t16_2.xyz * vec3(t16_14) + t16_3.xyz;
    //Instruction 16386
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 16387
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 16388
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesMultiTexCoord3;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  tmpvar_4 = _glesMultiTexCoord1;
  highp vec2 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord3.xy;
  lowp vec3 worldNormal_6;
  mediump vec3 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  lowp vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  tmpvar_11.xy = tmpvar_3.xy;
  tmpvar_10.w = _Color.w;
  tmpvar_10.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_1;
  tmpvar_13 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  FinalPosition_16 = tmpvar_1.xyz;
  highp vec3 tmpvar_17;
  tmpvar_17.x = _Object2World[3].x;
  tmpvar_17.y = _Object2World[3].y;
  tmpvar_17.z = _Object2World[3].z;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_16 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp vec3 tmpvar_21;
  tmpvar_21.x = tmpvar_4.w;
  tmpvar_21.y = tmpvar_5.x;
  tmpvar_21.z = tmpvar_5.y;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (FinalPosition_16, tmpvar_21, unity_LODFade.xxx);
  FinalPosition_16 = tmpvar_22;
  if (((tmpvar_18 > 1.0) && (tmpvar_18 < 5.0))) {
    highp float tmpvar_23;
    tmpvar_23 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_24;
    isBestWind_24 = (tmpvar_18 == 4.0);
    bool bLeaf2_25;
    bLeaf2_25 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_26;
    vPos_26 = tmpvar_22;
    highp vec3 vDirection_27;
    vDirection_27 = tmpvar_2;
    highp float tmpvar_28;
    if (bLeaf2_25) {
      tmpvar_28 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_28 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_29;
    if (bLeaf2_25) {
      tmpvar_29 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_30;
    highp vec4 tmpvar_31;
    tmpvar_31.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_31.x = (tmpvar_28 + tmpvar_23);
    highp vec4 tmpvar_32;
    tmpvar_32 = abs(((
      fract((tmpvar_31 + 0.5))
     * 2.0) - 1.0));
    vPos_30 = (tmpvar_22 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_29 * (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_27 = tmpvar_2;
    vPos_26 = vPos_30;
    if (isBestWind_24) {
      highp vec3 tmpvar_33;
      tmpvar_33 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_34;
      if (bLeaf2_25) {
        tmpvar_34 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_35;
      if (bLeaf2_25) {
        tmpvar_35 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_36;
      if (bLeaf2_25) {
        tmpvar_36 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_37;
      if (bLeaf2_25) {
        tmpvar_37 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_38;
      if (bLeaf2_25) {
        tmpvar_38 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_38 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_39;
      if (bLeaf2_25) {
        tmpvar_39 = bool(1);
      } else {
        tmpvar_39 = bool(1);
      };
      highp float fTwitch_40;
      highp vec3 vAxis_41;
      highp float fOsc_42;
      highp vec3 vOriginPos_43;
      highp vec3 tmpvar_44;
      tmpvar_44 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_45;
      tmpvar_45 = ((tmpvar_44.x + tmpvar_44.y) + tmpvar_44.z);
      highp vec4 tmpvar_46;
      tmpvar_46.x = (tmpvar_34 + tmpvar_45);
      tmpvar_46.y = ((tmpvar_34 * 0.75) - tmpvar_45);
      tmpvar_46.z = ((tmpvar_34 * 0.01) + tmpvar_45);
      tmpvar_46.w = (tmpvar_34 + tmpvar_45);
      highp vec4 tmpvar_47;
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      tmpvar_47 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      vOriginPos_43 = vPos_30;
      highp float tmpvar_49;
      tmpvar_49 = sqrt(dot (vPos_30, vPos_30));
      highp float fAngle_50;
      fAngle_50 = ((_glesMultiTexCoord2.x * tmpvar_36) * (tmpvar_47.x + (tmpvar_47.y * tmpvar_47.y)));
      highp vec2 vSinCos_51;
      vSinCos_51.x = sin(fAngle_50);
      vSinCos_51.y = cos(fAngle_50);
      highp float tmpvar_52;
      tmpvar_52 = (1.0 - vSinCos_51.y);
      highp mat3 tmpvar_53;
      tmpvar_53[0].x = (((tmpvar_52 * tmpvar_33.x) * tmpvar_33.x) + vSinCos_51.y);
      tmpvar_53[0].y = (((tmpvar_52 * tmpvar_33.x) * tmpvar_33.y) + (vSinCos_51.x * tmpvar_33.z));
      tmpvar_53[0].z = (((tmpvar_52 * tmpvar_33.x) * tmpvar_33.z) - (vSinCos_51.x * tmpvar_33.y));
      tmpvar_53[1].x = (((tmpvar_52 * tmpvar_33.x) * tmpvar_33.y) - (vSinCos_51.x * tmpvar_33.z));
      tmpvar_53[1].y = (((tmpvar_52 * tmpvar_33.y) * tmpvar_33.y) + vSinCos_51.y);
      tmpvar_53[1].z = (((tmpvar_52 * tmpvar_33.y) * tmpvar_33.z) + (vSinCos_51.x * tmpvar_33.x));
      tmpvar_53[2].x = (((tmpvar_52 * tmpvar_33.x) * tmpvar_33.z) + (vSinCos_51.x * tmpvar_33.y));
      tmpvar_53[2].y = (((tmpvar_52 * tmpvar_33.y) * tmpvar_33.z) - (vSinCos_51.x * tmpvar_33.x));
      tmpvar_53[2].z = (((tmpvar_52 * tmpvar_33.z) * tmpvar_33.z) + vSinCos_51.y);
      highp vec3 tmpvar_54;
      tmpvar_54 = ((tmpvar_33.yzx * vRotatedWindVector_15.zxy) - (tmpvar_33.zxy * vRotatedWindVector_15.yzx));
      vAxis_41.xz = tmpvar_54.xz;
      highp float tmpvar_55;
      tmpvar_55 = clamp (dot (vRotatedWindVector_15, tmpvar_33), -1.0, 1.0);
      vAxis_41.y = (tmpvar_54.y + tmpvar_55);
      highp vec3 tmpvar_56;
      tmpvar_56 = normalize(vAxis_41);
      vAxis_41 = tmpvar_56;
      highp float tmpvar_57;
      tmpvar_57 = (1.570796 - (sign(tmpvar_55) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_55))) * (1.570796 + (abs(tmpvar_55) * (-0.2146018 + 
          (abs(tmpvar_55) * (0.08656672 + (abs(tmpvar_55) * -0.03102955)))
        ))))
      )));
      fOsc_42 = (tmpvar_47.y - (tmpvar_47.x * tmpvar_47.x));
      fTwitch_40 = 0.0;
      if (tmpvar_39) {
        highp float fTime_58;
        fTime_58 = (tmpvar_38.z + tmpvar_45);
        highp vec4 tmpvar_59;
        tmpvar_59.zw = vec2(0.0, 0.0);
        tmpvar_59.x = fTime_58;
        tmpvar_59.y = (0.87 * fTime_58);
        highp vec4 tmpvar_60;
        highp vec4 tmpvar_61;
        tmpvar_61 = abs(((
          fract((tmpvar_59 + 0.5))
         * 2.0) - 1.0));
        tmpvar_60 = (((
          (tmpvar_61 * tmpvar_61)
         * 
          (3.0 - (2.0 * tmpvar_61))
        ) - 0.5) * 2.0);
        fTwitch_40 = (tmpvar_38.x * pow (clamp (
          ((((tmpvar_60.x * tmpvar_60.y) * tmpvar_60.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_38.y));
      };
      highp float fAngle_62;
      fAngle_62 = (_glesMultiTexCoord2.x * ((
        (tmpvar_57 * tmpvar_37)
       + 
        (fOsc_42 * tmpvar_35)
      ) + fTwitch_40));
      highp vec2 vSinCos_63;
      vSinCos_63.x = sin(fAngle_62);
      vSinCos_63.y = cos(fAngle_62);
      highp float tmpvar_64;
      tmpvar_64 = (1.0 - vSinCos_63.y);
      highp mat3 tmpvar_65;
      tmpvar_65[0].x = (((tmpvar_64 * tmpvar_56.x) * tmpvar_56.x) + vSinCos_63.y);
      tmpvar_65[0].y = (((tmpvar_64 * tmpvar_56.x) * tmpvar_56.y) + (vSinCos_63.x * tmpvar_56.z));
      tmpvar_65[0].z = (((tmpvar_64 * tmpvar_56.x) * tmpvar_56.z) - (vSinCos_63.x * tmpvar_56.y));
      tmpvar_65[1].x = (((tmpvar_64 * tmpvar_56.x) * tmpvar_56.y) - (vSinCos_63.x * tmpvar_56.z));
      tmpvar_65[1].y = (((tmpvar_64 * tmpvar_56.y) * tmpvar_56.y) + vSinCos_63.y);
      tmpvar_65[1].z = (((tmpvar_64 * tmpvar_56.y) * tmpvar_56.z) + (vSinCos_63.x * tmpvar_56.x));
      tmpvar_65[2].x = (((tmpvar_64 * tmpvar_56.x) * tmpvar_56.z) + (vSinCos_63.x * tmpvar_56.y));
      tmpvar_65[2].y = (((tmpvar_64 * tmpvar_56.y) * tmpvar_56.z) - (vSinCos_63.x * tmpvar_56.x));
      tmpvar_65[2].z = (((tmpvar_64 * tmpvar_56.z) * tmpvar_56.z) + vSinCos_63.y);
      highp mat3 tmpvar_66;
      tmpvar_66 = (tmpvar_53 * tmpvar_65);
      vOriginPos_43 = (normalize((tmpvar_66 * vPos_30)) * tmpvar_49);
      vDirection_27 = (tmpvar_66 * _glesNormal);
      vPos_26 = vOriginPos_43;
    };
    tmpvar_13 = vDirection_27;
    FinalPosition_16 = vPos_26;
  };
  FinalPosition_16 = (FinalPosition_16 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_67;
    vPos_67 = FinalPosition_16;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_68;
      vPos_68 = FinalPosition_16;
      highp float fTime_69;
      highp float fAdherenceScale_70;
      highp vec3 vWindVector_71;
      vWindVector_71 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_69 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_72;
      highp float fOscillation_73;
      fOscillation_73 = 1.0;
      highp float fAmount_74;
      highp float fTarget_75;
      highp vec4 tmpvar_76;
      tmpvar_76.x = (fTime_69 + _glesMultiTexCoord0.w);
      tmpvar_76.y = ((fTime_69 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_76.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_69 + _glesMultiTexCoord0.w));
      tmpvar_76.w = ((fTime_69 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_77;
      tmpvar_77 = abs(((
        fract((tmpvar_76 + 0.5))
       * 2.0) - 1.0));
      vOscillations_72 = (((
        (tmpvar_77 * tmpvar_77)
       * 
        (3.0 - (2.0 * tmpvar_77))
      ) - 0.5) * 2.0);
      highp float tmpvar_78;
      tmpvar_78 = (vOscillations_72.y * vOscillations_72.z);
      fTarget_75 = 1.0;
      fAmount_74 = tmpvar_78;
      if ((tmpvar_78 < 0.0)) {
        fTarget_75 = -1.0;
        fAmount_74 = -(tmpvar_78);
      };
      fOscillation_73 = (((
        mix (mix (tmpvar_78, fTarget_75, fAmount_74), fTarget_75, fAmount_74)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_72.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_73 = (fOscillation_73 * (1.0 + (vOscillations_72.w * _ST_WindBranchWhip.x)));
      vPos_68 = (FinalPosition_16 + ((vWindVector_71 * fOscillation_73) * _ST_WindBranch.y));
      highp vec4 tmpvar_79;
      tmpvar_79.zw = vec2(0.0, 0.0);
      tmpvar_79.x = ((fTime_69 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_79.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_80;
      highp vec4 tmpvar_81;
      tmpvar_81 = abs(((
        fract((tmpvar_79 + 0.5))
       * 2.0) - 1.0));
      tmpvar_80 = (((
        (tmpvar_81 * tmpvar_81)
       * 
        (3.0 - (2.0 * tmpvar_81))
      ) - 0.5) * 2.0);
      fAdherenceScale_70 = (1.0 - ((tmpvar_80.x * tmpvar_80.y) * (
        (tmpvar_80.x * tmpvar_80.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_70 = (fAdherenceScale_70 + ((vOscillations_72.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_68 = (vPos_68 + ((
        ((vRotatedBranchAnchor_14 - vPos_68) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_70) * _glesMultiTexCoord0.z));
      vPos_67 = vPos_68;
    } else {
      highp vec3 vPos_82;
      vPos_82 = vPos_67;
      highp float fTime_83;
      highp vec3 vWindVector_84;
      vWindVector_84 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_83 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_85;
      highp float fOscillation_86;
      fOscillation_86 = 1.0;
      highp float fAmount_87;
      highp float fTarget_88;
      highp vec4 tmpvar_89;
      tmpvar_89.w = 0.0;
      tmpvar_89.x = (fTime_83 + _glesMultiTexCoord0.w);
      tmpvar_89.y = ((fTime_83 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_89.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_83 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_90;
      tmpvar_90 = abs(((
        fract((tmpvar_89 + 0.5))
       * 2.0) - 1.0));
      vOscillations_85 = (((
        (tmpvar_90 * tmpvar_90)
       * 
        (3.0 - (2.0 * tmpvar_90))
      ) - 0.5) * 2.0);
      highp float tmpvar_91;
      tmpvar_91 = (vOscillations_85.y * vOscillations_85.z);
      fTarget_88 = 1.0;
      fAmount_87 = tmpvar_91;
      if ((tmpvar_91 < 0.0)) {
        fTarget_88 = -1.0;
        fAmount_87 = -(tmpvar_91);
      };
      fOscillation_86 = (((
        mix (mix (tmpvar_91, fTarget_88, fAmount_87), fTarget_88, fAmount_87)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_85.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_82 = (vPos_67 + ((vWindVector_84 * fOscillation_86) * _ST_WindBranch.y));
      vPos_67 = vPos_82;
    };
    FinalPosition_16 = vPos_67;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_92;
    vPos_92 = FinalPosition_16;
    highp float fMoveAmount_93;
    highp float fAdjust_94;
    highp float fLength_95;
    fLength_95 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_96;
    tmpvar_96 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_94 = tmpvar_96;
    if ((tmpvar_96 != 0.0)) {
      fAdjust_94 = pow (tmpvar_96, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_97;
    tmpvar_97.zw = vec2(0.0, 0.0);
    tmpvar_97.x = (tmpvar_17.x + _ST_WindGlobal.x);
    tmpvar_97.y = (tmpvar_17.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_98;
    highp vec4 tmpvar_99;
    tmpvar_99 = abs(((
      fract((tmpvar_97 + 0.5))
     * 2.0) - 1.0));
    tmpvar_98 = (((
      (tmpvar_99 * tmpvar_99)
     * 
      (3.0 - (2.0 * tmpvar_99))
    ) - 0.5) * 2.0);
    fMoveAmount_93 = ((_ST_WindGlobal.y * (tmpvar_98.x + 
      (tmpvar_98.y * tmpvar_98.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_93 = (fMoveAmount_93 * fAdjust_94);
    vPos_92.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * fMoveAmount_93));
    vPos_92 = (normalize(vPos_92) * fLength_95);
    FinalPosition_16 = vPos_92;
  };
  tmpvar_12.xyz = FinalPosition_16;
  tmpvar_8 = tmpvar_10;
  highp vec4 v_100;
  v_100.x = _World2Object[0].x;
  v_100.y = _World2Object[1].x;
  v_100.z = _World2Object[2].x;
  v_100.w = _World2Object[3].x;
  highp vec4 v_101;
  v_101.x = _World2Object[0].y;
  v_101.y = _World2Object[1].y;
  v_101.z = _World2Object[2].y;
  v_101.w = _World2Object[3].y;
  highp vec4 v_102;
  v_102.x = _World2Object[0].z;
  v_102.y = _World2Object[1].z;
  v_102.z = _World2Object[2].z;
  v_102.w = _World2Object[3].z;
  highp vec3 tmpvar_103;
  tmpvar_103 = normalize(((
    (v_100.xyz * tmpvar_13.x)
   + 
    (v_101.xyz * tmpvar_13.y)
  ) + (v_102.xyz * tmpvar_13.z)));
  worldNormal_6 = tmpvar_103;
  tmpvar_7 = worldNormal_6;
  lowp vec4 tmpvar_104;
  tmpvar_104.w = 1.0;
  tmpvar_104.xyz = worldNormal_6;
  mediump vec4 normal_105;
  normal_105 = tmpvar_104;
  mediump vec3 x2_106;
  mediump vec4 tmpvar_107;
  tmpvar_107 = (normal_105.xyzz * normal_105.yzzx);
  x2_106.x = dot (unity_SHBr, tmpvar_107);
  x2_106.y = dot (unity_SHBg, tmpvar_107);
  x2_106.z = dot (unity_SHBb, tmpvar_107);
  tmpvar_9 = (unity_World2Shadow[0] * (_Object2World * tmpvar_12));
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_7;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD3 = tmpvar_11;
  xlv_TEXCOORD4 = (x2_106 + (unity_SHC.xyz * (
    (normal_105.x * normal_105.x)
   - 
    (normal_105.y * normal_105.y)
  )));
  xlv_TEXCOORD5 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_10 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp float tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD5).x > 
    (xlv_TEXCOORD5.z / xlv_TEXCOORD5.w)
  )), _LightShadowData.x);
  tmpvar_14 = tmpvar_15;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_14;
  mediump vec3 normalWorld_16;
  normalWorld_16 = tmpvar_5;
  mediump vec3 tmpvar_17;
  mediump vec3 tmpvar_18;
  mediump vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = normalWorld_16;
  mediump vec3 x1_20;
  x1_20.x = dot (unity_SHAr, tmpvar_19);
  x1_20.y = dot (unity_SHAg, tmpvar_19);
  x1_20.z = dot (unity_SHAb, tmpvar_19);
  tmpvar_18 = (xlv_TEXCOORD4 + x1_20);
  tmpvar_17 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_17;
  lowp vec4 c_21;
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_23 = tmpvar_24;
  c_22.xyz = ((tmpvar_9 * tmpvar_17) * diff_23);
  c_22.w = tmpvar_10;
  c_21.w = c_22.w;
  c_21.xyz = (c_22.xyz + (tmpvar_9 * tmpvar_18));
  c_4.xyz = c_21.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesMultiTexCoord3;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  tmpvar_4 = _glesMultiTexCoord1;
  highp vec2 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord3.xy;
  lowp vec3 worldNormal_6;
  mediump vec3 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  lowp vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  tmpvar_11.xy = tmpvar_3.xy;
  tmpvar_10.w = _Color.w;
  tmpvar_10.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_1;
  tmpvar_13 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  FinalPosition_16 = tmpvar_1.xyz;
  highp vec3 tmpvar_17;
  tmpvar_17.x = _Object2World[3].x;
  tmpvar_17.y = _Object2World[3].y;
  tmpvar_17.z = _Object2World[3].z;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_16 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp vec3 tmpvar_21;
  tmpvar_21.x = tmpvar_4.w;
  tmpvar_21.y = tmpvar_5.x;
  tmpvar_21.z = tmpvar_5.y;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (FinalPosition_16, tmpvar_21, unity_LODFade.xxx);
  FinalPosition_16 = tmpvar_22;
  if (((tmpvar_18 > 1.0) && (tmpvar_18 < 5.0))) {
    highp float tmpvar_23;
    tmpvar_23 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_24;
    isBestWind_24 = (tmpvar_18 == 4.0);
    bool bLeaf2_25;
    bLeaf2_25 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_26;
    vPos_26 = tmpvar_22;
    highp vec3 vDirection_27;
    vDirection_27 = tmpvar_2;
    highp float tmpvar_28;
    if (bLeaf2_25) {
      tmpvar_28 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_28 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_29;
    if (bLeaf2_25) {
      tmpvar_29 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_30;
    highp vec4 tmpvar_31;
    tmpvar_31.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_31.x = (tmpvar_28 + tmpvar_23);
    highp vec4 tmpvar_32;
    tmpvar_32 = abs(((
      fract((tmpvar_31 + 0.5))
     * 2.0) - 1.0));
    vPos_30 = (tmpvar_22 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_29 * (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_27 = tmpvar_2;
    vPos_26 = vPos_30;
    if (isBestWind_24) {
      highp vec3 tmpvar_33;
      tmpvar_33 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_34;
      if (bLeaf2_25) {
        tmpvar_34 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_35;
      if (bLeaf2_25) {
        tmpvar_35 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_36;
      if (bLeaf2_25) {
        tmpvar_36 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_37;
      if (bLeaf2_25) {
        tmpvar_37 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_38;
      if (bLeaf2_25) {
        tmpvar_38 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_38 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_39;
      if (bLeaf2_25) {
        tmpvar_39 = bool(1);
      } else {
        tmpvar_39 = bool(1);
      };
      highp float fTwitch_40;
      highp vec3 vAxis_41;
      highp float fOsc_42;
      highp vec3 vOriginPos_43;
      highp vec3 tmpvar_44;
      tmpvar_44 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_45;
      tmpvar_45 = ((tmpvar_44.x + tmpvar_44.y) + tmpvar_44.z);
      highp vec4 tmpvar_46;
      tmpvar_46.x = (tmpvar_34 + tmpvar_45);
      tmpvar_46.y = ((tmpvar_34 * 0.75) - tmpvar_45);
      tmpvar_46.z = ((tmpvar_34 * 0.01) + tmpvar_45);
      tmpvar_46.w = (tmpvar_34 + tmpvar_45);
      highp vec4 tmpvar_47;
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      tmpvar_47 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      vOriginPos_43 = vPos_30;
      highp float tmpvar_49;
      tmpvar_49 = sqrt(dot (vPos_30, vPos_30));
      highp float fAngle_50;
      fAngle_50 = ((_glesMultiTexCoord2.x * tmpvar_36) * (tmpvar_47.x + (tmpvar_47.y * tmpvar_47.y)));
      highp vec2 vSinCos_51;
      vSinCos_51.x = sin(fAngle_50);
      vSinCos_51.y = cos(fAngle_50);
      highp float tmpvar_52;
      tmpvar_52 = (1.0 - vSinCos_51.y);
      highp mat3 tmpvar_53;
      tmpvar_53[0].x = (((tmpvar_52 * tmpvar_33.x) * tmpvar_33.x) + vSinCos_51.y);
      tmpvar_53[0].y = (((tmpvar_52 * tmpvar_33.x) * tmpvar_33.y) + (vSinCos_51.x * tmpvar_33.z));
      tmpvar_53[0].z = (((tmpvar_52 * tmpvar_33.x) * tmpvar_33.z) - (vSinCos_51.x * tmpvar_33.y));
      tmpvar_53[1].x = (((tmpvar_52 * tmpvar_33.x) * tmpvar_33.y) - (vSinCos_51.x * tmpvar_33.z));
      tmpvar_53[1].y = (((tmpvar_52 * tmpvar_33.y) * tmpvar_33.y) + vSinCos_51.y);
      tmpvar_53[1].z = (((tmpvar_52 * tmpvar_33.y) * tmpvar_33.z) + (vSinCos_51.x * tmpvar_33.x));
      tmpvar_53[2].x = (((tmpvar_52 * tmpvar_33.x) * tmpvar_33.z) + (vSinCos_51.x * tmpvar_33.y));
      tmpvar_53[2].y = (((tmpvar_52 * tmpvar_33.y) * tmpvar_33.z) - (vSinCos_51.x * tmpvar_33.x));
      tmpvar_53[2].z = (((tmpvar_52 * tmpvar_33.z) * tmpvar_33.z) + vSinCos_51.y);
      highp vec3 tmpvar_54;
      tmpvar_54 = ((tmpvar_33.yzx * vRotatedWindVector_15.zxy) - (tmpvar_33.zxy * vRotatedWindVector_15.yzx));
      vAxis_41.xz = tmpvar_54.xz;
      highp float tmpvar_55;
      tmpvar_55 = clamp (dot (vRotatedWindVector_15, tmpvar_33), -1.0, 1.0);
      vAxis_41.y = (tmpvar_54.y + tmpvar_55);
      highp vec3 tmpvar_56;
      tmpvar_56 = normalize(vAxis_41);
      vAxis_41 = tmpvar_56;
      highp float tmpvar_57;
      tmpvar_57 = (1.570796 - (sign(tmpvar_55) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_55))) * (1.570796 + (abs(tmpvar_55) * (-0.2146018 + 
          (abs(tmpvar_55) * (0.08656672 + (abs(tmpvar_55) * -0.03102955)))
        ))))
      )));
      fOsc_42 = (tmpvar_47.y - (tmpvar_47.x * tmpvar_47.x));
      fTwitch_40 = 0.0;
      if (tmpvar_39) {
        highp float fTime_58;
        fTime_58 = (tmpvar_38.z + tmpvar_45);
        highp vec4 tmpvar_59;
        tmpvar_59.zw = vec2(0.0, 0.0);
        tmpvar_59.x = fTime_58;
        tmpvar_59.y = (0.87 * fTime_58);
        highp vec4 tmpvar_60;
        highp vec4 tmpvar_61;
        tmpvar_61 = abs(((
          fract((tmpvar_59 + 0.5))
         * 2.0) - 1.0));
        tmpvar_60 = (((
          (tmpvar_61 * tmpvar_61)
         * 
          (3.0 - (2.0 * tmpvar_61))
        ) - 0.5) * 2.0);
        fTwitch_40 = (tmpvar_38.x * pow (clamp (
          ((((tmpvar_60.x * tmpvar_60.y) * tmpvar_60.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_38.y));
      };
      highp float fAngle_62;
      fAngle_62 = (_glesMultiTexCoord2.x * ((
        (tmpvar_57 * tmpvar_37)
       + 
        (fOsc_42 * tmpvar_35)
      ) + fTwitch_40));
      highp vec2 vSinCos_63;
      vSinCos_63.x = sin(fAngle_62);
      vSinCos_63.y = cos(fAngle_62);
      highp float tmpvar_64;
      tmpvar_64 = (1.0 - vSinCos_63.y);
      highp mat3 tmpvar_65;
      tmpvar_65[0].x = (((tmpvar_64 * tmpvar_56.x) * tmpvar_56.x) + vSinCos_63.y);
      tmpvar_65[0].y = (((tmpvar_64 * tmpvar_56.x) * tmpvar_56.y) + (vSinCos_63.x * tmpvar_56.z));
      tmpvar_65[0].z = (((tmpvar_64 * tmpvar_56.x) * tmpvar_56.z) - (vSinCos_63.x * tmpvar_56.y));
      tmpvar_65[1].x = (((tmpvar_64 * tmpvar_56.x) * tmpvar_56.y) - (vSinCos_63.x * tmpvar_56.z));
      tmpvar_65[1].y = (((tmpvar_64 * tmpvar_56.y) * tmpvar_56.y) + vSinCos_63.y);
      tmpvar_65[1].z = (((tmpvar_64 * tmpvar_56.y) * tmpvar_56.z) + (vSinCos_63.x * tmpvar_56.x));
      tmpvar_65[2].x = (((tmpvar_64 * tmpvar_56.x) * tmpvar_56.z) + (vSinCos_63.x * tmpvar_56.y));
      tmpvar_65[2].y = (((tmpvar_64 * tmpvar_56.y) * tmpvar_56.z) - (vSinCos_63.x * tmpvar_56.x));
      tmpvar_65[2].z = (((tmpvar_64 * tmpvar_56.z) * tmpvar_56.z) + vSinCos_63.y);
      highp mat3 tmpvar_66;
      tmpvar_66 = (tmpvar_53 * tmpvar_65);
      vOriginPos_43 = (normalize((tmpvar_66 * vPos_30)) * tmpvar_49);
      vDirection_27 = (tmpvar_66 * _glesNormal);
      vPos_26 = vOriginPos_43;
    };
    tmpvar_13 = vDirection_27;
    FinalPosition_16 = vPos_26;
  };
  FinalPosition_16 = (FinalPosition_16 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_67;
    vPos_67 = FinalPosition_16;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_68;
      vPos_68 = FinalPosition_16;
      highp float fTime_69;
      highp float fAdherenceScale_70;
      highp vec3 vWindVector_71;
      vWindVector_71 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_69 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_72;
      highp float fOscillation_73;
      fOscillation_73 = 1.0;
      highp float fAmount_74;
      highp float fTarget_75;
      highp vec4 tmpvar_76;
      tmpvar_76.x = (fTime_69 + _glesMultiTexCoord0.w);
      tmpvar_76.y = ((fTime_69 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_76.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_69 + _glesMultiTexCoord0.w));
      tmpvar_76.w = ((fTime_69 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_77;
      tmpvar_77 = abs(((
        fract((tmpvar_76 + 0.5))
       * 2.0) - 1.0));
      vOscillations_72 = (((
        (tmpvar_77 * tmpvar_77)
       * 
        (3.0 - (2.0 * tmpvar_77))
      ) - 0.5) * 2.0);
      highp float tmpvar_78;
      tmpvar_78 = (vOscillations_72.y * vOscillations_72.z);
      fTarget_75 = 1.0;
      fAmount_74 = tmpvar_78;
      if ((tmpvar_78 < 0.0)) {
        fTarget_75 = -1.0;
        fAmount_74 = -(tmpvar_78);
      };
      fOscillation_73 = (((
        mix (mix (tmpvar_78, fTarget_75, fAmount_74), fTarget_75, fAmount_74)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_72.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_73 = (fOscillation_73 * (1.0 + (vOscillations_72.w * _ST_WindBranchWhip.x)));
      vPos_68 = (FinalPosition_16 + ((vWindVector_71 * fOscillation_73) * _ST_WindBranch.y));
      highp vec4 tmpvar_79;
      tmpvar_79.zw = vec2(0.0, 0.0);
      tmpvar_79.x = ((fTime_69 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_79.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_80;
      highp vec4 tmpvar_81;
      tmpvar_81 = abs(((
        fract((tmpvar_79 + 0.5))
       * 2.0) - 1.0));
      tmpvar_80 = (((
        (tmpvar_81 * tmpvar_81)
       * 
        (3.0 - (2.0 * tmpvar_81))
      ) - 0.5) * 2.0);
      fAdherenceScale_70 = (1.0 - ((tmpvar_80.x * tmpvar_80.y) * (
        (tmpvar_80.x * tmpvar_80.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_70 = (fAdherenceScale_70 + ((vOscillations_72.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_68 = (vPos_68 + ((
        ((vRotatedBranchAnchor_14 - vPos_68) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_70) * _glesMultiTexCoord0.z));
      vPos_67 = vPos_68;
    } else {
      highp vec3 vPos_82;
      vPos_82 = vPos_67;
      highp float fTime_83;
      highp vec3 vWindVector_84;
      vWindVector_84 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_83 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_85;
      highp float fOscillation_86;
      fOscillation_86 = 1.0;
      highp float fAmount_87;
      highp float fTarget_88;
      highp vec4 tmpvar_89;
      tmpvar_89.w = 0.0;
      tmpvar_89.x = (fTime_83 + _glesMultiTexCoord0.w);
      tmpvar_89.y = ((fTime_83 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_89.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_83 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_90;
      tmpvar_90 = abs(((
        fract((tmpvar_89 + 0.5))
       * 2.0) - 1.0));
      vOscillations_85 = (((
        (tmpvar_90 * tmpvar_90)
       * 
        (3.0 - (2.0 * tmpvar_90))
      ) - 0.5) * 2.0);
      highp float tmpvar_91;
      tmpvar_91 = (vOscillations_85.y * vOscillations_85.z);
      fTarget_88 = 1.0;
      fAmount_87 = tmpvar_91;
      if ((tmpvar_91 < 0.0)) {
        fTarget_88 = -1.0;
        fAmount_87 = -(tmpvar_91);
      };
      fOscillation_86 = (((
        mix (mix (tmpvar_91, fTarget_88, fAmount_87), fTarget_88, fAmount_87)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_85.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_82 = (vPos_67 + ((vWindVector_84 * fOscillation_86) * _ST_WindBranch.y));
      vPos_67 = vPos_82;
    };
    FinalPosition_16 = vPos_67;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_92;
    vPos_92 = FinalPosition_16;
    highp float fMoveAmount_93;
    highp float fAdjust_94;
    highp float fLength_95;
    fLength_95 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_96;
    tmpvar_96 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_94 = tmpvar_96;
    if ((tmpvar_96 != 0.0)) {
      fAdjust_94 = pow (tmpvar_96, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_97;
    tmpvar_97.zw = vec2(0.0, 0.0);
    tmpvar_97.x = (tmpvar_17.x + _ST_WindGlobal.x);
    tmpvar_97.y = (tmpvar_17.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_98;
    highp vec4 tmpvar_99;
    tmpvar_99 = abs(((
      fract((tmpvar_97 + 0.5))
     * 2.0) - 1.0));
    tmpvar_98 = (((
      (tmpvar_99 * tmpvar_99)
     * 
      (3.0 - (2.0 * tmpvar_99))
    ) - 0.5) * 2.0);
    fMoveAmount_93 = ((_ST_WindGlobal.y * (tmpvar_98.x + 
      (tmpvar_98.y * tmpvar_98.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_93 = (fMoveAmount_93 * fAdjust_94);
    vPos_92.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * fMoveAmount_93));
    vPos_92 = (normalize(vPos_92) * fLength_95);
    FinalPosition_16 = vPos_92;
  };
  tmpvar_12.xyz = FinalPosition_16;
  tmpvar_8 = tmpvar_10;
  highp vec3 tmpvar_100;
  tmpvar_100 = (_Object2World * tmpvar_12).xyz;
  highp vec4 v_101;
  v_101.x = _World2Object[0].x;
  v_101.y = _World2Object[1].x;
  v_101.z = _World2Object[2].x;
  v_101.w = _World2Object[3].x;
  highp vec4 v_102;
  v_102.x = _World2Object[0].y;
  v_102.y = _World2Object[1].y;
  v_102.z = _World2Object[2].y;
  v_102.w = _World2Object[3].y;
  highp vec4 v_103;
  v_103.x = _World2Object[0].z;
  v_103.y = _World2Object[1].z;
  v_103.z = _World2Object[2].z;
  v_103.w = _World2Object[3].z;
  highp vec3 tmpvar_104;
  tmpvar_104 = normalize(((
    (v_101.xyz * tmpvar_13.x)
   + 
    (v_102.xyz * tmpvar_13.y)
  ) + (v_103.xyz * tmpvar_13.z)));
  worldNormal_6 = tmpvar_104;
  tmpvar_7 = worldNormal_6;
  lowp vec4 tmpvar_105;
  tmpvar_105.w = 1.0;
  tmpvar_105.xyz = worldNormal_6;
  mediump vec4 normal_106;
  normal_106 = tmpvar_105;
  mediump vec3 x2_107;
  mediump vec4 tmpvar_108;
  tmpvar_108 = (normal_106.xyzz * normal_106.yzzx);
  x2_107.x = dot (unity_SHBr, tmpvar_108);
  x2_107.y = dot (unity_SHBg, tmpvar_108);
  x2_107.z = dot (unity_SHBb, tmpvar_108);
  highp vec3 lightColor0_109;
  lightColor0_109 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_110;
  lightColor1_110 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_111;
  lightColor2_111 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_112;
  lightColor3_112 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_113;
  lightAttenSq_113 = unity_4LightAtten0;
  highp vec3 normal_114;
  normal_114 = worldNormal_6;
  highp vec3 col_115;
  highp vec4 ndotl_116;
  highp vec4 lengthSq_117;
  highp vec4 tmpvar_118;
  tmpvar_118 = (unity_4LightPosX0 - tmpvar_100.x);
  highp vec4 tmpvar_119;
  tmpvar_119 = (unity_4LightPosY0 - tmpvar_100.y);
  highp vec4 tmpvar_120;
  tmpvar_120 = (unity_4LightPosZ0 - tmpvar_100.z);
  lengthSq_117 = (tmpvar_118 * tmpvar_118);
  lengthSq_117 = (lengthSq_117 + (tmpvar_119 * tmpvar_119));
  lengthSq_117 = (lengthSq_117 + (tmpvar_120 * tmpvar_120));
  ndotl_116 = (tmpvar_118 * normal_114.x);
  ndotl_116 = (ndotl_116 + (tmpvar_119 * normal_114.y));
  ndotl_116 = (ndotl_116 + (tmpvar_120 * normal_114.z));
  highp vec4 tmpvar_121;
  tmpvar_121 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_116 * inversesqrt(lengthSq_117)));
  ndotl_116 = tmpvar_121;
  highp vec4 tmpvar_122;
  tmpvar_122 = (tmpvar_121 * (1.0/((1.0 + 
    (lengthSq_117 * lightAttenSq_113)
  ))));
  col_115 = (lightColor0_109 * tmpvar_122.x);
  col_115 = (col_115 + (lightColor1_110 * tmpvar_122.y));
  col_115 = (col_115 + (lightColor2_111 * tmpvar_122.z));
  col_115 = (col_115 + (lightColor3_112 * tmpvar_122.w));
  tmpvar_9 = ((x2_107 + (unity_SHC.xyz * 
    ((normal_106.x * normal_106.x) - (normal_106.y * normal_106.y))
  )) + col_115);
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_7;
  xlv_TEXCOORD1 = tmpvar_100;
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD3 = tmpvar_11;
  xlv_TEXCOORD4 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_9 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_13;
  normalWorld_13 = tmpvar_4;
  mediump vec3 tmpvar_14;
  mediump vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = normalWorld_13;
  mediump vec3 x1_16;
  x1_16.x = dot (unity_SHAr, tmpvar_15);
  x1_16.y = dot (unity_SHAg, tmpvar_15);
  x1_16.z = dot (unity_SHAb, tmpvar_15);
  tmpvar_14 = (xlv_TEXCOORD4 + x1_16);
  lowp vec4 c_17;
  lowp vec4 c_18;
  lowp float diff_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_19 = tmpvar_20;
  c_18.xyz = ((tmpvar_8 * tmpvar_1) * diff_19);
  c_18.w = tmpvar_9;
  c_17.w = c_18.w;
  c_17.xyz = (c_18.xyz + (tmpvar_8 * tmpvar_14));
  c_3.xyz = c_17.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec2 in_TEXCOORD3;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
mediump vec4 t16_0;
highp vec3 t1;
bvec2 tb1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
mediump vec3 t16_14;
highp vec3 t16;
highp int ti16;
highp vec3 t17;
bool tb17;
highp vec3 t22;
highp float t31;
bool tb31;
highp vec2 t34;
highp float t35;
highp vec2 t36;
highp float t46;
bool tb46;
highp float t47;
bool tb47;
highp float t48;
bool tb48;
highp float t49;
mediump float t16_59;
void main()
{
    //Instruction 16724
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 16725
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 16726
    //LT
    tb1.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), t16_0.xxxx).xy;
    //Instruction 16727
    //MUL
    t2.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 16728
    //MAD
    t2.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t2.xyz;
    //Instruction 16729
    //MAD
    t2.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t2.xyz;
    //Instruction 16730
    //DP3
    t31 = dot(t2.xyz, t2.xyz);
    //Instruction 16731
    //RSQ
    t31 = inversesqrt(t31);
    //Instruction 16732
    //MUL
    t2.xyz = vec3(t31) * t2.xyz;
    //Instruction 16733
    //AND
    t2.xyz = mix(vec3(0.0, 0.0, 0.0), t2.xyz, tb1.xxx);
    //Instruction 16734
    //ADD
    t3.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 16735
    //MOV
    t4.x = in_TEXCOORD1.w;
    //Instruction 16736
    //MOV
    t4.yz = in_TEXCOORD3.xy;
    //Instruction 16737
    //ADD
    t4.xyz = (-t3.xyz) + t4.xyz;
    //Instruction 16738
    //MAD
    t3.xyz = unity_LODFade.xxx * t4.xyz + t3.xyz;
    //Instruction 16739
    //LT
    tb31 = t16_0.x<5.000000;
    //Instruction 16740
    //AND
    ti16 = int(uint(tb31) & uint(tb1.y));
    //Instruction 16741
    //IF
    if((uint(ti16))!=uint(0u)){
        //Instruction 16742
        //ADD
        t16.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 16743
        //EQ
        tb31 = t16_0.x==4.000000;
        //Instruction 16744
        //LT
        tb46 = 0.0<in_TEXCOORD2.w;
        //Instruction 16745
        //MOVC
        t4.xy = (bool(tb46)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 16746
        //ADD
        t16.x = t16.x + t4.x;
        //Instruction 16747
        //ADD
        t16.x = t16.x + 0.500000;
        //Instruction 16748
        //FRC
        t16.x = fract(t16.x);
        //Instruction 16749
        //MAD
        t16.x = t16.x * 2.000000 + -1.0;
        //Instruction 16750
        //MUL
        t47 = abs(t16.x) * abs(t16.x);
        //Instruction 16751
        //MAD
        t16.x = -abs(t16.x) * 2.000000 + 3.000000;
        //Instruction 16752
        //MAD
        t16.x = t47 * t16.x + -0.500000;
        //Instruction 16753
        //DP2
        t16.x = dot(t16.xx, t4.yy);
        //Instruction 16754
        //MUL
        t4.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 16755
        //FRC
        t4.xyz = fract(t4.xyz);
        //Instruction 16756
        //MAD
        t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 16757
        //MUL
        t4.xyz = t16.xxx * t4.xyz;
        //Instruction 16758
        //MAD
        t3.xyz = t4.xyz * in_TEXCOORD2.xxx + t3.xyz;
        //Instruction 16759
        //IF
        if(tb31){
            //Instruction 16760
            //MUL
            t4 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 16761
            //FRC
            t4 = fract(t4);
            //Instruction 16762
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 16763
            //MOVC
            t5 = (bool(tb46)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 16764
            //MOVC
            t16.xyz = (bool(tb46)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 16765
            //MUL
            t47 = t4.w * 3.000000;
            //Instruction 16766
            //MAD
            t6.y = t4.w * 3.000000 + t5.x;
            //Instruction 16767
            //MAD
            t6.x = t5.x * 0.750000 + (-t47);
            //Instruction 16768
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 16769
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 16770
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 16771
            //MUL
            t36.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 16772
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 16773
            //MAD
            t6.xy = t36.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 16774
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 16775
            //DP3
            t47 = dot(t3.xyz, t3.xyz);
            //Instruction 16776
            //SQRT
            t47 = sqrt(t47);
            //Instruction 16777
            //MAD
            t48 = t6.x * t6.x + t6.y;
            //Instruction 16778
            //MUL
            t5.x = t5.z * in_TEXCOORD2.x;
            //Instruction 16779
            //MUL
            t48 = t48 * t5.x;
            //Instruction 16780
            //SINCOS
            t5.x = sin(t48);
            t7.x = cos(t48);
            //Instruction 16781
            //ADD
            t48 = (-t7.x) + 1.0;
            //Instruction 16782
            //MUL
            t8 = t4.xxxy * vec4(t48);
            //Instruction 16783
            //MUL
            t22.xyz = t4.zxy * t5.xxx;
            //Instruction 16784
            //MAD
            t9.xy = t8.zy * t4.zy + t22.zx;
            //Instruction 16785
            //MAD
            t10.xy = t8.xw * t4.xy + t7.xx;
            //Instruction 16786
            //MAD
            t9.z = t8.w * t4.z + (-t22.y);
            //Instruction 16787
            //MAD
            t11.xy = t8.yz * t4.yz + (-t22.xz);
            //Instruction 16788
            //MAD
            t11.z = t8.w * t4.z + t22.y;
            //Instruction 16789
            //MUL
            t5.x = t4.z * t4.z;
            //Instruction 16790
            //MAD
            t11.w = t5.x * t48 + t7.x;
            //Instruction 16791
            //MUL
            t7.xyz = t2.yzx * t4.zxy;
            //Instruction 16792
            //MAD
            t7.xyz = t4.yzx * t2.zxy + (-t7.xyz);
            //Instruction 16793
            //DP3
            t17.x = dot(t2.xyz, t4.xyz);
            //Instruction 16794
            //MAX
            t17.x = max(t17.x, -1.0);
            //Instruction 16795
            //MIN
            t17.x = min(t17.x, 1.0);
            //Instruction 16796
            //ADD
            t7.w = t17.x + t7.y;
            //Instruction 16797
            //DP3
            t48 = dot(t7.xzw, t7.xzw);
            //Instruction 16798
            //RSQ
            t48 = inversesqrt(t48);
            //Instruction 16799
            //MUL
            t4.xyz = vec3(t48) * t7.zxw;
            //Instruction 16800
            //ADD
            t48 = -abs(t17.x) + 1.0;
            //Instruction 16801
            //SQRT
            t48 = sqrt(t48);
            //Instruction 16802
            //MAD
            t5.x = abs(t17.x) * -0.018729 + 0.074261;
            //Instruction 16803
            //MAD
            t5.x = t5.x * abs(t17.x) + -0.212114;
            //Instruction 16804
            //MAD
            t5.x = t5.x * abs(t17.x) + 1.570729;
            //Instruction 16805
            //MUL
            t35 = t48 * t5.x;
            //Instruction 16806
            //MAD
            t35 = t35 * -2.000000 + 3.141593;
            //Instruction 16807
            //LT
            tb17 = t17.x<(-t17.x);
            //Instruction 16808
            //AND
            t17.x = tb17 ? t35 : float(0.0);
            //Instruction 16809
            //MAD
            t17.x = t5.x * t48 + t17.x;
            //Instruction 16810
            //MAD
            t48 = (-t6.y) * t6.y + t6.x;
            //Instruction 16811
            //MAD
            t6.x = t4.w * 3.000000 + t16.z;
            //Instruction 16812
            //MUL
            t6.y = t6.x * 0.870000;
            //Instruction 16813
            //ADD
            t5.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 16814
            //FRC
            t5.xz = fract(t5.xz);
            //Instruction 16815
            //MAD
            t5.xz = t5.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 16816
            //MUL
            t6.xy = abs(t5.xz) * abs(t5.xz);
            //Instruction 16817
            //MAD
            t5.xz = -abs(t5.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 16818
            //MAD
            t5.xz = t6.xy * t5.xz + vec2(-0.500000, -0.500000);
            //Instruction 16819
            //ADD
            t5.xz = t5.xz + t5.xz;
            //Instruction 16820
            //MUL
            t46 = t5.z * t5.z;
            //Instruction 16821
            //MAD
            t46 = t46 * t5.x + 1.0;
            //Instruction 16822
            //MUL
            t46 = t46 * 0.500000;
            t46 = clamp(t46, 0.0, 1.0);
            //Instruction 16823
            //LOG
            t46 = log2(t46);
            //Instruction 16824
            //MUL
            t31 = t46 * t16.y;
            //Instruction 16825
            //EXP
            t31 = exp2(t31);
            //Instruction 16826
            //MUL
            t46 = t5.y * t48;
            //Instruction 16827
            //MAD
            t46 = t17.x * t5.w + t46;
            //Instruction 16828
            //MAD
            t16.x = t16.x * t31 + t46;
            //Instruction 16829
            //MUL
            t16.x = t16.x * in_TEXCOORD2.x;
            //Instruction 16830
            //SINCOS
            t5.x = sin(t16.x);
            t6.x = cos(t16.x);
            //Instruction 16831
            //ADD
            t16.x = (-t6.x) + 1.0;
            //Instruction 16832
            //MUL
            t7 = vec4(t4.y * t16.x, t4.y * t16.x, t4.y * t16.x, t4.z * t16.x);
            //Instruction 16833
            //MUL
            t5.xyz = t4.xyz * t5.xxx;
            //Instruction 16834
            //MAD
            t8.xy = t7.zy * t4.xz + t5.zx;
            //Instruction 16835
            //MAD
            t12.xy = t7.xw * t4.yz + t6.xx;
            //Instruction 16836
            //MAD
            t8.z = t7.w * t4.x + (-t5.y);
            //Instruction 16837
            //MAD
            t13.xy = t7.yz * t4.zx + (-t5.xz);
            //Instruction 16838
            //MAD
            t13.z = t7.w * t4.x + t5.y;
            //Instruction 16839
            //MUL
            t31 = t4.x * t4.x;
            //Instruction 16840
            //MAD
            t8.w = t31 * t16.x + t6.x;
            //Instruction 16841
            //MOV
            t10.z = t11.x;
            //Instruction 16842
            //MOV
            t10.w = t9.x;
            //Instruction 16843
            //MOV
            t12.z = t8.y;
            //Instruction 16844
            //MOV
            t12.w = t13.y;
            //Instruction 16845
            //DP3
            t4.x = dot(t10.xzw, t12.xzw);
            //Instruction 16846
            //MOV
            t13.w = t12.y;
            //Instruction 16847
            //DP3
            t4.y = dot(t10.xwz, t13.xzw);
            //Instruction 16848
            //DP3
            t4.z = dot(t10.xzw, t8.xzw);
            //Instruction 16849
            //MOV
            t9.w = t10.y;
            //Instruction 16850
            //DP3
            t5.x = dot(t9.ywz, t12.xzw);
            //Instruction 16851
            //DP3
            t5.y = dot(t9.yzw, t13.xzw);
            //Instruction 16852
            //DP3
            t5.z = dot(t9.ywz, t8.xzw);
            //Instruction 16853
            //DP3
            t6.x = dot(t11.yzw, t12.xzw);
            //Instruction 16854
            //DP3
            t6.y = dot(t11.ywz, t13.xzw);
            //Instruction 16855
            //DP3
            t6.z = dot(t11.yzw, t8.xzw);
            //Instruction 16856
            //DP3
            t16.x = dot(t4.xyz, in_NORMAL0.xyz);
            //Instruction 16857
            //DP3
            t16.y = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 16858
            //DP3
            t16.z = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 16859
            //DP3
            t4.x = dot(t4.xyz, t3.xyz);
            //Instruction 16860
            //DP3
            t4.y = dot(t5.xyz, t3.xyz);
            //Instruction 16861
            //DP3
            t4.z = dot(t6.xyz, t3.xyz);
            //Instruction 16862
            //DP3
            t17.x = dot(t4.xyz, t4.xyz);
            //Instruction 16863
            //RSQ
            t17.x = inversesqrt(t17.x);
            //Instruction 16864
            //MUL
            t4.xyz = t17.xxx * t4.xyz;
            //Instruction 16865
            //MUL
            t3.xyz = vec3(t47) * t4.xyz;
            //Instruction 16866
        //ELSE
        } else {
            //Instruction 16867
            //MOV
            t16.xyz = in_NORMAL0.xyz;
            //Instruction 16868
        //ENDIF
        }
        //Instruction 16869
    //ELSE
    } else {
        //Instruction 16870
        //MOV
        t16.xyz = in_NORMAL0.xyz;
        //Instruction 16871
    //ENDIF
    }
    //Instruction 16872
    //ADD
    t3.xyz = t3.xyz + in_TEXCOORD1.xyz;
    //Instruction 16873
    //GE
    tb17 = t16_0.x>=3.000000;
    //Instruction 16874
    //IF
    if(tb17){
        //Instruction 16875
        //EQ
        tb17 = t16_0.x==5.000000;
        //Instruction 16876
        //IF
        if(tb17){
            //Instruction 16877
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 16878
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 16879
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 16880
            //DP3
            t17.x = dot(t4.xyz, t4.xyz);
            //Instruction 16881
            //RSQ
            t17.x = inversesqrt(t17.x);
            //Instruction 16882
            //MUL
            t4.xyz = t17.xxx * t4.xyz;
            //Instruction 16883
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 16884
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 16885
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 16886
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 16887
            //ADD
            t17.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 16888
            //ADD
            t17.x = t17.x + _ST_WindBranch.x;
            //Instruction 16889
            //ADD
            t0.x = t17.x + in_TEXCOORD0.w;
            //Instruction 16890
            //MAD
            t0.y = t17.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 16891
            //MUL
            t47 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 16892
            //MUL
            t0.z = t47 * 0.500000;
            //Instruction 16893
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 16894
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 16895
            //FRC
            t0 = fract(t0);
            //Instruction 16896
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 16897
            //MUL
            t6 = abs(t0) * abs(t0);
            //Instruction 16898
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 16899
            //MAD
            t0 = t6 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 16900
            //ADD
            t0 = t0 + t0;
            //Instruction 16901
            //MUL
            t6.w = t0.z * t0.y;
            //Instruction 16902
            //LT
            tb47 = t6.w<0.0;
            //Instruction 16903
            //MOV
            t6.y = (-t6.w);
            //Instruction 16904
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 16905
            //MOVC
            t6.xy = (bool(tb47)) ? t6.xy : t6.zw;
            //Instruction 16906
            //MAD
            t47 = (-t0.y) * t0.z + t6.x;
            //Instruction 16907
            //MAD
            t47 = t6.y * t47 + t6.w;
            //Instruction 16908
            //ADD
            t48 = (-t47) + t6.x;
            //Instruction 16909
            //MAD
            t47 = t6.y * t48 + t47;
            //Instruction 16910
            //MUL
            t47 = t47 * _ST_WindBranchTwitch.x;
            //Instruction 16911
            //ADD
            t48 = (-_ST_WindVector.w) + 1.0;
            //Instruction 16912
            //ADD
            t49 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 16913
            //MUL
            t49 = t0.x * t49;
            //Instruction 16914
            //MAD
            t47 = t47 * t48 + t49;
            //Instruction 16915
            //MAD
            t48 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 16916
            //MUL
            t47 = t47 * t48;
            //Instruction 16917
            //MUL
            t5.xyz = vec3(t47) * t5.xyz;
            //Instruction 16918
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 16919
            //MAD
            t6.x = t17.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 16920
            //MUL
            t17.x = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 16921
            //MAD
            t6.y = t17.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 16922
            //ADD
            t17.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 16923
            //FRC
            t17.xz = fract(t17.xz);
            //Instruction 16924
            //MAD
            t17.xz = t17.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 16925
            //MUL
            t6.xy = abs(t17.xz) * abs(t17.xz);
            //Instruction 16926
            //MAD
            t17.xz = -abs(t17.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 16927
            //MAD
            t17.xz = t6.xy * t17.xz + vec2(-0.500000, -0.500000);
            //Instruction 16928
            //ADD
            t17.xz = t17.xz + t17.xz;
            //Instruction 16929
            //MUL
            t17.xz = t17.xz * t17.xz;
            //Instruction 16930
            //MUL
            t17.x = t17.x * t17.z;
            //Instruction 16931
            //MAD
            t17.x = (-t17.x) * _ST_WindTurbulences.x + 1.0;
            //Instruction 16932
            //MUL
            t47 = t0.w * _ST_WindVector.w;
            //Instruction 16933
            //MAD
            t17.x = t47 * _ST_WindBranchWhip.x + t17.x;
            //Instruction 16934
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 16935
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 16936
            //MUL
            t4.xyz = t17.xxx * t4.xyz;
            //Instruction 16937
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 16938
        //ELSE
        } else {
            //Instruction 16939
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 16940
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 16941
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 16942
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 16943
            //ADD
            t17.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 16944
            //ADD
            t17.x = t17.x + _ST_WindBranch.x;
            //Instruction 16945
            //ADD
            t5.x = t17.x + in_TEXCOORD0.w;
            //Instruction 16946
            //MAD
            t5.y = t17.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 16947
            //MUL
            t17.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 16948
            //MUL
            t5.z = t17.x * 0.500000;
            //Instruction 16949
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 16950
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 16951
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 16952
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 16953
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 16954
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 16955
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 16956
            //MUL
            t0.w = t5.z * t5.y;
            //Instruction 16957
            //LT
            tb17 = t0.w<0.0;
            //Instruction 16958
            //MOV
            t0.y = (-t0.w);
            //Instruction 16959
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 16960
            //MOVC
            t17.xz = (bool(tb17)) ? t0.xy : t0.zw;
            //Instruction 16961
            //MAD
            t48 = (-t5.y) * t5.z + t17.x;
            //Instruction 16962
            //MAD
            t48 = t17.z * t48 + t0.w;
            //Instruction 16963
            //ADD
            t17.x = t17.x + (-t48);
            //Instruction 16964
            //MAD
            t17.x = t17.z * t17.x + t48;
            //Instruction 16965
            //MUL
            t17.x = t17.x * _ST_WindBranchTwitch.x;
            //Instruction 16966
            //ADD
            t47 = (-_ST_WindVector.w) + 1.0;
            //Instruction 16967
            //ADD
            t48 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 16968
            //MUL
            t48 = t48 * t5.x;
            //Instruction 16969
            //MAD
            t17.x = t17.x * t47 + t48;
            //Instruction 16970
            //MUL
            t4.xyz = t17.xxx * t4.xyz;
            //Instruction 16971
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 16972
        //ENDIF
        }
        //Instruction 16973
    //ENDIF
    }
    //Instruction 16974
    //DP3
    t17.x = dot(t3.xyz, t3.xyz);
    //Instruction 16975
    //SQRT
    t17.x = sqrt(t17.x);
    //Instruction 16976
    //DIV
    t47 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 16977
    //MAD
    t47 = (-t47) * 0.250000 + t3.y;
    //Instruction 16978
    //MAX
    t47 = max(t47, 0.0);
    //Instruction 16979
    //MUL
    t47 = t47 * _ST_WindGlobal.z;
    //Instruction 16980
    //NE
    tb48 = t47!=0.0;
    //Instruction 16981
    //LOG
    t4.x = log2(t47);
    //Instruction 16982
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 16983
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 16984
    //MOVC
    t47 = (tb48) ? t4.x : t47;
    //Instruction 16985
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 16986
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 16987
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 16988
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 16989
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 16990
    //MUL
    t34.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 16991
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 16992
    //MAD
    t4.xy = t34.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 16993
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 16994
    //MAD
    t48 = t4.y * t4.y + t4.x;
    //Instruction 16995
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 16996
    //MAD
    t48 = _ST_WindGlobal.y * t48 + t4.x;
    //Instruction 16997
    //MUL
    t47 = t47 * t48;
    //Instruction 16998
    //MAD
    t4.xz = t2.xz * vec2(t47) + t3.xz;
    //Instruction 16999
    //MOV
    t4.y = t3.y;
    //Instruction 17000
    //DP3
    t2.x = dot(t4.xyz, t4.xyz);
    //Instruction 17001
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 17002
    //MUL
    t2.xzw = t2.xxx * t4.xyz;
    //Instruction 17003
    //MUL
    t2.xyz = t17.xxx * t2.xzw;
    //Instruction 17004
    //MOVC
    t2.xyz = (tb1.x) ? t2.xyz : t3.xyz;
    //Instruction 17005
    //MUL
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 17006
    //MAD
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    //Instruction 17007
    //MAD
    t0 = glstate_matrix_mvp[2] * t2.zzzz + t0;
    //Instruction 17008
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 17009
    //MUL
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 17010
    //MAD
    t2.xyw = _Object2World[0].xyz * t2.xxx + t3.xyz;
    //Instruction 17011
    //MAD
    t2.xyz = _Object2World[2].xyz * t2.zzz + t2.xyw;
    //Instruction 17012
    //MAD
    t2.xyz = _Object2World[3].xyz * in_POSITION0.www + t2.xyz;
    //Instruction 17013
    //MOV
    t3.x = _World2Object[0].x;
    //Instruction 17014
    //MOV
    t3.y = _World2Object[1].x;
    //Instruction 17015
    //MOV
    t3.z = _World2Object[2].x;
    //Instruction 17016
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 17017
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 17018
    //MOV
    t4.z = _World2Object[2].y;
    //Instruction 17019
    //MUL
    t4.xyz = t16.yyy * t4.xyz;
    //Instruction 17020
    //MAD
    t1.xyz = t3.xyz * t16.xxx + t4.xyz;
    //Instruction 17021
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 17022
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 17023
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 17024
    //MAD
    t1.xyz = t3.xyz * t16.zzz + t1.xyz;
    //Instruction 17025
    //DP3
    t46 = dot(t1.xyz, t1.xyz);
    //Instruction 17026
    //RSQ
    t46 = inversesqrt(t46);
    //Instruction 17027
    //MUL
    t1.xyz = vec3(t46) * t1.xyz;
    //Instruction 17028
    //MUL
    t16_0 = t1.yzzx * t1.xyzz;
    //Instruction 17029
    //DP4
    t16_14.x = dot(unity_SHBr, t16_0);
    //Instruction 17030
    //DP4
    t16_14.y = dot(unity_SHBg, t16_0);
    //Instruction 17031
    //DP4
    t16_14.z = dot(unity_SHBb, t16_0);
    //Instruction 17032
    //MUL
    t16_59 = t1.y * t1.y;
    //Instruction 17033
    //MAD
    t16_59 = t1.x * t1.x + (-t16_59);
    //Instruction 17034
    //MAD
    t16_14.xyz = unity_SHC.xyz * vec3(t16_59) + t16_14.xyz;
    //Instruction 17035
    //ADD
    t0 = (-t2.xxxx) + unity_4LightPosX0;
    //Instruction 17036
    //ADD
    t3 = (-t2.yyyy) + unity_4LightPosY0;
    //Instruction 17037
    //ADD
    t4 = (-t2.zzzz) + unity_4LightPosZ0;
    //Instruction 17038
    //MUL
    t5 = t3 * t3;
    //Instruction 17039
    //MAD
    t5 = t0 * t0 + t5;
    //Instruction 17040
    //MAD
    t5 = t4 * t4 + t5;
    //Instruction 17041
    //MUL
    t3 = t1.yyyy * t3;
    //Instruction 17042
    //MAD
    t0 = t0 * t1.xxxx + t3;
    //Instruction 17043
    //MAD
    t0 = t4 * t1.zzzz + t0;
    //Instruction 17044
    //RSQ
    t3 = inversesqrt(t5);
    //Instruction 17045
    //MUL
    t0 = t0 * t3;
    //Instruction 17046
    //MAX
    t0 = max(t0, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 17047
    //MAD
    t3 = t5 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 17048
    //DIV
    t3 = vec4(1.0, 1.0, 1.0, 1.0) / t3;
    //Instruction 17049
    //MUL
    t0 = t0 * t3;
    //Instruction 17050
    //MUL
    t3.xyz = t0.yyy * unity_LightColor[1].xyz;
    //Instruction 17051
    //MAD
    t3.xyz = unity_LightColor[0].xyz * t0.xxx + t3.xyz;
    //Instruction 17052
    //MAD
    t3.xyz = unity_LightColor[2].xyz * t0.zzz + t3.xyz;
    //Instruction 17053
    //MAD
    t3.xyz = unity_LightColor[3].xyz * t0.www + t3.xyz;
    //Instruction 17054
    //ADD
    t3.xyz = t3.xyz + t16_14.xyz;
    //Instruction 17055
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 17056
    //MOV
    vs_TEXCOORD1.xyz = t2.xyz;
    //Instruction 17057
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 17058
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 17059
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 17060
    //MOV
    vs_TEXCOORD4.xyz = t3.xyz;
    //Instruction 17061
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump float t16_14;
void main()
{
    //Instruction 16705
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 16706
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 16707
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 16708
    //LT
    tb0 = t10_1<0.0;
    //Instruction 16709
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 16710
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 16711
    //MOV
    t16_0.w = 1.0;
    //Instruction 16712
    //DP4
    t16_3.x = dot(unity_SHAr, t16_0);
    //Instruction 16713
    //DP4
    t16_3.y = dot(unity_SHAg, t16_0);
    //Instruction 16714
    //DP4
    t16_3.z = dot(unity_SHAb, t16_0);
    //Instruction 16715
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD4.xyz;
    //Instruction 16716
    //MUL
    t16_3.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 16717
    //MUL
    t16_2.xyz = t16_2.xyz * _LightColor0.xyz;
    //Instruction 16718
    //DP3
    t16_14 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 16719
    //MAX
    t16_14 = max(t16_14, 0.0);
    //Instruction 16720
    //MAD
    t16_2.xyz = t16_2.xyz * vec3(t16_14) + t16_3.xyz;
    //Instruction 16721
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 16722
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 16723
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesMultiTexCoord3;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  tmpvar_4 = _glesMultiTexCoord1;
  highp vec2 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord3.xy;
  lowp vec3 worldNormal_6;
  mediump vec3 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec4 tmpvar_10;
  lowp vec4 tmpvar_11;
  mediump vec3 tmpvar_12;
  tmpvar_12.xy = tmpvar_3.xy;
  tmpvar_11.w = _Color.w;
  tmpvar_11.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  FinalPosition_17 = tmpvar_1.xyz;
  highp vec3 tmpvar_18;
  tmpvar_18.x = _Object2World[3].x;
  tmpvar_18.y = _Object2World[3].y;
  tmpvar_18.z = _Object2World[3].z;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_17 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp vec3 tmpvar_22;
  tmpvar_22.x = tmpvar_4.w;
  tmpvar_22.y = tmpvar_5.x;
  tmpvar_22.z = tmpvar_5.y;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (FinalPosition_17, tmpvar_22, unity_LODFade.xxx);
  FinalPosition_17 = tmpvar_23;
  if (((tmpvar_19 > 1.0) && (tmpvar_19 < 5.0))) {
    highp float tmpvar_24;
    tmpvar_24 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_25;
    isBestWind_25 = (tmpvar_19 == 4.0);
    bool bLeaf2_26;
    bLeaf2_26 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_27;
    vPos_27 = tmpvar_23;
    highp vec3 vDirection_28;
    vDirection_28 = tmpvar_2;
    highp float tmpvar_29;
    if (bLeaf2_26) {
      tmpvar_29 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_30;
    if (bLeaf2_26) {
      tmpvar_30 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_30 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_31;
    highp vec4 tmpvar_32;
    tmpvar_32.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_32.x = (tmpvar_29 + tmpvar_24);
    highp vec4 tmpvar_33;
    tmpvar_33 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    vPos_31 = (tmpvar_23 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_30 * (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_28 = tmpvar_2;
    vPos_27 = vPos_31;
    if (isBestWind_25) {
      highp vec3 tmpvar_34;
      tmpvar_34 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_35;
      if (bLeaf2_26) {
        tmpvar_35 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_36;
      if (bLeaf2_26) {
        tmpvar_36 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_37;
      if (bLeaf2_26) {
        tmpvar_37 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_38;
      if (bLeaf2_26) {
        tmpvar_38 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_39;
      if (bLeaf2_26) {
        tmpvar_39 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_39 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_40;
      if (bLeaf2_26) {
        tmpvar_40 = bool(1);
      } else {
        tmpvar_40 = bool(1);
      };
      highp float fTwitch_41;
      highp vec3 vAxis_42;
      highp float fOsc_43;
      highp vec3 vOriginPos_44;
      highp vec3 tmpvar_45;
      tmpvar_45 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_46;
      tmpvar_46 = ((tmpvar_45.x + tmpvar_45.y) + tmpvar_45.z);
      highp vec4 tmpvar_47;
      tmpvar_47.x = (tmpvar_35 + tmpvar_46);
      tmpvar_47.y = ((tmpvar_35 * 0.75) - tmpvar_46);
      tmpvar_47.z = ((tmpvar_35 * 0.01) + tmpvar_46);
      tmpvar_47.w = (tmpvar_35 + tmpvar_46);
      highp vec4 tmpvar_48;
      highp vec4 tmpvar_49;
      tmpvar_49 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      tmpvar_48 = (((
        (tmpvar_49 * tmpvar_49)
       * 
        (3.0 - (2.0 * tmpvar_49))
      ) - 0.5) * 2.0);
      vOriginPos_44 = vPos_31;
      highp float tmpvar_50;
      tmpvar_50 = sqrt(dot (vPos_31, vPos_31));
      highp float fAngle_51;
      fAngle_51 = ((_glesMultiTexCoord2.x * tmpvar_37) * (tmpvar_48.x + (tmpvar_48.y * tmpvar_48.y)));
      highp vec2 vSinCos_52;
      vSinCos_52.x = sin(fAngle_51);
      vSinCos_52.y = cos(fAngle_51);
      highp float tmpvar_53;
      tmpvar_53 = (1.0 - vSinCos_52.y);
      highp mat3 tmpvar_54;
      tmpvar_54[0].x = (((tmpvar_53 * tmpvar_34.x) * tmpvar_34.x) + vSinCos_52.y);
      tmpvar_54[0].y = (((tmpvar_53 * tmpvar_34.x) * tmpvar_34.y) + (vSinCos_52.x * tmpvar_34.z));
      tmpvar_54[0].z = (((tmpvar_53 * tmpvar_34.x) * tmpvar_34.z) - (vSinCos_52.x * tmpvar_34.y));
      tmpvar_54[1].x = (((tmpvar_53 * tmpvar_34.x) * tmpvar_34.y) - (vSinCos_52.x * tmpvar_34.z));
      tmpvar_54[1].y = (((tmpvar_53 * tmpvar_34.y) * tmpvar_34.y) + vSinCos_52.y);
      tmpvar_54[1].z = (((tmpvar_53 * tmpvar_34.y) * tmpvar_34.z) + (vSinCos_52.x * tmpvar_34.x));
      tmpvar_54[2].x = (((tmpvar_53 * tmpvar_34.x) * tmpvar_34.z) + (vSinCos_52.x * tmpvar_34.y));
      tmpvar_54[2].y = (((tmpvar_53 * tmpvar_34.y) * tmpvar_34.z) - (vSinCos_52.x * tmpvar_34.x));
      tmpvar_54[2].z = (((tmpvar_53 * tmpvar_34.z) * tmpvar_34.z) + vSinCos_52.y);
      highp vec3 tmpvar_55;
      tmpvar_55 = ((tmpvar_34.yzx * vRotatedWindVector_16.zxy) - (tmpvar_34.zxy * vRotatedWindVector_16.yzx));
      vAxis_42.xz = tmpvar_55.xz;
      highp float tmpvar_56;
      tmpvar_56 = clamp (dot (vRotatedWindVector_16, tmpvar_34), -1.0, 1.0);
      vAxis_42.y = (tmpvar_55.y + tmpvar_56);
      highp vec3 tmpvar_57;
      tmpvar_57 = normalize(vAxis_42);
      vAxis_42 = tmpvar_57;
      highp float tmpvar_58;
      tmpvar_58 = (1.570796 - (sign(tmpvar_56) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_56))) * (1.570796 + (abs(tmpvar_56) * (-0.2146018 + 
          (abs(tmpvar_56) * (0.08656672 + (abs(tmpvar_56) * -0.03102955)))
        ))))
      )));
      fOsc_43 = (tmpvar_48.y - (tmpvar_48.x * tmpvar_48.x));
      fTwitch_41 = 0.0;
      if (tmpvar_40) {
        highp float fTime_59;
        fTime_59 = (tmpvar_39.z + tmpvar_46);
        highp vec4 tmpvar_60;
        tmpvar_60.zw = vec2(0.0, 0.0);
        tmpvar_60.x = fTime_59;
        tmpvar_60.y = (0.87 * fTime_59);
        highp vec4 tmpvar_61;
        highp vec4 tmpvar_62;
        tmpvar_62 = abs(((
          fract((tmpvar_60 + 0.5))
         * 2.0) - 1.0));
        tmpvar_61 = (((
          (tmpvar_62 * tmpvar_62)
         * 
          (3.0 - (2.0 * tmpvar_62))
        ) - 0.5) * 2.0);
        fTwitch_41 = (tmpvar_39.x * pow (clamp (
          ((((tmpvar_61.x * tmpvar_61.y) * tmpvar_61.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_39.y));
      };
      highp float fAngle_63;
      fAngle_63 = (_glesMultiTexCoord2.x * ((
        (tmpvar_58 * tmpvar_38)
       + 
        (fOsc_43 * tmpvar_36)
      ) + fTwitch_41));
      highp vec2 vSinCos_64;
      vSinCos_64.x = sin(fAngle_63);
      vSinCos_64.y = cos(fAngle_63);
      highp float tmpvar_65;
      tmpvar_65 = (1.0 - vSinCos_64.y);
      highp mat3 tmpvar_66;
      tmpvar_66[0].x = (((tmpvar_65 * tmpvar_57.x) * tmpvar_57.x) + vSinCos_64.y);
      tmpvar_66[0].y = (((tmpvar_65 * tmpvar_57.x) * tmpvar_57.y) + (vSinCos_64.x * tmpvar_57.z));
      tmpvar_66[0].z = (((tmpvar_65 * tmpvar_57.x) * tmpvar_57.z) - (vSinCos_64.x * tmpvar_57.y));
      tmpvar_66[1].x = (((tmpvar_65 * tmpvar_57.x) * tmpvar_57.y) - (vSinCos_64.x * tmpvar_57.z));
      tmpvar_66[1].y = (((tmpvar_65 * tmpvar_57.y) * tmpvar_57.y) + vSinCos_64.y);
      tmpvar_66[1].z = (((tmpvar_65 * tmpvar_57.y) * tmpvar_57.z) + (vSinCos_64.x * tmpvar_57.x));
      tmpvar_66[2].x = (((tmpvar_65 * tmpvar_57.x) * tmpvar_57.z) + (vSinCos_64.x * tmpvar_57.y));
      tmpvar_66[2].y = (((tmpvar_65 * tmpvar_57.y) * tmpvar_57.z) - (vSinCos_64.x * tmpvar_57.x));
      tmpvar_66[2].z = (((tmpvar_65 * tmpvar_57.z) * tmpvar_57.z) + vSinCos_64.y);
      highp mat3 tmpvar_67;
      tmpvar_67 = (tmpvar_54 * tmpvar_66);
      vOriginPos_44 = (normalize((tmpvar_67 * vPos_31)) * tmpvar_50);
      vDirection_28 = (tmpvar_67 * _glesNormal);
      vPos_27 = vOriginPos_44;
    };
    tmpvar_14 = vDirection_28;
    FinalPosition_17 = vPos_27;
  };
  FinalPosition_17 = (FinalPosition_17 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_68;
    vPos_68 = FinalPosition_17;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_69;
      vPos_69 = FinalPosition_17;
      highp float fTime_70;
      highp float fAdherenceScale_71;
      highp vec3 vWindVector_72;
      vWindVector_72 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_70 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_73;
      highp float fOscillation_74;
      fOscillation_74 = 1.0;
      highp float fAmount_75;
      highp float fTarget_76;
      highp vec4 tmpvar_77;
      tmpvar_77.x = (fTime_70 + _glesMultiTexCoord0.w);
      tmpvar_77.y = ((fTime_70 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_77.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_70 + _glesMultiTexCoord0.w));
      tmpvar_77.w = ((fTime_70 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_78;
      tmpvar_78 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      vOscillations_73 = (((
        (tmpvar_78 * tmpvar_78)
       * 
        (3.0 - (2.0 * tmpvar_78))
      ) - 0.5) * 2.0);
      highp float tmpvar_79;
      tmpvar_79 = (vOscillations_73.y * vOscillations_73.z);
      fTarget_76 = 1.0;
      fAmount_75 = tmpvar_79;
      if ((tmpvar_79 < 0.0)) {
        fTarget_76 = -1.0;
        fAmount_75 = -(tmpvar_79);
      };
      fOscillation_74 = (((
        mix (mix (tmpvar_79, fTarget_76, fAmount_75), fTarget_76, fAmount_75)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_73.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_74 = (fOscillation_74 * (1.0 + (vOscillations_73.w * _ST_WindBranchWhip.x)));
      vPos_69 = (FinalPosition_17 + ((vWindVector_72 * fOscillation_74) * _ST_WindBranch.y));
      highp vec4 tmpvar_80;
      tmpvar_80.zw = vec2(0.0, 0.0);
      tmpvar_80.x = ((fTime_70 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_80.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_81;
      highp vec4 tmpvar_82;
      tmpvar_82 = abs(((
        fract((tmpvar_80 + 0.5))
       * 2.0) - 1.0));
      tmpvar_81 = (((
        (tmpvar_82 * tmpvar_82)
       * 
        (3.0 - (2.0 * tmpvar_82))
      ) - 0.5) * 2.0);
      fAdherenceScale_71 = (1.0 - ((tmpvar_81.x * tmpvar_81.y) * (
        (tmpvar_81.x * tmpvar_81.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_71 = (fAdherenceScale_71 + ((vOscillations_73.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_69 = (vPos_69 + ((
        ((vRotatedBranchAnchor_15 - vPos_69) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_71) * _glesMultiTexCoord0.z));
      vPos_68 = vPos_69;
    } else {
      highp vec3 vPos_83;
      vPos_83 = vPos_68;
      highp float fTime_84;
      highp vec3 vWindVector_85;
      vWindVector_85 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_84 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_86;
      highp float fOscillation_87;
      fOscillation_87 = 1.0;
      highp float fAmount_88;
      highp float fTarget_89;
      highp vec4 tmpvar_90;
      tmpvar_90.w = 0.0;
      tmpvar_90.x = (fTime_84 + _glesMultiTexCoord0.w);
      tmpvar_90.y = ((fTime_84 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_90.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_84 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_91;
      tmpvar_91 = abs(((
        fract((tmpvar_90 + 0.5))
       * 2.0) - 1.0));
      vOscillations_86 = (((
        (tmpvar_91 * tmpvar_91)
       * 
        (3.0 - (2.0 * tmpvar_91))
      ) - 0.5) * 2.0);
      highp float tmpvar_92;
      tmpvar_92 = (vOscillations_86.y * vOscillations_86.z);
      fTarget_89 = 1.0;
      fAmount_88 = tmpvar_92;
      if ((tmpvar_92 < 0.0)) {
        fTarget_89 = -1.0;
        fAmount_88 = -(tmpvar_92);
      };
      fOscillation_87 = (((
        mix (mix (tmpvar_92, fTarget_89, fAmount_88), fTarget_89, fAmount_88)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_86.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_83 = (vPos_68 + ((vWindVector_85 * fOscillation_87) * _ST_WindBranch.y));
      vPos_68 = vPos_83;
    };
    FinalPosition_17 = vPos_68;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_93;
    vPos_93 = FinalPosition_17;
    highp float fMoveAmount_94;
    highp float fAdjust_95;
    highp float fLength_96;
    fLength_96 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_97;
    tmpvar_97 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_95 = tmpvar_97;
    if ((tmpvar_97 != 0.0)) {
      fAdjust_95 = pow (tmpvar_97, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_98;
    tmpvar_98.zw = vec2(0.0, 0.0);
    tmpvar_98.x = (tmpvar_18.x + _ST_WindGlobal.x);
    tmpvar_98.y = (tmpvar_18.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_99;
    highp vec4 tmpvar_100;
    tmpvar_100 = abs(((
      fract((tmpvar_98 + 0.5))
     * 2.0) - 1.0));
    tmpvar_99 = (((
      (tmpvar_100 * tmpvar_100)
     * 
      (3.0 - (2.0 * tmpvar_100))
    ) - 0.5) * 2.0);
    fMoveAmount_94 = ((_ST_WindGlobal.y * (tmpvar_99.x + 
      (tmpvar_99.y * tmpvar_99.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_94 = (fMoveAmount_94 * fAdjust_95);
    vPos_93.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_94));
    vPos_93 = (normalize(vPos_93) * fLength_96);
    FinalPosition_17 = vPos_93;
  };
  tmpvar_13.xyz = FinalPosition_17;
  tmpvar_8 = tmpvar_11;
  highp vec3 tmpvar_101;
  tmpvar_101 = (_Object2World * tmpvar_13).xyz;
  highp vec4 v_102;
  v_102.x = _World2Object[0].x;
  v_102.y = _World2Object[1].x;
  v_102.z = _World2Object[2].x;
  v_102.w = _World2Object[3].x;
  highp vec4 v_103;
  v_103.x = _World2Object[0].y;
  v_103.y = _World2Object[1].y;
  v_103.z = _World2Object[2].y;
  v_103.w = _World2Object[3].y;
  highp vec4 v_104;
  v_104.x = _World2Object[0].z;
  v_104.y = _World2Object[1].z;
  v_104.z = _World2Object[2].z;
  v_104.w = _World2Object[3].z;
  highp vec3 tmpvar_105;
  tmpvar_105 = normalize(((
    (v_102.xyz * tmpvar_14.x)
   + 
    (v_103.xyz * tmpvar_14.y)
  ) + (v_104.xyz * tmpvar_14.z)));
  worldNormal_6 = tmpvar_105;
  tmpvar_7 = worldNormal_6;
  lowp vec4 tmpvar_106;
  tmpvar_106.w = 1.0;
  tmpvar_106.xyz = worldNormal_6;
  mediump vec4 normal_107;
  normal_107 = tmpvar_106;
  mediump vec3 x2_108;
  mediump vec4 tmpvar_109;
  tmpvar_109 = (normal_107.xyzz * normal_107.yzzx);
  x2_108.x = dot (unity_SHBr, tmpvar_109);
  x2_108.y = dot (unity_SHBg, tmpvar_109);
  x2_108.z = dot (unity_SHBb, tmpvar_109);
  highp vec3 lightColor0_110;
  lightColor0_110 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_111;
  lightColor1_111 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_112;
  lightColor2_112 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_113;
  lightColor3_113 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_114;
  lightAttenSq_114 = unity_4LightAtten0;
  highp vec3 normal_115;
  normal_115 = worldNormal_6;
  highp vec3 col_116;
  highp vec4 ndotl_117;
  highp vec4 lengthSq_118;
  highp vec4 tmpvar_119;
  tmpvar_119 = (unity_4LightPosX0 - tmpvar_101.x);
  highp vec4 tmpvar_120;
  tmpvar_120 = (unity_4LightPosY0 - tmpvar_101.y);
  highp vec4 tmpvar_121;
  tmpvar_121 = (unity_4LightPosZ0 - tmpvar_101.z);
  lengthSq_118 = (tmpvar_119 * tmpvar_119);
  lengthSq_118 = (lengthSq_118 + (tmpvar_120 * tmpvar_120));
  lengthSq_118 = (lengthSq_118 + (tmpvar_121 * tmpvar_121));
  ndotl_117 = (tmpvar_119 * normal_115.x);
  ndotl_117 = (ndotl_117 + (tmpvar_120 * normal_115.y));
  ndotl_117 = (ndotl_117 + (tmpvar_121 * normal_115.z));
  highp vec4 tmpvar_122;
  tmpvar_122 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_117 * inversesqrt(lengthSq_118)));
  ndotl_117 = tmpvar_122;
  highp vec4 tmpvar_123;
  tmpvar_123 = (tmpvar_122 * (1.0/((1.0 + 
    (lengthSq_118 * lightAttenSq_114)
  ))));
  col_116 = (lightColor0_110 * tmpvar_123.x);
  col_116 = (col_116 + (lightColor1_111 * tmpvar_123.y));
  col_116 = (col_116 + (lightColor2_112 * tmpvar_123.z));
  col_116 = (col_116 + (lightColor3_113 * tmpvar_123.w));
  tmpvar_9 = ((x2_108 + (unity_SHC.xyz * 
    ((normal_107.x * normal_107.x) - (normal_107.y * normal_107.y))
  )) + col_116);
  tmpvar_10 = (unity_World2Shadow[0] * (_Object2World * tmpvar_13));
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_7;
  xlv_TEXCOORD1 = tmpvar_101;
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_10 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp float tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD5).x > 
    (xlv_TEXCOORD5.z / xlv_TEXCOORD5.w)
  )), _LightShadowData.x);
  tmpvar_14 = tmpvar_15;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_14;
  mediump vec3 normalWorld_16;
  normalWorld_16 = tmpvar_5;
  mediump vec3 tmpvar_17;
  mediump vec3 tmpvar_18;
  mediump vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = normalWorld_16;
  mediump vec3 x1_20;
  x1_20.x = dot (unity_SHAr, tmpvar_19);
  x1_20.y = dot (unity_SHAg, tmpvar_19);
  x1_20.z = dot (unity_SHAb, tmpvar_19);
  tmpvar_18 = (xlv_TEXCOORD4 + x1_20);
  tmpvar_17 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_17;
  lowp vec4 c_21;
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_23 = tmpvar_24;
  c_22.xyz = ((tmpvar_9 * tmpvar_17) * diff_23);
  c_22.w = tmpvar_10;
  c_21.w = c_22.w;
  c_21.xyz = (c_22.xyz + (tmpvar_9 * tmpvar_18));
  c_4.xyz = c_21.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesMultiTexCoord3;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  tmpvar_4 = _glesMultiTexCoord1;
  highp vec2 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord3.xy;
  lowp vec3 worldNormal_6;
  mediump vec3 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  lowp vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  tmpvar_11.xy = tmpvar_3.xy;
  tmpvar_10.w = _Color.w;
  tmpvar_10.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_1;
  tmpvar_13 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  FinalPosition_16 = tmpvar_1.xyz;
  highp vec3 tmpvar_17;
  tmpvar_17.x = _Object2World[3].x;
  tmpvar_17.y = _Object2World[3].y;
  tmpvar_17.z = _Object2World[3].z;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_16 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp vec3 tmpvar_21;
  tmpvar_21.x = tmpvar_4.w;
  tmpvar_21.y = tmpvar_5.x;
  tmpvar_21.z = tmpvar_5.y;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (FinalPosition_16, tmpvar_21, unity_LODFade.xxx);
  FinalPosition_16 = tmpvar_22;
  if (((tmpvar_18 > 1.0) && (tmpvar_18 < 5.0))) {
    highp float tmpvar_23;
    tmpvar_23 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_24;
    isBestWind_24 = (tmpvar_18 == 4.0);
    bool bLeaf2_25;
    bLeaf2_25 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_26;
    vPos_26 = tmpvar_22;
    highp vec3 vDirection_27;
    vDirection_27 = tmpvar_2;
    highp float tmpvar_28;
    if (bLeaf2_25) {
      tmpvar_28 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_28 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_29;
    if (bLeaf2_25) {
      tmpvar_29 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_30;
    highp vec4 tmpvar_31;
    tmpvar_31.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_31.x = (tmpvar_28 + tmpvar_23);
    highp vec4 tmpvar_32;
    tmpvar_32 = abs(((
      fract((tmpvar_31 + 0.5))
     * 2.0) - 1.0));
    vPos_30 = (tmpvar_22 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_29 * (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_27 = tmpvar_2;
    vPos_26 = vPos_30;
    if (isBestWind_24) {
      highp vec3 tmpvar_33;
      tmpvar_33 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_34;
      if (bLeaf2_25) {
        tmpvar_34 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_35;
      if (bLeaf2_25) {
        tmpvar_35 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_36;
      if (bLeaf2_25) {
        tmpvar_36 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_37;
      if (bLeaf2_25) {
        tmpvar_37 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_38;
      if (bLeaf2_25) {
        tmpvar_38 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_38 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_39;
      if (bLeaf2_25) {
        tmpvar_39 = bool(1);
      } else {
        tmpvar_39 = bool(1);
      };
      highp float fTwitch_40;
      highp vec3 vAxis_41;
      highp float fOsc_42;
      highp vec3 vOriginPos_43;
      highp vec3 tmpvar_44;
      tmpvar_44 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_45;
      tmpvar_45 = ((tmpvar_44.x + tmpvar_44.y) + tmpvar_44.z);
      highp vec4 tmpvar_46;
      tmpvar_46.x = (tmpvar_34 + tmpvar_45);
      tmpvar_46.y = ((tmpvar_34 * 0.75) - tmpvar_45);
      tmpvar_46.z = ((tmpvar_34 * 0.01) + tmpvar_45);
      tmpvar_46.w = (tmpvar_34 + tmpvar_45);
      highp vec4 tmpvar_47;
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      tmpvar_47 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      vOriginPos_43 = vPos_30;
      highp float tmpvar_49;
      tmpvar_49 = sqrt(dot (vPos_30, vPos_30));
      highp float fAngle_50;
      fAngle_50 = ((_glesMultiTexCoord2.x * tmpvar_36) * (tmpvar_47.x + (tmpvar_47.y * tmpvar_47.y)));
      highp vec2 vSinCos_51;
      vSinCos_51.x = sin(fAngle_50);
      vSinCos_51.y = cos(fAngle_50);
      highp float tmpvar_52;
      tmpvar_52 = (1.0 - vSinCos_51.y);
      highp mat3 tmpvar_53;
      tmpvar_53[0].x = (((tmpvar_52 * tmpvar_33.x) * tmpvar_33.x) + vSinCos_51.y);
      tmpvar_53[0].y = (((tmpvar_52 * tmpvar_33.x) * tmpvar_33.y) + (vSinCos_51.x * tmpvar_33.z));
      tmpvar_53[0].z = (((tmpvar_52 * tmpvar_33.x) * tmpvar_33.z) - (vSinCos_51.x * tmpvar_33.y));
      tmpvar_53[1].x = (((tmpvar_52 * tmpvar_33.x) * tmpvar_33.y) - (vSinCos_51.x * tmpvar_33.z));
      tmpvar_53[1].y = (((tmpvar_52 * tmpvar_33.y) * tmpvar_33.y) + vSinCos_51.y);
      tmpvar_53[1].z = (((tmpvar_52 * tmpvar_33.y) * tmpvar_33.z) + (vSinCos_51.x * tmpvar_33.x));
      tmpvar_53[2].x = (((tmpvar_52 * tmpvar_33.x) * tmpvar_33.z) + (vSinCos_51.x * tmpvar_33.y));
      tmpvar_53[2].y = (((tmpvar_52 * tmpvar_33.y) * tmpvar_33.z) - (vSinCos_51.x * tmpvar_33.x));
      tmpvar_53[2].z = (((tmpvar_52 * tmpvar_33.z) * tmpvar_33.z) + vSinCos_51.y);
      highp vec3 tmpvar_54;
      tmpvar_54 = ((tmpvar_33.yzx * vRotatedWindVector_15.zxy) - (tmpvar_33.zxy * vRotatedWindVector_15.yzx));
      vAxis_41.xz = tmpvar_54.xz;
      highp float tmpvar_55;
      tmpvar_55 = clamp (dot (vRotatedWindVector_15, tmpvar_33), -1.0, 1.0);
      vAxis_41.y = (tmpvar_54.y + tmpvar_55);
      highp vec3 tmpvar_56;
      tmpvar_56 = normalize(vAxis_41);
      vAxis_41 = tmpvar_56;
      highp float tmpvar_57;
      tmpvar_57 = (1.570796 - (sign(tmpvar_55) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_55))) * (1.570796 + (abs(tmpvar_55) * (-0.2146018 + 
          (abs(tmpvar_55) * (0.08656672 + (abs(tmpvar_55) * -0.03102955)))
        ))))
      )));
      fOsc_42 = (tmpvar_47.y - (tmpvar_47.x * tmpvar_47.x));
      fTwitch_40 = 0.0;
      if (tmpvar_39) {
        highp float fTime_58;
        fTime_58 = (tmpvar_38.z + tmpvar_45);
        highp vec4 tmpvar_59;
        tmpvar_59.zw = vec2(0.0, 0.0);
        tmpvar_59.x = fTime_58;
        tmpvar_59.y = (0.87 * fTime_58);
        highp vec4 tmpvar_60;
        highp vec4 tmpvar_61;
        tmpvar_61 = abs(((
          fract((tmpvar_59 + 0.5))
         * 2.0) - 1.0));
        tmpvar_60 = (((
          (tmpvar_61 * tmpvar_61)
         * 
          (3.0 - (2.0 * tmpvar_61))
        ) - 0.5) * 2.0);
        fTwitch_40 = (tmpvar_38.x * pow (clamp (
          ((((tmpvar_60.x * tmpvar_60.y) * tmpvar_60.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_38.y));
      };
      highp float fAngle_62;
      fAngle_62 = (_glesMultiTexCoord2.x * ((
        (tmpvar_57 * tmpvar_37)
       + 
        (fOsc_42 * tmpvar_35)
      ) + fTwitch_40));
      highp vec2 vSinCos_63;
      vSinCos_63.x = sin(fAngle_62);
      vSinCos_63.y = cos(fAngle_62);
      highp float tmpvar_64;
      tmpvar_64 = (1.0 - vSinCos_63.y);
      highp mat3 tmpvar_65;
      tmpvar_65[0].x = (((tmpvar_64 * tmpvar_56.x) * tmpvar_56.x) + vSinCos_63.y);
      tmpvar_65[0].y = (((tmpvar_64 * tmpvar_56.x) * tmpvar_56.y) + (vSinCos_63.x * tmpvar_56.z));
      tmpvar_65[0].z = (((tmpvar_64 * tmpvar_56.x) * tmpvar_56.z) - (vSinCos_63.x * tmpvar_56.y));
      tmpvar_65[1].x = (((tmpvar_64 * tmpvar_56.x) * tmpvar_56.y) - (vSinCos_63.x * tmpvar_56.z));
      tmpvar_65[1].y = (((tmpvar_64 * tmpvar_56.y) * tmpvar_56.y) + vSinCos_63.y);
      tmpvar_65[1].z = (((tmpvar_64 * tmpvar_56.y) * tmpvar_56.z) + (vSinCos_63.x * tmpvar_56.x));
      tmpvar_65[2].x = (((tmpvar_64 * tmpvar_56.x) * tmpvar_56.z) + (vSinCos_63.x * tmpvar_56.y));
      tmpvar_65[2].y = (((tmpvar_64 * tmpvar_56.y) * tmpvar_56.z) - (vSinCos_63.x * tmpvar_56.x));
      tmpvar_65[2].z = (((tmpvar_64 * tmpvar_56.z) * tmpvar_56.z) + vSinCos_63.y);
      highp mat3 tmpvar_66;
      tmpvar_66 = (tmpvar_53 * tmpvar_65);
      vOriginPos_43 = (normalize((tmpvar_66 * vPos_30)) * tmpvar_49);
      vDirection_27 = (tmpvar_66 * _glesNormal);
      vPos_26 = vOriginPos_43;
    };
    tmpvar_13 = vDirection_27;
    FinalPosition_16 = vPos_26;
  };
  FinalPosition_16 = (FinalPosition_16 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_67;
    vPos_67 = FinalPosition_16;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_68;
      vPos_68 = FinalPosition_16;
      highp float fTime_69;
      highp float fAdherenceScale_70;
      highp vec3 vWindVector_71;
      vWindVector_71 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_69 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_72;
      highp float fOscillation_73;
      fOscillation_73 = 1.0;
      highp float fAmount_74;
      highp float fTarget_75;
      highp vec4 tmpvar_76;
      tmpvar_76.x = (fTime_69 + _glesMultiTexCoord0.w);
      tmpvar_76.y = ((fTime_69 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_76.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_69 + _glesMultiTexCoord0.w));
      tmpvar_76.w = ((fTime_69 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_77;
      tmpvar_77 = abs(((
        fract((tmpvar_76 + 0.5))
       * 2.0) - 1.0));
      vOscillations_72 = (((
        (tmpvar_77 * tmpvar_77)
       * 
        (3.0 - (2.0 * tmpvar_77))
      ) - 0.5) * 2.0);
      highp float tmpvar_78;
      tmpvar_78 = (vOscillations_72.y * vOscillations_72.z);
      fTarget_75 = 1.0;
      fAmount_74 = tmpvar_78;
      if ((tmpvar_78 < 0.0)) {
        fTarget_75 = -1.0;
        fAmount_74 = -(tmpvar_78);
      };
      fOscillation_73 = (((
        mix (mix (tmpvar_78, fTarget_75, fAmount_74), fTarget_75, fAmount_74)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_72.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_73 = (fOscillation_73 * (1.0 + (vOscillations_72.w * _ST_WindBranchWhip.x)));
      vPos_68 = (FinalPosition_16 + ((vWindVector_71 * fOscillation_73) * _ST_WindBranch.y));
      highp vec4 tmpvar_79;
      tmpvar_79.zw = vec2(0.0, 0.0);
      tmpvar_79.x = ((fTime_69 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_79.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_80;
      highp vec4 tmpvar_81;
      tmpvar_81 = abs(((
        fract((tmpvar_79 + 0.5))
       * 2.0) - 1.0));
      tmpvar_80 = (((
        (tmpvar_81 * tmpvar_81)
       * 
        (3.0 - (2.0 * tmpvar_81))
      ) - 0.5) * 2.0);
      fAdherenceScale_70 = (1.0 - ((tmpvar_80.x * tmpvar_80.y) * (
        (tmpvar_80.x * tmpvar_80.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_70 = (fAdherenceScale_70 + ((vOscillations_72.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_68 = (vPos_68 + ((
        ((vRotatedBranchAnchor_14 - vPos_68) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_70) * _glesMultiTexCoord0.z));
      vPos_67 = vPos_68;
    } else {
      highp vec3 vPos_82;
      vPos_82 = vPos_67;
      highp float fTime_83;
      highp vec3 vWindVector_84;
      vWindVector_84 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_83 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_85;
      highp float fOscillation_86;
      fOscillation_86 = 1.0;
      highp float fAmount_87;
      highp float fTarget_88;
      highp vec4 tmpvar_89;
      tmpvar_89.w = 0.0;
      tmpvar_89.x = (fTime_83 + _glesMultiTexCoord0.w);
      tmpvar_89.y = ((fTime_83 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_89.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_83 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_90;
      tmpvar_90 = abs(((
        fract((tmpvar_89 + 0.5))
       * 2.0) - 1.0));
      vOscillations_85 = (((
        (tmpvar_90 * tmpvar_90)
       * 
        (3.0 - (2.0 * tmpvar_90))
      ) - 0.5) * 2.0);
      highp float tmpvar_91;
      tmpvar_91 = (vOscillations_85.y * vOscillations_85.z);
      fTarget_88 = 1.0;
      fAmount_87 = tmpvar_91;
      if ((tmpvar_91 < 0.0)) {
        fTarget_88 = -1.0;
        fAmount_87 = -(tmpvar_91);
      };
      fOscillation_86 = (((
        mix (mix (tmpvar_91, fTarget_88, fAmount_87), fTarget_88, fAmount_87)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_85.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_82 = (vPos_67 + ((vWindVector_84 * fOscillation_86) * _ST_WindBranch.y));
      vPos_67 = vPos_82;
    };
    FinalPosition_16 = vPos_67;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_92;
    vPos_92 = FinalPosition_16;
    highp float fMoveAmount_93;
    highp float fAdjust_94;
    highp float fLength_95;
    fLength_95 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_96;
    tmpvar_96 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_94 = tmpvar_96;
    if ((tmpvar_96 != 0.0)) {
      fAdjust_94 = pow (tmpvar_96, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_97;
    tmpvar_97.zw = vec2(0.0, 0.0);
    tmpvar_97.x = (tmpvar_17.x + _ST_WindGlobal.x);
    tmpvar_97.y = (tmpvar_17.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_98;
    highp vec4 tmpvar_99;
    tmpvar_99 = abs(((
      fract((tmpvar_97 + 0.5))
     * 2.0) - 1.0));
    tmpvar_98 = (((
      (tmpvar_99 * tmpvar_99)
     * 
      (3.0 - (2.0 * tmpvar_99))
    ) - 0.5) * 2.0);
    fMoveAmount_93 = ((_ST_WindGlobal.y * (tmpvar_98.x + 
      (tmpvar_98.y * tmpvar_98.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_93 = (fMoveAmount_93 * fAdjust_94);
    vPos_92.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * fMoveAmount_93));
    vPos_92 = (normalize(vPos_92) * fLength_95);
    FinalPosition_16 = vPos_92;
  };
  tmpvar_12.xyz = FinalPosition_16;
  tmpvar_8 = tmpvar_10;
  highp vec4 v_100;
  v_100.x = _World2Object[0].x;
  v_100.y = _World2Object[1].x;
  v_100.z = _World2Object[2].x;
  v_100.w = _World2Object[3].x;
  highp vec4 v_101;
  v_101.x = _World2Object[0].y;
  v_101.y = _World2Object[1].y;
  v_101.z = _World2Object[2].y;
  v_101.w = _World2Object[3].y;
  highp vec4 v_102;
  v_102.x = _World2Object[0].z;
  v_102.y = _World2Object[1].z;
  v_102.z = _World2Object[2].z;
  v_102.w = _World2Object[3].z;
  highp vec3 tmpvar_103;
  tmpvar_103 = normalize(((
    (v_100.xyz * tmpvar_13.x)
   + 
    (v_101.xyz * tmpvar_13.y)
  ) + (v_102.xyz * tmpvar_13.z)));
  worldNormal_6 = tmpvar_103;
  tmpvar_7 = worldNormal_6;
  lowp vec4 tmpvar_104;
  tmpvar_104.w = 1.0;
  tmpvar_104.xyz = worldNormal_6;
  mediump vec4 normal_105;
  normal_105 = tmpvar_104;
  mediump vec3 x2_106;
  mediump vec4 tmpvar_107;
  tmpvar_107 = (normal_105.xyzz * normal_105.yzzx);
  x2_106.x = dot (unity_SHBr, tmpvar_107);
  x2_106.y = dot (unity_SHBg, tmpvar_107);
  x2_106.z = dot (unity_SHBb, tmpvar_107);
  tmpvar_9 = (unity_World2Shadow[0] * (_Object2World * tmpvar_12));
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_7;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD3 = tmpvar_11;
  xlv_TEXCOORD4 = (x2_106 + (unity_SHC.xyz * (
    (normal_105.x * normal_105.x)
   - 
    (normal_105.y * normal_105.y)
  )));
  xlv_TEXCOORD5 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_10 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp float shadow_14;
  shadow_14 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD5.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_14;
  mediump vec3 normalWorld_15;
  normalWorld_15 = tmpvar_5;
  mediump vec3 tmpvar_16;
  mediump vec3 tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = normalWorld_15;
  mediump vec3 x1_19;
  x1_19.x = dot (unity_SHAr, tmpvar_18);
  x1_19.y = dot (unity_SHAg, tmpvar_18);
  x1_19.z = dot (unity_SHAb, tmpvar_18);
  tmpvar_17 = (xlv_TEXCOORD4 + x1_19);
  tmpvar_16 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_16;
  lowp vec4 c_20;
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_22 = tmpvar_23;
  c_21.xyz = ((tmpvar_9 * tmpvar_16) * diff_22);
  c_21.w = tmpvar_10;
  c_20.w = c_21.w;
  c_20.xyz = (c_21.xyz + (tmpvar_9 * tmpvar_17));
  c_4.xyz = c_20.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec2 in_TEXCOORD3;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
highp vec3 t1;
bvec2 tb1;
highp vec4 t2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
mediump vec3 t16_14;
highp vec3 t16;
highp int ti16;
highp vec3 t17;
bool tb17;
highp vec3 t22;
highp float t31;
bool tb31;
highp vec2 t34;
highp float t35;
highp vec2 t36;
highp float t46;
bool tb46;
highp float t47;
bool tb47;
highp float t48;
bool tb48;
highp float t49;
mediump float t16_59;
void main()
{
    //Instruction 17085
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 17086
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 17087
    //LT
    tb1.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), t16_0.xxxx).xy;
    //Instruction 17088
    //MUL
    t2.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 17089
    //MAD
    t2.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t2.xyz;
    //Instruction 17090
    //MAD
    t2.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t2.xyz;
    //Instruction 17091
    //DP3
    t31 = dot(t2.xyz, t2.xyz);
    //Instruction 17092
    //RSQ
    t31 = inversesqrt(t31);
    //Instruction 17093
    //MUL
    t2.xyz = vec3(t31) * t2.xyz;
    //Instruction 17094
    //AND
    t2.xyz = mix(vec3(0.0, 0.0, 0.0), t2.xyz, tb1.xxx);
    //Instruction 17095
    //ADD
    t3.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 17096
    //MOV
    t4.x = in_TEXCOORD1.w;
    //Instruction 17097
    //MOV
    t4.yz = in_TEXCOORD3.xy;
    //Instruction 17098
    //ADD
    t4.xyz = (-t3.xyz) + t4.xyz;
    //Instruction 17099
    //MAD
    t3.xyz = unity_LODFade.xxx * t4.xyz + t3.xyz;
    //Instruction 17100
    //LT
    tb31 = t16_0.x<5.000000;
    //Instruction 17101
    //AND
    ti16 = int(uint(tb31) & uint(tb1.y));
    //Instruction 17102
    //IF
    if((uint(ti16))!=uint(0u)){
        //Instruction 17103
        //ADD
        t16.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 17104
        //EQ
        tb31 = t16_0.x==4.000000;
        //Instruction 17105
        //LT
        tb46 = 0.0<in_TEXCOORD2.w;
        //Instruction 17106
        //MOVC
        t4.xy = (bool(tb46)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 17107
        //ADD
        t16.x = t16.x + t4.x;
        //Instruction 17108
        //ADD
        t16.x = t16.x + 0.500000;
        //Instruction 17109
        //FRC
        t16.x = fract(t16.x);
        //Instruction 17110
        //MAD
        t16.x = t16.x * 2.000000 + -1.0;
        //Instruction 17111
        //MUL
        t47 = abs(t16.x) * abs(t16.x);
        //Instruction 17112
        //MAD
        t16.x = -abs(t16.x) * 2.000000 + 3.000000;
        //Instruction 17113
        //MAD
        t16.x = t47 * t16.x + -0.500000;
        //Instruction 17114
        //DP2
        t16.x = dot(t16.xx, t4.yy);
        //Instruction 17115
        //MUL
        t4.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 17116
        //FRC
        t4.xyz = fract(t4.xyz);
        //Instruction 17117
        //MAD
        t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 17118
        //MUL
        t4.xyz = t16.xxx * t4.xyz;
        //Instruction 17119
        //MAD
        t3.xyz = t4.xyz * in_TEXCOORD2.xxx + t3.xyz;
        //Instruction 17120
        //IF
        if(tb31){
            //Instruction 17121
            //MUL
            t4 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 17122
            //FRC
            t4 = fract(t4);
            //Instruction 17123
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 17124
            //MOVC
            t5 = (bool(tb46)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 17125
            //MOVC
            t16.xyz = (bool(tb46)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 17126
            //MUL
            t47 = t4.w * 3.000000;
            //Instruction 17127
            //MAD
            t6.y = t4.w * 3.000000 + t5.x;
            //Instruction 17128
            //MAD
            t6.x = t5.x * 0.750000 + (-t47);
            //Instruction 17129
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 17130
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 17131
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 17132
            //MUL
            t36.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 17133
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 17134
            //MAD
            t6.xy = t36.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 17135
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 17136
            //DP3
            t47 = dot(t3.xyz, t3.xyz);
            //Instruction 17137
            //SQRT
            t47 = sqrt(t47);
            //Instruction 17138
            //MAD
            t48 = t6.x * t6.x + t6.y;
            //Instruction 17139
            //MUL
            t5.x = t5.z * in_TEXCOORD2.x;
            //Instruction 17140
            //MUL
            t48 = t48 * t5.x;
            //Instruction 17141
            //SINCOS
            t5.x = sin(t48);
            t7.x = cos(t48);
            //Instruction 17142
            //ADD
            t48 = (-t7.x) + 1.0;
            //Instruction 17143
            //MUL
            t8 = t4.xxxy * vec4(t48);
            //Instruction 17144
            //MUL
            t22.xyz = t4.zxy * t5.xxx;
            //Instruction 17145
            //MAD
            t9.xy = t8.zy * t4.zy + t22.zx;
            //Instruction 17146
            //MAD
            t10.xy = t8.xw * t4.xy + t7.xx;
            //Instruction 17147
            //MAD
            t9.z = t8.w * t4.z + (-t22.y);
            //Instruction 17148
            //MAD
            t11.xy = t8.yz * t4.yz + (-t22.xz);
            //Instruction 17149
            //MAD
            t11.z = t8.w * t4.z + t22.y;
            //Instruction 17150
            //MUL
            t5.x = t4.z * t4.z;
            //Instruction 17151
            //MAD
            t11.w = t5.x * t48 + t7.x;
            //Instruction 17152
            //MUL
            t7.xyz = t2.yzx * t4.zxy;
            //Instruction 17153
            //MAD
            t7.xyz = t4.yzx * t2.zxy + (-t7.xyz);
            //Instruction 17154
            //DP3
            t17.x = dot(t2.xyz, t4.xyz);
            //Instruction 17155
            //MAX
            t17.x = max(t17.x, -1.0);
            //Instruction 17156
            //MIN
            t17.x = min(t17.x, 1.0);
            //Instruction 17157
            //ADD
            t7.w = t17.x + t7.y;
            //Instruction 17158
            //DP3
            t48 = dot(t7.xzw, t7.xzw);
            //Instruction 17159
            //RSQ
            t48 = inversesqrt(t48);
            //Instruction 17160
            //MUL
            t4.xyz = vec3(t48) * t7.zxw;
            //Instruction 17161
            //ADD
            t48 = -abs(t17.x) + 1.0;
            //Instruction 17162
            //SQRT
            t48 = sqrt(t48);
            //Instruction 17163
            //MAD
            t5.x = abs(t17.x) * -0.018729 + 0.074261;
            //Instruction 17164
            //MAD
            t5.x = t5.x * abs(t17.x) + -0.212114;
            //Instruction 17165
            //MAD
            t5.x = t5.x * abs(t17.x) + 1.570729;
            //Instruction 17166
            //MUL
            t35 = t48 * t5.x;
            //Instruction 17167
            //MAD
            t35 = t35 * -2.000000 + 3.141593;
            //Instruction 17168
            //LT
            tb17 = t17.x<(-t17.x);
            //Instruction 17169
            //AND
            t17.x = tb17 ? t35 : float(0.0);
            //Instruction 17170
            //MAD
            t17.x = t5.x * t48 + t17.x;
            //Instruction 17171
            //MAD
            t48 = (-t6.y) * t6.y + t6.x;
            //Instruction 17172
            //MAD
            t6.x = t4.w * 3.000000 + t16.z;
            //Instruction 17173
            //MUL
            t6.y = t6.x * 0.870000;
            //Instruction 17174
            //ADD
            t5.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 17175
            //FRC
            t5.xz = fract(t5.xz);
            //Instruction 17176
            //MAD
            t5.xz = t5.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 17177
            //MUL
            t6.xy = abs(t5.xz) * abs(t5.xz);
            //Instruction 17178
            //MAD
            t5.xz = -abs(t5.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 17179
            //MAD
            t5.xz = t6.xy * t5.xz + vec2(-0.500000, -0.500000);
            //Instruction 17180
            //ADD
            t5.xz = t5.xz + t5.xz;
            //Instruction 17181
            //MUL
            t46 = t5.z * t5.z;
            //Instruction 17182
            //MAD
            t46 = t46 * t5.x + 1.0;
            //Instruction 17183
            //MUL
            t46 = t46 * 0.500000;
            t46 = clamp(t46, 0.0, 1.0);
            //Instruction 17184
            //LOG
            t46 = log2(t46);
            //Instruction 17185
            //MUL
            t31 = t46 * t16.y;
            //Instruction 17186
            //EXP
            t31 = exp2(t31);
            //Instruction 17187
            //MUL
            t46 = t5.y * t48;
            //Instruction 17188
            //MAD
            t46 = t17.x * t5.w + t46;
            //Instruction 17189
            //MAD
            t16.x = t16.x * t31 + t46;
            //Instruction 17190
            //MUL
            t16.x = t16.x * in_TEXCOORD2.x;
            //Instruction 17191
            //SINCOS
            t5.x = sin(t16.x);
            t6.x = cos(t16.x);
            //Instruction 17192
            //ADD
            t16.x = (-t6.x) + 1.0;
            //Instruction 17193
            //MUL
            t7 = vec4(t4.y * t16.x, t4.y * t16.x, t4.y * t16.x, t4.z * t16.x);
            //Instruction 17194
            //MUL
            t5.xyz = t4.xyz * t5.xxx;
            //Instruction 17195
            //MAD
            t8.xy = t7.zy * t4.xz + t5.zx;
            //Instruction 17196
            //MAD
            t12.xy = t7.xw * t4.yz + t6.xx;
            //Instruction 17197
            //MAD
            t8.z = t7.w * t4.x + (-t5.y);
            //Instruction 17198
            //MAD
            t13.xy = t7.yz * t4.zx + (-t5.xz);
            //Instruction 17199
            //MAD
            t13.z = t7.w * t4.x + t5.y;
            //Instruction 17200
            //MUL
            t31 = t4.x * t4.x;
            //Instruction 17201
            //MAD
            t8.w = t31 * t16.x + t6.x;
            //Instruction 17202
            //MOV
            t10.z = t11.x;
            //Instruction 17203
            //MOV
            t10.w = t9.x;
            //Instruction 17204
            //MOV
            t12.z = t8.y;
            //Instruction 17205
            //MOV
            t12.w = t13.y;
            //Instruction 17206
            //DP3
            t4.x = dot(t10.xzw, t12.xzw);
            //Instruction 17207
            //MOV
            t13.w = t12.y;
            //Instruction 17208
            //DP3
            t4.y = dot(t10.xwz, t13.xzw);
            //Instruction 17209
            //DP3
            t4.z = dot(t10.xzw, t8.xzw);
            //Instruction 17210
            //MOV
            t9.w = t10.y;
            //Instruction 17211
            //DP3
            t5.x = dot(t9.ywz, t12.xzw);
            //Instruction 17212
            //DP3
            t5.y = dot(t9.yzw, t13.xzw);
            //Instruction 17213
            //DP3
            t5.z = dot(t9.ywz, t8.xzw);
            //Instruction 17214
            //DP3
            t6.x = dot(t11.yzw, t12.xzw);
            //Instruction 17215
            //DP3
            t6.y = dot(t11.ywz, t13.xzw);
            //Instruction 17216
            //DP3
            t6.z = dot(t11.yzw, t8.xzw);
            //Instruction 17217
            //DP3
            t16.x = dot(t4.xyz, in_NORMAL0.xyz);
            //Instruction 17218
            //DP3
            t16.y = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 17219
            //DP3
            t16.z = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 17220
            //DP3
            t4.x = dot(t4.xyz, t3.xyz);
            //Instruction 17221
            //DP3
            t4.y = dot(t5.xyz, t3.xyz);
            //Instruction 17222
            //DP3
            t4.z = dot(t6.xyz, t3.xyz);
            //Instruction 17223
            //DP3
            t17.x = dot(t4.xyz, t4.xyz);
            //Instruction 17224
            //RSQ
            t17.x = inversesqrt(t17.x);
            //Instruction 17225
            //MUL
            t4.xyz = t17.xxx * t4.xyz;
            //Instruction 17226
            //MUL
            t3.xyz = vec3(t47) * t4.xyz;
            //Instruction 17227
        //ELSE
        } else {
            //Instruction 17228
            //MOV
            t16.xyz = in_NORMAL0.xyz;
            //Instruction 17229
        //ENDIF
        }
        //Instruction 17230
    //ELSE
    } else {
        //Instruction 17231
        //MOV
        t16.xyz = in_NORMAL0.xyz;
        //Instruction 17232
    //ENDIF
    }
    //Instruction 17233
    //ADD
    t3.xyz = t3.xyz + in_TEXCOORD1.xyz;
    //Instruction 17234
    //GE
    tb17 = t16_0.x>=3.000000;
    //Instruction 17235
    //IF
    if(tb17){
        //Instruction 17236
        //EQ
        tb17 = t16_0.x==5.000000;
        //Instruction 17237
        //IF
        if(tb17){
            //Instruction 17238
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 17239
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 17240
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 17241
            //DP3
            t17.x = dot(t4.xyz, t4.xyz);
            //Instruction 17242
            //RSQ
            t17.x = inversesqrt(t17.x);
            //Instruction 17243
            //MUL
            t4.xyz = t17.xxx * t4.xyz;
            //Instruction 17244
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 17245
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 17246
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 17247
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 17248
            //ADD
            t17.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 17249
            //ADD
            t17.x = t17.x + _ST_WindBranch.x;
            //Instruction 17250
            //ADD
            t0.x = t17.x + in_TEXCOORD0.w;
            //Instruction 17251
            //MAD
            t0.y = t17.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 17252
            //MUL
            t47 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 17253
            //MUL
            t0.z = t47 * 0.500000;
            //Instruction 17254
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 17255
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 17256
            //FRC
            t0 = fract(t0);
            //Instruction 17257
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 17258
            //MUL
            t6 = abs(t0) * abs(t0);
            //Instruction 17259
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 17260
            //MAD
            t0 = t6 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 17261
            //ADD
            t0 = t0 + t0;
            //Instruction 17262
            //MUL
            t6.w = t0.z * t0.y;
            //Instruction 17263
            //LT
            tb47 = t6.w<0.0;
            //Instruction 17264
            //MOV
            t6.y = (-t6.w);
            //Instruction 17265
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 17266
            //MOVC
            t6.xy = (bool(tb47)) ? t6.xy : t6.zw;
            //Instruction 17267
            //MAD
            t47 = (-t0.y) * t0.z + t6.x;
            //Instruction 17268
            //MAD
            t47 = t6.y * t47 + t6.w;
            //Instruction 17269
            //ADD
            t48 = (-t47) + t6.x;
            //Instruction 17270
            //MAD
            t47 = t6.y * t48 + t47;
            //Instruction 17271
            //MUL
            t47 = t47 * _ST_WindBranchTwitch.x;
            //Instruction 17272
            //ADD
            t48 = (-_ST_WindVector.w) + 1.0;
            //Instruction 17273
            //ADD
            t49 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 17274
            //MUL
            t49 = t0.x * t49;
            //Instruction 17275
            //MAD
            t47 = t47 * t48 + t49;
            //Instruction 17276
            //MAD
            t48 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 17277
            //MUL
            t47 = t47 * t48;
            //Instruction 17278
            //MUL
            t5.xyz = vec3(t47) * t5.xyz;
            //Instruction 17279
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 17280
            //MAD
            t6.x = t17.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 17281
            //MUL
            t17.x = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 17282
            //MAD
            t6.y = t17.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 17283
            //ADD
            t17.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 17284
            //FRC
            t17.xz = fract(t17.xz);
            //Instruction 17285
            //MAD
            t17.xz = t17.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 17286
            //MUL
            t6.xy = abs(t17.xz) * abs(t17.xz);
            //Instruction 17287
            //MAD
            t17.xz = -abs(t17.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 17288
            //MAD
            t17.xz = t6.xy * t17.xz + vec2(-0.500000, -0.500000);
            //Instruction 17289
            //ADD
            t17.xz = t17.xz + t17.xz;
            //Instruction 17290
            //MUL
            t17.xz = t17.xz * t17.xz;
            //Instruction 17291
            //MUL
            t17.x = t17.x * t17.z;
            //Instruction 17292
            //MAD
            t17.x = (-t17.x) * _ST_WindTurbulences.x + 1.0;
            //Instruction 17293
            //MUL
            t47 = t0.w * _ST_WindVector.w;
            //Instruction 17294
            //MAD
            t17.x = t47 * _ST_WindBranchWhip.x + t17.x;
            //Instruction 17295
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 17296
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 17297
            //MUL
            t4.xyz = t17.xxx * t4.xyz;
            //Instruction 17298
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 17299
        //ELSE
        } else {
            //Instruction 17300
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 17301
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 17302
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 17303
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 17304
            //ADD
            t17.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 17305
            //ADD
            t17.x = t17.x + _ST_WindBranch.x;
            //Instruction 17306
            //ADD
            t5.x = t17.x + in_TEXCOORD0.w;
            //Instruction 17307
            //MAD
            t5.y = t17.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 17308
            //MUL
            t17.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 17309
            //MUL
            t5.z = t17.x * 0.500000;
            //Instruction 17310
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 17311
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 17312
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 17313
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 17314
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 17315
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 17316
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 17317
            //MUL
            t0.w = t5.z * t5.y;
            //Instruction 17318
            //LT
            tb17 = t0.w<0.0;
            //Instruction 17319
            //MOV
            t0.y = (-t0.w);
            //Instruction 17320
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 17321
            //MOVC
            t17.xz = (bool(tb17)) ? t0.xy : t0.zw;
            //Instruction 17322
            //MAD
            t48 = (-t5.y) * t5.z + t17.x;
            //Instruction 17323
            //MAD
            t48 = t17.z * t48 + t0.w;
            //Instruction 17324
            //ADD
            t17.x = t17.x + (-t48);
            //Instruction 17325
            //MAD
            t17.x = t17.z * t17.x + t48;
            //Instruction 17326
            //MUL
            t17.x = t17.x * _ST_WindBranchTwitch.x;
            //Instruction 17327
            //ADD
            t47 = (-_ST_WindVector.w) + 1.0;
            //Instruction 17328
            //ADD
            t48 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 17329
            //MUL
            t48 = t48 * t5.x;
            //Instruction 17330
            //MAD
            t17.x = t17.x * t47 + t48;
            //Instruction 17331
            //MUL
            t4.xyz = t17.xxx * t4.xyz;
            //Instruction 17332
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 17333
        //ENDIF
        }
        //Instruction 17334
    //ENDIF
    }
    //Instruction 17335
    //DP3
    t17.x = dot(t3.xyz, t3.xyz);
    //Instruction 17336
    //SQRT
    t17.x = sqrt(t17.x);
    //Instruction 17337
    //DIV
    t47 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 17338
    //MAD
    t47 = (-t47) * 0.250000 + t3.y;
    //Instruction 17339
    //MAX
    t47 = max(t47, 0.0);
    //Instruction 17340
    //MUL
    t47 = t47 * _ST_WindGlobal.z;
    //Instruction 17341
    //NE
    tb48 = t47!=0.0;
    //Instruction 17342
    //LOG
    t4.x = log2(t47);
    //Instruction 17343
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 17344
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 17345
    //MOVC
    t47 = (tb48) ? t4.x : t47;
    //Instruction 17346
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 17347
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 17348
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 17349
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 17350
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 17351
    //MUL
    t34.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 17352
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 17353
    //MAD
    t4.xy = t34.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 17354
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 17355
    //MAD
    t48 = t4.y * t4.y + t4.x;
    //Instruction 17356
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 17357
    //MAD
    t48 = _ST_WindGlobal.y * t48 + t4.x;
    //Instruction 17358
    //MUL
    t47 = t47 * t48;
    //Instruction 17359
    //MAD
    t4.xz = t2.xz * vec2(t47) + t3.xz;
    //Instruction 17360
    //MOV
    t4.y = t3.y;
    //Instruction 17361
    //DP3
    t2.x = dot(t4.xyz, t4.xyz);
    //Instruction 17362
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 17363
    //MUL
    t2.xzw = t2.xxx * t4.xyz;
    //Instruction 17364
    //MUL
    t2.xyz = t17.xxx * t2.xzw;
    //Instruction 17365
    //MOVC
    t2.xyz = (tb1.x) ? t2.xyz : t3.xyz;
    //Instruction 17366
    //MUL
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 17367
    //MAD
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    //Instruction 17368
    //MAD
    t0 = glstate_matrix_mvp[2] * t2.zzzz + t0;
    //Instruction 17369
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 17370
    //MUL
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 17371
    //MAD
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    //Instruction 17372
    //MAD
    t3.xyz = _Object2World[2].xyz * t2.zzz + t3.xyz;
    //Instruction 17373
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xyz;
    //Instruction 17374
    //MOV
    t3.x = _World2Object[0].x;
    //Instruction 17375
    //MOV
    t3.y = _World2Object[1].x;
    //Instruction 17376
    //MOV
    t3.z = _World2Object[2].x;
    //Instruction 17377
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 17378
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 17379
    //MOV
    t4.z = _World2Object[2].y;
    //Instruction 17380
    //MUL
    t4.xyz = t16.yyy * t4.xyz;
    //Instruction 17381
    //MAD
    t1.xyz = t3.xyz * t16.xxx + t4.xyz;
    //Instruction 17382
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 17383
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 17384
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 17385
    //MAD
    t1.xyz = t3.xyz * t16.zzz + t1.xyz;
    //Instruction 17386
    //DP3
    t46 = dot(t1.xyz, t1.xyz);
    //Instruction 17387
    //RSQ
    t46 = inversesqrt(t46);
    //Instruction 17388
    //MUL
    t1.xyz = vec3(t46) * t1.xyz;
    //Instruction 17389
    //MUL
    t16_0 = t1.yzzx * t1.xyzz;
    //Instruction 17390
    //DP4
    t16_14.x = dot(unity_SHBr, t16_0);
    //Instruction 17391
    //DP4
    t16_14.y = dot(unity_SHBg, t16_0);
    //Instruction 17392
    //DP4
    t16_14.z = dot(unity_SHBb, t16_0);
    //Instruction 17393
    //MUL
    t16_59 = t1.y * t1.y;
    //Instruction 17394
    //MAD
    t16_59 = t1.x * t1.x + (-t16_59);
    //Instruction 17395
    //MAD
    vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(t16_59) + t16_14.xyz;
    //Instruction 17396
    //MUL
    t0 = t2.yyyy * _Object2World[1];
    //Instruction 17397
    //MAD
    t0 = _Object2World[0] * t2.xxxx + t0;
    //Instruction 17398
    //MAD
    t0 = _Object2World[2] * t2.zzzz + t0;
    //Instruction 17399
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 17400
    //MUL
    t2 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 17401
    //MAD
    t2 = unity_World2Shadow[0][0] * t0.xxxx + t2;
    //Instruction 17402
    //MAD
    t2 = unity_World2Shadow[0][2] * t0.zzzz + t2;
    //Instruction 17403
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t2;
    //Instruction 17404
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 17405
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 17406
    //MOV
    vs_TEXCOORD5 = t0;
    //Instruction 17407
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 17408
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 17409
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_17;
mediump float t16_18;
void main()
{
    //Instruction 17062
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 17063
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 17064
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 17065
    //LT
    tb0 = t10_1<0.0;
    //Instruction 17066
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 17067
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 17068
    //MOV
    t16_0.w = 1.0;
    //Instruction 17069
    //DP4
    t16_3.x = dot(unity_SHAr, t16_0);
    //Instruction 17070
    //DP4
    t16_3.y = dot(unity_SHAg, t16_0);
    //Instruction 17071
    //DP4
    t16_3.z = dot(unity_SHAb, t16_0);
    //Instruction 17072
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD4.xyz;
    //Instruction 17073
    //MUL
    t16_3.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 17074
    //SAMPLE_C_LZ
    vec3 txVec37 = vec3(vs_TEXCOORD5.xy,vs_TEXCOORD5.z);
    t16_17 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec37, 0.0);
    //Instruction 17075
    //ADD
    t16_18 = (-_LightShadowData.x) + 1.0;
    //Instruction 17076
    //MAD
    t16_17 = t16_17 * t16_18 + _LightShadowData.x;
    //Instruction 17077
    //MUL
    t16_4.xyz = vec3(t16_17) * _LightColor0.xyz;
    //Instruction 17078
    //MUL
    t16_2.xyz = t16_2.xyz * t16_4.xyz;
    //Instruction 17079
    //DP3
    t16_17 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 17080
    //MAX
    t16_17 = max(t16_17, 0.0);
    //Instruction 17081
    //MAD
    t16_2.xyz = t16_2.xyz * vec3(t16_17) + t16_3.xyz;
    //Instruction 17082
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 17083
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 17084
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesMultiTexCoord3;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  tmpvar_4 = _glesMultiTexCoord1;
  highp vec2 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord3.xy;
  lowp vec3 worldNormal_6;
  mediump vec3 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec4 tmpvar_10;
  lowp vec4 tmpvar_11;
  mediump vec3 tmpvar_12;
  tmpvar_12.xy = tmpvar_3.xy;
  tmpvar_11.w = _Color.w;
  tmpvar_11.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  FinalPosition_17 = tmpvar_1.xyz;
  highp vec3 tmpvar_18;
  tmpvar_18.x = _Object2World[3].x;
  tmpvar_18.y = _Object2World[3].y;
  tmpvar_18.z = _Object2World[3].z;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_17 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp vec3 tmpvar_22;
  tmpvar_22.x = tmpvar_4.w;
  tmpvar_22.y = tmpvar_5.x;
  tmpvar_22.z = tmpvar_5.y;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (FinalPosition_17, tmpvar_22, unity_LODFade.xxx);
  FinalPosition_17 = tmpvar_23;
  if (((tmpvar_19 > 1.0) && (tmpvar_19 < 5.0))) {
    highp float tmpvar_24;
    tmpvar_24 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_25;
    isBestWind_25 = (tmpvar_19 == 4.0);
    bool bLeaf2_26;
    bLeaf2_26 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_27;
    vPos_27 = tmpvar_23;
    highp vec3 vDirection_28;
    vDirection_28 = tmpvar_2;
    highp float tmpvar_29;
    if (bLeaf2_26) {
      tmpvar_29 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_30;
    if (bLeaf2_26) {
      tmpvar_30 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_30 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_31;
    highp vec4 tmpvar_32;
    tmpvar_32.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_32.x = (tmpvar_29 + tmpvar_24);
    highp vec4 tmpvar_33;
    tmpvar_33 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    vPos_31 = (tmpvar_23 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_30 * (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_28 = tmpvar_2;
    vPos_27 = vPos_31;
    if (isBestWind_25) {
      highp vec3 tmpvar_34;
      tmpvar_34 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_35;
      if (bLeaf2_26) {
        tmpvar_35 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_36;
      if (bLeaf2_26) {
        tmpvar_36 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_37;
      if (bLeaf2_26) {
        tmpvar_37 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_38;
      if (bLeaf2_26) {
        tmpvar_38 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_39;
      if (bLeaf2_26) {
        tmpvar_39 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_39 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_40;
      if (bLeaf2_26) {
        tmpvar_40 = bool(1);
      } else {
        tmpvar_40 = bool(1);
      };
      highp float fTwitch_41;
      highp vec3 vAxis_42;
      highp float fOsc_43;
      highp vec3 vOriginPos_44;
      highp vec3 tmpvar_45;
      tmpvar_45 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_46;
      tmpvar_46 = ((tmpvar_45.x + tmpvar_45.y) + tmpvar_45.z);
      highp vec4 tmpvar_47;
      tmpvar_47.x = (tmpvar_35 + tmpvar_46);
      tmpvar_47.y = ((tmpvar_35 * 0.75) - tmpvar_46);
      tmpvar_47.z = ((tmpvar_35 * 0.01) + tmpvar_46);
      tmpvar_47.w = (tmpvar_35 + tmpvar_46);
      highp vec4 tmpvar_48;
      highp vec4 tmpvar_49;
      tmpvar_49 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      tmpvar_48 = (((
        (tmpvar_49 * tmpvar_49)
       * 
        (3.0 - (2.0 * tmpvar_49))
      ) - 0.5) * 2.0);
      vOriginPos_44 = vPos_31;
      highp float tmpvar_50;
      tmpvar_50 = sqrt(dot (vPos_31, vPos_31));
      highp float fAngle_51;
      fAngle_51 = ((_glesMultiTexCoord2.x * tmpvar_37) * (tmpvar_48.x + (tmpvar_48.y * tmpvar_48.y)));
      highp vec2 vSinCos_52;
      vSinCos_52.x = sin(fAngle_51);
      vSinCos_52.y = cos(fAngle_51);
      highp float tmpvar_53;
      tmpvar_53 = (1.0 - vSinCos_52.y);
      highp mat3 tmpvar_54;
      tmpvar_54[0].x = (((tmpvar_53 * tmpvar_34.x) * tmpvar_34.x) + vSinCos_52.y);
      tmpvar_54[0].y = (((tmpvar_53 * tmpvar_34.x) * tmpvar_34.y) + (vSinCos_52.x * tmpvar_34.z));
      tmpvar_54[0].z = (((tmpvar_53 * tmpvar_34.x) * tmpvar_34.z) - (vSinCos_52.x * tmpvar_34.y));
      tmpvar_54[1].x = (((tmpvar_53 * tmpvar_34.x) * tmpvar_34.y) - (vSinCos_52.x * tmpvar_34.z));
      tmpvar_54[1].y = (((tmpvar_53 * tmpvar_34.y) * tmpvar_34.y) + vSinCos_52.y);
      tmpvar_54[1].z = (((tmpvar_53 * tmpvar_34.y) * tmpvar_34.z) + (vSinCos_52.x * tmpvar_34.x));
      tmpvar_54[2].x = (((tmpvar_53 * tmpvar_34.x) * tmpvar_34.z) + (vSinCos_52.x * tmpvar_34.y));
      tmpvar_54[2].y = (((tmpvar_53 * tmpvar_34.y) * tmpvar_34.z) - (vSinCos_52.x * tmpvar_34.x));
      tmpvar_54[2].z = (((tmpvar_53 * tmpvar_34.z) * tmpvar_34.z) + vSinCos_52.y);
      highp vec3 tmpvar_55;
      tmpvar_55 = ((tmpvar_34.yzx * vRotatedWindVector_16.zxy) - (tmpvar_34.zxy * vRotatedWindVector_16.yzx));
      vAxis_42.xz = tmpvar_55.xz;
      highp float tmpvar_56;
      tmpvar_56 = clamp (dot (vRotatedWindVector_16, tmpvar_34), -1.0, 1.0);
      vAxis_42.y = (tmpvar_55.y + tmpvar_56);
      highp vec3 tmpvar_57;
      tmpvar_57 = normalize(vAxis_42);
      vAxis_42 = tmpvar_57;
      highp float tmpvar_58;
      tmpvar_58 = (1.570796 - (sign(tmpvar_56) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_56))) * (1.570796 + (abs(tmpvar_56) * (-0.2146018 + 
          (abs(tmpvar_56) * (0.08656672 + (abs(tmpvar_56) * -0.03102955)))
        ))))
      )));
      fOsc_43 = (tmpvar_48.y - (tmpvar_48.x * tmpvar_48.x));
      fTwitch_41 = 0.0;
      if (tmpvar_40) {
        highp float fTime_59;
        fTime_59 = (tmpvar_39.z + tmpvar_46);
        highp vec4 tmpvar_60;
        tmpvar_60.zw = vec2(0.0, 0.0);
        tmpvar_60.x = fTime_59;
        tmpvar_60.y = (0.87 * fTime_59);
        highp vec4 tmpvar_61;
        highp vec4 tmpvar_62;
        tmpvar_62 = abs(((
          fract((tmpvar_60 + 0.5))
         * 2.0) - 1.0));
        tmpvar_61 = (((
          (tmpvar_62 * tmpvar_62)
         * 
          (3.0 - (2.0 * tmpvar_62))
        ) - 0.5) * 2.0);
        fTwitch_41 = (tmpvar_39.x * pow (clamp (
          ((((tmpvar_61.x * tmpvar_61.y) * tmpvar_61.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_39.y));
      };
      highp float fAngle_63;
      fAngle_63 = (_glesMultiTexCoord2.x * ((
        (tmpvar_58 * tmpvar_38)
       + 
        (fOsc_43 * tmpvar_36)
      ) + fTwitch_41));
      highp vec2 vSinCos_64;
      vSinCos_64.x = sin(fAngle_63);
      vSinCos_64.y = cos(fAngle_63);
      highp float tmpvar_65;
      tmpvar_65 = (1.0 - vSinCos_64.y);
      highp mat3 tmpvar_66;
      tmpvar_66[0].x = (((tmpvar_65 * tmpvar_57.x) * tmpvar_57.x) + vSinCos_64.y);
      tmpvar_66[0].y = (((tmpvar_65 * tmpvar_57.x) * tmpvar_57.y) + (vSinCos_64.x * tmpvar_57.z));
      tmpvar_66[0].z = (((tmpvar_65 * tmpvar_57.x) * tmpvar_57.z) - (vSinCos_64.x * tmpvar_57.y));
      tmpvar_66[1].x = (((tmpvar_65 * tmpvar_57.x) * tmpvar_57.y) - (vSinCos_64.x * tmpvar_57.z));
      tmpvar_66[1].y = (((tmpvar_65 * tmpvar_57.y) * tmpvar_57.y) + vSinCos_64.y);
      tmpvar_66[1].z = (((tmpvar_65 * tmpvar_57.y) * tmpvar_57.z) + (vSinCos_64.x * tmpvar_57.x));
      tmpvar_66[2].x = (((tmpvar_65 * tmpvar_57.x) * tmpvar_57.z) + (vSinCos_64.x * tmpvar_57.y));
      tmpvar_66[2].y = (((tmpvar_65 * tmpvar_57.y) * tmpvar_57.z) - (vSinCos_64.x * tmpvar_57.x));
      tmpvar_66[2].z = (((tmpvar_65 * tmpvar_57.z) * tmpvar_57.z) + vSinCos_64.y);
      highp mat3 tmpvar_67;
      tmpvar_67 = (tmpvar_54 * tmpvar_66);
      vOriginPos_44 = (normalize((tmpvar_67 * vPos_31)) * tmpvar_50);
      vDirection_28 = (tmpvar_67 * _glesNormal);
      vPos_27 = vOriginPos_44;
    };
    tmpvar_14 = vDirection_28;
    FinalPosition_17 = vPos_27;
  };
  FinalPosition_17 = (FinalPosition_17 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_68;
    vPos_68 = FinalPosition_17;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_69;
      vPos_69 = FinalPosition_17;
      highp float fTime_70;
      highp float fAdherenceScale_71;
      highp vec3 vWindVector_72;
      vWindVector_72 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_70 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_73;
      highp float fOscillation_74;
      fOscillation_74 = 1.0;
      highp float fAmount_75;
      highp float fTarget_76;
      highp vec4 tmpvar_77;
      tmpvar_77.x = (fTime_70 + _glesMultiTexCoord0.w);
      tmpvar_77.y = ((fTime_70 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_77.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_70 + _glesMultiTexCoord0.w));
      tmpvar_77.w = ((fTime_70 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_78;
      tmpvar_78 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      vOscillations_73 = (((
        (tmpvar_78 * tmpvar_78)
       * 
        (3.0 - (2.0 * tmpvar_78))
      ) - 0.5) * 2.0);
      highp float tmpvar_79;
      tmpvar_79 = (vOscillations_73.y * vOscillations_73.z);
      fTarget_76 = 1.0;
      fAmount_75 = tmpvar_79;
      if ((tmpvar_79 < 0.0)) {
        fTarget_76 = -1.0;
        fAmount_75 = -(tmpvar_79);
      };
      fOscillation_74 = (((
        mix (mix (tmpvar_79, fTarget_76, fAmount_75), fTarget_76, fAmount_75)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_73.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_74 = (fOscillation_74 * (1.0 + (vOscillations_73.w * _ST_WindBranchWhip.x)));
      vPos_69 = (FinalPosition_17 + ((vWindVector_72 * fOscillation_74) * _ST_WindBranch.y));
      highp vec4 tmpvar_80;
      tmpvar_80.zw = vec2(0.0, 0.0);
      tmpvar_80.x = ((fTime_70 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_80.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_81;
      highp vec4 tmpvar_82;
      tmpvar_82 = abs(((
        fract((tmpvar_80 + 0.5))
       * 2.0) - 1.0));
      tmpvar_81 = (((
        (tmpvar_82 * tmpvar_82)
       * 
        (3.0 - (2.0 * tmpvar_82))
      ) - 0.5) * 2.0);
      fAdherenceScale_71 = (1.0 - ((tmpvar_81.x * tmpvar_81.y) * (
        (tmpvar_81.x * tmpvar_81.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_71 = (fAdherenceScale_71 + ((vOscillations_73.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_69 = (vPos_69 + ((
        ((vRotatedBranchAnchor_15 - vPos_69) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_71) * _glesMultiTexCoord0.z));
      vPos_68 = vPos_69;
    } else {
      highp vec3 vPos_83;
      vPos_83 = vPos_68;
      highp float fTime_84;
      highp vec3 vWindVector_85;
      vWindVector_85 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_84 = (_ST_WindBranch.x + (tmpvar_18.x + tmpvar_18.y));
      highp vec4 vOscillations_86;
      highp float fOscillation_87;
      fOscillation_87 = 1.0;
      highp float fAmount_88;
      highp float fTarget_89;
      highp vec4 tmpvar_90;
      tmpvar_90.w = 0.0;
      tmpvar_90.x = (fTime_84 + _glesMultiTexCoord0.w);
      tmpvar_90.y = ((fTime_84 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_90.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_84 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_91;
      tmpvar_91 = abs(((
        fract((tmpvar_90 + 0.5))
       * 2.0) - 1.0));
      vOscillations_86 = (((
        (tmpvar_91 * tmpvar_91)
       * 
        (3.0 - (2.0 * tmpvar_91))
      ) - 0.5) * 2.0);
      highp float tmpvar_92;
      tmpvar_92 = (vOscillations_86.y * vOscillations_86.z);
      fTarget_89 = 1.0;
      fAmount_88 = tmpvar_92;
      if ((tmpvar_92 < 0.0)) {
        fTarget_89 = -1.0;
        fAmount_88 = -(tmpvar_92);
      };
      fOscillation_87 = (((
        mix (mix (tmpvar_92, fTarget_89, fAmount_88), fTarget_89, fAmount_88)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_86.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_83 = (vPos_68 + ((vWindVector_85 * fOscillation_87) * _ST_WindBranch.y));
      vPos_68 = vPos_83;
    };
    FinalPosition_17 = vPos_68;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_93;
    vPos_93 = FinalPosition_17;
    highp float fMoveAmount_94;
    highp float fAdjust_95;
    highp float fLength_96;
    fLength_96 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_97;
    tmpvar_97 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_95 = tmpvar_97;
    if ((tmpvar_97 != 0.0)) {
      fAdjust_95 = pow (tmpvar_97, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_98;
    tmpvar_98.zw = vec2(0.0, 0.0);
    tmpvar_98.x = (tmpvar_18.x + _ST_WindGlobal.x);
    tmpvar_98.y = (tmpvar_18.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_99;
    highp vec4 tmpvar_100;
    tmpvar_100 = abs(((
      fract((tmpvar_98 + 0.5))
     * 2.0) - 1.0));
    tmpvar_99 = (((
      (tmpvar_100 * tmpvar_100)
     * 
      (3.0 - (2.0 * tmpvar_100))
    ) - 0.5) * 2.0);
    fMoveAmount_94 = ((_ST_WindGlobal.y * (tmpvar_99.x + 
      (tmpvar_99.y * tmpvar_99.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_94 = (fMoveAmount_94 * fAdjust_95);
    vPos_93.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_94));
    vPos_93 = (normalize(vPos_93) * fLength_96);
    FinalPosition_17 = vPos_93;
  };
  tmpvar_13.xyz = FinalPosition_17;
  tmpvar_8 = tmpvar_11;
  highp vec3 tmpvar_101;
  tmpvar_101 = (_Object2World * tmpvar_13).xyz;
  highp vec4 v_102;
  v_102.x = _World2Object[0].x;
  v_102.y = _World2Object[1].x;
  v_102.z = _World2Object[2].x;
  v_102.w = _World2Object[3].x;
  highp vec4 v_103;
  v_103.x = _World2Object[0].y;
  v_103.y = _World2Object[1].y;
  v_103.z = _World2Object[2].y;
  v_103.w = _World2Object[3].y;
  highp vec4 v_104;
  v_104.x = _World2Object[0].z;
  v_104.y = _World2Object[1].z;
  v_104.z = _World2Object[2].z;
  v_104.w = _World2Object[3].z;
  highp vec3 tmpvar_105;
  tmpvar_105 = normalize(((
    (v_102.xyz * tmpvar_14.x)
   + 
    (v_103.xyz * tmpvar_14.y)
  ) + (v_104.xyz * tmpvar_14.z)));
  worldNormal_6 = tmpvar_105;
  tmpvar_7 = worldNormal_6;
  lowp vec4 tmpvar_106;
  tmpvar_106.w = 1.0;
  tmpvar_106.xyz = worldNormal_6;
  mediump vec4 normal_107;
  normal_107 = tmpvar_106;
  mediump vec3 x2_108;
  mediump vec4 tmpvar_109;
  tmpvar_109 = (normal_107.xyzz * normal_107.yzzx);
  x2_108.x = dot (unity_SHBr, tmpvar_109);
  x2_108.y = dot (unity_SHBg, tmpvar_109);
  x2_108.z = dot (unity_SHBb, tmpvar_109);
  highp vec3 lightColor0_110;
  lightColor0_110 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_111;
  lightColor1_111 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_112;
  lightColor2_112 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_113;
  lightColor3_113 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_114;
  lightAttenSq_114 = unity_4LightAtten0;
  highp vec3 normal_115;
  normal_115 = worldNormal_6;
  highp vec3 col_116;
  highp vec4 ndotl_117;
  highp vec4 lengthSq_118;
  highp vec4 tmpvar_119;
  tmpvar_119 = (unity_4LightPosX0 - tmpvar_101.x);
  highp vec4 tmpvar_120;
  tmpvar_120 = (unity_4LightPosY0 - tmpvar_101.y);
  highp vec4 tmpvar_121;
  tmpvar_121 = (unity_4LightPosZ0 - tmpvar_101.z);
  lengthSq_118 = (tmpvar_119 * tmpvar_119);
  lengthSq_118 = (lengthSq_118 + (tmpvar_120 * tmpvar_120));
  lengthSq_118 = (lengthSq_118 + (tmpvar_121 * tmpvar_121));
  ndotl_117 = (tmpvar_119 * normal_115.x);
  ndotl_117 = (ndotl_117 + (tmpvar_120 * normal_115.y));
  ndotl_117 = (ndotl_117 + (tmpvar_121 * normal_115.z));
  highp vec4 tmpvar_122;
  tmpvar_122 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_117 * inversesqrt(lengthSq_118)));
  ndotl_117 = tmpvar_122;
  highp vec4 tmpvar_123;
  tmpvar_123 = (tmpvar_122 * (1.0/((1.0 + 
    (lengthSq_118 * lightAttenSq_114)
  ))));
  col_116 = (lightColor0_110 * tmpvar_123.x);
  col_116 = (col_116 + (lightColor1_111 * tmpvar_123.y));
  col_116 = (col_116 + (lightColor2_112 * tmpvar_123.z));
  col_116 = (col_116 + (lightColor3_113 * tmpvar_123.w));
  tmpvar_9 = ((x2_108 + (unity_SHC.xyz * 
    ((normal_107.x * normal_107.x) - (normal_107.y * normal_107.y))
  )) + col_116);
  tmpvar_10 = (unity_World2Shadow[0] * (_Object2World * tmpvar_13));
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_7;
  xlv_TEXCOORD1 = tmpvar_101;
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD3 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_10 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp float shadow_14;
  shadow_14 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD5.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_14;
  mediump vec3 normalWorld_15;
  normalWorld_15 = tmpvar_5;
  mediump vec3 tmpvar_16;
  mediump vec3 tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = normalWorld_15;
  mediump vec3 x1_19;
  x1_19.x = dot (unity_SHAr, tmpvar_18);
  x1_19.y = dot (unity_SHAg, tmpvar_18);
  x1_19.z = dot (unity_SHAb, tmpvar_18);
  tmpvar_17 = (xlv_TEXCOORD4 + x1_19);
  tmpvar_16 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_16;
  lowp vec4 c_20;
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_22 = tmpvar_23;
  c_21.xyz = ((tmpvar_9 * tmpvar_16) * diff_22);
  c_21.w = tmpvar_10;
  c_20.w = c_21.w;
  c_20.xyz = (c_21.xyz + (tmpvar_9 * tmpvar_17));
  c_4.xyz = c_20.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec2 in_TEXCOORD3;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
highp vec3 t1;
bvec2 tb1;
highp vec4 t2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
mediump vec3 t16_14;
highp vec3 t16;
highp int ti16;
highp vec3 t17;
bool tb17;
highp vec3 t22;
highp float t31;
bool tb31;
highp vec2 t34;
highp float t35;
highp vec2 t36;
highp float t46;
bool tb46;
highp float t47;
bool tb47;
highp float t48;
bool tb48;
highp float t49;
mediump float t16_59;
void main()
{
    //Instruction 16543
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 16544
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 16545
    //LT
    tb1.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), t16_0.xxxx).xy;
    //Instruction 16546
    //MUL
    t2.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 16547
    //MAD
    t2.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t2.xyz;
    //Instruction 16548
    //MAD
    t2.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t2.xyz;
    //Instruction 16549
    //DP3
    t31 = dot(t2.xyz, t2.xyz);
    //Instruction 16550
    //RSQ
    t31 = inversesqrt(t31);
    //Instruction 16551
    //MUL
    t2.xyz = vec3(t31) * t2.xyz;
    //Instruction 16552
    //AND
    t2.xyz = mix(vec3(0.0, 0.0, 0.0), t2.xyz, tb1.xxx);
    //Instruction 16553
    //ADD
    t3.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 16554
    //MOV
    t4.x = in_TEXCOORD1.w;
    //Instruction 16555
    //MOV
    t4.yz = in_TEXCOORD3.xy;
    //Instruction 16556
    //ADD
    t4.xyz = (-t3.xyz) + t4.xyz;
    //Instruction 16557
    //MAD
    t3.xyz = unity_LODFade.xxx * t4.xyz + t3.xyz;
    //Instruction 16558
    //LT
    tb31 = t16_0.x<5.000000;
    //Instruction 16559
    //AND
    ti16 = int(uint(tb31) & uint(tb1.y));
    //Instruction 16560
    //IF
    if((uint(ti16))!=uint(0u)){
        //Instruction 16561
        //ADD
        t16.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 16562
        //EQ
        tb31 = t16_0.x==4.000000;
        //Instruction 16563
        //LT
        tb46 = 0.0<in_TEXCOORD2.w;
        //Instruction 16564
        //MOVC
        t4.xy = (bool(tb46)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 16565
        //ADD
        t16.x = t16.x + t4.x;
        //Instruction 16566
        //ADD
        t16.x = t16.x + 0.500000;
        //Instruction 16567
        //FRC
        t16.x = fract(t16.x);
        //Instruction 16568
        //MAD
        t16.x = t16.x * 2.000000 + -1.0;
        //Instruction 16569
        //MUL
        t47 = abs(t16.x) * abs(t16.x);
        //Instruction 16570
        //MAD
        t16.x = -abs(t16.x) * 2.000000 + 3.000000;
        //Instruction 16571
        //MAD
        t16.x = t47 * t16.x + -0.500000;
        //Instruction 16572
        //DP2
        t16.x = dot(t16.xx, t4.yy);
        //Instruction 16573
        //MUL
        t4.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 16574
        //FRC
        t4.xyz = fract(t4.xyz);
        //Instruction 16575
        //MAD
        t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 16576
        //MUL
        t4.xyz = t16.xxx * t4.xyz;
        //Instruction 16577
        //MAD
        t3.xyz = t4.xyz * in_TEXCOORD2.xxx + t3.xyz;
        //Instruction 16578
        //IF
        if(tb31){
            //Instruction 16579
            //MUL
            t4 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 16580
            //FRC
            t4 = fract(t4);
            //Instruction 16581
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 16582
            //MOVC
            t5 = (bool(tb46)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 16583
            //MOVC
            t16.xyz = (bool(tb46)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 16584
            //MUL
            t47 = t4.w * 3.000000;
            //Instruction 16585
            //MAD
            t6.y = t4.w * 3.000000 + t5.x;
            //Instruction 16586
            //MAD
            t6.x = t5.x * 0.750000 + (-t47);
            //Instruction 16587
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 16588
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 16589
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 16590
            //MUL
            t36.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 16591
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 16592
            //MAD
            t6.xy = t36.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 16593
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 16594
            //DP3
            t47 = dot(t3.xyz, t3.xyz);
            //Instruction 16595
            //SQRT
            t47 = sqrt(t47);
            //Instruction 16596
            //MAD
            t48 = t6.x * t6.x + t6.y;
            //Instruction 16597
            //MUL
            t5.x = t5.z * in_TEXCOORD2.x;
            //Instruction 16598
            //MUL
            t48 = t48 * t5.x;
            //Instruction 16599
            //SINCOS
            t5.x = sin(t48);
            t7.x = cos(t48);
            //Instruction 16600
            //ADD
            t48 = (-t7.x) + 1.0;
            //Instruction 16601
            //MUL
            t8 = t4.xxxy * vec4(t48);
            //Instruction 16602
            //MUL
            t22.xyz = t4.zxy * t5.xxx;
            //Instruction 16603
            //MAD
            t9.xy = t8.zy * t4.zy + t22.zx;
            //Instruction 16604
            //MAD
            t10.xy = t8.xw * t4.xy + t7.xx;
            //Instruction 16605
            //MAD
            t9.z = t8.w * t4.z + (-t22.y);
            //Instruction 16606
            //MAD
            t11.xy = t8.yz * t4.yz + (-t22.xz);
            //Instruction 16607
            //MAD
            t11.z = t8.w * t4.z + t22.y;
            //Instruction 16608
            //MUL
            t5.x = t4.z * t4.z;
            //Instruction 16609
            //MAD
            t11.w = t5.x * t48 + t7.x;
            //Instruction 16610
            //MUL
            t7.xyz = t2.yzx * t4.zxy;
            //Instruction 16611
            //MAD
            t7.xyz = t4.yzx * t2.zxy + (-t7.xyz);
            //Instruction 16612
            //DP3
            t17.x = dot(t2.xyz, t4.xyz);
            //Instruction 16613
            //MAX
            t17.x = max(t17.x, -1.0);
            //Instruction 16614
            //MIN
            t17.x = min(t17.x, 1.0);
            //Instruction 16615
            //ADD
            t7.w = t17.x + t7.y;
            //Instruction 16616
            //DP3
            t48 = dot(t7.xzw, t7.xzw);
            //Instruction 16617
            //RSQ
            t48 = inversesqrt(t48);
            //Instruction 16618
            //MUL
            t4.xyz = vec3(t48) * t7.zxw;
            //Instruction 16619
            //ADD
            t48 = -abs(t17.x) + 1.0;
            //Instruction 16620
            //SQRT
            t48 = sqrt(t48);
            //Instruction 16621
            //MAD
            t5.x = abs(t17.x) * -0.018729 + 0.074261;
            //Instruction 16622
            //MAD
            t5.x = t5.x * abs(t17.x) + -0.212114;
            //Instruction 16623
            //MAD
            t5.x = t5.x * abs(t17.x) + 1.570729;
            //Instruction 16624
            //MUL
            t35 = t48 * t5.x;
            //Instruction 16625
            //MAD
            t35 = t35 * -2.000000 + 3.141593;
            //Instruction 16626
            //LT
            tb17 = t17.x<(-t17.x);
            //Instruction 16627
            //AND
            t17.x = tb17 ? t35 : float(0.0);
            //Instruction 16628
            //MAD
            t17.x = t5.x * t48 + t17.x;
            //Instruction 16629
            //MAD
            t48 = (-t6.y) * t6.y + t6.x;
            //Instruction 16630
            //MAD
            t6.x = t4.w * 3.000000 + t16.z;
            //Instruction 16631
            //MUL
            t6.y = t6.x * 0.870000;
            //Instruction 16632
            //ADD
            t5.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 16633
            //FRC
            t5.xz = fract(t5.xz);
            //Instruction 16634
            //MAD
            t5.xz = t5.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 16635
            //MUL
            t6.xy = abs(t5.xz) * abs(t5.xz);
            //Instruction 16636
            //MAD
            t5.xz = -abs(t5.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 16637
            //MAD
            t5.xz = t6.xy * t5.xz + vec2(-0.500000, -0.500000);
            //Instruction 16638
            //ADD
            t5.xz = t5.xz + t5.xz;
            //Instruction 16639
            //MUL
            t46 = t5.z * t5.z;
            //Instruction 16640
            //MAD
            t46 = t46 * t5.x + 1.0;
            //Instruction 16641
            //MUL
            t46 = t46 * 0.500000;
            t46 = clamp(t46, 0.0, 1.0);
            //Instruction 16642
            //LOG
            t46 = log2(t46);
            //Instruction 16643
            //MUL
            t31 = t46 * t16.y;
            //Instruction 16644
            //EXP
            t31 = exp2(t31);
            //Instruction 16645
            //MUL
            t46 = t5.y * t48;
            //Instruction 16646
            //MAD
            t46 = t17.x * t5.w + t46;
            //Instruction 16647
            //MAD
            t16.x = t16.x * t31 + t46;
            //Instruction 16648
            //MUL
            t16.x = t16.x * in_TEXCOORD2.x;
            //Instruction 16649
            //SINCOS
            t5.x = sin(t16.x);
            t6.x = cos(t16.x);
            //Instruction 16650
            //ADD
            t16.x = (-t6.x) + 1.0;
            //Instruction 16651
            //MUL
            t7 = vec4(t4.y * t16.x, t4.y * t16.x, t4.y * t16.x, t4.z * t16.x);
            //Instruction 16652
            //MUL
            t5.xyz = t4.xyz * t5.xxx;
            //Instruction 16653
            //MAD
            t8.xy = t7.zy * t4.xz + t5.zx;
            //Instruction 16654
            //MAD
            t12.xy = t7.xw * t4.yz + t6.xx;
            //Instruction 16655
            //MAD
            t8.z = t7.w * t4.x + (-t5.y);
            //Instruction 16656
            //MAD
            t13.xy = t7.yz * t4.zx + (-t5.xz);
            //Instruction 16657
            //MAD
            t13.z = t7.w * t4.x + t5.y;
            //Instruction 16658
            //MUL
            t31 = t4.x * t4.x;
            //Instruction 16659
            //MAD
            t8.w = t31 * t16.x + t6.x;
            //Instruction 16660
            //MOV
            t10.z = t11.x;
            //Instruction 16661
            //MOV
            t10.w = t9.x;
            //Instruction 16662
            //MOV
            t12.z = t8.y;
            //Instruction 16663
            //MOV
            t12.w = t13.y;
            //Instruction 16664
            //DP3
            t4.x = dot(t10.xzw, t12.xzw);
            //Instruction 16665
            //MOV
            t13.w = t12.y;
            //Instruction 16666
            //DP3
            t4.y = dot(t10.xwz, t13.xzw);
            //Instruction 16667
            //DP3
            t4.z = dot(t10.xzw, t8.xzw);
            //Instruction 16668
            //MOV
            t9.w = t10.y;
            //Instruction 16669
            //DP3
            t5.x = dot(t9.ywz, t12.xzw);
            //Instruction 16670
            //DP3
            t5.y = dot(t9.yzw, t13.xzw);
            //Instruction 16671
            //DP3
            t5.z = dot(t9.ywz, t8.xzw);
            //Instruction 16672
            //DP3
            t6.x = dot(t11.yzw, t12.xzw);
            //Instruction 16673
            //DP3
            t6.y = dot(t11.ywz, t13.xzw);
            //Instruction 16674
            //DP3
            t6.z = dot(t11.yzw, t8.xzw);
            //Instruction 16675
            //DP3
            t16.x = dot(t4.xyz, in_NORMAL0.xyz);
            //Instruction 16676
            //DP3
            t16.y = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 16677
            //DP3
            t16.z = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 16678
            //DP3
            t4.x = dot(t4.xyz, t3.xyz);
            //Instruction 16679
            //DP3
            t4.y = dot(t5.xyz, t3.xyz);
            //Instruction 16680
            //DP3
            t4.z = dot(t6.xyz, t3.xyz);
            //Instruction 16681
            //DP3
            t17.x = dot(t4.xyz, t4.xyz);
            //Instruction 16682
            //RSQ
            t17.x = inversesqrt(t17.x);
            //Instruction 16683
            //MUL
            t4.xyz = t17.xxx * t4.xyz;
            //Instruction 16684
            //MUL
            t3.xyz = vec3(t47) * t4.xyz;
            //Instruction 16685
        //ELSE
        } else {
            //Instruction 16686
            //MOV
            t16.xyz = in_NORMAL0.xyz;
            //Instruction 16687
        //ENDIF
        }
        //Instruction 16688
    //ELSE
    } else {
        //Instruction 16689
        //MOV
        t16.xyz = in_NORMAL0.xyz;
        //Instruction 16690
    //ENDIF
    }
    //Instruction 16691
    //ADD
    t3.xyz = t3.xyz + in_TEXCOORD1.xyz;
    //Instruction 16692
    //GE
    tb17 = t16_0.x>=3.000000;
    //Instruction 16693
    //IF
    if(tb17){
        //Instruction 16694
        //EQ
        tb17 = t16_0.x==5.000000;
        //Instruction 16695
        //IF
        if(tb17){
            //Instruction 16696
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 16697
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 16698
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 16699
            //DP3
            t17.x = dot(t4.xyz, t4.xyz);
            //Instruction 16700
            //RSQ
            t17.x = inversesqrt(t17.x);
            //Instruction 16701
            //MUL
            t4.xyz = t17.xxx * t4.xyz;
            //Instruction 16702
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 16703
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 16704
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 16705
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 16706
            //ADD
            t17.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 16707
            //ADD
            t17.x = t17.x + _ST_WindBranch.x;
            //Instruction 16708
            //ADD
            t0.x = t17.x + in_TEXCOORD0.w;
            //Instruction 16709
            //MAD
            t0.y = t17.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 16710
            //MUL
            t47 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 16711
            //MUL
            t0.z = t47 * 0.500000;
            //Instruction 16712
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 16713
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 16714
            //FRC
            t0 = fract(t0);
            //Instruction 16715
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 16716
            //MUL
            t6 = abs(t0) * abs(t0);
            //Instruction 16717
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 16718
            //MAD
            t0 = t6 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 16719
            //ADD
            t0 = t0 + t0;
            //Instruction 16720
            //MUL
            t6.w = t0.z * t0.y;
            //Instruction 16721
            //LT
            tb47 = t6.w<0.0;
            //Instruction 16722
            //MOV
            t6.y = (-t6.w);
            //Instruction 16723
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 16724
            //MOVC
            t6.xy = (bool(tb47)) ? t6.xy : t6.zw;
            //Instruction 16725
            //MAD
            t47 = (-t0.y) * t0.z + t6.x;
            //Instruction 16726
            //MAD
            t47 = t6.y * t47 + t6.w;
            //Instruction 16727
            //ADD
            t48 = (-t47) + t6.x;
            //Instruction 16728
            //MAD
            t47 = t6.y * t48 + t47;
            //Instruction 16729
            //MUL
            t47 = t47 * _ST_WindBranchTwitch.x;
            //Instruction 16730
            //ADD
            t48 = (-_ST_WindVector.w) + 1.0;
            //Instruction 16731
            //ADD
            t49 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 16732
            //MUL
            t49 = t0.x * t49;
            //Instruction 16733
            //MAD
            t47 = t47 * t48 + t49;
            //Instruction 16734
            //MAD
            t48 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 16735
            //MUL
            t47 = t47 * t48;
            //Instruction 16736
            //MUL
            t5.xyz = vec3(t47) * t5.xyz;
            //Instruction 16737
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 16738
            //MAD
            t6.x = t17.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 16739
            //MUL
            t17.x = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 16740
            //MAD
            t6.y = t17.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 16741
            //ADD
            t17.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 16742
            //FRC
            t17.xz = fract(t17.xz);
            //Instruction 16743
            //MAD
            t17.xz = t17.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 16744
            //MUL
            t6.xy = abs(t17.xz) * abs(t17.xz);
            //Instruction 16745
            //MAD
            t17.xz = -abs(t17.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 16746
            //MAD
            t17.xz = t6.xy * t17.xz + vec2(-0.500000, -0.500000);
            //Instruction 16747
            //ADD
            t17.xz = t17.xz + t17.xz;
            //Instruction 16748
            //MUL
            t17.xz = t17.xz * t17.xz;
            //Instruction 16749
            //MUL
            t17.x = t17.x * t17.z;
            //Instruction 16750
            //MAD
            t17.x = (-t17.x) * _ST_WindTurbulences.x + 1.0;
            //Instruction 16751
            //MUL
            t47 = t0.w * _ST_WindVector.w;
            //Instruction 16752
            //MAD
            t17.x = t47 * _ST_WindBranchWhip.x + t17.x;
            //Instruction 16753
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 16754
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 16755
            //MUL
            t4.xyz = t17.xxx * t4.xyz;
            //Instruction 16756
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 16757
        //ELSE
        } else {
            //Instruction 16758
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 16759
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 16760
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 16761
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 16762
            //ADD
            t17.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 16763
            //ADD
            t17.x = t17.x + _ST_WindBranch.x;
            //Instruction 16764
            //ADD
            t5.x = t17.x + in_TEXCOORD0.w;
            //Instruction 16765
            //MAD
            t5.y = t17.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 16766
            //MUL
            t17.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 16767
            //MUL
            t5.z = t17.x * 0.500000;
            //Instruction 16768
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 16769
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 16770
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 16771
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 16772
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 16773
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 16774
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 16775
            //MUL
            t0.w = t5.z * t5.y;
            //Instruction 16776
            //LT
            tb17 = t0.w<0.0;
            //Instruction 16777
            //MOV
            t0.y = (-t0.w);
            //Instruction 16778
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 16779
            //MOVC
            t17.xz = (bool(tb17)) ? t0.xy : t0.zw;
            //Instruction 16780
            //MAD
            t48 = (-t5.y) * t5.z + t17.x;
            //Instruction 16781
            //MAD
            t48 = t17.z * t48 + t0.w;
            //Instruction 16782
            //ADD
            t17.x = t17.x + (-t48);
            //Instruction 16783
            //MAD
            t17.x = t17.z * t17.x + t48;
            //Instruction 16784
            //MUL
            t17.x = t17.x * _ST_WindBranchTwitch.x;
            //Instruction 16785
            //ADD
            t47 = (-_ST_WindVector.w) + 1.0;
            //Instruction 16786
            //ADD
            t48 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 16787
            //MUL
            t48 = t48 * t5.x;
            //Instruction 16788
            //MAD
            t17.x = t17.x * t47 + t48;
            //Instruction 16789
            //MUL
            t4.xyz = t17.xxx * t4.xyz;
            //Instruction 16790
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 16791
        //ENDIF
        }
        //Instruction 16792
    //ENDIF
    }
    //Instruction 16793
    //DP3
    t17.x = dot(t3.xyz, t3.xyz);
    //Instruction 16794
    //SQRT
    t17.x = sqrt(t17.x);
    //Instruction 16795
    //DIV
    t47 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 16796
    //MAD
    t47 = (-t47) * 0.250000 + t3.y;
    //Instruction 16797
    //MAX
    t47 = max(t47, 0.0);
    //Instruction 16798
    //MUL
    t47 = t47 * _ST_WindGlobal.z;
    //Instruction 16799
    //NE
    tb48 = t47!=0.0;
    //Instruction 16800
    //LOG
    t4.x = log2(t47);
    //Instruction 16801
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 16802
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 16803
    //MOVC
    t47 = (tb48) ? t4.x : t47;
    //Instruction 16804
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 16805
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 16806
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 16807
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 16808
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 16809
    //MUL
    t34.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 16810
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 16811
    //MAD
    t4.xy = t34.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 16812
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 16813
    //MAD
    t48 = t4.y * t4.y + t4.x;
    //Instruction 16814
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 16815
    //MAD
    t48 = _ST_WindGlobal.y * t48 + t4.x;
    //Instruction 16816
    //MUL
    t47 = t47 * t48;
    //Instruction 16817
    //MAD
    t4.xz = t2.xz * vec2(t47) + t3.xz;
    //Instruction 16818
    //MOV
    t4.y = t3.y;
    //Instruction 16819
    //DP3
    t2.x = dot(t4.xyz, t4.xyz);
    //Instruction 16820
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 16821
    //MUL
    t2.xzw = t2.xxx * t4.xyz;
    //Instruction 16822
    //MUL
    t2.xyz = t17.xxx * t2.xzw;
    //Instruction 16823
    //MOVC
    t2.xyz = (tb1.x) ? t2.xyz : t3.xyz;
    //Instruction 16824
    //MUL
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 16825
    //MAD
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    //Instruction 16826
    //MAD
    t0 = glstate_matrix_mvp[2] * t2.zzzz + t0;
    //Instruction 16827
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 16828
    //MUL
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 16829
    //MAD
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    //Instruction 16830
    //MAD
    t3.xyz = _Object2World[2].xyz * t2.zzz + t3.xyz;
    //Instruction 16831
    //MAD
    t3.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xyz;
    //Instruction 16832
    //MOV
    t4.x = _World2Object[0].x;
    //Instruction 16833
    //MOV
    t4.y = _World2Object[1].x;
    //Instruction 16834
    //MOV
    t4.z = _World2Object[2].x;
    //Instruction 16835
    //MOV
    t5.x = _World2Object[0].y;
    //Instruction 16836
    //MOV
    t5.y = _World2Object[1].y;
    //Instruction 16837
    //MOV
    t5.z = _World2Object[2].y;
    //Instruction 16838
    //MUL
    t5.xyz = t16.yyy * t5.xyz;
    //Instruction 16839
    //MAD
    t1.xyz = t4.xyz * t16.xxx + t5.xyz;
    //Instruction 16840
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 16841
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 16842
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 16843
    //MAD
    t1.xyz = t4.xyz * t16.zzz + t1.xyz;
    //Instruction 16844
    //DP3
    t46 = dot(t1.xyz, t1.xyz);
    //Instruction 16845
    //RSQ
    t46 = inversesqrt(t46);
    //Instruction 16846
    //MUL
    t1.xyz = vec3(t46) * t1.xyz;
    //Instruction 16847
    //MUL
    t16_0 = t1.yzzx * t1.xyzz;
    //Instruction 16848
    //DP4
    t16_14.x = dot(unity_SHBr, t16_0);
    //Instruction 16849
    //DP4
    t16_14.y = dot(unity_SHBg, t16_0);
    //Instruction 16850
    //DP4
    t16_14.z = dot(unity_SHBb, t16_0);
    //Instruction 16851
    //MUL
    t16_59 = t1.y * t1.y;
    //Instruction 16852
    //MAD
    t16_59 = t1.x * t1.x + (-t16_59);
    //Instruction 16853
    //MAD
    t16_14.xyz = unity_SHC.xyz * vec3(t16_59) + t16_14.xyz;
    //Instruction 16854
    //ADD
    t0 = (-t3.xxxx) + unity_4LightPosX0;
    //Instruction 16855
    //ADD
    t4 = (-t3.yyyy) + unity_4LightPosY0;
    //Instruction 16856
    //ADD
    t5 = (-t3.zzzz) + unity_4LightPosZ0;
    //Instruction 16857
    //MUL
    t6 = t4 * t4;
    //Instruction 16858
    //MAD
    t6 = t0 * t0 + t6;
    //Instruction 16859
    //MAD
    t6 = t5 * t5 + t6;
    //Instruction 16860
    //MUL
    t4 = t1.yyyy * t4;
    //Instruction 16861
    //MAD
    t0 = t0 * t1.xxxx + t4;
    //Instruction 16862
    //MAD
    t0 = t5 * t1.zzzz + t0;
    //Instruction 16863
    //RSQ
    t4 = inversesqrt(t6);
    //Instruction 16864
    //MUL
    t0 = t0 * t4;
    //Instruction 16865
    //MAX
    t0 = max(t0, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 16866
    //MAD
    t4 = t6 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 16867
    //DIV
    t4 = vec4(1.0, 1.0, 1.0, 1.0) / t4;
    //Instruction 16868
    //MUL
    t0 = t0 * t4;
    //Instruction 16869
    //MUL
    t4.xyz = t0.yyy * unity_LightColor[1].xyz;
    //Instruction 16870
    //MAD
    t4.xyz = unity_LightColor[0].xyz * t0.xxx + t4.xyz;
    //Instruction 16871
    //MAD
    t4.xyz = unity_LightColor[2].xyz * t0.zzz + t4.xyz;
    //Instruction 16872
    //MAD
    t4.xyz = unity_LightColor[3].xyz * t0.www + t4.xyz;
    //Instruction 16873
    //ADD
    t4.xyz = t4.xyz + t16_14.xyz;
    //Instruction 16874
    //MUL
    t0 = t2.yyyy * _Object2World[1];
    //Instruction 16875
    //MAD
    t0 = _Object2World[0] * t2.xxxx + t0;
    //Instruction 16876
    //MAD
    t0 = _Object2World[2] * t2.zzzz + t0;
    //Instruction 16877
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 16878
    //MUL
    t2 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 16879
    //MAD
    t2 = unity_World2Shadow[0][0] * t0.xxxx + t2;
    //Instruction 16880
    //MAD
    t2 = unity_World2Shadow[0][2] * t0.zzzz + t2;
    //Instruction 16881
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t2;
    //Instruction 16882
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 16883
    //MOV
    vs_TEXCOORD1.xyz = t3.xyz;
    //Instruction 16884
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 16885
    //MOV
    vs_TEXCOORD5 = t0;
    //Instruction 16886
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 16887
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 16888
    //MOV
    vs_TEXCOORD4.xyz = t4.xyz;
    //Instruction 16889
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_17;
mediump float t16_18;
void main()
{
    //Instruction 16520
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 16521
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 16522
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 16523
    //LT
    tb0 = t10_1<0.0;
    //Instruction 16524
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 16525
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 16526
    //MOV
    t16_0.w = 1.0;
    //Instruction 16527
    //DP4
    t16_3.x = dot(unity_SHAr, t16_0);
    //Instruction 16528
    //DP4
    t16_3.y = dot(unity_SHAg, t16_0);
    //Instruction 16529
    //DP4
    t16_3.z = dot(unity_SHAb, t16_0);
    //Instruction 16530
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD4.xyz;
    //Instruction 16531
    //MUL
    t16_3.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 16532
    //SAMPLE_C_LZ
    vec3 txVec51 = vec3(vs_TEXCOORD5.xy,vs_TEXCOORD5.z);
    t16_17 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec51, 0.0);
    //Instruction 16533
    //ADD
    t16_18 = (-_LightShadowData.x) + 1.0;
    //Instruction 16534
    //MAD
    t16_17 = t16_17 * t16_18 + _LightShadowData.x;
    //Instruction 16535
    //MUL
    t16_4.xyz = vec3(t16_17) * _LightColor0.xyz;
    //Instruction 16536
    //MUL
    t16_2.xyz = t16_2.xyz * t16_4.xyz;
    //Instruction 16537
    //DP3
    t16_17 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 16538
    //MAX
    t16_17 = max(t16_17, 0.0);
    //Instruction 16539
    //MAD
    t16_2.xyz = t16_2.xyz * vec3(t16_17) + t16_3.xyz;
    //Instruction 16540
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 16541
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 16542
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesMultiTexCoord3;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  tmpvar_4 = _glesMultiTexCoord1;
  highp vec2 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord3.xy;
  lowp vec3 worldNormal_6;
  mediump vec3 tmpvar_7;
  mediump vec4 tmpvar_8;
  lowp vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10.xy = tmpvar_3.xy;
  tmpvar_9.w = _Color.w;
  tmpvar_9.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].x;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].y;
  tmpvar_11 = clamp (((
    fract(((tmpvar_12 + tmpvar_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_10.z = tmpvar_11;
  highp vec4 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_1;
  tmpvar_15 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  FinalPosition_18 = tmpvar_1.xyz;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_18 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp vec3 tmpvar_22;
  tmpvar_22.x = tmpvar_4.w;
  tmpvar_22.y = tmpvar_5.x;
  tmpvar_22.z = tmpvar_5.y;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (FinalPosition_18, tmpvar_22, unity_LODFade.xxx);
  FinalPosition_18 = tmpvar_23;
  if (((tmpvar_19 > 1.0) && (tmpvar_19 < 5.0))) {
    highp float tmpvar_24;
    tmpvar_24 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_25;
    isBestWind_25 = (tmpvar_19 == 4.0);
    bool bLeaf2_26;
    bLeaf2_26 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_27;
    vPos_27 = tmpvar_23;
    highp vec3 vDirection_28;
    vDirection_28 = tmpvar_2;
    highp float tmpvar_29;
    if (bLeaf2_26) {
      tmpvar_29 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_30;
    if (bLeaf2_26) {
      tmpvar_30 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_30 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_31;
    highp vec4 tmpvar_32;
    tmpvar_32.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_32.x = (tmpvar_29 + tmpvar_24);
    highp vec4 tmpvar_33;
    tmpvar_33 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    vPos_31 = (tmpvar_23 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_30 * (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_28 = tmpvar_2;
    vPos_27 = vPos_31;
    if (isBestWind_25) {
      highp vec3 tmpvar_34;
      tmpvar_34 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_35;
      if (bLeaf2_26) {
        tmpvar_35 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_36;
      if (bLeaf2_26) {
        tmpvar_36 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_37;
      if (bLeaf2_26) {
        tmpvar_37 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_38;
      if (bLeaf2_26) {
        tmpvar_38 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_39;
      if (bLeaf2_26) {
        tmpvar_39 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_39 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_40;
      if (bLeaf2_26) {
        tmpvar_40 = bool(1);
      } else {
        tmpvar_40 = bool(1);
      };
      highp float fTwitch_41;
      highp vec3 vAxis_42;
      highp float fOsc_43;
      highp vec3 vOriginPos_44;
      highp vec3 tmpvar_45;
      tmpvar_45 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_46;
      tmpvar_46 = ((tmpvar_45.x + tmpvar_45.y) + tmpvar_45.z);
      highp vec4 tmpvar_47;
      tmpvar_47.x = (tmpvar_35 + tmpvar_46);
      tmpvar_47.y = ((tmpvar_35 * 0.75) - tmpvar_46);
      tmpvar_47.z = ((tmpvar_35 * 0.01) + tmpvar_46);
      tmpvar_47.w = (tmpvar_35 + tmpvar_46);
      highp vec4 tmpvar_48;
      highp vec4 tmpvar_49;
      tmpvar_49 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      tmpvar_48 = (((
        (tmpvar_49 * tmpvar_49)
       * 
        (3.0 - (2.0 * tmpvar_49))
      ) - 0.5) * 2.0);
      vOriginPos_44 = vPos_31;
      highp float tmpvar_50;
      tmpvar_50 = sqrt(dot (vPos_31, vPos_31));
      highp float fAngle_51;
      fAngle_51 = ((_glesMultiTexCoord2.x * tmpvar_37) * (tmpvar_48.x + (tmpvar_48.y * tmpvar_48.y)));
      highp vec2 vSinCos_52;
      vSinCos_52.x = sin(fAngle_51);
      vSinCos_52.y = cos(fAngle_51);
      highp float tmpvar_53;
      tmpvar_53 = (1.0 - vSinCos_52.y);
      highp mat3 tmpvar_54;
      tmpvar_54[0].x = (((tmpvar_53 * tmpvar_34.x) * tmpvar_34.x) + vSinCos_52.y);
      tmpvar_54[0].y = (((tmpvar_53 * tmpvar_34.x) * tmpvar_34.y) + (vSinCos_52.x * tmpvar_34.z));
      tmpvar_54[0].z = (((tmpvar_53 * tmpvar_34.x) * tmpvar_34.z) - (vSinCos_52.x * tmpvar_34.y));
      tmpvar_54[1].x = (((tmpvar_53 * tmpvar_34.x) * tmpvar_34.y) - (vSinCos_52.x * tmpvar_34.z));
      tmpvar_54[1].y = (((tmpvar_53 * tmpvar_34.y) * tmpvar_34.y) + vSinCos_52.y);
      tmpvar_54[1].z = (((tmpvar_53 * tmpvar_34.y) * tmpvar_34.z) + (vSinCos_52.x * tmpvar_34.x));
      tmpvar_54[2].x = (((tmpvar_53 * tmpvar_34.x) * tmpvar_34.z) + (vSinCos_52.x * tmpvar_34.y));
      tmpvar_54[2].y = (((tmpvar_53 * tmpvar_34.y) * tmpvar_34.z) - (vSinCos_52.x * tmpvar_34.x));
      tmpvar_54[2].z = (((tmpvar_53 * tmpvar_34.z) * tmpvar_34.z) + vSinCos_52.y);
      highp vec3 tmpvar_55;
      tmpvar_55 = ((tmpvar_34.yzx * vRotatedWindVector_17.zxy) - (tmpvar_34.zxy * vRotatedWindVector_17.yzx));
      vAxis_42.xz = tmpvar_55.xz;
      highp float tmpvar_56;
      tmpvar_56 = clamp (dot (vRotatedWindVector_17, tmpvar_34), -1.0, 1.0);
      vAxis_42.y = (tmpvar_55.y + tmpvar_56);
      highp vec3 tmpvar_57;
      tmpvar_57 = normalize(vAxis_42);
      vAxis_42 = tmpvar_57;
      highp float tmpvar_58;
      tmpvar_58 = (1.570796 - (sign(tmpvar_56) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_56))) * (1.570796 + (abs(tmpvar_56) * (-0.2146018 + 
          (abs(tmpvar_56) * (0.08656672 + (abs(tmpvar_56) * -0.03102955)))
        ))))
      )));
      fOsc_43 = (tmpvar_48.y - (tmpvar_48.x * tmpvar_48.x));
      fTwitch_41 = 0.0;
      if (tmpvar_40) {
        highp float fTime_59;
        fTime_59 = (tmpvar_39.z + tmpvar_46);
        highp vec4 tmpvar_60;
        tmpvar_60.zw = vec2(0.0, 0.0);
        tmpvar_60.x = fTime_59;
        tmpvar_60.y = (0.87 * fTime_59);
        highp vec4 tmpvar_61;
        highp vec4 tmpvar_62;
        tmpvar_62 = abs(((
          fract((tmpvar_60 + 0.5))
         * 2.0) - 1.0));
        tmpvar_61 = (((
          (tmpvar_62 * tmpvar_62)
         * 
          (3.0 - (2.0 * tmpvar_62))
        ) - 0.5) * 2.0);
        fTwitch_41 = (tmpvar_39.x * pow (clamp (
          ((((tmpvar_61.x * tmpvar_61.y) * tmpvar_61.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_39.y));
      };
      highp float fAngle_63;
      fAngle_63 = (_glesMultiTexCoord2.x * ((
        (tmpvar_58 * tmpvar_38)
       + 
        (fOsc_43 * tmpvar_36)
      ) + fTwitch_41));
      highp vec2 vSinCos_64;
      vSinCos_64.x = sin(fAngle_63);
      vSinCos_64.y = cos(fAngle_63);
      highp float tmpvar_65;
      tmpvar_65 = (1.0 - vSinCos_64.y);
      highp mat3 tmpvar_66;
      tmpvar_66[0].x = (((tmpvar_65 * tmpvar_57.x) * tmpvar_57.x) + vSinCos_64.y);
      tmpvar_66[0].y = (((tmpvar_65 * tmpvar_57.x) * tmpvar_57.y) + (vSinCos_64.x * tmpvar_57.z));
      tmpvar_66[0].z = (((tmpvar_65 * tmpvar_57.x) * tmpvar_57.z) - (vSinCos_64.x * tmpvar_57.y));
      tmpvar_66[1].x = (((tmpvar_65 * tmpvar_57.x) * tmpvar_57.y) - (vSinCos_64.x * tmpvar_57.z));
      tmpvar_66[1].y = (((tmpvar_65 * tmpvar_57.y) * tmpvar_57.y) + vSinCos_64.y);
      tmpvar_66[1].z = (((tmpvar_65 * tmpvar_57.y) * tmpvar_57.z) + (vSinCos_64.x * tmpvar_57.x));
      tmpvar_66[2].x = (((tmpvar_65 * tmpvar_57.x) * tmpvar_57.z) + (vSinCos_64.x * tmpvar_57.y));
      tmpvar_66[2].y = (((tmpvar_65 * tmpvar_57.y) * tmpvar_57.z) - (vSinCos_64.x * tmpvar_57.x));
      tmpvar_66[2].z = (((tmpvar_65 * tmpvar_57.z) * tmpvar_57.z) + vSinCos_64.y);
      highp mat3 tmpvar_67;
      tmpvar_67 = (tmpvar_54 * tmpvar_66);
      vOriginPos_44 = (normalize((tmpvar_67 * vPos_31)) * tmpvar_50);
      vDirection_28 = (tmpvar_67 * _glesNormal);
      vPos_27 = vOriginPos_44;
    };
    tmpvar_15 = vDirection_28;
    FinalPosition_18 = vPos_27;
  };
  FinalPosition_18 = (FinalPosition_18 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_68;
    vPos_68 = FinalPosition_18;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_69;
      vPos_69 = FinalPosition_18;
      highp float fTime_70;
      highp float fAdherenceScale_71;
      highp vec3 vWindVector_72;
      vWindVector_72 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_70 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_73;
      highp float fOscillation_74;
      fOscillation_74 = 1.0;
      highp float fAmount_75;
      highp float fTarget_76;
      highp vec4 tmpvar_77;
      tmpvar_77.x = (fTime_70 + _glesMultiTexCoord0.w);
      tmpvar_77.y = ((fTime_70 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_77.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_70 + _glesMultiTexCoord0.w));
      tmpvar_77.w = ((fTime_70 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_78;
      tmpvar_78 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      vOscillations_73 = (((
        (tmpvar_78 * tmpvar_78)
       * 
        (3.0 - (2.0 * tmpvar_78))
      ) - 0.5) * 2.0);
      highp float tmpvar_79;
      tmpvar_79 = (vOscillations_73.y * vOscillations_73.z);
      fTarget_76 = 1.0;
      fAmount_75 = tmpvar_79;
      if ((tmpvar_79 < 0.0)) {
        fTarget_76 = -1.0;
        fAmount_75 = -(tmpvar_79);
      };
      fOscillation_74 = (((
        mix (mix (tmpvar_79, fTarget_76, fAmount_75), fTarget_76, fAmount_75)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_73.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_74 = (fOscillation_74 * (1.0 + (vOscillations_73.w * _ST_WindBranchWhip.x)));
      vPos_69 = (FinalPosition_18 + ((vWindVector_72 * fOscillation_74) * _ST_WindBranch.y));
      highp vec4 tmpvar_80;
      tmpvar_80.zw = vec2(0.0, 0.0);
      tmpvar_80.x = ((fTime_70 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_80.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_81;
      highp vec4 tmpvar_82;
      tmpvar_82 = abs(((
        fract((tmpvar_80 + 0.5))
       * 2.0) - 1.0));
      tmpvar_81 = (((
        (tmpvar_82 * tmpvar_82)
       * 
        (3.0 - (2.0 * tmpvar_82))
      ) - 0.5) * 2.0);
      fAdherenceScale_71 = (1.0 - ((tmpvar_81.x * tmpvar_81.y) * (
        (tmpvar_81.x * tmpvar_81.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_71 = (fAdherenceScale_71 + ((vOscillations_73.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_69 = (vPos_69 + ((
        ((vRotatedBranchAnchor_16 - vPos_69) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_71) * _glesMultiTexCoord0.z));
      vPos_68 = vPos_69;
    } else {
      highp vec3 vPos_83;
      vPos_83 = vPos_68;
      highp float fTime_84;
      highp vec3 vWindVector_85;
      vWindVector_85 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_84 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_86;
      highp float fOscillation_87;
      fOscillation_87 = 1.0;
      highp float fAmount_88;
      highp float fTarget_89;
      highp vec4 tmpvar_90;
      tmpvar_90.w = 0.0;
      tmpvar_90.x = (fTime_84 + _glesMultiTexCoord0.w);
      tmpvar_90.y = ((fTime_84 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_90.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_84 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_91;
      tmpvar_91 = abs(((
        fract((tmpvar_90 + 0.5))
       * 2.0) - 1.0));
      vOscillations_86 = (((
        (tmpvar_91 * tmpvar_91)
       * 
        (3.0 - (2.0 * tmpvar_91))
      ) - 0.5) * 2.0);
      highp float tmpvar_92;
      tmpvar_92 = (vOscillations_86.y * vOscillations_86.z);
      fTarget_89 = 1.0;
      fAmount_88 = tmpvar_92;
      if ((tmpvar_92 < 0.0)) {
        fTarget_89 = -1.0;
        fAmount_88 = -(tmpvar_92);
      };
      fOscillation_87 = (((
        mix (mix (tmpvar_92, fTarget_89, fAmount_88), fTarget_89, fAmount_88)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_86.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_83 = (vPos_68 + ((vWindVector_85 * fOscillation_87) * _ST_WindBranch.y));
      vPos_68 = vPos_83;
    };
    FinalPosition_18 = vPos_68;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_93;
    vPos_93 = FinalPosition_18;
    highp float fMoveAmount_94;
    highp float fAdjust_95;
    highp float fLength_96;
    fLength_96 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_97;
    tmpvar_97 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_95 = tmpvar_97;
    if ((tmpvar_97 != 0.0)) {
      fAdjust_95 = pow (tmpvar_97, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_98;
    tmpvar_98.zw = vec2(0.0, 0.0);
    tmpvar_98.x = (tmpvar_12 + _ST_WindGlobal.x);
    tmpvar_98.y = (tmpvar_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_99;
    highp vec4 tmpvar_100;
    tmpvar_100 = abs(((
      fract((tmpvar_98 + 0.5))
     * 2.0) - 1.0));
    tmpvar_99 = (((
      (tmpvar_100 * tmpvar_100)
     * 
      (3.0 - (2.0 * tmpvar_100))
    ) - 0.5) * 2.0);
    fMoveAmount_94 = ((_ST_WindGlobal.y * (tmpvar_99.x + 
      (tmpvar_99.y * tmpvar_99.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_94 = (fMoveAmount_94 * fAdjust_95);
    vPos_93.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * fMoveAmount_94));
    vPos_93 = (normalize(vPos_93) * fLength_96);
    FinalPosition_18 = vPos_93;
  };
  tmpvar_14.xyz = FinalPosition_18;
  tmpvar_8 = tmpvar_9;
  highp vec4 v_101;
  v_101.x = _World2Object[0].x;
  v_101.y = _World2Object[1].x;
  v_101.z = _World2Object[2].x;
  v_101.w = _World2Object[3].x;
  highp vec4 v_102;
  v_102.x = _World2Object[0].y;
  v_102.y = _World2Object[1].y;
  v_102.z = _World2Object[2].y;
  v_102.w = _World2Object[3].y;
  highp vec4 v_103;
  v_103.x = _World2Object[0].z;
  v_103.y = _World2Object[1].z;
  v_103.z = _World2Object[2].z;
  v_103.w = _World2Object[3].z;
  highp vec3 tmpvar_104;
  tmpvar_104 = normalize(((
    (v_101.xyz * tmpvar_15.x)
   + 
    (v_102.xyz * tmpvar_15.y)
  ) + (v_103.xyz * tmpvar_15.z)));
  worldNormal_6 = tmpvar_104;
  tmpvar_7 = worldNormal_6;
  lowp vec4 tmpvar_105;
  tmpvar_105.w = 1.0;
  tmpvar_105.xyz = worldNormal_6;
  mediump vec4 normal_106;
  normal_106 = tmpvar_105;
  mediump vec3 x2_107;
  mediump vec4 tmpvar_108;
  tmpvar_108 = (normal_106.xyzz * normal_106.yzzx);
  x2_107.x = dot (unity_SHBr, tmpvar_108);
  x2_107.y = dot (unity_SHBg, tmpvar_108);
  x2_107.z = dot (unity_SHBb, tmpvar_108);
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_7;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD3 = tmpvar_10;
  xlv_TEXCOORD4 = (x2_107 + (unity_SHC.xyz * (
    (normal_106.x * normal_106.x)
   - 
    (normal_106.y * normal_106.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_15;
  normalWorld_15 = tmpvar_4;
  mediump vec3 tmpvar_16;
  mediump vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = normalWorld_15;
  mediump vec3 x1_18;
  x1_18.x = dot (unity_SHAr, tmpvar_17);
  x1_18.y = dot (unity_SHAg, tmpvar_17);
  x1_18.z = dot (unity_SHAb, tmpvar_17);
  tmpvar_16 = (xlv_TEXCOORD4 + x1_18);
  lowp vec4 c_19;
  lowp vec4 c_20;
  lowp float diff_21;
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_21 = tmpvar_22;
  c_20.xyz = ((tmpvar_8 * tmpvar_1) * diff_21);
  c_20.w = tmpvar_9;
  c_19.w = c_20.w;
  c_19.xyz = (c_20.xyz + (tmpvar_8 * tmpvar_16));
  c_3.xyz = c_19.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec2 in_TEXCOORD3;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec4 t3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
mediump vec3 t16_15;
highp vec2 t16;
bvec2 tb16;
highp float t19;
bool tb19;
highp vec3 t24;
highp vec2 t32;
highp int ti32;
highp vec2 t37;
highp vec2 t39;
highp float t48;
bool tb48;
highp float t49;
bool tb49;
highp float t51;
bool tb51;
highp float t52;
highp float t53;
mediump float t16_63;
void main()
{
    //Instruction 18010
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 18011
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 18012
    //ADD
    t16.x = t0.x + _Object2World[3].z;
    //Instruction 18013
    //ADD
    t32.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 18014
    //ADD
    t16.y = t32.x + in_NORMAL0.x;
    //Instruction 18015
    //FRC
    t16.xy = fract(t16.xy);
    //Instruction 18016
    //MAD
    t16.x = t16.y * 0.500000 + t16.x;
    //Instruction 18017
    //ADD
    t16.x = t16.x + -0.300000;
    //Instruction 18018
    //MUL
    t1.z = t16.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 18019
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 18020
    //LT
    tb16.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), t16_2.xxxx).xy;
    //Instruction 18021
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 18022
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 18023
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 18024
    //DP3
    t48 = dot(t3.xyz, t3.xyz);
    //Instruction 18025
    //RSQ
    t48 = inversesqrt(t48);
    //Instruction 18026
    //MUL
    t3.xyz = vec3(t48) * t3.xyz;
    //Instruction 18027
    //AND
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, tb16.xxx);
    //Instruction 18028
    //ADD
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 18029
    //MOV
    t5.x = in_TEXCOORD1.w;
    //Instruction 18030
    //MOV
    t5.yz = in_TEXCOORD3.xy;
    //Instruction 18031
    //ADD
    t5.xyz = (-t4.xyz) + t5.xyz;
    //Instruction 18032
    //MAD
    t4.xyz = unity_LODFade.xxx * t5.xyz + t4.xyz;
    //Instruction 18033
    //LT
    tb48 = t16_2.x<5.000000;
    //Instruction 18034
    //AND
    ti32 = int(uint(tb48) & uint(tb16.y));
    //Instruction 18035
    //IF
    if((uint(ti32))!=uint(0u)){
        //Instruction 18036
        //ADD
        t32.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 18037
        //EQ
        tb48 = t16_2.x==4.000000;
        //Instruction 18038
        //LT
        tb49 = 0.0<in_TEXCOORD2.w;
        //Instruction 18039
        //MOVC
        t5.xy = (bool(tb49)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 18040
        //ADD
        t32.x = t32.x + t5.x;
        //Instruction 18041
        //ADD
        t32.x = t32.x + 0.500000;
        //Instruction 18042
        //FRC
        t32.x = fract(t32.x);
        //Instruction 18043
        //MAD
        t32.x = t32.x * 2.000000 + -1.0;
        //Instruction 18044
        //MUL
        t51 = abs(t32.x) * abs(t32.x);
        //Instruction 18045
        //MAD
        t32.x = -abs(t32.x) * 2.000000 + 3.000000;
        //Instruction 18046
        //MAD
        t32.x = t51 * t32.x + -0.500000;
        //Instruction 18047
        //DP2
        t32.x = dot(t32.xx, t5.yy);
        //Instruction 18048
        //MUL
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 18049
        //FRC
        t5.xyz = fract(t5.xyz);
        //Instruction 18050
        //MAD
        t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 18051
        //MUL
        t5.xyz = t32.xxx * t5.xyz;
        //Instruction 18052
        //MAD
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        //Instruction 18053
        //IF
        if(tb48){
            //Instruction 18054
            //MUL
            t5 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 18055
            //FRC
            t5 = fract(t5);
            //Instruction 18056
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 18057
            //MOVC
            t6 = (bool(tb49)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 18058
            //MOVC
            t7.xyz = (bool(tb49)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 18059
            //MUL
            t32.x = t5.w * 3.000000;
            //Instruction 18060
            //MAD
            t8.y = t5.w * 3.000000 + t6.x;
            //Instruction 18061
            //MAD
            t8.x = t6.x * 0.750000 + (-t32.x);
            //Instruction 18062
            //ADD
            t32.xy = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 18063
            //FRC
            t32.xy = fract(t32.xy);
            //Instruction 18064
            //MAD
            t32.xy = t32.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 18065
            //MUL
            t8.xy = abs(t32.xy) * abs(t32.xy);
            //Instruction 18066
            //MAD
            t32.xy = -abs(t32.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 18067
            //MAD
            t32.xy = t8.xy * t32.xy + vec2(-0.500000, -0.500000);
            //Instruction 18068
            //ADD
            t32.xy = t32.xy + t32.xy;
            //Instruction 18069
            //DP3
            t49 = dot(t4.xyz, t4.xyz);
            //Instruction 18070
            //SQRT
            t49 = sqrt(t49);
            //Instruction 18071
            //MAD
            t51 = t32.x * t32.x + t32.y;
            //Instruction 18072
            //MUL
            t52 = t6.z * in_TEXCOORD2.x;
            //Instruction 18073
            //MUL
            t51 = t51 * t52;
            //Instruction 18074
            //SINCOS
            t6.x = sin(t51);
            t8.x = cos(t51);
            //Instruction 18075
            //ADD
            t51 = (-t8.x) + 1.0;
            //Instruction 18076
            //MUL
            t9 = t5.xxxy * vec4(t51);
            //Instruction 18077
            //MUL
            t24.xyz = t5.zxy * t6.xxx;
            //Instruction 18078
            //MAD
            t10.xy = t9.zy * t5.zy + t24.zx;
            //Instruction 18079
            //MAD
            t11.xy = t9.xw * t5.xy + t8.xx;
            //Instruction 18080
            //MAD
            t10.z = t9.w * t5.z + (-t24.y);
            //Instruction 18081
            //MAD
            t12.xy = t9.yz * t5.yz + (-t24.xz);
            //Instruction 18082
            //MAD
            t12.z = t9.w * t5.z + t24.y;
            //Instruction 18083
            //MUL
            t52 = t5.z * t5.z;
            //Instruction 18084
            //MAD
            t12.w = t52 * t51 + t8.x;
            //Instruction 18085
            //MUL
            t8.xyz = t3.yzx * t5.zxy;
            //Instruction 18086
            //MAD
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            //Instruction 18087
            //DP3
            t19 = dot(t3.xyz, t5.xyz);
            //Instruction 18088
            //MAX
            t19 = max(t19, -1.0);
            //Instruction 18089
            //MIN
            t19 = min(t19, 1.0);
            //Instruction 18090
            //ADD
            t8.w = t19 + t8.y;
            //Instruction 18091
            //DP3
            t51 = dot(t8.xzw, t8.xzw);
            //Instruction 18092
            //RSQ
            t51 = inversesqrt(t51);
            //Instruction 18093
            //MUL
            t5.xyz = vec3(t51) * t8.zxw;
            //Instruction 18094
            //ADD
            t51 = -abs(t19) + 1.0;
            //Instruction 18095
            //SQRT
            t51 = sqrt(t51);
            //Instruction 18096
            //MAD
            t52 = abs(t19) * -0.018729 + 0.074261;
            //Instruction 18097
            //MAD
            t52 = t52 * abs(t19) + -0.212114;
            //Instruction 18098
            //MAD
            t52 = t52 * abs(t19) + 1.570729;
            //Instruction 18099
            //MUL
            t6.x = t51 * t52;
            //Instruction 18100
            //MAD
            t6.x = t6.x * -2.000000 + 3.141593;
            //Instruction 18101
            //LT
            tb19 = t19<(-t19);
            //Instruction 18102
            //AND
            t19 = tb19 ? t6.x : float(0.0);
            //Instruction 18103
            //MAD
            t19 = t52 * t51 + t19;
            //Instruction 18104
            //MAD
            t32.x = (-t32.y) * t32.y + t32.x;
            //Instruction 18105
            //MAD
            t8.x = t5.w * 3.000000 + t7.z;
            //Instruction 18106
            //MUL
            t8.y = t8.x * 0.870000;
            //Instruction 18107
            //ADD
            t6.xz = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 18108
            //FRC
            t6.xz = fract(t6.xz);
            //Instruction 18109
            //MAD
            t6.xz = t6.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 18110
            //MUL
            t39.xy = abs(t6.xz) * abs(t6.xz);
            //Instruction 18111
            //MAD
            t6.xz = -abs(t6.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 18112
            //MAD
            t6.xz = t39.xy * t6.xz + vec2(-0.500000, -0.500000);
            //Instruction 18113
            //ADD
            t6.xz = t6.xz + t6.xz;
            //Instruction 18114
            //MUL
            t48 = t6.z * t6.z;
            //Instruction 18115
            //MAD
            t48 = t48 * t6.x + 1.0;
            //Instruction 18116
            //MUL
            t48 = t48 * 0.500000;
            t48 = clamp(t48, 0.0, 1.0);
            //Instruction 18117
            //LOG
            t48 = log2(t48);
            //Instruction 18118
            //MUL
            t48 = t48 * t7.y;
            //Instruction 18119
            //EXP
            t48 = exp2(t48);
            //Instruction 18120
            //MUL
            t32.x = t6.y * t32.x;
            //Instruction 18121
            //MAD
            t32.x = t19 * t6.w + t32.x;
            //Instruction 18122
            //MAD
            t32.x = t7.x * t48 + t32.x;
            //Instruction 18123
            //MUL
            t32.x = t32.x * in_TEXCOORD2.x;
            //Instruction 18124
            //SINCOS
            t6.x = sin(t32.x);
            t7.x = cos(t32.x);
            //Instruction 18125
            //ADD
            t32.x = (-t7.x) + 1.0;
            //Instruction 18126
            //MUL
            t8 = vec4(t5.y * t32.x, t5.y * t32.x, t5.y * t32.x, t5.z * t32.x);
            //Instruction 18127
            //MUL
            t6.xyz = t5.xyz * t6.xxx;
            //Instruction 18128
            //MAD
            t9.xy = t8.zy * t5.xz + t6.zx;
            //Instruction 18129
            //MAD
            t13.xy = t8.xw * t5.yz + t7.xx;
            //Instruction 18130
            //MAD
            t9.z = t8.w * t5.x + (-t6.y);
            //Instruction 18131
            //MAD
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            //Instruction 18132
            //MAD
            t14.z = t8.w * t5.x + t6.y;
            //Instruction 18133
            //MUL
            t48 = t5.x * t5.x;
            //Instruction 18134
            //MAD
            t9.w = t48 * t32.x + t7.x;
            //Instruction 18135
            //MOV
            t11.z = t12.x;
            //Instruction 18136
            //MOV
            t11.w = t10.x;
            //Instruction 18137
            //MOV
            t13.z = t9.y;
            //Instruction 18138
            //MOV
            t13.w = t14.y;
            //Instruction 18139
            //DP3
            t5.x = dot(t11.xzw, t13.xzw);
            //Instruction 18140
            //MOV
            t14.w = t13.y;
            //Instruction 18141
            //DP3
            t5.y = dot(t11.xwz, t14.xzw);
            //Instruction 18142
            //DP3
            t5.z = dot(t11.xzw, t9.xzw);
            //Instruction 18143
            //MOV
            t10.w = t11.y;
            //Instruction 18144
            //DP3
            t6.x = dot(t10.ywz, t13.xzw);
            //Instruction 18145
            //DP3
            t6.y = dot(t10.yzw, t14.xzw);
            //Instruction 18146
            //DP3
            t6.z = dot(t10.ywz, t9.xzw);
            //Instruction 18147
            //DP3
            t7.x = dot(t12.yzw, t13.xzw);
            //Instruction 18148
            //DP3
            t7.y = dot(t12.ywz, t14.xzw);
            //Instruction 18149
            //DP3
            t7.z = dot(t12.yzw, t9.xzw);
            //Instruction 18150
            //DP3
            t32.x = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 18151
            //DP3
            t32.y = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 18152
            //DP3
            t19 = dot(t7.xyz, in_NORMAL0.xyz);
            //Instruction 18153
            //DP3
            t5.x = dot(t5.xyz, t4.xyz);
            //Instruction 18154
            //DP3
            t5.y = dot(t6.xyz, t4.xyz);
            //Instruction 18155
            //DP3
            t5.z = dot(t7.xyz, t4.xyz);
            //Instruction 18156
            //DP3
            t51 = dot(t5.xyz, t5.xyz);
            //Instruction 18157
            //RSQ
            t51 = inversesqrt(t51);
            //Instruction 18158
            //MUL
            t5.xyz = vec3(t51) * t5.xyz;
            //Instruction 18159
            //MUL
            t4.xyz = vec3(t49) * t5.xyz;
            //Instruction 18160
        //ELSE
        } else {
            //Instruction 18161
            //MOV
            t32.xy = in_NORMAL0.xy;
            //Instruction 18162
            //MOV
            t19 = in_NORMAL0.z;
            //Instruction 18163
        //ENDIF
        }
        //Instruction 18164
    //ELSE
    } else {
        //Instruction 18165
        //MOV
        t32.xy = in_NORMAL0.xy;
        //Instruction 18166
        //MOV
        t19 = in_NORMAL0.z;
        //Instruction 18167
    //ENDIF
    }
    //Instruction 18168
    //ADD
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    //Instruction 18169
    //GE
    tb49 = t16_2.x>=3.000000;
    //Instruction 18170
    //IF
    if(tb49){
        //Instruction 18171
        //EQ
        tb49 = t16_2.x==5.000000;
        //Instruction 18172
        //IF
        if(tb49){
            //Instruction 18173
            //MUL
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 18174
            //MAD
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            //Instruction 18175
            //MAD
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            //Instruction 18176
            //DP3
            t49 = dot(t5.xyz, t5.xyz);
            //Instruction 18177
            //RSQ
            t49 = inversesqrt(t49);
            //Instruction 18178
            //MUL
            t5.xyz = vec3(t49) * t5.xyz;
            //Instruction 18179
            //MUL
            t6.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 18180
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 18181
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 18182
            //MUL
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            //Instruction 18183
            //ADD
            t49 = t0.x + _ST_WindBranch.x;
            //Instruction 18184
            //ADD
            t2.x = t49 + in_TEXCOORD0.w;
            //Instruction 18185
            //MAD
            t2.y = t49 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 18186
            //MUL
            t51 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 18187
            //MUL
            t2.z = t51 * 0.500000;
            //Instruction 18188
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 18189
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 18190
            //FRC
            t2 = fract(t2);
            //Instruction 18191
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 18192
            //MUL
            t7 = abs(t2) * abs(t2);
            //Instruction 18193
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 18194
            //MAD
            t2 = t7 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 18195
            //ADD
            t2 = t2 + t2;
            //Instruction 18196
            //MUL
            t7.w = t2.z * t2.y;
            //Instruction 18197
            //LT
            tb51 = t7.w<0.0;
            //Instruction 18198
            //MOV
            t7.y = (-t7.w);
            //Instruction 18199
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 18200
            //MOVC
            t7.xy = (bool(tb51)) ? t7.xy : t7.zw;
            //Instruction 18201
            //MAD
            t51 = (-t2.y) * t2.z + t7.x;
            //Instruction 18202
            //MAD
            t51 = t7.y * t51 + t7.w;
            //Instruction 18203
            //ADD
            t52 = (-t51) + t7.x;
            //Instruction 18204
            //MAD
            t51 = t7.y * t52 + t51;
            //Instruction 18205
            //MUL
            t51 = t51 * _ST_WindBranchTwitch.x;
            //Instruction 18206
            //ADD
            t52 = (-_ST_WindVector.w) + 1.0;
            //Instruction 18207
            //ADD
            t53 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 18208
            //MUL
            t53 = t2.x * t53;
            //Instruction 18209
            //MAD
            t51 = t51 * t52 + t53;
            //Instruction 18210
            //MAD
            t52 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 18211
            //MUL
            t51 = t51 * t52;
            //Instruction 18212
            //MUL
            t6.xyz = vec3(t51) * t6.xyz;
            //Instruction 18213
            //MAD
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 18214
            //MAD
            t7.x = t49 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 18215
            //MUL
            t49 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 18216
            //MAD
            t7.y = t49 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 18217
            //ADD
            t7.xy = t7.xy + vec2(0.500000, 0.500000);
            //Instruction 18218
            //FRC
            t7.xy = fract(t7.xy);
            //Instruction 18219
            //MAD
            t7.xy = t7.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 18220
            //MUL
            t39.xy = abs(t7.xy) * abs(t7.xy);
            //Instruction 18221
            //MAD
            t7.xy = -abs(t7.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 18222
            //MAD
            t7.xy = t39.xy * t7.xy + vec2(-0.500000, -0.500000);
            //Instruction 18223
            //ADD
            t7.xy = t7.xy + t7.xy;
            //Instruction 18224
            //MUL
            t7.xy = t7.xy * t7.xy;
            //Instruction 18225
            //MUL
            t49 = t7.x * t7.y;
            //Instruction 18226
            //MAD
            t49 = (-t49) * _ST_WindTurbulences.x + 1.0;
            //Instruction 18227
            //MUL
            t51 = t2.w * _ST_WindVector.w;
            //Instruction 18228
            //MAD
            t49 = t51 * _ST_WindBranchWhip.x + t49;
            //Instruction 18229
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            //Instruction 18230
            //MUL
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 18231
            //MUL
            t5.xyz = vec3(t49) * t5.xyz;
            //Instruction 18232
            //MAD
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
            //Instruction 18233
        //ELSE
        } else {
            //Instruction 18234
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 18235
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 18236
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 18237
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 18238
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 18239
            //ADD
            t6.x = t0.x + in_TEXCOORD0.w;
            //Instruction 18240
            //MAD
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 18241
            //MUL
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 18242
            //MUL
            t6.z = t0.x * 0.500000;
            //Instruction 18243
            //ADD
            t6.xyz = t6.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 18244
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 18245
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 18246
            //MUL
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            //Instruction 18247
            //MAD
            t6.xyz = -abs(t6.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 18248
            //MAD
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 18249
            //ADD
            t6.xyz = t6.xyz + t6.xyz;
            //Instruction 18250
            //MUL
            t2.w = t6.z * t6.y;
            //Instruction 18251
            //LT
            tb0 = t2.w<0.0;
            //Instruction 18252
            //MOV
            t2.y = (-t2.w);
            //Instruction 18253
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 18254
            //MOVC
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 18255
            //MAD
            t0.x = (-t6.y) * t6.z + t7.x;
            //Instruction 18256
            //MAD
            t0.x = t7.y * t0.x + t2.w;
            //Instruction 18257
            //ADD
            t49 = (-t0.x) + t7.x;
            //Instruction 18258
            //MAD
            t0.x = t7.y * t49 + t0.x;
            //Instruction 18259
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 18260
            //ADD
            t49 = (-_ST_WindVector.w) + 1.0;
            //Instruction 18261
            //ADD
            t51 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 18262
            //MUL
            t51 = t51 * t6.x;
            //Instruction 18263
            //MAD
            t0.x = t0.x * t49 + t51;
            //Instruction 18264
            //MUL
            t5.xyz = t0.xxx * t5.xyz;
            //Instruction 18265
            //MAD
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 18266
        //ENDIF
        }
        //Instruction 18267
    //ENDIF
    }
    //Instruction 18268
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 18269
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 18270
    //DIV
    t49 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 18271
    //MAD
    t49 = (-t49) * 0.250000 + t4.y;
    //Instruction 18272
    //MAX
    t49 = max(t49, 0.0);
    //Instruction 18273
    //MUL
    t49 = t49 * _ST_WindGlobal.z;
    //Instruction 18274
    //NE
    tb51 = t49!=0.0;
    //Instruction 18275
    //LOG
    t52 = log2(t49);
    //Instruction 18276
    //MUL
    t52 = t52 * _ST_WindGlobal.w;
    //Instruction 18277
    //EXP
    t52 = exp2(t52);
    //Instruction 18278
    //MOVC
    t49 = (tb51) ? t52 : t49;
    //Instruction 18279
    //ADD
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 18280
    //MAD
    t5.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 18281
    //ADD
    t5.xy = t5.xy + vec2(0.500000, 0.500000);
    //Instruction 18282
    //FRC
    t5.xy = fract(t5.xy);
    //Instruction 18283
    //MAD
    t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 18284
    //MUL
    t37.xy = abs(t5.xy) * abs(t5.xy);
    //Instruction 18285
    //MAD
    t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 18286
    //MAD
    t5.xy = t37.xy * t5.xy + vec2(-0.500000, -0.500000);
    //Instruction 18287
    //ADD
    t5.xy = t5.xy + t5.xy;
    //Instruction 18288
    //MAD
    t51 = t5.y * t5.y + t5.x;
    //Instruction 18289
    //DIV
    t52 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 18290
    //MAD
    t51 = _ST_WindGlobal.y * t51 + t52;
    //Instruction 18291
    //MUL
    t49 = t49 * t51;
    //Instruction 18292
    //MAD
    t5.xz = t3.xz * vec2(t49) + t4.xz;
    //Instruction 18293
    //MOV
    t5.y = t4.y;
    //Instruction 18294
    //DP3
    t49 = dot(t5.xyz, t5.xyz);
    //Instruction 18295
    //RSQ
    t49 = inversesqrt(t49);
    //Instruction 18296
    //MUL
    t3.xzw = vec3(t49) * t5.xyz;
    //Instruction 18297
    //MUL
    t3.xzw = t0.xxx * t3.xzw;
    //Instruction 18298
    //MOVC
    t3.xzw = (tb16.x) ? t3.xzw : t4.xyz;
    //Instruction 18299
    //MUL
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    //Instruction 18300
    //MAD
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    //Instruction 18301
    //MAD
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    //Instruction 18302
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 18303
    //MUL
    t4.xyz = t3.zzz * _Object2World[1].xyz;
    //Instruction 18304
    //MAD
    t4.xyz = _Object2World[0].xyz * t3.xxx + t4.xyz;
    //Instruction 18305
    //MAD
    t3.xzw = _Object2World[2].xyz * t3.www + t4.xyz;
    //Instruction 18306
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xzw;
    //Instruction 18307
    //MOV
    t4.x = _World2Object[0].x;
    //Instruction 18308
    //MOV
    t4.y = _World2Object[1].x;
    //Instruction 18309
    //MOV
    t4.z = _World2Object[2].x;
    //Instruction 18310
    //MOV
    t5.x = _World2Object[0].y;
    //Instruction 18311
    //MOV
    t5.y = _World2Object[1].y;
    //Instruction 18312
    //MOV
    t5.z = _World2Object[2].y;
    //Instruction 18313
    //MUL
    t0.xyw = t32.yyy * t5.xyz;
    //Instruction 18314
    //MAD
    t0.xyz = t4.xyz * t32.xxx + t0.xyw;
    //Instruction 18315
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 18316
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 18317
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 18318
    //MAD
    t0.xyz = t4.xyz * vec3(t19) + t0.xyz;
    //Instruction 18319
    //DP3
    t48 = dot(t0.xyz, t0.xyz);
    //Instruction 18320
    //RSQ
    t48 = inversesqrt(t48);
    //Instruction 18321
    //MUL
    t0.xyz = vec3(t48) * t0.xyz;
    //Instruction 18322
    //MUL
    t16_2 = t0.yzzx * t0.xyzz;
    //Instruction 18323
    //DP4
    t16_15.x = dot(unity_SHBr, t16_2);
    //Instruction 18324
    //DP4
    t16_15.y = dot(unity_SHBg, t16_2);
    //Instruction 18325
    //DP4
    t16_15.z = dot(unity_SHBb, t16_2);
    //Instruction 18326
    //MUL
    t16_63 = t0.y * t0.y;
    //Instruction 18327
    //MAD
    t16_63 = t0.x * t0.x + (-t16_63);
    //Instruction 18328
    //MAD
    vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(t16_63) + t16_15.xyz;
    //Instruction 18329
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 18330
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 18331
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 18332
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 18333
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_7;
bool tb15;
mediump float t16_17;
void main()
{
    //Instruction 17982
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 17983
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 17984
    //LT
    tb15 = t10_1<0.0;
    //Instruction 17985
    //DISCARD
    if((int(tb15))!=0){discard;}
    //Instruction 17986
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 17987
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 17988
    //ADD
    t16_7.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 17989
    //MAD
    t16_7.xyz = vs_TEXCOORD3.zzz * t16_7.xyz + t10_0.xyz;
    //Instruction 17990
    //MAX
    t16_3.x = max(t16_7.z, t16_7.y);
    //Instruction 17991
    //MAX
    t16_3.x = max(t16_7.x, t16_3.x);
    //Instruction 17992
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 17993
    //MAD
    t16_0.x = t16_2.x * 0.500000 + 0.500000;
    //Instruction 17994
    //MUL
    t16_2.xyz = t16_0.xxx * t16_7.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 17995
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    //Instruction 17996
    //MUL
    t16_3.xyz = t16_2.xyz * _LightColor0.xyz;
    //Instruction 17997
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 17998
    //MOV
    t16_0.w = 1.0;
    //Instruction 17999
    //DP4
    t16_4.x = dot(unity_SHAr, t16_0);
    //Instruction 18000
    //DP4
    t16_4.y = dot(unity_SHAg, t16_0);
    //Instruction 18001
    //DP4
    t16_4.z = dot(unity_SHAb, t16_0);
    //Instruction 18002
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD4.xyz;
    //Instruction 18003
    //MUL
    t16_2.xyz = t16_2.xyz * t16_4.xyz;
    //Instruction 18004
    //DP3
    t16_17 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 18005
    //MAX
    t16_17 = max(t16_17, 0.0);
    //Instruction 18006
    //MAD
    t16_2.xyz = t16_3.xyz * vec3(t16_17) + t16_2.xyz;
    //Instruction 18007
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 18008
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 18009
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesMultiTexCoord3;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  tmpvar_4 = _glesMultiTexCoord1;
  highp vec2 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord3.xy;
  lowp vec3 worldNormal_6;
  mediump vec3 tmpvar_7;
  mediump vec4 tmpvar_8;
  mediump vec4 tmpvar_9;
  lowp vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  tmpvar_11.xy = tmpvar_3.xy;
  tmpvar_10.w = _Color.w;
  tmpvar_10.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].x;
  highp float tmpvar_14;
  tmpvar_14 = _Object2World[3].y;
  tmpvar_12 = clamp (((
    fract(((tmpvar_13 + tmpvar_14) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_11.z = tmpvar_12;
  highp vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_15 = tmpvar_1;
  tmpvar_16 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  FinalPosition_19 = tmpvar_1.xyz;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_19 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp vec3 tmpvar_23;
  tmpvar_23.x = tmpvar_4.w;
  tmpvar_23.y = tmpvar_5.x;
  tmpvar_23.z = tmpvar_5.y;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (FinalPosition_19, tmpvar_23, unity_LODFade.xxx);
  FinalPosition_19 = tmpvar_24;
  if (((tmpvar_20 > 1.0) && (tmpvar_20 < 5.0))) {
    highp float tmpvar_25;
    tmpvar_25 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_26;
    isBestWind_26 = (tmpvar_20 == 4.0);
    bool bLeaf2_27;
    bLeaf2_27 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_28;
    vPos_28 = tmpvar_24;
    highp vec3 vDirection_29;
    vDirection_29 = tmpvar_2;
    highp float tmpvar_30;
    if (bLeaf2_27) {
      tmpvar_30 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_30 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_31;
    if (bLeaf2_27) {
      tmpvar_31 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_31 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_32;
    highp vec4 tmpvar_33;
    tmpvar_33.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_33.x = (tmpvar_30 + tmpvar_25);
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    vPos_32 = (tmpvar_24 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_31 * (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_29 = tmpvar_2;
    vPos_28 = vPos_32;
    if (isBestWind_26) {
      highp vec3 tmpvar_35;
      tmpvar_35 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_36;
      if (bLeaf2_27) {
        tmpvar_36 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_37;
      if (bLeaf2_27) {
        tmpvar_37 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_38;
      if (bLeaf2_27) {
        tmpvar_38 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_39;
      if (bLeaf2_27) {
        tmpvar_39 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_39 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_40;
      if (bLeaf2_27) {
        tmpvar_40 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_40 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_41;
      if (bLeaf2_27) {
        tmpvar_41 = bool(1);
      } else {
        tmpvar_41 = bool(1);
      };
      highp float fTwitch_42;
      highp vec3 vAxis_43;
      highp float fOsc_44;
      highp vec3 vOriginPos_45;
      highp vec3 tmpvar_46;
      tmpvar_46 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_47;
      tmpvar_47 = ((tmpvar_46.x + tmpvar_46.y) + tmpvar_46.z);
      highp vec4 tmpvar_48;
      tmpvar_48.x = (tmpvar_36 + tmpvar_47);
      tmpvar_48.y = ((tmpvar_36 * 0.75) - tmpvar_47);
      tmpvar_48.z = ((tmpvar_36 * 0.01) + tmpvar_47);
      tmpvar_48.w = (tmpvar_36 + tmpvar_47);
      highp vec4 tmpvar_49;
      highp vec4 tmpvar_50;
      tmpvar_50 = abs(((
        fract((tmpvar_48 + 0.5))
       * 2.0) - 1.0));
      tmpvar_49 = (((
        (tmpvar_50 * tmpvar_50)
       * 
        (3.0 - (2.0 * tmpvar_50))
      ) - 0.5) * 2.0);
      vOriginPos_45 = vPos_32;
      highp float tmpvar_51;
      tmpvar_51 = sqrt(dot (vPos_32, vPos_32));
      highp float fAngle_52;
      fAngle_52 = ((_glesMultiTexCoord2.x * tmpvar_38) * (tmpvar_49.x + (tmpvar_49.y * tmpvar_49.y)));
      highp vec2 vSinCos_53;
      vSinCos_53.x = sin(fAngle_52);
      vSinCos_53.y = cos(fAngle_52);
      highp float tmpvar_54;
      tmpvar_54 = (1.0 - vSinCos_53.y);
      highp mat3 tmpvar_55;
      tmpvar_55[0].x = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.x) + vSinCos_53.y);
      tmpvar_55[0].y = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.y) + (vSinCos_53.x * tmpvar_35.z));
      tmpvar_55[0].z = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.z) - (vSinCos_53.x * tmpvar_35.y));
      tmpvar_55[1].x = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.y) - (vSinCos_53.x * tmpvar_35.z));
      tmpvar_55[1].y = (((tmpvar_54 * tmpvar_35.y) * tmpvar_35.y) + vSinCos_53.y);
      tmpvar_55[1].z = (((tmpvar_54 * tmpvar_35.y) * tmpvar_35.z) + (vSinCos_53.x * tmpvar_35.x));
      tmpvar_55[2].x = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.z) + (vSinCos_53.x * tmpvar_35.y));
      tmpvar_55[2].y = (((tmpvar_54 * tmpvar_35.y) * tmpvar_35.z) - (vSinCos_53.x * tmpvar_35.x));
      tmpvar_55[2].z = (((tmpvar_54 * tmpvar_35.z) * tmpvar_35.z) + vSinCos_53.y);
      highp vec3 tmpvar_56;
      tmpvar_56 = ((tmpvar_35.yzx * vRotatedWindVector_18.zxy) - (tmpvar_35.zxy * vRotatedWindVector_18.yzx));
      vAxis_43.xz = tmpvar_56.xz;
      highp float tmpvar_57;
      tmpvar_57 = clamp (dot (vRotatedWindVector_18, tmpvar_35), -1.0, 1.0);
      vAxis_43.y = (tmpvar_56.y + tmpvar_57);
      highp vec3 tmpvar_58;
      tmpvar_58 = normalize(vAxis_43);
      vAxis_43 = tmpvar_58;
      highp float tmpvar_59;
      tmpvar_59 = (1.570796 - (sign(tmpvar_57) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_57))) * (1.570796 + (abs(tmpvar_57) * (-0.2146018 + 
          (abs(tmpvar_57) * (0.08656672 + (abs(tmpvar_57) * -0.03102955)))
        ))))
      )));
      fOsc_44 = (tmpvar_49.y - (tmpvar_49.x * tmpvar_49.x));
      fTwitch_42 = 0.0;
      if (tmpvar_41) {
        highp float fTime_60;
        fTime_60 = (tmpvar_40.z + tmpvar_47);
        highp vec4 tmpvar_61;
        tmpvar_61.zw = vec2(0.0, 0.0);
        tmpvar_61.x = fTime_60;
        tmpvar_61.y = (0.87 * fTime_60);
        highp vec4 tmpvar_62;
        highp vec4 tmpvar_63;
        tmpvar_63 = abs(((
          fract((tmpvar_61 + 0.5))
         * 2.0) - 1.0));
        tmpvar_62 = (((
          (tmpvar_63 * tmpvar_63)
         * 
          (3.0 - (2.0 * tmpvar_63))
        ) - 0.5) * 2.0);
        fTwitch_42 = (tmpvar_40.x * pow (clamp (
          ((((tmpvar_62.x * tmpvar_62.y) * tmpvar_62.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_40.y));
      };
      highp float fAngle_64;
      fAngle_64 = (_glesMultiTexCoord2.x * ((
        (tmpvar_59 * tmpvar_39)
       + 
        (fOsc_44 * tmpvar_37)
      ) + fTwitch_42));
      highp vec2 vSinCos_65;
      vSinCos_65.x = sin(fAngle_64);
      vSinCos_65.y = cos(fAngle_64);
      highp float tmpvar_66;
      tmpvar_66 = (1.0 - vSinCos_65.y);
      highp mat3 tmpvar_67;
      tmpvar_67[0].x = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.x) + vSinCos_65.y);
      tmpvar_67[0].y = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.y) + (vSinCos_65.x * tmpvar_58.z));
      tmpvar_67[0].z = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.z) - (vSinCos_65.x * tmpvar_58.y));
      tmpvar_67[1].x = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.y) - (vSinCos_65.x * tmpvar_58.z));
      tmpvar_67[1].y = (((tmpvar_66 * tmpvar_58.y) * tmpvar_58.y) + vSinCos_65.y);
      tmpvar_67[1].z = (((tmpvar_66 * tmpvar_58.y) * tmpvar_58.z) + (vSinCos_65.x * tmpvar_58.x));
      tmpvar_67[2].x = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.z) + (vSinCos_65.x * tmpvar_58.y));
      tmpvar_67[2].y = (((tmpvar_66 * tmpvar_58.y) * tmpvar_58.z) - (vSinCos_65.x * tmpvar_58.x));
      tmpvar_67[2].z = (((tmpvar_66 * tmpvar_58.z) * tmpvar_58.z) + vSinCos_65.y);
      highp mat3 tmpvar_68;
      tmpvar_68 = (tmpvar_55 * tmpvar_67);
      vOriginPos_45 = (normalize((tmpvar_68 * vPos_32)) * tmpvar_51);
      vDirection_29 = (tmpvar_68 * _glesNormal);
      vPos_28 = vOriginPos_45;
    };
    tmpvar_16 = vDirection_29;
    FinalPosition_19 = vPos_28;
  };
  FinalPosition_19 = (FinalPosition_19 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_69;
    vPos_69 = FinalPosition_19;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_70;
      vPos_70 = FinalPosition_19;
      highp float fTime_71;
      highp float fAdherenceScale_72;
      highp vec3 vWindVector_73;
      vWindVector_73 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_71 = (_ST_WindBranch.x + (tmpvar_13 + tmpvar_14));
      highp vec4 vOscillations_74;
      highp float fOscillation_75;
      fOscillation_75 = 1.0;
      highp float fAmount_76;
      highp float fTarget_77;
      highp vec4 tmpvar_78;
      tmpvar_78.x = (fTime_71 + _glesMultiTexCoord0.w);
      tmpvar_78.y = ((fTime_71 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_78.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_71 + _glesMultiTexCoord0.w));
      tmpvar_78.w = ((fTime_71 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_78 + 0.5))
       * 2.0) - 1.0));
      vOscillations_74 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      highp float tmpvar_80;
      tmpvar_80 = (vOscillations_74.y * vOscillations_74.z);
      fTarget_77 = 1.0;
      fAmount_76 = tmpvar_80;
      if ((tmpvar_80 < 0.0)) {
        fTarget_77 = -1.0;
        fAmount_76 = -(tmpvar_80);
      };
      fOscillation_75 = (((
        mix (mix (tmpvar_80, fTarget_77, fAmount_76), fTarget_77, fAmount_76)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_74.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_75 = (fOscillation_75 * (1.0 + (vOscillations_74.w * _ST_WindBranchWhip.x)));
      vPos_70 = (FinalPosition_19 + ((vWindVector_73 * fOscillation_75) * _ST_WindBranch.y));
      highp vec4 tmpvar_81;
      tmpvar_81.zw = vec2(0.0, 0.0);
      tmpvar_81.x = ((fTime_71 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_81.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_82;
      highp vec4 tmpvar_83;
      tmpvar_83 = abs(((
        fract((tmpvar_81 + 0.5))
       * 2.0) - 1.0));
      tmpvar_82 = (((
        (tmpvar_83 * tmpvar_83)
       * 
        (3.0 - (2.0 * tmpvar_83))
      ) - 0.5) * 2.0);
      fAdherenceScale_72 = (1.0 - ((tmpvar_82.x * tmpvar_82.y) * (
        (tmpvar_82.x * tmpvar_82.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_72 = (fAdherenceScale_72 + ((vOscillations_74.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_70 = (vPos_70 + ((
        ((vRotatedBranchAnchor_17 - vPos_70) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_72) * _glesMultiTexCoord0.z));
      vPos_69 = vPos_70;
    } else {
      highp vec3 vPos_84;
      vPos_84 = vPos_69;
      highp float fTime_85;
      highp vec3 vWindVector_86;
      vWindVector_86 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_85 = (_ST_WindBranch.x + (tmpvar_13 + tmpvar_14));
      highp vec4 vOscillations_87;
      highp float fOscillation_88;
      fOscillation_88 = 1.0;
      highp float fAmount_89;
      highp float fTarget_90;
      highp vec4 tmpvar_91;
      tmpvar_91.w = 0.0;
      tmpvar_91.x = (fTime_85 + _glesMultiTexCoord0.w);
      tmpvar_91.y = ((fTime_85 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_91.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_85 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_92;
      tmpvar_92 = abs(((
        fract((tmpvar_91 + 0.5))
       * 2.0) - 1.0));
      vOscillations_87 = (((
        (tmpvar_92 * tmpvar_92)
       * 
        (3.0 - (2.0 * tmpvar_92))
      ) - 0.5) * 2.0);
      highp float tmpvar_93;
      tmpvar_93 = (vOscillations_87.y * vOscillations_87.z);
      fTarget_90 = 1.0;
      fAmount_89 = tmpvar_93;
      if ((tmpvar_93 < 0.0)) {
        fTarget_90 = -1.0;
        fAmount_89 = -(tmpvar_93);
      };
      fOscillation_88 = (((
        mix (mix (tmpvar_93, fTarget_90, fAmount_89), fTarget_90, fAmount_89)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_87.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_84 = (vPos_69 + ((vWindVector_86 * fOscillation_88) * _ST_WindBranch.y));
      vPos_69 = vPos_84;
    };
    FinalPosition_19 = vPos_69;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_94;
    vPos_94 = FinalPosition_19;
    highp float fMoveAmount_95;
    highp float fAdjust_96;
    highp float fLength_97;
    fLength_97 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_98;
    tmpvar_98 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_96 = tmpvar_98;
    if ((tmpvar_98 != 0.0)) {
      fAdjust_96 = pow (tmpvar_98, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_99;
    tmpvar_99.zw = vec2(0.0, 0.0);
    tmpvar_99.x = (tmpvar_13 + _ST_WindGlobal.x);
    tmpvar_99.y = (tmpvar_14 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_100;
    highp vec4 tmpvar_101;
    tmpvar_101 = abs(((
      fract((tmpvar_99 + 0.5))
     * 2.0) - 1.0));
    tmpvar_100 = (((
      (tmpvar_101 * tmpvar_101)
     * 
      (3.0 - (2.0 * tmpvar_101))
    ) - 0.5) * 2.0);
    fMoveAmount_95 = ((_ST_WindGlobal.y * (tmpvar_100.x + 
      (tmpvar_100.y * tmpvar_100.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_95 = (fMoveAmount_95 * fAdjust_96);
    vPos_94.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * fMoveAmount_95));
    vPos_94 = (normalize(vPos_94) * fLength_97);
    FinalPosition_19 = vPos_94;
  };
  tmpvar_15.xyz = FinalPosition_19;
  tmpvar_8 = tmpvar_10;
  highp vec4 v_102;
  v_102.x = _World2Object[0].x;
  v_102.y = _World2Object[1].x;
  v_102.z = _World2Object[2].x;
  v_102.w = _World2Object[3].x;
  highp vec4 v_103;
  v_103.x = _World2Object[0].y;
  v_103.y = _World2Object[1].y;
  v_103.z = _World2Object[2].y;
  v_103.w = _World2Object[3].y;
  highp vec4 v_104;
  v_104.x = _World2Object[0].z;
  v_104.y = _World2Object[1].z;
  v_104.z = _World2Object[2].z;
  v_104.w = _World2Object[3].z;
  highp vec3 tmpvar_105;
  tmpvar_105 = normalize(((
    (v_102.xyz * tmpvar_16.x)
   + 
    (v_103.xyz * tmpvar_16.y)
  ) + (v_104.xyz * tmpvar_16.z)));
  worldNormal_6 = tmpvar_105;
  tmpvar_7 = worldNormal_6;
  lowp vec4 tmpvar_106;
  tmpvar_106.w = 1.0;
  tmpvar_106.xyz = worldNormal_6;
  mediump vec4 normal_107;
  normal_107 = tmpvar_106;
  mediump vec3 x2_108;
  mediump vec4 tmpvar_109;
  tmpvar_109 = (normal_107.xyzz * normal_107.yzzx);
  x2_108.x = dot (unity_SHBr, tmpvar_109);
  x2_108.y = dot (unity_SHBg, tmpvar_109);
  x2_108.z = dot (unity_SHBb, tmpvar_109);
  tmpvar_9 = (unity_World2Shadow[0] * (_Object2World * tmpvar_15));
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_7;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_15).xyz;
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD3 = tmpvar_11;
  xlv_TEXCOORD4 = (x2_108 + (unity_SHC.xyz * (
    (normal_107.x * normal_107.x)
   - 
    (normal_107.y * normal_107.y)
  )));
  xlv_TEXCOORD5 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_14;
  x_14 = (tmpvar_10 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_15 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD5).x > 
    (xlv_TEXCOORD5.z / xlv_TEXCOORD5.w)
  )), _LightShadowData.x);
  tmpvar_16 = tmpvar_17;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_16;
  mediump vec3 normalWorld_18;
  normalWorld_18 = tmpvar_5;
  mediump vec3 tmpvar_19;
  mediump vec3 tmpvar_20;
  mediump vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = normalWorld_18;
  mediump vec3 x1_22;
  x1_22.x = dot (unity_SHAr, tmpvar_21);
  x1_22.y = dot (unity_SHAg, tmpvar_21);
  x1_22.z = dot (unity_SHAb, tmpvar_21);
  tmpvar_20 = (xlv_TEXCOORD4 + x1_22);
  tmpvar_19 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_19;
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_9 * tmpvar_19) * diff_25);
  c_24.w = tmpvar_10;
  c_23.w = c_24.w;
  c_23.xyz = (c_24.xyz + (tmpvar_9 * tmpvar_20));
  c_4.xyz = c_23.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesMultiTexCoord3;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp