 14083
    //ADD
    t3.xyz = t3.xyz + t16_6.xyz;
    //Instruction 14084
    //MOV
    vs_TEXCOORD0.xyz = t2.xyz;
    //Instruction 14085
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 14086
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 14087
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 14088
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 14089
    //MOV
    vs_TEXCOORD4.xyz = t3.xyz;
    //Instruction 14090
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
mediump vec3 t16_1;
lowp vec3 t10_2;
mediump float t16_9;
void main()
{
    //Instruction 13874
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 13875
    //MOV
    t16_0.w = 1.0;
    //Instruction 13876
    //DP4
    t16_1.x = dot(unity_SHAr, t16_0);
    //Instruction 13877
    //DP4
    t16_1.y = dot(unity_SHAg, t16_0);
    //Instruction 13878
    //DP4
    t16_1.z = dot(unity_SHAb, t16_0);
    //Instruction 13879
    //ADD
    t16_0.xyz = t16_1.xyz + vs_TEXCOORD4.xyz;
    //Instruction 13880
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 13881
    //MUL
    t16_1.xyz = t10_2.xyz * vs_TEXCOORD2.xyz;
    //Instruction 13882
    //MUL
    t16_0.xyz = t16_0.xyz * t16_1.xyz;
    //Instruction 13883
    //MUL
    t16_1.xyz = t16_1.xyz * _LightColor0.xyz;
    //Instruction 13884
    //DP3
    t16_9 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 13885
    //MAX
    t16_9 = max(t16_9, 0.0);
    //Instruction 13886
    //MAD
    t16_0.xyz = t16_1.xyz * vec3(t16_9) + t16_0.xyz;
    //Instruction 13887
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 13888
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 13889
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_2.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_10;
  tmpvar_10 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_11;
  highp vec3 vRotatedWindVector_12;
  highp vec3 FinalPosition_13;
  FinalPosition_13 = tmpvar_1.xyz;
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  mediump float tmpvar_15;
  tmpvar_15 = (_WindQuality * _WindEnabled);
  if ((tmpvar_15 > 0.0)) {
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedWindVector_12 = normalize((tmpvar_16 * _ST_WindVector.xyz));
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_11 = (normalize((tmpvar_17 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_13 = tmpvar_18;
  if ((tmpvar_15 >= 3.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_18;
    if ((tmpvar_15 == 5.0)) {
      highp vec3 vPos_20;
      vPos_20 = tmpvar_18;
      highp float fTime_21;
      highp float fAdherenceScale_22;
      highp vec3 vWindVector_23;
      vWindVector_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_21 = (_ST_WindBranch.x + (tmpvar_14.x + tmpvar_14.y));
      highp vec4 vOscillations_24;
      highp float fOscillation_25;
      fOscillation_25 = 1.0;
      highp float fAmount_26;
      highp float fTarget_27;
      highp vec4 tmpvar_28;
      tmpvar_28.x = (fTime_21 + _glesMultiTexCoord0.w);
      tmpvar_28.y = ((fTime_21 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_28.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_21 + _glesMultiTexCoord0.w));
      tmpvar_28.w = ((fTime_21 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_29;
      tmpvar_29 = abs(((
        fract((tmpvar_28 + 0.5))
       * 2.0) - 1.0));
      vOscillations_24 = (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0);
      highp float tmpvar_30;
      tmpvar_30 = (vOscillations_24.y * vOscillations_24.z);
      fTarget_27 = 1.0;
      fAmount_26 = tmpvar_30;
      if ((tmpvar_30 < 0.0)) {
        fTarget_27 = -1.0;
        fAmount_26 = -(tmpvar_30);
      };
      fOscillation_25 = (((
        mix (mix (tmpvar_30, fTarget_27, fAmount_26), fTarget_27, fAmount_26)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_24.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_25 = (fOscillation_25 * (1.0 + (vOscillations_24.w * _ST_WindBranchWhip.x)));
      vPos_20 = (tmpvar_18 + ((vWindVector_23 * fOscillation_25) * _ST_WindBranch.y));
      highp vec4 tmpvar_31;
      tmpvar_31.zw = vec2(0.0, 0.0);
      tmpvar_31.x = ((fTime_21 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_31.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_32;
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      tmpvar_32 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((tmpvar_32.x * tmpvar_32.y) * (
        (tmpvar_32.x * tmpvar_32.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_24.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_20 = (vPos_20 + ((
        ((vRotatedBranchAnchor_11 - vPos_20) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_19 = vPos_20;
    } else {
      highp vec3 vPos_34;
      vPos_34 = vPos_19;
      highp float fTime_35;
      highp vec3 vWindVector_36;
      vWindVector_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_35 = (_ST_WindBranch.x + (tmpvar_14.x + tmpvar_14.y));
      highp vec4 vOscillations_37;
      highp float fOscillation_38;
      fOscillation_38 = 1.0;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (fTime_35 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((fTime_35 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_35 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_37 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_37.y * vOscillations_37.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      fOscillation_38 = (((
        mix (mix (tmpvar_43, fTarget_40, fAmount_39), fTarget_40, fAmount_39)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_37.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_34 = (vPos_19 + ((vWindVector_36 * fOscillation_38) * _ST_WindBranch.y));
      vPos_19 = vPos_34;
    };
    FinalPosition_13 = vPos_19;
  };
  if ((tmpvar_15 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = FinalPosition_13;
    highp float fMoveAmount_45;
    highp float fAdjust_46;
    highp float fLength_47;
    fLength_47 = sqrt(dot (FinalPosition_13, FinalPosition_13));
    highp float tmpvar_48;
    tmpvar_48 = (max ((FinalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_46 = tmpvar_48;
    if ((tmpvar_48 != 0.0)) {
      fAdjust_46 = pow (tmpvar_48, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_49;
    tmpvar_49.zw = vec2(0.0, 0.0);
    tmpvar_49.x = (tmpvar_14.x + _ST_WindGlobal.x);
    tmpvar_49.y = (tmpvar_14.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_50;
    highp vec4 tmpvar_51;
    tmpvar_51 = abs(((
      fract((tmpvar_49 + 0.5))
     * 2.0) - 1.0));
    tmpvar_50 = (((
      (tmpvar_51 * tmpvar_51)
     * 
      (3.0 - (2.0 * tmpvar_51))
    ) - 0.5) * 2.0);
    fMoveAmount_45 = ((_ST_WindGlobal.y * (tmpvar_50.x + 
      (tmpvar_50.y * tmpvar_50.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_45 = (fMoveAmount_45 * fAdjust_46);
    vPos_44.xz = (FinalPosition_13.xz + (vRotatedWindVector_12.xz * fMoveAmount_45));
    vPos_44 = (normalize(vPos_44) * fLength_47);
    FinalPosition_13 = vPos_44;
  };
  tmpvar_10.xyz = FinalPosition_13;
  tmpvar_5 = tmpvar_8;
  highp vec3 tmpvar_52;
  tmpvar_52 = (_Object2World * tmpvar_10).xyz;
  highp vec4 v_53;
  v_53.x = _World2Object[0].x;
  v_53.y = _World2Object[1].x;
  v_53.z = _World2Object[2].x;
  v_53.w = _World2Object[3].x;
  highp vec4 v_54;
  v_54.x = _World2Object[0].y;
  v_54.y = _World2Object[1].y;
  v_54.z = _World2Object[2].y;
  v_54.w = _World2Object[3].y;
  highp vec4 v_55;
  v_55.x = _World2Object[0].z;
  v_55.y = _World2Object[1].z;
  v_55.z = _World2Object[2].z;
  v_55.w = _World2Object[3].z;
  highp vec3 tmpvar_56;
  tmpvar_56 = normalize(((
    (v_53.xyz * _glesNormal.x)
   + 
    (v_54.xyz * _glesNormal.y)
  ) + (v_55.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_56;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_57;
  tmpvar_57.w = 1.0;
  tmpvar_57.xyz = worldNormal_3;
  mediump vec4 normal_58;
  normal_58 = tmpvar_57;
  mediump vec3 x2_59;
  mediump vec4 tmpvar_60;
  tmpvar_60 = (normal_58.xyzz * normal_58.yzzx);
  x2_59.x = dot (unity_SHBr, tmpvar_60);
  x2_59.y = dot (unity_SHBg, tmpvar_60);
  x2_59.z = dot (unity_SHBb, tmpvar_60);
  highp vec3 lightColor0_61;
  lightColor0_61 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_62;
  lightColor1_62 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_63;
  lightColor2_63 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_64;
  lightColor3_64 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_65;
  lightAttenSq_65 = unity_4LightAtten0;
  highp vec3 normal_66;
  normal_66 = worldNormal_3;
  highp vec3 col_67;
  highp vec4 ndotl_68;
  highp vec4 lengthSq_69;
  highp vec4 tmpvar_70;
  tmpvar_70 = (unity_4LightPosX0 - tmpvar_52.x);
  highp vec4 tmpvar_71;
  tmpvar_71 = (unity_4LightPosY0 - tmpvar_52.y);
  highp vec4 tmpvar_72;
  tmpvar_72 = (unity_4LightPosZ0 - tmpvar_52.z);
  lengthSq_69 = (tmpvar_70 * tmpvar_70);
  lengthSq_69 = (lengthSq_69 + (tmpvar_71 * tmpvar_71));
  lengthSq_69 = (lengthSq_69 + (tmpvar_72 * tmpvar_72));
  ndotl_68 = (tmpvar_70 * normal_66.x);
  ndotl_68 = (ndotl_68 + (tmpvar_71 * normal_66.y));
  ndotl_68 = (ndotl_68 + (tmpvar_72 * normal_66.z));
  highp vec4 tmpvar_73;
  tmpvar_73 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_68 * inversesqrt(lengthSq_69)));
  ndotl_68 = tmpvar_73;
  highp vec4 tmpvar_74;
  tmpvar_74 = (tmpvar_73 * (1.0/((1.0 + 
    (lengthSq_69 * lightAttenSq_65)
  ))));
  col_67 = (lightColor0_61 * tmpvar_74.x);
  col_67 = (col_67 + (lightColor1_62 * tmpvar_74.y));
  col_67 = (col_67 + (lightColor2_63 * tmpvar_74.z));
  col_67 = (col_67 + (lightColor3_64 * tmpvar_74.w));
  tmpvar_6 = ((x2_59 + (unity_SHC.xyz * 
    ((normal_58.x * normal_58.x) - (normal_58.y * normal_58.y))
  )) + col_67);
  tmpvar_7 = (unity_World2Shadow[0] * (_Object2World * tmpvar_10));
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_52;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp float tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD5).x > 
    (xlv_TEXCOORD5.z / xlv_TEXCOORD5.w)
  )), _LightShadowData.x);
  tmpvar_13 = tmpvar_14;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_13;
  mediump vec3 normalWorld_15;
  normalWorld_15 = tmpvar_5;
  mediump vec3 tmpvar_16;
  mediump vec3 tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = normalWorld_15;
  mediump vec3 x1_19;
  x1_19.x = dot (unity_SHAr, tmpvar_18);
  x1_19.y = dot (unity_SHAg, tmpvar_18);
  x1_19.z = dot (unity_SHAb, tmpvar_18);
  tmpvar_17 = (xlv_TEXCOORD4 + x1_19);
  tmpvar_16 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_16;
  lowp vec4 c_20;
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_22 = tmpvar_23;
  c_21.xyz = ((tmpvar_9 * tmpvar_16) * diff_22);
  c_21.w = tmpvar_10;
  c_20.w = c_21.w;
  c_20.xyz = (c_21.xyz + (tmpvar_9 * tmpvar_17));
  c_4.xyz = c_20.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_9;
  tmpvar_9 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_10;
  highp vec3 vRotatedWindVector_11;
  highp vec3 FinalPosition_12;
  FinalPosition_12 = tmpvar_1.xyz;
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  mediump float tmpvar_14;
  tmpvar_14 = (_WindQuality * _WindEnabled);
  if ((tmpvar_14 > 0.0)) {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    vRotatedWindVector_11 = normalize((tmpvar_15 * _ST_WindVector.xyz));
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_10 = (normalize((tmpvar_16 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_11 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_10 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_17;
  tmpvar_17 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_12 = tmpvar_17;
  if ((tmpvar_14 >= 3.0)) {
    highp vec3 vPos_18;
    vPos_18 = tmpvar_17;
    if ((tmpvar_14 == 5.0)) {
      highp vec3 vPos_19;
      vPos_19 = tmpvar_17;
      highp float fTime_20;
      highp float fAdherenceScale_21;
      highp vec3 vWindVector_22;
      vWindVector_22 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_20 = (_ST_WindBranch.x + (tmpvar_13.x + tmpvar_13.y));
      highp vec4 vOscillations_23;
      highp float fOscillation_24;
      fOscillation_24 = 1.0;
      highp float fAmount_25;
      highp float fTarget_26;
      highp vec4 tmpvar_27;
      tmpvar_27.x = (fTime_20 + _glesMultiTexCoord0.w);
      tmpvar_27.y = ((fTime_20 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_27.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_20 + _glesMultiTexCoord0.w));
      tmpvar_27.w = ((fTime_20 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_28;
      tmpvar_28 = abs(((
        fract((tmpvar_27 + 0.5))
       * 2.0) - 1.0));
      vOscillations_23 = (((
        (tmpvar_28 * tmpvar_28)
       * 
        (3.0 - (2.0 * tmpvar_28))
      ) - 0.5) * 2.0);
      highp float tmpvar_29;
      tmpvar_29 = (vOscillations_23.y * vOscillations_23.z);
      fTarget_26 = 1.0;
      fAmount_25 = tmpvar_29;
      if ((tmpvar_29 < 0.0)) {
        fTarget_26 = -1.0;
        fAmount_25 = -(tmpvar_29);
      };
      fOscillation_24 = (((
        mix (mix (tmpvar_29, fTarget_26, fAmount_25), fTarget_26, fAmount_25)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_23.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_24 = (fOscillation_24 * (1.0 + (vOscillations_23.w * _ST_WindBranchWhip.x)));
      vPos_19 = (tmpvar_17 + ((vWindVector_22 * fOscillation_24) * _ST_WindBranch.y));
      highp vec4 tmpvar_30;
      tmpvar_30.zw = vec2(0.0, 0.0);
      tmpvar_30.x = ((fTime_20 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_30.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_31;
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      tmpvar_31 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      fAdherenceScale_21 = (1.0 - ((tmpvar_31.x * tmpvar_31.y) * (
        (tmpvar_31.x * tmpvar_31.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_21 = (fAdherenceScale_21 + ((vOscillations_23.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_19 = (vPos_19 + ((
        ((vRotatedBranchAnchor_10 - vPos_19) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_21) * _glesMultiTexCoord0.z));
      vPos_18 = vPos_19;
    } else {
      highp vec3 vPos_33;
      vPos_33 = vPos_18;
      highp float fTime_34;
      highp vec3 vWindVector_35;
      vWindVector_35 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_34 = (_ST_WindBranch.x + (tmpvar_13.x + tmpvar_13.y));
      highp vec4 vOscillations_36;
      highp float fOscillation_37;
      fOscillation_37 = 1.0;
      highp float fAmount_38;
      highp float fTarget_39;
      highp vec4 tmpvar_40;
      tmpvar_40.w = 0.0;
      tmpvar_40.x = (fTime_34 + _glesMultiTexCoord0.w);
      tmpvar_40.y = ((fTime_34 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_40.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_34 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_41;
      tmpvar_41 = abs(((
        fract((tmpvar_40 + 0.5))
       * 2.0) - 1.0));
      vOscillations_36 = (((
        (tmpvar_41 * tmpvar_41)
       * 
        (3.0 - (2.0 * tmpvar_41))
      ) - 0.5) * 2.0);
      highp float tmpvar_42;
      tmpvar_42 = (vOscillations_36.y * vOscillations_36.z);
      fTarget_39 = 1.0;
      fAmount_38 = tmpvar_42;
      if ((tmpvar_42 < 0.0)) {
        fTarget_39 = -1.0;
        fAmount_38 = -(tmpvar_42);
      };
      fOscillation_37 = (((
        mix (mix (tmpvar_42, fTarget_39, fAmount_38), fTarget_39, fAmount_38)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_36.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_33 = (vPos_18 + ((vWindVector_35 * fOscillation_37) * _ST_WindBranch.y));
      vPos_18 = vPos_33;
    };
    FinalPosition_12 = vPos_18;
  };
  if ((tmpvar_14 > 0.0)) {
    highp vec3 vPos_43;
    vPos_43 = FinalPosition_12;
    highp float fMoveAmount_44;
    highp float fAdjust_45;
    highp float fLength_46;
    fLength_46 = sqrt(dot (FinalPosition_12, FinalPosition_12));
    highp float tmpvar_47;
    tmpvar_47 = (max ((FinalPosition_12.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_45 = tmpvar_47;
    if ((tmpvar_47 != 0.0)) {
      fAdjust_45 = pow (tmpvar_47, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_48;
    tmpvar_48.zw = vec2(0.0, 0.0);
    tmpvar_48.x = (tmpvar_13.x + _ST_WindGlobal.x);
    tmpvar_48.y = (tmpvar_13.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_49;
    highp vec4 tmpvar_50;
    tmpvar_50 = abs(((
      fract((tmpvar_48 + 0.5))
     * 2.0) - 1.0));
    tmpvar_49 = (((
      (tmpvar_50 * tmpvar_50)
     * 
      (3.0 - (2.0 * tmpvar_50))
    ) - 0.5) * 2.0);
    fMoveAmount_44 = ((_ST_WindGlobal.y * (tmpvar_49.x + 
      (tmpvar_49.y * tmpvar_49.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_44 = (fMoveAmount_44 * fAdjust_45);
    vPos_43.xz = (FinalPosition_12.xz + (vRotatedWindVector_11.xz * fMoveAmount_44));
    vPos_43 = (normalize(vPos_43) * fLength_46);
    FinalPosition_12 = vPos_43;
  };
  tmpvar_9.xyz = FinalPosition_12;
  tmpvar_5 = tmpvar_7;
  highp vec4 v_51;
  v_51.x = _World2Object[0].x;
  v_51.y = _World2Object[1].x;
  v_51.z = _World2Object[2].x;
  v_51.w = _World2Object[3].x;
  highp vec4 v_52;
  v_52.x = _World2Object[0].y;
  v_52.y = _World2Object[1].y;
  v_52.z = _World2Object[2].y;
  v_52.w = _World2Object[3].y;
  highp vec4 v_53;
  v_53.x = _World2Object[0].z;
  v_53.y = _World2Object[1].z;
  v_53.z = _World2Object[2].z;
  v_53.w = _World2Object[3].z;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(((
    (v_51.xyz * _glesNormal.x)
   + 
    (v_52.xyz * _glesNormal.y)
  ) + (v_53.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_54;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_55;
  tmpvar_55.w = 1.0;
  tmpvar_55.xyz = worldNormal_3;
  mediump vec4 normal_56;
  normal_56 = tmpvar_55;
  mediump vec3 x2_57;
  mediump vec4 tmpvar_58;
  tmpvar_58 = (normal_56.xyzz * normal_56.yzzx);
  x2_57.x = dot (unity_SHBr, tmpvar_58);
  x2_57.y = dot (unity_SHBg, tmpvar_58);
  x2_57.z = dot (unity_SHBb, tmpvar_58);
  tmpvar_6 = (unity_World2Shadow[0] * (_Object2World * tmpvar_9));
  gl_Position = (glstate_matrix_mvp * tmpvar_9);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_9).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = (x2_57 + (unity_SHC.xyz * (
    (normal_56.x * normal_56.x)
   - 
    (normal_56.y * normal_56.y)
  )));
  xlv_TEXCOORD5 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp float shadow_13;
  shadow_13 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD5.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_13;
  mediump vec3 normalWorld_14;
  normalWorld_14 = tmpvar_5;
  mediump vec3 tmpvar_15;
  mediump vec3 tmpvar_16;
  mediump vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = normalWorld_14;
  mediump vec3 x1_18;
  x1_18.x = dot (unity_SHAr, tmpvar_17);
  x1_18.y = dot (unity_SHAg, tmpvar_17);
  x1_18.z = dot (unity_SHAb, tmpvar_17);
  tmpvar_16 = (xlv_TEXCOORD4 + x1_18);
  tmpvar_15 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_15;
  lowp vec4 c_19;
  lowp vec4 c_20;
  lowp float diff_21;
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_21 = tmpvar_22;
  c_20.xyz = ((tmpvar_9 * tmpvar_15) * diff_21);
  c_20.w = tmpvar_10;
  c_19.w = c_20.w;
  c_19.xyz = (c_20.xyz + (tmpvar_9 * tmpvar_16));
  c_4.xyz = c_19.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
mediump vec3 t16_6;
highp vec3 t8;
highp float t10;
highp float t15;
highp vec2 t17;
highp vec2 t19;
highp float t22;
bool tb22;
highp float t23;
bool tb23;
highp float t24;
highp float t25;
mediump float t16_27;
void main()
{
    //Instruction 14111
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 14112
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 14113
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 14114
    //MUL
    t8.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 14115
    //MAD
    t8.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t8.xyz;
    //Instruction 14116
    //MAD
    t8.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t8.xyz;
    //Instruction 14117
    //DP3
    t15 = dot(t8.xyz, t8.xyz);
    //Instruction 14118
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 14119
    //MUL
    t8.xy = vec2(t15) * t8.xz;
    //Instruction 14120
    //AND
    t8.xy = mix(vec2(0.0, 0.0), t8.xy, bvec2(tb1));
    //Instruction 14121
    //ADD
    t2.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 14122
    //MAD
    t2.xyz = unity_LODFade.xxx * t2.xyz + in_POSITION0.xyz;
    //Instruction 14123
    //GE
    tb22 = t16_0.x>=3.000000;
    //Instruction 14124
    //IF
    if(tb22){
        //Instruction 14125
        //EQ
        tb22 = t16_0.x==5.000000;
        //Instruction 14126
        //IF
        if(tb22){
            //Instruction 14127
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 14128
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 14129
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 14130
            //DP3
            t22 = dot(t3.xyz, t3.xyz);
            //Instruction 14131
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 14132
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 14133
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 14134
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 14135
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 14136
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 14137
            //ADD
            t22 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 14138
            //ADD
            t22 = t22 + _ST_WindBranch.x;
            //Instruction 14139
            //ADD
            t0.x = t22 + in_TEXCOORD0.w;
            //Instruction 14140
            //MAD
            t0.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 14141
            //MUL
            t23 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 14142
            //MUL
            t0.z = t23 * 0.500000;
            //Instruction 14143
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 14144
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 14145
            //FRC
            t0 = fract(t0);
            //Instruction 14146
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 14147
            //MUL
            t5 = abs(t0) * abs(t0);
            //Instruction 14148
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 14149
            //MAD
            t0 = t5 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 14150
            //ADD
            t0 = t0 + t0;
            //Instruction 14151
            //MUL
            t5.w = t0.z * t0.y;
            //Instruction 14152
            //LT
            tb23 = t5.w<0.0;
            //Instruction 14153
            //MOV
            t5.y = (-t5.w);
            //Instruction 14154
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 14155
            //MOVC
            t5.xy = (bool(tb23)) ? t5.xy : t5.zw;
            //Instruction 14156
            //MAD
            t23 = (-t0.y) * t0.z + t5.x;
            //Instruction 14157
            //MAD
            t23 = t5.y * t23 + t5.w;
            //Instruction 14158
            //ADD
            t24 = (-t23) + t5.x;
            //Instruction 14159
            //MAD
            t23 = t5.y * t24 + t23;
            //Instruction 14160
            //MUL
            t23 = t23 * _ST_WindBranchTwitch.x;
            //Instruction 14161
            //ADD
            t24 = (-_ST_WindVector.w) + 1.0;
            //Instruction 14162
            //ADD
            t25 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 14163
            //MUL
            t25 = t0.x * t25;
            //Instruction 14164
            //MAD
            t23 = t23 * t24 + t25;
            //Instruction 14165
            //MAD
            t24 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 14166
            //MUL
            t23 = t23 * t24;
            //Instruction 14167
            //MUL
            t4.xyz = vec3(t23) * t4.xyz;
            //Instruction 14168
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 14169
            //MAD
            t5.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 14170
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 14171
            //MAD
            t5.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 14172
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 14173
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 14174
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 14175
            //MUL
            t19.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 14176
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 14177
            //MAD
            t5.xy = t19.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 14178
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 14179
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 14180
            //MUL
            t22 = t5.x * t5.y;
            //Instruction 14181
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 14182
            //MUL
            t23 = t0.w * _ST_WindVector.w;
            //Instruction 14183
            //MAD
            t22 = t23 * _ST_WindBranchWhip.x + t22;
            //Instruction 14184
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 14185
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 14186
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 14187
            //MAD
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 14188
        //ELSE
        } else {
            //Instruction 14189
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 14190
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 14191
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 14192
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 14193
            //ADD
            t22 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 14194
            //ADD
            t22 = t22 + _ST_WindBranch.x;
            //Instruction 14195
            //ADD
            t4.x = t22 + in_TEXCOORD0.w;
            //Instruction 14196
            //MAD
            t4.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 14197
            //MUL
            t22 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 14198
            //MUL
            t4.z = t22 * 0.500000;
            //Instruction 14199
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 14200
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 14201
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 14202
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 14203
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 14204
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 14205
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 14206
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 14207
            //LT
            tb22 = t0.w<0.0;
            //Instruction 14208
            //MOV
            t0.y = (-t0.w);
            //Instruction 14209
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 14210
            //MOVC
            t5.xy = (bool(tb22)) ? t0.xy : t0.zw;
            //Instruction 14211
            //MAD
            t22 = (-t4.y) * t4.z + t5.x;
            //Instruction 14212
            //MAD
            t22 = t5.y * t22 + t0.w;
            //Instruction 14213
            //ADD
            t23 = (-t22) + t5.x;
            //Instruction 14214
            //MAD
            t22 = t5.y * t23 + t22;
            //Instruction 14215
            //MUL
            t22 = t22 * _ST_WindBranchTwitch.x;
            //Instruction 14216
            //ADD
            t23 = (-_ST_WindVector.w) + 1.0;
            //Instruction 14217
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 14218
            //MUL
            t24 = t24 * t4.x;
            //Instruction 14219
            //MAD
            t22 = t22 * t23 + t24;
            //Instruction 14220
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 14221
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 14222
        //ENDIF
        }
        //Instruction 14223
    //ENDIF
    }
    //Instruction 14224
    //DP3
    t22 = dot(t2.xyz, t2.xyz);
    //Instruction 14225
    //SQRT
    t22 = sqrt(t22);
    //Instruction 14226
    //DIV
    t23 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 14227
    //MAD
    t23 = (-t23) * 0.250000 + t2.y;
    //Instruction 14228
    //MAX
    t23 = max(t23, 0.0);
    //Instruction 14229
    //MUL
    t23 = t23 * _ST_WindGlobal.z;
    //Instruction 14230
    //NE
    tb3 = t23!=0.0;
    //Instruction 14231
    //LOG
    t10 = log2(t23);
    //Instruction 14232
    //MUL
    t10 = t10 * _ST_WindGlobal.w;
    //Instruction 14233
    //EXP
    t10 = exp2(t10);
    //Instruction 14234
    //MOVC
    t23 = (tb3) ? t10 : t23;
    //Instruction 14235
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 14236
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 14237
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 14238
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 14239
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 14240
    //MUL
    t17.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 14241
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 14242
    //MAD
    t3.xy = t17.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 14243
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 14244
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 14245
    //DIV
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 14246
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t10;
    //Instruction 14247
    //MUL
    t23 = t23 * t3.x;
    //Instruction 14248
    //MAD
    t3.xz = t8.xy * vec2(t23) + t2.xz;
    //Instruction 14249
    //MOV
    t3.y = t2.y;
    //Instruction 14250
    //DP3
    t8.x = dot(t3.xyz, t3.xyz);
    //Instruction 14251
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 14252
    //MUL
    t3.xyz = t8.xxx * t3.xyz;
    //Instruction 14253
    //MUL
    t8.xyz = vec3(t22) * t3.xyz;
    //Instruction 14254
    //MOVC
    t1.xyz = (bool(tb1)) ? t8.xyz : t2.xyz;
    //Instruction 14255
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 14256
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 14257
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 14258
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 14259
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 14260
    //MAD
    t2.xyz = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 14261
    //MAD
    t2.xyz = _Object2World[2].xyz * t1.zzz + t2.xyz;
    //Instruction 14262
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t2.xyz;
    //Instruction 14263
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 14264
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 14265
    //MOV
    t2.z = _World2Object[2].x;
    //Instruction 14266
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 14267
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 14268
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 14269
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 14270
    //MAD
    t2.xyz = t2.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 14271
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 14272
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 14273
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 14274
    //MAD
    t2.xyz = t3.xyz * in_NORMAL0.zzz + t2.xyz;
    //Instruction 14275
    //DP3
    t22 = dot(t2.xyz, t2.xyz);
    //Instruction 14276
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 14277
    //MUL
    t2.xyz = vec3(t22) * t2.xyz;
    //Instruction 14278
    //MUL
    t16_0 = t2.yzzx * t2.xyzz;
    //Instruction 14279
    //DP4
    t16_6.x = dot(unity_SHBr, t16_0);
    //Instruction 14280
    //DP4
    t16_6.y = dot(unity_SHBg, t16_0);
    //Instruction 14281
    //DP4
    t16_6.z = dot(unity_SHBb, t16_0);
    //Instruction 14282
    //MUL
    t16_27 = t2.y * t2.y;
    //Instruction 14283
    //MAD
    t16_27 = t2.x * t2.x + (-t16_27);
    //Instruction 14284
    //MAD
    vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(t16_27) + t16_6.xyz;
    //Instruction 14285
    //MUL
    t0 = t1.yyyy * _Object2World[1];
    //Instruction 14286
    //MAD
    t0 = _Object2World[0] * t1.xxxx + t0;
    //Instruction 14287
    //MAD
    t0 = _Object2World[2] * t1.zzzz + t0;
    //Instruction 14288
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 14289
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 14290
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 14291
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 14292
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 14293
    //MOV
    vs_TEXCOORD0.xyz = t2.xyz;
    //Instruction 14294
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 14295
    //MOV
    vs_TEXCOORD5 = t0;
    //Instruction 14296
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 14297
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 14298
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
mediump vec3 t16_1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump float t16_12;
mediump float t16_13;
void main()
{
    //Instruction 14091
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 14092
    //MOV
    t16_0.w = 1.0;
    //Instruction 14093
    //DP4
    t16_1.x = dot(unity_SHAr, t16_0);
    //Instruction 14094
    //DP4
    t16_1.y = dot(unity_SHAg, t16_0);
    //Instruction 14095
    //DP4
    t16_1.z = dot(unity_SHAb, t16_0);
    //Instruction 14096
    //ADD
    t16_0.xyz = t16_1.xyz + vs_TEXCOORD4.xyz;
    //Instruction 14097
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 14098
    //MUL
    t16_1.xyz = t10_2.xyz * vs_TEXCOORD2.xyz;
    //Instruction 14099
    //MUL
    t16_0.xyz = t16_0.xyz * t16_1.xyz;
    //Instruction 14100
    //SAMPLE_C_LZ
    vec3 txVec31 = vec3(vs_TEXCOORD5.xy,vs_TEXCOORD5.z);
    t16_12 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec31, 0.0);
    //Instruction 14101
    //ADD
    t16_13 = (-_LightShadowData.x) + 1.0;
    //Instruction 14102
    //MAD
    t16_12 = t16_12 * t16_13 + _LightShadowData.x;
    //Instruction 14103
    //MUL
    t16_3.xyz = vec3(t16_12) * _LightColor0.xyz;
    //Instruction 14104
    //MUL
    t16_1.xyz = t16_1.xyz * t16_3.xyz;
    //Instruction 14105
    //DP3
    t16_12 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 14106
    //MAX
    t16_12 = max(t16_12, 0.0);
    //Instruction 14107
    //MAD
    t16_0.xyz = t16_1.xyz * vec3(t16_12) + t16_0.xyz;
    //Instruction 14108
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 14109
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 14110
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_2.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_10;
  tmpvar_10 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_11;
  highp vec3 vRotatedWindVector_12;
  highp vec3 FinalPosition_13;
  FinalPosition_13 = tmpvar_1.xyz;
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  mediump float tmpvar_15;
  tmpvar_15 = (_WindQuality * _WindEnabled);
  if ((tmpvar_15 > 0.0)) {
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedWindVector_12 = normalize((tmpvar_16 * _ST_WindVector.xyz));
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_11 = (normalize((tmpvar_17 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_13 = tmpvar_18;
  if ((tmpvar_15 >= 3.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_18;
    if ((tmpvar_15 == 5.0)) {
      highp vec3 vPos_20;
      vPos_20 = tmpvar_18;
      highp float fTime_21;
      highp float fAdherenceScale_22;
      highp vec3 vWindVector_23;
      vWindVector_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_21 = (_ST_WindBranch.x + (tmpvar_14.x + tmpvar_14.y));
      highp vec4 vOscillations_24;
      highp float fOscillation_25;
      fOscillation_25 = 1.0;
      highp float fAmount_26;
      highp float fTarget_27;
      highp vec4 tmpvar_28;
      tmpvar_28.x = (fTime_21 + _glesMultiTexCoord0.w);
      tmpvar_28.y = ((fTime_21 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_28.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_21 + _glesMultiTexCoord0.w));
      tmpvar_28.w = ((fTime_21 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_29;
      tmpvar_29 = abs(((
        fract((tmpvar_28 + 0.5))
       * 2.0) - 1.0));
      vOscillations_24 = (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0);
      highp float tmpvar_30;
      tmpvar_30 = (vOscillations_24.y * vOscillations_24.z);
      fTarget_27 = 1.0;
      fAmount_26 = tmpvar_30;
      if ((tmpvar_30 < 0.0)) {
        fTarget_27 = -1.0;
        fAmount_26 = -(tmpvar_30);
      };
      fOscillation_25 = (((
        mix (mix (tmpvar_30, fTarget_27, fAmount_26), fTarget_27, fAmount_26)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_24.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_25 = (fOscillation_25 * (1.0 + (vOscillations_24.w * _ST_WindBranchWhip.x)));
      vPos_20 = (tmpvar_18 + ((vWindVector_23 * fOscillation_25) * _ST_WindBranch.y));
      highp vec4 tmpvar_31;
      tmpvar_31.zw = vec2(0.0, 0.0);
      tmpvar_31.x = ((fTime_21 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_31.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_32;
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      tmpvar_32 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((tmpvar_32.x * tmpvar_32.y) * (
        (tmpvar_32.x * tmpvar_32.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_24.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_20 = (vPos_20 + ((
        ((vRotatedBranchAnchor_11 - vPos_20) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_19 = vPos_20;
    } else {
      highp vec3 vPos_34;
      vPos_34 = vPos_19;
      highp float fTime_35;
      highp vec3 vWindVector_36;
      vWindVector_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_35 = (_ST_WindBranch.x + (tmpvar_14.x + tmpvar_14.y));
      highp vec4 vOscillations_37;
      highp float fOscillation_38;
      fOscillation_38 = 1.0;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (fTime_35 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((fTime_35 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_35 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_37 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_37.y * vOscillations_37.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      fOscillation_38 = (((
        mix (mix (tmpvar_43, fTarget_40, fAmount_39), fTarget_40, fAmount_39)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_37.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_34 = (vPos_19 + ((vWindVector_36 * fOscillation_38) * _ST_WindBranch.y));
      vPos_19 = vPos_34;
    };
    FinalPosition_13 = vPos_19;
  };
  if ((tmpvar_15 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = FinalPosition_13;
    highp float fMoveAmount_45;
    highp float fAdjust_46;
    highp float fLength_47;
    fLength_47 = sqrt(dot (FinalPosition_13, FinalPosition_13));
    highp float tmpvar_48;
    tmpvar_48 = (max ((FinalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_46 = tmpvar_48;
    if ((tmpvar_48 != 0.0)) {
      fAdjust_46 = pow (tmpvar_48, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_49;
    tmpvar_49.zw = vec2(0.0, 0.0);
    tmpvar_49.x = (tmpvar_14.x + _ST_WindGlobal.x);
    tmpvar_49.y = (tmpvar_14.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_50;
    highp vec4 tmpvar_51;
    tmpvar_51 = abs(((
      fract((tmpvar_49 + 0.5))
     * 2.0) - 1.0));
    tmpvar_50 = (((
      (tmpvar_51 * tmpvar_51)
     * 
      (3.0 - (2.0 * tmpvar_51))
    ) - 0.5) * 2.0);
    fMoveAmount_45 = ((_ST_WindGlobal.y * (tmpvar_50.x + 
      (tmpvar_50.y * tmpvar_50.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_45 = (fMoveAmount_45 * fAdjust_46);
    vPos_44.xz = (FinalPosition_13.xz + (vRotatedWindVector_12.xz * fMoveAmount_45));
    vPos_44 = (normalize(vPos_44) * fLength_47);
    FinalPosition_13 = vPos_44;
  };
  tmpvar_10.xyz = FinalPosition_13;
  tmpvar_5 = tmpvar_8;
  highp vec3 tmpvar_52;
  tmpvar_52 = (_Object2World * tmpvar_10).xyz;
  highp vec4 v_53;
  v_53.x = _World2Object[0].x;
  v_53.y = _World2Object[1].x;
  v_53.z = _World2Object[2].x;
  v_53.w = _World2Object[3].x;
  highp vec4 v_54;
  v_54.x = _World2Object[0].y;
  v_54.y = _World2Object[1].y;
  v_54.z = _World2Object[2].y;
  v_54.w = _World2Object[3].y;
  highp vec4 v_55;
  v_55.x = _World2Object[0].z;
  v_55.y = _World2Object[1].z;
  v_55.z = _World2Object[2].z;
  v_55.w = _World2Object[3].z;
  highp vec3 tmpvar_56;
  tmpvar_56 = normalize(((
    (v_53.xyz * _glesNormal.x)
   + 
    (v_54.xyz * _glesNormal.y)
  ) + (v_55.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_56;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_57;
  tmpvar_57.w = 1.0;
  tmpvar_57.xyz = worldNormal_3;
  mediump vec4 normal_58;
  normal_58 = tmpvar_57;
  mediump vec3 x2_59;
  mediump vec4 tmpvar_60;
  tmpvar_60 = (normal_58.xyzz * normal_58.yzzx);
  x2_59.x = dot (unity_SHBr, tmpvar_60);
  x2_59.y = dot (unity_SHBg, tmpvar_60);
  x2_59.z = dot (unity_SHBb, tmpvar_60);
  highp vec3 lightColor0_61;
  lightColor0_61 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_62;
  lightColor1_62 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_63;
  lightColor2_63 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_64;
  lightColor3_64 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_65;
  lightAttenSq_65 = unity_4LightAtten0;
  highp vec3 normal_66;
  normal_66 = worldNormal_3;
  highp vec3 col_67;
  highp vec4 ndotl_68;
  highp vec4 lengthSq_69;
  highp vec4 tmpvar_70;
  tmpvar_70 = (unity_4LightPosX0 - tmpvar_52.x);
  highp vec4 tmpvar_71;
  tmpvar_71 = (unity_4LightPosY0 - tmpvar_52.y);
  highp vec4 tmpvar_72;
  tmpvar_72 = (unity_4LightPosZ0 - tmpvar_52.z);
  lengthSq_69 = (tmpvar_70 * tmpvar_70);
  lengthSq_69 = (lengthSq_69 + (tmpvar_71 * tmpvar_71));
  lengthSq_69 = (lengthSq_69 + (tmpvar_72 * tmpvar_72));
  ndotl_68 = (tmpvar_70 * normal_66.x);
  ndotl_68 = (ndotl_68 + (tmpvar_71 * normal_66.y));
  ndotl_68 = (ndotl_68 + (tmpvar_72 * normal_66.z));
  highp vec4 tmpvar_73;
  tmpvar_73 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_68 * inversesqrt(lengthSq_69)));
  ndotl_68 = tmpvar_73;
  highp vec4 tmpvar_74;
  tmpvar_74 = (tmpvar_73 * (1.0/((1.0 + 
    (lengthSq_69 * lightAttenSq_65)
  ))));
  col_67 = (lightColor0_61 * tmpvar_74.x);
  col_67 = (col_67 + (lightColor1_62 * tmpvar_74.y));
  col_67 = (col_67 + (lightColor2_63 * tmpvar_74.z));
  col_67 = (col_67 + (lightColor3_64 * tmpvar_74.w));
  tmpvar_6 = ((x2_59 + (unity_SHC.xyz * 
    ((normal_58.x * normal_58.x) - (normal_58.y * normal_58.y))
  )) + col_67);
  tmpvar_7 = (unity_World2Shadow[0] * (_Object2World * tmpvar_10));
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_52;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp float shadow_13;
  shadow_13 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD5.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_13;
  mediump vec3 normalWorld_14;
  normalWorld_14 = tmpvar_5;
  mediump vec3 tmpvar_15;
  mediump vec3 tmpvar_16;
  mediump vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = normalWorld_14;
  mediump vec3 x1_18;
  x1_18.x = dot (unity_SHAr, tmpvar_17);
  x1_18.y = dot (unity_SHAg, tmpvar_17);
  x1_18.z = dot (unity_SHAb, tmpvar_17);
  tmpvar_16 = (xlv_TEXCOORD4 + x1_18);
  tmpvar_15 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_15;
  lowp vec4 c_19;
  lowp vec4 c_20;
  lowp float diff_21;
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_21 = tmpvar_22;
  c_20.xyz = ((tmpvar_9 * tmpvar_15) * diff_21);
  c_20.w = tmpvar_10;
  c_19.w = c_20.w;
  c_19.xyz = (c_20.xyz + (tmpvar_9 * tmpvar_16));
  c_4.xyz = c_19.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
bool tb3;
highp vec4 t4;
highp vec4 t5;
mediump vec3 t16_6;
highp vec4 t7;
highp vec3 t9;
highp float t11;
highp float t17;
highp vec2 t19;
highp vec2 t21;
highp float t25;
bool tb25;
highp float t26;
bool tb26;
highp float t27;
highp float t28;
mediump float t16_30;
void main()
{
    //Instruction 14251
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 14252
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 14253
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 14254
    //MUL
    t9.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 14255
    //MAD
    t9.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t9.xyz;
    //Instruction 14256
    //MAD
    t9.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t9.xyz;
    //Instruction 14257
    //DP3
    t17 = dot(t9.xyz, t9.xyz);
    //Instruction 14258
    //RSQ
    t17 = inversesqrt(t17);
    //Instruction 14259
    //MUL
    t9.xy = vec2(t17) * t9.xz;
    //Instruction 14260
    //AND
    t9.xy = mix(vec2(0.0, 0.0), t9.xy, bvec2(tb1));
    //Instruction 14261
    //ADD
    t2.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 14262
    //MAD
    t2.xyz = unity_LODFade.xxx * t2.xyz + in_POSITION0.xyz;
    //Instruction 14263
    //GE
    tb25 = t16_0.x>=3.000000;
    //Instruction 14264
    //IF
    if(tb25){
        //Instruction 14265
        //EQ
        tb25 = t16_0.x==5.000000;
        //Instruction 14266
        //IF
        if(tb25){
            //Instruction 14267
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 14268
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 14269
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 14270
            //DP3
            t25 = dot(t3.xyz, t3.xyz);
            //Instruction 14271
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 14272
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 14273
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 14274
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 14275
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 14276
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 14277
            //ADD
            t25 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 14278
            //ADD
            t25 = t25 + _ST_WindBranch.x;
            //Instruction 14279
            //ADD
            t0.x = t25 + in_TEXCOORD0.w;
            //Instruction 14280
            //MAD
            t0.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 14281
            //MUL
            t26 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 14282
            //MUL
            t0.z = t26 * 0.500000;
            //Instruction 14283
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 14284
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 14285
            //FRC
            t0 = fract(t0);
            //Instruction 14286
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 14287
            //MUL
            t5 = abs(t0) * abs(t0);
            //Instruction 14288
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 14289
            //MAD
            t0 = t5 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 14290
            //ADD
            t0 = t0 + t0;
            //Instruction 14291
            //MUL
            t5.w = t0.z * t0.y;
            //Instruction 14292
            //LT
            tb26 = t5.w<0.0;
            //Instruction 14293
            //MOV
            t5.y = (-t5.w);
            //Instruction 14294
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 14295
            //MOVC
            t5.xy = (bool(tb26)) ? t5.xy : t5.zw;
            //Instruction 14296
            //MAD
            t26 = (-t0.y) * t0.z + t5.x;
            //Instruction 14297
            //MAD
            t26 = t5.y * t26 + t5.w;
            //Instruction 14298
            //ADD
            t27 = (-t26) + t5.x;
            //Instruction 14299
            //MAD
            t26 = t5.y * t27 + t26;
            //Instruction 14300
            //MUL
            t26 = t26 * _ST_WindBranchTwitch.x;
            //Instruction 14301
            //ADD
            t27 = (-_ST_WindVector.w) + 1.0;
            //Instruction 14302
            //ADD
            t28 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 14303
            //MUL
            t28 = t0.x * t28;
            //Instruction 14304
            //MAD
            t26 = t26 * t27 + t28;
            //Instruction 14305
            //MAD
            t27 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 14306
            //MUL
            t26 = t26 * t27;
            //Instruction 14307
            //MUL
            t4.xyz = vec3(t26) * t4.xyz;
            //Instruction 14308
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 14309
            //MAD
            t5.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 14310
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 14311
            //MAD
            t5.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 14312
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 14313
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 14314
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 14315
            //MUL
            t21.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 14316
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 14317
            //MAD
            t5.xy = t21.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 14318
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 14319
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 14320
            //MUL
            t25 = t5.x * t5.y;
            //Instruction 14321
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 14322
            //MUL
            t26 = t0.w * _ST_WindVector.w;
            //Instruction 14323
            //MAD
            t25 = t26 * _ST_WindBranchWhip.x + t25;
            //Instruction 14324
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 14325
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 14326
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 14327
            //MAD
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 14328
        //ELSE
        } else {
            //Instruction 14329
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 14330
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 14331
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 14332
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 14333
            //ADD
            t25 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 14334
            //ADD
            t25 = t25 + _ST_WindBranch.x;
            //Instruction 14335
            //ADD
            t4.x = t25 + in_TEXCOORD0.w;
            //Instruction 14336
            //MAD
            t4.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 14337
            //MUL
            t25 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 14338
            //MUL
            t4.z = t25 * 0.500000;
            //Instruction 14339
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 14340
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 14341
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 14342
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 14343
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 14344
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 14345
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 14346
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 14347
            //LT
            tb25 = t0.w<0.0;
            //Instruction 14348
            //MOV
            t0.y = (-t0.w);
            //Instruction 14349
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 14350
            //MOVC
            t5.xy = (bool(tb25)) ? t0.xy : t0.zw;
            //Instruction 14351
            //MAD
            t25 = (-t4.y) * t4.z + t5.x;
            //Instruction 14352
            //MAD
            t25 = t5.y * t25 + t0.w;
            //Instruction 14353
            //ADD
            t26 = (-t25) + t5.x;
            //Instruction 14354
            //MAD
            t25 = t5.y * t26 + t25;
            //Instruction 14355
            //MUL
            t25 = t25 * _ST_WindBranchTwitch.x;
            //Instruction 14356
            //ADD
            t26 = (-_ST_WindVector.w) + 1.0;
            //Instruction 14357
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 14358
            //MUL
            t27 = t27 * t4.x;
            //Instruction 14359
            //MAD
            t25 = t25 * t26 + t27;
            //Instruction 14360
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 14361
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 14362
        //ENDIF
        }
        //Instruction 14363
    //ENDIF
    }
    //Instruction 14364
    //DP3
    t25 = dot(t2.xyz, t2.xyz);
    //Instruction 14365
    //SQRT
    t25 = sqrt(t25);
    //Instruction 14366
    //DIV
    t26 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 14367
    //MAD
    t26 = (-t26) * 0.250000 + t2.y;
    //Instruction 14368
    //MAX
    t26 = max(t26, 0.0);
    //Instruction 14369
    //MUL
    t26 = t26 * _ST_WindGlobal.z;
    //Instruction 14370
    //NE
    tb3 = t26!=0.0;
    //Instruction 14371
    //LOG
    t11 = log2(t26);
    //Instruction 14372
    //MUL
    t11 = t11 * _ST_WindGlobal.w;
    //Instruction 14373
    //EXP
    t11 = exp2(t11);
    //Instruction 14374
    //MOVC
    t26 = (tb3) ? t11 : t26;
    //Instruction 14375
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 14376
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 14377
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 14378
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 14379
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 14380
    //MUL
    t19.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 14381
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 14382
    //MAD
    t3.xy = t19.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 14383
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 14384
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 14385
    //DIV
    t11 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 14386
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t11;
    //Instruction 14387
    //MUL
    t26 = t26 * t3.x;
    //Instruction 14388
    //MAD
    t3.xz = t9.xy * vec2(t26) + t2.xz;
    //Instruction 14389
    //MOV
    t3.y = t2.y;
    //Instruction 14390
    //DP3
    t9.x = dot(t3.xyz, t3.xyz);
    //Instruction 14391
    //RSQ
    t9.x = inversesqrt(t9.x);
    //Instruction 14392
    //MUL
    t3.xyz = t9.xxx * t3.xyz;
    //Instruction 14393
    //MUL
    t9.xyz = vec3(t25) * t3.xyz;
    //Instruction 14394
    //MOVC
    t1.xyz = (bool(tb1)) ? t9.xyz : t2.xyz;
    //Instruction 14395
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 14396
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 14397
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 14398
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 14399
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 14400
    //MAD
    t2.xyz = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 14401
    //MAD
    t2.xyz = _Object2World[2].xyz * t1.zzz + t2.xyz;
    //Instruction 14402
    //MAD
    t2.xyz = _Object2World[3].xyz * in_POSITION0.www + t2.xyz;
    //Instruction 14403
    //MOV
    t3.x = _World2Object[0].x;
    //Instruction 14404
    //MOV
    t3.y = _World2Object[1].x;
    //Instruction 14405
    //MOV
    t3.z = _World2Object[2].x;
    //Instruction 14406
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 14407
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 14408
    //MOV
    t4.z = _World2Object[2].y;
    //Instruction 14409
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 14410
    //MAD
    t3.xyz = t3.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 14411
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 14412
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 14413
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 14414
    //MAD
    t3.xyz = t4.xyz * in_NORMAL0.zzz + t3.xyz;
    //Instruction 14415
    //DP3
    t25 = dot(t3.xyz, t3.xyz);
    //Instruction 14416
    //RSQ
    t25 = inversesqrt(t25);
    //Instruction 14417
    //MUL
    t3.xyz = vec3(t25) * t3.xyz;
    //Instruction 14418
    //MUL
    t16_0 = t3.yzzx * t3.xyzz;
    //Instruction 14419
    //DP4
    t16_6.x = dot(unity_SHBr, t16_0);
    //Instruction 14420
    //DP4
    t16_6.y = dot(unity_SHBg, t16_0);
    //Instruction 14421
    //DP4
    t16_6.z = dot(unity_SHBb, t16_0);
    //Instruction 14422
    //MUL
    t16_30 = t3.y * t3.y;
    //Instruction 14423
    //MAD
    t16_30 = t3.x * t3.x + (-t16_30);
    //Instruction 14424
    //MAD
    t16_6.xyz = unity_SHC.xyz * vec3(t16_30) + t16_6.xyz;
    //Instruction 14425
    //ADD
    t0 = (-t2.xxxx) + unity_4LightPosX0;
    //Instruction 14426
    //ADD
    t4 = (-t2.yyyy) + unity_4LightPosY0;
    //Instruction 14427
    //ADD
    t5 = (-t2.zzzz) + unity_4LightPosZ0;
    //Instruction 14428
    //MUL
    t7 = t4 * t4;
    //Instruction 14429
    //MAD
    t7 = t0 * t0 + t7;
    //Instruction 14430
    //MAD
    t7 = t5 * t5 + t7;
    //Instruction 14431
    //MUL
    t4 = t3.yyyy * t4;
    //Instruction 14432
    //MAD
    t0 = t0 * t3.xxxx + t4;
    //Instruction 14433
    //MAD
    t0 = t5 * t3.zzzz + t0;
    //Instruction 14434
    //RSQ
    t4 = inversesqrt(t7);
    //Instruction 14435
    //MUL
    t0 = t0 * t4;
    //Instruction 14436
    //MAX
    t0 = max(t0, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 14437
    //MAD
    t4 = t7 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 14438
    //DIV
    t4 = vec4(1.0, 1.0, 1.0, 1.0) / t4;
    //Instruction 14439
    //MUL
    t0 = t0 * t4;
    //Instruction 14440
    //MUL
    t4.xyz = t0.yyy * unity_LightColor[1].xyz;
    //Instruction 14441
    //MAD
    t4.xyz = unity_LightColor[0].xyz * t0.xxx + t4.xyz;
    //Instruction 14442
    //MAD
    t4.xyz = unity_LightColor[2].xyz * t0.zzz + t4.xyz;
    //Instruction 14443
    //MAD
    t4.xyz = unity_LightColor[3].xyz * t0.www + t4.xyz;
    //Instruction 14444
    //ADD
    t4.xyz = t4.xyz + t16_6.xyz;
    //Instruction 14445
    //MUL
    t0 = t1.yyyy * _Object2World[1];
    //Instruction 14446
    //MAD
    t0 = _Object2World[0] * t1.xxxx + t0;
    //Instruction 14447
    //MAD
    t0 = _Object2World[2] * t1.zzzz + t0;
    //Instruction 14448
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 14449
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 14450
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 14451
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 14452
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 14453
    //MOV
    vs_TEXCOORD0.xyz = t3.xyz;
    //Instruction 14454
    //MOV
    vs_TEXCOORD1.xyz = t2.xyz;
    //Instruction 14455
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 14456
    //MOV
    vs_TEXCOORD5 = t0;
    //Instruction 14457
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 14458
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 14459
    //MOV
    vs_TEXCOORD4.xyz = t4.xyz;
    //Instruction 14460
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
mediump vec3 t16_1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump float t16_12;
mediump float t16_13;
void main()
{
    //Instruction 14231
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 14232
    //MOV
    t16_0.w = 1.0;
    //Instruction 14233
    //DP4
    t16_1.x = dot(unity_SHAr, t16_0);
    //Instruction 14234
    //DP4
    t16_1.y = dot(unity_SHAg, t16_0);
    //Instruction 14235
    //DP4
    t16_1.z = dot(unity_SHAb, t16_0);
    //Instruction 14236
    //ADD
    t16_0.xyz = t16_1.xyz + vs_TEXCOORD4.xyz;
    //Instruction 14237
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 14238
    //MUL
    t16_1.xyz = t10_2.xyz * vs_TEXCOORD2.xyz;
    //Instruction 14239
    //MUL
    t16_0.xyz = t16_0.xyz * t16_1.xyz;
    //Instruction 14240
    //SAMPLE_C_LZ
    vec3 txVec36 = vec3(vs_TEXCOORD5.xy,vs_TEXCOORD5.z);
    t16_12 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec36, 0.0);
    //Instruction 14241
    //ADD
    t16_13 = (-_LightShadowData.x) + 1.0;
    //Instruction 14242
    //MAD
    t16_12 = t16_12 * t16_13 + _LightShadowData.x;
    //Instruction 14243
    //MUL
    t16_3.xyz = vec3(t16_12) * _LightColor0.xyz;
    //Instruction 14244
    //MUL
    t16_1.xyz = t16_1.xyz * t16_3.xyz;
    //Instruction 14245
    //DP3
    t16_12 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 14246
    //MAX
    t16_12 = max(t16_12, 0.0);
    //Instruction 14247
    //MAD
    t16_0.xyz = t16_1.xyz * vec3(t16_12) + t16_0.xyz;
    //Instruction 14248
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 14249
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 14250
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = _Object2World[3].x;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].y;
  tmpvar_8 = clamp (((
    fract(((tmpvar_9 + tmpvar_10) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_8;
  highp vec4 tmpvar_11;
  tmpvar_11 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  FinalPosition_14 = tmpvar_1.xyz;
  mediump float tmpvar_15;
  tmpvar_15 = (_WindQuality * _WindEnabled);
  if ((tmpvar_15 > 0.0)) {
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_16 * _ST_WindVector.xyz));
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_17 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_14 = tmpvar_18;
  if ((tmpvar_15 >= 3.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_18;
    if ((tmpvar_15 == 5.0)) {
      highp vec3 vPos_20;
      vPos_20 = tmpvar_18;
      highp float fTime_21;
      highp float fAdherenceScale_22;
      highp vec3 vWindVector_23;
      vWindVector_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_21 = (_ST_WindBranch.x + (tmpvar_9 + tmpvar_10));
      highp vec4 vOscillations_24;
      highp float fOscillation_25;
      fOscillation_25 = 1.0;
      highp float fAmount_26;
      highp float fTarget_27;
      highp vec4 tmpvar_28;
      tmpvar_28.x = (fTime_21 + _glesMultiTexCoord0.w);
      tmpvar_28.y = ((fTime_21 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_28.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_21 + _glesMultiTexCoord0.w));
      tmpvar_28.w = ((fTime_21 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_29;
      tmpvar_29 = abs(((
        fract((tmpvar_28 + 0.5))
       * 2.0) - 1.0));
      vOscillations_24 = (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0);
      highp float tmpvar_30;
      tmpvar_30 = (vOscillations_24.y * vOscillations_24.z);
      fTarget_27 = 1.0;
      fAmount_26 = tmpvar_30;
      if ((tmpvar_30 < 0.0)) {
        fTarget_27 = -1.0;
        fAmount_26 = -(tmpvar_30);
      };
      fOscillation_25 = (((
        mix (mix (tmpvar_30, fTarget_27, fAmount_26), fTarget_27, fAmount_26)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_24.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_25 = (fOscillation_25 * (1.0 + (vOscillations_24.w * _ST_WindBranchWhip.x)));
      vPos_20 = (tmpvar_18 + ((vWindVector_23 * fOscillation_25) * _ST_WindBranch.y));
      highp vec4 tmpvar_31;
      tmpvar_31.zw = vec2(0.0, 0.0);
      tmpvar_31.x = ((fTime_21 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_31.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_32;
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      tmpvar_32 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((tmpvar_32.x * tmpvar_32.y) * (
        (tmpvar_32.x * tmpvar_32.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_24.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_20 = (vPos_20 + ((
        ((vRotatedBranchAnchor_12 - vPos_20) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_19 = vPos_20;
    } else {
      highp vec3 vPos_34;
      vPos_34 = vPos_19;
      highp float fTime_35;
      highp vec3 vWindVector_36;
      vWindVector_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_35 = (_ST_WindBranch.x + (tmpvar_9 + tmpvar_10));
      highp vec4 vOscillations_37;
      highp float fOscillation_38;
      fOscillation_38 = 1.0;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (fTime_35 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((fTime_35 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_35 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_37 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_37.y * vOscillations_37.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      fOscillation_38 = (((
        mix (mix (tmpvar_43, fTarget_40, fAmount_39), fTarget_40, fAmount_39)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_37.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_34 = (vPos_19 + ((vWindVector_36 * fOscillation_38) * _ST_WindBranch.y));
      vPos_19 = vPos_34;
    };
    FinalPosition_14 = vPos_19;
  };
  if ((tmpvar_15 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = FinalPosition_14;
    highp float fMoveAmount_45;
    highp float fAdjust_46;
    highp float fLength_47;
    fLength_47 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_48;
    tmpvar_48 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_46 = tmpvar_48;
    if ((tmpvar_48 != 0.0)) {
      fAdjust_46 = pow (tmpvar_48, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_49;
    tmpvar_49.zw = vec2(0.0, 0.0);
    tmpvar_49.x = (tmpvar_9 + _ST_WindGlobal.x);
    tmpvar_49.y = (tmpvar_10 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_50;
    highp vec4 tmpvar_51;
    tmpvar_51 = abs(((
      fract((tmpvar_49 + 0.5))
     * 2.0) - 1.0));
    tmpvar_50 = (((
      (tmpvar_51 * tmpvar_51)
     * 
      (3.0 - (2.0 * tmpvar_51))
    ) - 0.5) * 2.0);
    fMoveAmount_45 = ((_ST_WindGlobal.y * (tmpvar_50.x + 
      (tmpvar_50.y * tmpvar_50.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_45 = (fMoveAmount_45 * fAdjust_46);
    vPos_44.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * fMoveAmount_45));
    vPos_44 = (normalize(vPos_44) * fLength_47);
    FinalPosition_14 = vPos_44;
  };
  tmpvar_11.xyz = FinalPosition_14;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_52;
  v_52.x = _World2Object[0].x;
  v_52.y = _World2Object[1].x;
  v_52.z = _World2Object[2].x;
  v_52.w = _World2Object[3].x;
  highp vec4 v_53;
  v_53.x = _World2Object[0].y;
  v_53.y = _World2Object[1].y;
  v_53.z = _World2Object[2].y;
  v_53.w = _World2Object[3].y;
  highp vec4 v_54;
  v_54.x = _World2Object[0].z;
  v_54.y = _World2Object[1].z;
  v_54.z = _World2Object[2].z;
  v_54.w = _World2Object[3].z;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(((
    (v_52.xyz * _glesNormal.x)
   + 
    (v_53.xyz * _glesNormal.y)
  ) + (v_54.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_55;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_56;
  tmpvar_56.w = 1.0;
  tmpvar_56.xyz = worldNormal_3;
  mediump vec4 normal_57;
  normal_57 = tmpvar_56;
  mediump vec3 x2_58;
  mediump vec4 tmpvar_59;
  tmpvar_59 = (normal_57.xyzz * normal_57.yzzx);
  x2_58.x = dot (unity_SHBr, tmpvar_59);
  x2_58.y = dot (unity_SHBg, tmpvar_59);
  x2_58.z = dot (unity_SHBb, tmpvar_59);
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = (x2_58 + (unity_SHC.xyz * (
    (normal_57.x * normal_57.x)
   - 
    (normal_57.y * normal_57.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  mediump vec3 tmpvar_13;
  tmpvar_13 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_13.x, max (tmpvar_13.y, tmpvar_13.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_13 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_14;
  normalWorld_14 = tmpvar_4;
  mediump vec3 tmpvar_15;
  mediump vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = normalWorld_14;
  mediump vec3 x1_17;
  x1_17.x = dot (unity_SHAr, tmpvar_16);
  x1_17.y = dot (unity_SHAg, tmpvar_16);
  x1_17.z = dot (unity_SHAb, tmpvar_16);
  tmpvar_15 = (xlv_TEXCOORD4 + x1_17);
  lowp vec4 c_18;
  lowp vec4 c_19;
  lowp float diff_20;
  mediump float tmpvar_21;
  tmpvar_21 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_20 = tmpvar_21;
  c_19.xyz = ((tmpvar_8 * tmpvar_1) * diff_20);
  c_19.w = tmpvar_9;
  c_18.w = c_19.w;
  c_18.xyz = (c_19.xyz + (tmpvar_8 * tmpvar_15));
  c_3.xyz = c_18.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec3 t3;
highp vec3 t4;
highp vec3 t5;
highp vec4 t6;
mediump vec3 t16_7;
highp vec2 t8;
bool tb8;
highp vec2 t16;
highp vec2 t20;
highp vec2 t22;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
highp float t29;
mediump float t16_31;
void main()
{
    //Instruction 14486
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 14487
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 14488
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 14489
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 14490
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 14491
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 14492
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 14493
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 14494
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 14495
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 14496
    //LT
    tb8 = 0.0<t16_2.x;
    //Instruction 14497
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 14498
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 14499
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 14500
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 14501
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 14502
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 14503
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 14504
    //ADD
    t3.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 14505
    //MAD
    t3.xyz = unity_LODFade.xxx * t3.xyz + in_POSITION0.xyz;
    //Instruction 14506
    //GE
    tb25 = t16_2.x>=3.000000;
    //Instruction 14507
    //IF
    if(tb25){
        //Instruction 14508
        //EQ
        tb25 = t16_2.x==5.000000;
        //Instruction 14509
        //IF
        if(tb25){
            //Instruction 14510
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 14511
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 14512
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 14513
            //DP3
            t25 = dot(t4.xyz, t4.xyz);
            //Instruction 14514
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 14515
            //MUL
            t4.xyz = vec3(t25) * t4.xyz;
            //Instruction 14516
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 14517
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 14518
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 14519
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 14520
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 14521
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 14522
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 14523
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 14524
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 14525
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 14526
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 14527
            //FRC
            t2 = fract(t2);
            //Instruction 14528
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 14529
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 14530
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 14531
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 14532
            //ADD
            t2 = t2 + t2;
            //Instruction 14533
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 14534
            //LT
            tb27 = t6.w<0.0;
            //Instruction 14535
            //MOV
            t6.y = (-t6.w);
            //Instruction 14536
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 14537
            //MOVC
            t6.xy = (bool(tb27)) ? t6.xy : t6.zw;
            //Instruction 14538
            //MAD
            t27 = (-t2.y) * t2.z + t6.x;
            //Instruction 14539
            //MAD
            t27 = t6.y * t27 + t6.w;
            //Instruction 14540
            //ADD
            t28 = (-t27) + t6.x;
            //Instruction 14541
            //MAD
            t27 = t6.y * t28 + t27;
            //Instruction 14542
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 14543
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 14544
            //ADD
            t29 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 14545
            //MUL
            t29 = t2.x * t29;
            //Instruction 14546
            //MAD
            t27 = t27 * t28 + t29;
            //Instruction 14547
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 14548
            //MUL
            t27 = t27 * t28;
            //Instruction 14549
            //MUL
            t5.xyz = vec3(t27) * t5.xyz;
            //Instruction 14550
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 14551
            //MAD
            t6.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 14552
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 14553
            //MAD
            t6.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 14554
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 14555
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 14556
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 14557
            //MUL
            t22.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 14558
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 14559
            //MAD
            t6.xy = t22.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 14560
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 14561
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 14562
            //MUL
            t25 = t6.x * t6.y;
            //Instruction 14563
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 14564
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 14565
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 14566
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 14567
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 14568
            //MUL
            t4.xyz = vec3(t25) * t4.xyz;
            //Instruction 14569
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 14570
        //ELSE
        } else {
            //Instruction 14571
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 14572
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 14573
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 14574
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 14575
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 14576
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 14577
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 14578
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 14579
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 14580
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 14581
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 14582
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 14583
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 14584
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 14585
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 14586
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 14587
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 14588
            //LT
            tb0 = t2.w<0.0;
            //Instruction 14589
            //MOV
            t2.y = (-t2.w);
            //Instruction 14590
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 14591
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 14592
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 14593
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 14594
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 14595
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 14596
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 14597
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 14598
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 14599
            //MUL
            t27 = t27 * t5.x;
            //Instruction 14600
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 14601
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 14602
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 14603
        //ENDIF
        }
        //Instruction 14604
    //ENDIF
    }
    //Instruction 14605
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 14606
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 14607
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 14608
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 14609
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 14610
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 14611
    //NE
    tb27 = t25!=0.0;
    //Instruction 14612
    //LOG
    t4.x = log2(t25);
    //Instruction 14613
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 14614
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 14615
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 14616
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 14617
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 14618
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 14619
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 14620
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 14621
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 14622
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 14623
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 14624
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 14625
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 14626
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 14627
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 14628
    //MUL
    t25 = t25 * t27;
    //Instruction 14629
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 14630
    //MOV
    t4.y = t3.y;
    //Instruction 14631
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 14632
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 14633
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 14634
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 14635
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 14636
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 14637
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 14638
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 14639
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 14640
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 14641
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 14642
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 14643
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 14644
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 14645
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 14646
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 14647
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 14648
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 14649
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 14650
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 14651
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 14652
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 14653
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 14654
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 14655
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 14656
    //DP3
    t24 = dot(t0.xyz, t0.xyz);
    //Instruction 14657
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 14658
    //MUL
    t0.xyz = vec3(t24) * t0.xyz;
    //Instruction 14659
    //MUL
    t16_2 = t0.yzzx * t0.xyzz;
    //Instruction 14660
    //DP4
    t16_7.x = dot(unity_SHBr, t16_2);
    //Instruction 14661
    //DP4
    t16_7.y = dot(unity_SHBg, t16_2);
    //Instruction 14662
    //DP4
    t16_7.z = dot(unity_SHBb, t16_2);
    //Instruction 14663
    //MUL
    t16_31 = t0.y * t0.y;
    //Instruction 14664
    //MAD
    t16_31 = t0.x * t0.x + (-t16_31);
    //Instruction 14665
    //MAD
    vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(t16_31) + t16_7.xyz;
    //Instruction 14666
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 14667
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 14668
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 14669
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 14670
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
mediump vec3 t16_1;
mediump float t16_2;
lowp vec3 t10_2;
mediump float t16_9;
mediump float t16_10;
void main()
{
    //Instruction 14461
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 14462
    //MOV
    t16_0.w = 1.0;
    //Instruction 14463
    //DP4
    t16_1.x = dot(unity_SHAr, t16_0);
    //Instruction 14464
    //DP4
    t16_1.y = dot(unity_SHAg, t16_0);
    //Instruction 14465
    //DP4
    t16_1.z = dot(unity_SHAb, t16_0);
    //Instruction 14466
    //ADD
    t16_0.xyz = t16_1.xyz + vs_TEXCOORD4.xyz;
    //Instruction 14467
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 14468
    //ADD
    t16_1.xyz = (-t10_2.xyz) + _HueVariation.xyz;
    //Instruction 14469
    //MAD
    t16_1.xyz = vs_TEXCOORD3.zzz * t16_1.xyz + t10_2.xyz;
    //Instruction 14470
    //MAX
    t16_9 = max(t16_1.z, t16_1.y);
    //Instruction 14471
    //MAX
    t16_9 = max(t16_9, t16_1.x);
    //Instruction 14472
    //MAX
    t16_10 = max(t10_2.z, t10_2.y);
    //Instruction 14473
    //MAX
    t16_10 = max(t16_10, t10_2.x);
    //Instruction 14474
    //DIV
    t16_9 = t16_10 / t16_9;
    //Instruction 14475
    //MAD
    t16_2 = t16_9 * 0.500000 + 0.500000;
    //Instruction 14476
    //MUL
    t16_1.xyz = t16_1.xyz * vec3(t16_2);
    t16_1.xyz = clamp(t16_1.xyz, 0.0, 1.0);
    //Instruction 14477
    //MUL
    t16_1.xyz = t16_1.xyz * vs_TEXCOORD2.xyz;
    //Instruction 14478
    //MUL
    t16_0.xyz = t16_0.xyz * t16_1.xyz;
    //Instruction 14479
    //MUL
    t16_1.xyz = t16_1.xyz * _LightColor0.xyz;
    //Instruction 14480
    //DP3
    t16_9 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 14481
    //MAX
    t16_9 = max(t16_9, 0.0);
    //Instruction 14482
    //MAD
    t16_0.xyz = t16_1.xyz * vec3(t16_9) + t16_0.xyz;
    //Instruction 14483
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 14484
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 14485
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_12;
  tmpvar_12 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  FinalPosition_15 = tmpvar_1.xyz;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_15 = tmpvar_19;
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_19;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_19;
      highp float fTime_22;
      highp float fAdherenceScale_23;
      highp vec3 vWindVector_24;
      vWindVector_24 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_22 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (fTime_22 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((fTime_22 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_22 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((fTime_22 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_25.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_26 = (fOscillation_26 * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (tmpvar_19 + ((vWindVector_24 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((fTime_22 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_23 = (1.0 - ((tmpvar_33.x * tmpvar_33.y) * (
        (tmpvar_33.x * tmpvar_33.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_23 = (fAdherenceScale_23 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_13 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_23) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp float fTime_36;
      highp vec3 vWindVector_37;
      vWindVector_37 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_36 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_38;
      highp float fOscillation_39;
      fOscillation_39 = 1.0;
      highp float fAmount_40;
      highp float fTarget_41;
      highp vec4 tmpvar_42;
      tmpvar_42.w = 0.0;
      tmpvar_42.x = (fTime_36 + _glesMultiTexCoord0.w);
      tmpvar_42.y = ((fTime_36 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_42.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_36 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_41 = 1.0;
      fAmount_40 = tmpvar_44;
      if ((tmpvar_44 < 0.0)) {
        fTarget_41 = -1.0;
        fAmount_40 = -(tmpvar_44);
      };
      fOscillation_39 = (((
        mix (mix (tmpvar_44, fTarget_41, fAmount_40), fTarget_41, fAmount_40)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_35 = (vPos_20 + ((vWindVector_37 * fOscillation_39) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_15 = vPos_20;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_45;
    vPos_45 = FinalPosition_15;
    highp float fMoveAmount_46;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    fMoveAmount_46 = ((_ST_WindGlobal.y * (tmpvar_51.x + 
      (tmpvar_51.y * tmpvar_51.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_46 = (fMoveAmount_46 * fAdjust_47);
    vPos_45.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * fMoveAmount_46));
    vPos_45 = (normalize(vPos_45) * fLength_48);
    FinalPosition_15 = vPos_45;
  };
  tmpvar_12.xyz = FinalPosition_15;
  tmpvar_5 = tmpvar_7;
  highp vec4 v_53;
  v_53.x = _World2Object[0].x;
  v_53.y = _World2Object[1].x;
  v_53.z = _World2Object[2].x;
  v_53.w = _World2Object[3].x;
  highp vec4 v_54;
  v_54.x = _World2Object[0].y;
  v_54.y = _World2Object[1].y;
  v_54.z = _World2Object[2].y;
  v_54.w = _World2Object[3].y;
  highp vec4 v_55;
  v_55.x = _World2Object[0].z;
  v_55.y = _World2Object[1].z;
  v_55.z = _World2Object[2].z;
  v_55.w = _World2Object[3].z;
  highp vec3 tmpvar_56;
  tmpvar_56 = normalize(((
    (v_53.xyz * _glesNormal.x)
   + 
    (v_54.xyz * _glesNormal.y)
  ) + (v_55.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_56;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_57;
  tmpvar_57.w = 1.0;
  tmpvar_57.xyz = worldNormal_3;
  mediump vec4 normal_58;
  normal_58 = tmpvar_57;
  mediump vec3 x2_59;
  mediump vec4 tmpvar_60;
  tmpvar_60 = (normal_58.xyzz * normal_58.yzzx);
  x2_59.x = dot (unity_SHBr, tmpvar_60);
  x2_59.y = dot (unity_SHBg, tmpvar_60);
  x2_59.z = dot (unity_SHBb, tmpvar_60);
  tmpvar_6 = (unity_World2Shadow[0] * (_Object2World * tmpvar_12));
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = (x2_59 + (unity_SHC.xyz * (
    (normal_58.x * normal_58.x)
   - 
    (normal_58.y * normal_58.y)
  )));
  xlv_TEXCOORD5 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_14 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp float tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD5).x > 
    (xlv_TEXCOORD5.z / xlv_TEXCOORD5.w)
  )), _LightShadowData.x);
  tmpvar_15 = tmpvar_16;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_15;
  mediump vec3 normalWorld_17;
  normalWorld_17 = tmpvar_5;
  mediump vec3 tmpvar_18;
  mediump vec3 tmpvar_19;
  mediump vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = normalWorld_17;
  mediump vec3 x1_21;
  x1_21.x = dot (unity_SHAr, tmpvar_20);
  x1_21.y = dot (unity_SHAg, tmpvar_20);
  x1_21.z = dot (unity_SHAb, tmpvar_20);
  tmpvar_19 = (xlv_TEXCOORD4 + x1_21);
  tmpvar_18 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_18;
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_24 = tmpvar_25;
  c_23.xyz = ((tmpvar_9 * tmpvar_18) * diff_24);
  c_23.w = tmpvar_10;
  c_22.w = c_23.w;
  c_22.xyz = (c_23.xyz + (tmpvar_9 * tmpvar_19));
  c_4.xyz = c_22.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_12;
  tmpvar_12 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  FinalPosition_15 = tmpvar_1.xyz;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_15 = tmpvar_19;
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_19;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_19;
      highp float fTime_22;
      highp float fAdherenceScale_23;
      highp vec3 vWindVector_24;
      vWindVector_24 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_22 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (fTime_22 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((fTime_22 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_22 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((fTime_22 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_25.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_26 = (fOscillation_26 * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (tmpvar_19 + ((vWindVector_24 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((fTime_22 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_23 = (1.0 - ((tmpvar_33.x * tmpvar_33.y) * (
        (tmpvar_33.x * tmpvar_33.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_23 = (fAdherenceScale_23 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_13 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_23) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp float fTime_36;
      highp vec3 vWindVector_37;
      vWindVector_37 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_36 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_38;
      highp float fOscillation_39;
      fOscillation_39 = 1.0;
      highp float fAmount_40;
      highp float fTarget_41;
      highp vec4 tmpvar_42;
      tmpvar_42.w = 0.0;
      tmpvar_42.x = (fTime_36 + _glesMultiTexCoord0.w);
      tmpvar_42.y = ((fTime_36 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_42.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_36 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_41 = 1.0;
      fAmount_40 = tmpvar_44;
      if ((tmpvar_44 < 0.0)) {
        fTarget_41 = -1.0;
        fAmount_40 = -(tmpvar_44);
      };
      fOscillation_39 = (((
        mix (mix (tmpvar_44, fTarget_41, fAmount_40), fTarget_41, fAmount_40)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_35 = (vPos_20 + ((vWindVector_37 * fOscillation_39) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_15 = vPos_20;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_45;
    vPos_45 = FinalPosition_15;
    highp float fMoveAmount_46;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    fMoveAmount_46 = ((_ST_WindGlobal.y * (tmpvar_51.x + 
      (tmpvar_51.y * tmpvar_51.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_46 = (fMoveAmount_46 * fAdjust_47);
    vPos_45.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * fMoveAmount_46));
    vPos_45 = (normalize(vPos_45) * fLength_48);
    FinalPosition_15 = vPos_45;
  };
  tmpvar_12.xyz = FinalPosition_15;
  tmpvar_5 = tmpvar_7;
  highp vec3 tmpvar_53;
  tmpvar_53 = (_Object2World * tmpvar_12).xyz;
  highp vec4 v_54;
  v_54.x = _World2Object[0].x;
  v_54.y = _World2Object[1].x;
  v_54.z = _World2Object[2].x;
  v_54.w = _World2Object[3].x;
  highp vec4 v_55;
  v_55.x = _World2Object[0].y;
  v_55.y = _World2Object[1].y;
  v_55.z = _World2Object[2].y;
  v_55.w = _World2Object[3].y;
  highp vec4 v_56;
  v_56.x = _World2Object[0].z;
  v_56.y = _World2Object[1].z;
  v_56.z = _World2Object[2].z;
  v_56.w = _World2Object[3].z;
  highp vec3 tmpvar_57;
  tmpvar_57 = normalize(((
    (v_54.xyz * _glesNormal.x)
   + 
    (v_55.xyz * _glesNormal.y)
  ) + (v_56.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_57;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_58;
  tmpvar_58.w = 1.0;
  tmpvar_58.xyz = worldNormal_3;
  mediump vec4 normal_59;
  normal_59 = tmpvar_58;
  mediump vec3 x2_60;
  mediump vec4 tmpvar_61;
  tmpvar_61 = (normal_59.xyzz * normal_59.yzzx);
  x2_60.x = dot (unity_SHBr, tmpvar_61);
  x2_60.y = dot (unity_SHBg, tmpvar_61);
  x2_60.z = dot (unity_SHBb, tmpvar_61);
  highp vec3 lightColor0_62;
  lightColor0_62 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_63;
  lightColor1_63 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_64;
  lightColor2_64 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_65;
  lightColor3_65 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_66;
  lightAttenSq_66 = unity_4LightAtten0;
  highp vec3 normal_67;
  normal_67 = worldNormal_3;
  highp vec3 col_68;
  highp vec4 ndotl_69;
  highp vec4 lengthSq_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = (unity_4LightPosX0 - tmpvar_53.x);
  highp vec4 tmpvar_72;
  tmpvar_72 = (unity_4LightPosY0 - tmpvar_53.y);
  highp vec4 tmpvar_73;
  tmpvar_73 = (unity_4LightPosZ0 - tmpvar_53.z);
  lengthSq_70 = (tmpvar_71 * tmpvar_71);
  lengthSq_70 = (lengthSq_70 + (tmpvar_72 * tmpvar_72));
  lengthSq_70 = (lengthSq_70 + (tmpvar_73 * tmpvar_73));
  ndotl_69 = (tmpvar_71 * normal_67.x);
  ndotl_69 = (ndotl_69 + (tmpvar_72 * normal_67.y));
  ndotl_69 = (ndotl_69 + (tmpvar_73 * normal_67.z));
  highp vec4 tmpvar_74;
  tmpvar_74 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_69 * inversesqrt(lengthSq_70)));
  ndotl_69 = tmpvar_74;
  highp vec4 tmpvar_75;
  tmpvar_75 = (tmpvar_74 * (1.0/((1.0 + 
    (lengthSq_70 * lightAttenSq_66)
  ))));
  col_68 = (lightColor0_62 * tmpvar_75.x);
  col_68 = (col_68 + (lightColor1_63 * tmpvar_75.y));
  col_68 = (col_68 + (lightColor2_64 * tmpvar_75.z));
  col_68 = (col_68 + (lightColor3_65 * tmpvar_75.w));
  tmpvar_6 = ((x2_60 + (unity_SHC.xyz * 
    ((normal_59.x * normal_59.x) - (normal_59.y * normal_59.y))
  )) + col_68);
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_53;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  mediump vec3 tmpvar_13;
  tmpvar_13 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_13.x, max (tmpvar_13.y, tmpvar_13.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_13 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_14;
  normalWorld_14 = tmpvar_4;
  mediump vec3 tmpvar_15;
  mediump vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = normalWorld_14;
  mediump vec3 x1_17;
  x1_17.x = dot (unity_SHAr, tmpvar_16);
  x1_17.y = dot (unity_SHAg, tmpvar_16);
  x1_17.z = dot (unity_SHAb, tmpvar_16);
  tmpvar_15 = (xlv_TEXCOORD4 + x1_17);
  lowp vec4 c_18;
  lowp vec4 c_19;
  lowp float diff_20;
  mediump float tmpvar_21;
  tmpvar_21 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_20 = tmpvar_21;
  c_19.xyz = ((tmpvar_8 * tmpvar_1) * diff_20);
  c_19.w = tmpvar_9;
  c_18.w = c_19.w;
  c_18.xyz = (c_19.xyz + (tmpvar_8 * tmpvar_15));
  c_3.xyz = c_18.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
mediump vec3 t16_7;
highp vec2 t8;
bool tb8;
highp vec2 t16;
highp vec2 t20;
highp vec2 t22;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
highp float t29;
mediump float t16_31;
void main()
{
    //Instruction 14696
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 14697
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 14698
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 14699
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 14700
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 14701
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 14702
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 14703
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 14704
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 14705
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 14706
    //LT
    tb8 = 0.0<t16_2.x;
    //Instruction 14707
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 14708
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 14709
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 14710
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 14711
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 14712
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 14713
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 14714
    //ADD
    t3.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 14715
    //MAD
    t3.xyz = unity_LODFade.xxx * t3.xyz + in_POSITION0.xyz;
    //Instruction 14716
    //GE
    tb25 = t16_2.x>=3.000000;
    //Instruction 14717
    //IF
    if(tb25){
        //Instruction 14718
        //EQ
        tb25 = t16_2.x==5.000000;
        //Instruction 14719
        //IF
        if(tb25){
            //Instruction 14720
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 14721
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 14722
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 14723
            //DP3
            t25 = dot(t4.xyz, t4.xyz);
            //Instruction 14724
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 14725
            //MUL
            t4.xyz = vec3(t25) * t4.xyz;
            //Instruction 14726
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 14727
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 14728
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 14729
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 14730
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 14731
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 14732
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 14733
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 14734
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 14735
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 14736
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 14737
            //FRC
            t2 = fract(t2);
            //Instruction 14738
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 14739
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 14740
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 14741
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 14742
            //ADD
            t2 = t2 + t2;
            //Instruction 14743
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 14744
            //LT
            tb27 = t6.w<0.0;
            //Instruction 14745
            //MOV
            t6.y = (-t6.w);
            //Instruction 14746
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 14747
            //MOVC
            t6.xy = (bool(tb27)) ? t6.xy : t6.zw;
            //Instruction 14748
            //MAD
            t27 = (-t2.y) * t2.z + t6.x;
            //Instruction 14749
            //MAD
            t27 = t6.y * t27 + t6.w;
            //Instruction 14750
            //ADD
            t28 = (-t27) + t6.x;
            //Instruction 14751
            //MAD
            t27 = t6.y * t28 + t27;
            //Instruction 14752
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 14753
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 14754
            //ADD
            t29 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 14755
            //MUL
            t29 = t2.x * t29;
            //Instruction 14756
            //MAD
            t27 = t27 * t28 + t29;
            //Instruction 14757
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 14758
            //MUL
            t27 = t27 * t28;
            //Instruction 14759
            //MUL
            t5.xyz = vec3(t27) * t5.xyz;
            //Instruction 14760
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 14761
            //MAD
            t6.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 14762
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 14763
            //MAD
            t6.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 14764
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 14765
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 14766
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 14767
            //MUL
            t22.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 14768
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 14769
            //MAD
            t6.xy = t22.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 14770
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 14771
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 14772
            //MUL
            t25 = t6.x * t6.y;
            //Instruction 14773
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 14774
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 14775
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 14776
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 14777
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 14778
            //MUL
            t4.xyz = vec3(t25) * t4.xyz;
            //Instruction 14779
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 14780
        //ELSE
        } else {
            //Instruction 14781
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 14782
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 14783
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 14784
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 14785
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 14786
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 14787
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 14788
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 14789
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 14790
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 14791
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 14792
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 14793
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 14794
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 14795
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 14796
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 14797
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 14798
            //LT
            tb0 = t2.w<0.0;
            //Instruction 14799
            //MOV
            t2.y = (-t2.w);
            //Instruction 14800
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 14801
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 14802
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 14803
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 14804
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 14805
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 14806
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 14807
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 14808
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 14809
            //MUL
            t27 = t27 * t5.x;
            //Instruction 14810
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 14811
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 14812
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 14813
        //ENDIF
        }
        //Instruction 14814
    //ENDIF
    }
    //Instruction 14815
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 14816
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 14817
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 14818
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 14819
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 14820
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 14821
    //NE
    tb27 = t25!=0.0;
    //Instruction 14822
    //LOG
    t4.x = log2(t25);
    //Instruction 14823
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 14824
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 14825
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 14826
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 14827
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 14828
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 14829
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 14830
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 14831
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 14832
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 14833
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 14834
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 14835
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 14836
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 14837
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 14838
    //MUL
    t25 = t25 * t27;
    //Instruction 14839
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 14840
    //MOV
    t4.y = t3.y;
    //Instruction 14841
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 14842
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 14843
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 14844
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 14845
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 14846
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 14847
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 14848
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 14849
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 14850
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 14851
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 14852
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 14853
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 14854
    //MOV
    t3.x = _World2Object[0].x;
    //Instruction 14855
    //MOV
    t3.y = _World2Object[1].x;
    //Instruction 14856
    //MOV
    t3.z = _World2Object[2].x;
    //Instruction 14857
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 14858
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 14859
    //MOV
    t4.z = _World2Object[2].y;
    //Instruction 14860
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 14861
    //MAD
    t3.xyz = t3.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 14862
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 14863
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 14864
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 14865
    //MAD
    t3.xyz = t4.xyz * in_NORMAL0.zzz + t3.xyz;
    //Instruction 14866
    //DP3
    t24 = dot(t3.xyz, t3.xyz);
    //Instruction 14867
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 14868
    //MUL
    t3.xyz = vec3(t24) * t3.xyz;
    //Instruction 14869
    //MUL
    t16_2 = t3.yzzx * t3.xyzz;
    //Instruction 14870
    //DP4
    t16_7.x = dot(unity_SHBr, t16_2);
    //Instruction 14871
    //DP4
    t16_7.y = dot(unity_SHBg, t16_2);
    //Instruction 14872
    //DP4
    t16_7.z = dot(unity_SHBb, t16_2);
    //Instruction 14873
    //MUL
    t16_31 = t3.y * t3.y;
    //Instruction 14874
    //MAD
    t16_31 = t3.x * t3.x + (-t16_31);
    //Instruction 14875
    //MAD
    t16_7.xyz = unity_SHC.xyz * vec3(t16_31) + t16_7.xyz;
    //Instruction 14876
    //ADD
    t2 = (-t0.xxxx) + unity_4LightPosX0;
    //Instruction 14877
    //ADD
    t4 = (-t0.yyyy) + unity_4LightPosY0;
    //Instruction 14878
    //ADD
    t5 = (-t0.zzzz) + unity_4LightPosZ0;
    //Instruction 14879
    //MUL
    t6 = t4 * t4;
    //Instruction 14880
    //MAD
    t6 = t2 * t2 + t6;
    //Instruction 14881
    //MAD
    t6 = t5 * t5 + t6;
    //Instruction 14882
    //MUL
    t4 = t3.yyyy * t4;
    //Instruction 14883
    //MAD
    t2 = t2 * t3.xxxx + t4;
    //Instruction 14884
    //MAD
    t2 = t5 * t3.zzzz + t2;
    //Instruction 14885
    //RSQ
    t4 = inversesqrt(t6);
    //Instruction 14886
    //MUL
    t2 = t2 * t4;
    //Instruction 14887
    //MAX
    t2 = max(t2, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 14888
    //MAD
    t4 = t6 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 14889
    //DIV
    t4 = vec4(1.0, 1.0, 1.0, 1.0) / t4;
    //Instruction 14890
    //MUL
    t2 = t2 * t4;
    //Instruction 14891
    //MUL
    t4.xyz = t2.yyy * unity_LightColor[1].xyz;
    //Instruction 14892
    //MAD
    t4.xyz = unity_LightColor[0].xyz * t2.xxx + t4.xyz;
    //Instruction 14893
    //MAD
    t4.xyz = unity_LightColor[2].xyz * t2.zzz + t4.xyz;
    //Instruction 14894
    //MAD
    t4.xyz = unity_LightColor[3].xyz * t2.www + t4.xyz;
    //Instruction 14895
    //ADD
    t4.xyz = t4.xyz + t16_7.xyz;
    //Instruction 14896
    //MOV
    vs_TEXCOORD0.xyz = t3.xyz;
    //Instruction 14897
    //MOV
    vs_TEXCOORD1.xyz = t0.xyz;
    //Instruction 14898
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 14899
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 14900
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 14901
    //MOV
    vs_TEXCOORD4.xyz = t4.xyz;
    //Instruction 14902
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
mediump vec3 t16_1;
mediump float t16_2;
lowp vec3 t10_2;
mediump float t16_9;
mediump float t16_10;
void main()
{
    //Instruction 14671
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 14672
    //MOV
    t16_0.w = 1.0;
    //Instruction 14673
    //DP4
    t16_1.x = dot(unity_SHAr, t16_0);
    //Instruction 14674
    //DP4
    t16_1.y = dot(unity_SHAg, t16_0);
    //Instruction 14675
    //DP4
    t16_1.z = dot(unity_SHAb, t16_0);
    //Instruction 14676
    //ADD
    t16_0.xyz = t16_1.xyz + vs_TEXCOORD4.xyz;
    //Instruction 14677
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 14678
    //ADD
    t16_1.xyz = (-t10_2.xyz) + _HueVariation.xyz;
    //Instruction 14679
    //MAD
    t16_1.xyz = vs_TEXCOORD3.zzz * t16_1.xyz + t10_2.xyz;
    //Instruction 14680
    //MAX
    t16_9 = max(t16_1.z, t16_1.y);
    //Instruction 14681
    //MAX
    t16_9 = max(t16_9, t16_1.x);
    //Instruction 14682
    //MAX
    t16_10 = max(t10_2.z, t10_2.y);
    //Instruction 14683
    //MAX
    t16_10 = max(t16_10, t10_2.x);
    //Instruction 14684
    //DIV
    t16_9 = t16_10 / t16_9;
    //Instruction 14685
    //MAD
    t16_2 = t16_9 * 0.500000 + 0.500000;
    //Instruction 14686
    //MUL
    t16_1.xyz = t16_1.xyz * vec3(t16_2);
    t16_1.xyz = clamp(t16_1.xyz, 0.0, 1.0);
    //Instruction 14687
    //MUL
    t16_1.xyz = t16_1.xyz * vs_TEXCOORD2.xyz;
    //Instruction 14688
    //MUL
    t16_0.xyz = t16_0.xyz * t16_1.xyz;
    //Instruction 14689
    //MUL
    t16_1.xyz = t16_1.xyz * _LightColor0.xyz;
    //Instruction 14690
    //DP3
    t16_9 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 14691
    //MAX
    t16_9 = max(t16_9, 0.0);
    //Instruction 14692
    //MAD
    t16_0.xyz = t16_1.xyz * vec3(t16_9) + t16_0.xyz;
    //Instruction 14693
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 14694
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 14695
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_2.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  tmpvar_13 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  FinalPosition_16 = tmpvar_1.xyz;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_20;
  tmpvar_20 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_16 = tmpvar_20;
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_20;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_22;
      vPos_22 = tmpvar_20;
      highp float fTime_23;
      highp float fAdherenceScale_24;
      highp vec3 vWindVector_25;
      vWindVector_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_23 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_26;
      highp float fOscillation_27;
      fOscillation_27 = 1.0;
      highp float fAmount_28;
      highp float fTarget_29;
      highp vec4 tmpvar_30;
      tmpvar_30.x = (fTime_23 + _glesMultiTexCoord0.w);
      tmpvar_30.y = ((fTime_23 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_30.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_23 + _glesMultiTexCoord0.w));
      tmpvar_30.w = ((fTime_23 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      vOscillations_26 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      highp float tmpvar_32;
      tmpvar_32 = (vOscillations_26.y * vOscillations_26.z);
      fTarget_29 = 1.0;
      fAmount_28 = tmpvar_32;
      if ((tmpvar_32 < 0.0)) {
        fTarget_29 = -1.0;
        fAmount_28 = -(tmpvar_32);
      };
      fOscillation_27 = (((
        mix (mix (tmpvar_32, fTarget_29, fAmount_28), fTarget_29, fAmount_28)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_26.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_27 = (fOscillation_27 * (1.0 + (vOscillations_26.w * _ST_WindBranchWhip.x)));
      vPos_22 = (tmpvar_20 + ((vWindVector_25 * fOscillation_27) * _ST_WindBranch.y));
      highp vec4 tmpvar_33;
      tmpvar_33.zw = vec2(0.0, 0.0);
      tmpvar_33.x = ((fTime_23 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_33.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_34;
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      tmpvar_34 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((tmpvar_34.x * tmpvar_34.y) * (
        (tmpvar_34.x * tmpvar_34.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_26.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_22 = (vPos_22 + ((
        ((vRotatedBranchAnchor_14 - vPos_22) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_21 = vPos_22;
    } else {
      highp vec3 vPos_36;
      vPos_36 = vPos_21;
      highp float fTime_37;
      highp vec3 vWindVector_38;
      vWindVector_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_37 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_39;
      highp float fOscillation_40;
      fOscillation_40 = 1.0;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (fTime_37 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((fTime_37 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_37 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_39 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_39.y * vOscillations_39.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      fOscillation_40 = (((
        mix (mix (tmpvar_45, fTarget_42, fAmount_41), fTarget_42, fAmount_41)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_39.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_36 = (vPos_21 + ((vWindVector_38 * fOscillation_40) * _ST_WindBranch.y));
      vPos_21 = vPos_36;
    };
    FinalPosition_16 = vPos_21;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_16;
    highp float fMoveAmount_47;
    highp float fAdjust_48;
    highp float fLength_49;
    fLength_49 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_50;
    tmpvar_50 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_48 = tmpvar_50;
    if ((tmpvar_50 != 0.0)) {
      fAdjust_48 = pow (tmpvar_50, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_51;
    tmpvar_51.zw = vec2(0.0, 0.0);
    tmpvar_51.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_51.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_52;
    highp vec4 tmpvar_53;
    tmpvar_53 = abs(((
      fract((tmpvar_51 + 0.5))
     * 2.0) - 1.0));
    tmpvar_52 = (((
      (tmpvar_53 * tmpvar_53)
     * 
      (3.0 - (2.0 * tmpvar_53))
    ) - 0.5) * 2.0);
    fMoveAmount_47 = ((_ST_WindGlobal.y * (tmpvar_52.x + 
      (tmpvar_52.y * tmpvar_52.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_47 = (fMoveAmount_47 * fAdjust_48);
    vPos_46.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * fMoveAmount_47));
    vPos_46 = (normalize(vPos_46) * fLength_49);
    FinalPosition_16 = vPos_46;
  };
  tmpvar_13.xyz = FinalPosition_16;
  tmpvar_5 = tmpvar_8;
  highp vec3 tmpvar_54;
  tmpvar_54 = (_Object2World * tmpvar_13).xyz;
  highp vec4 v_55;
  v_55.x = _World2Object[0].x;
  v_55.y = _World2Object[1].x;
  v_55.z = _World2Object[2].x;
  v_55.w = _World2Object[3].x;
  highp vec4 v_56;
  v_56.x = _World2Object[0].y;
  v_56.y = _World2Object[1].y;
  v_56.z = _World2Object[2].y;
  v_56.w = _World2Object[3].y;
  highp vec4 v_57;
  v_57.x = _World2Object[0].z;
  v_57.y = _World2Object[1].z;
  v_57.z = _World2Object[2].z;
  v_57.w = _World2Object[3].z;
  highp vec3 tmpvar_58;
  tmpvar_58 = normalize(((
    (v_55.xyz * _glesNormal.x)
   + 
    (v_56.xyz * _glesNormal.y)
  ) + (v_57.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_58;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_59;
  tmpvar_59.w = 1.0;
  tmpvar_59.xyz = worldNormal_3;
  mediump vec4 normal_60;
  normal_60 = tmpvar_59;
  mediump vec3 x2_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = (normal_60.xyzz * normal_60.yzzx);
  x2_61.x = dot (unity_SHBr, tmpvar_62);
  x2_61.y = dot (unity_SHBg, tmpvar_62);
  x2_61.z = dot (unity_SHBb, tmpvar_62);
  highp vec3 lightColor0_63;
  lightColor0_63 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_64;
  lightColor1_64 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_65;
  lightColor2_65 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_66;
  lightColor3_66 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_67;
  lightAttenSq_67 = unity_4LightAtten0;
  highp vec3 normal_68;
  normal_68 = worldNormal_3;
  highp vec3 col_69;
  highp vec4 ndotl_70;
  highp vec4 lengthSq_71;
  highp vec4 tmpvar_72;
  tmpvar_72 = (unity_4LightPosX0 - tmpvar_54.x);
  highp vec4 tmpvar_73;
  tmpvar_73 = (unity_4LightPosY0 - tmpvar_54.y);
  highp vec4 tmpvar_74;
  tmpvar_74 = (unity_4LightPosZ0 - tmpvar_54.z);
  lengthSq_71 = (tmpvar_72 * tmpvar_72);
  lengthSq_71 = (lengthSq_71 + (tmpvar_73 * tmpvar_73));
  lengthSq_71 = (lengthSq_71 + (tmpvar_74 * tmpvar_74));
  ndotl_70 = (tmpvar_72 * normal_68.x);
  ndotl_70 = (ndotl_70 + (tmpvar_73 * normal_68.y));
  ndotl_70 = (ndotl_70 + (tmpvar_74 * normal_68.z));
  highp vec4 tmpvar_75;
  tmpvar_75 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_70 * inversesqrt(lengthSq_71)));
  ndotl_70 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = (tmpvar_75 * (1.0/((1.0 + 
    (lengthSq_71 * lightAttenSq_67)
  ))));
  col_69 = (lightColor0_63 * tmpvar_76.x);
  col_69 = (col_69 + (lightColor1_64 * tmpvar_76.y));
  col_69 = (col_69 + (lightColor2_65 * tmpvar_76.z));
  col_69 = (col_69 + (lightColor3_66 * tmpvar_76.w));
  tmpvar_6 = ((x2_61 + (unity_SHC.xyz * 
    ((normal_60.x * normal_60.x) - (normal_60.y * normal_60.y))
  )) + col_69);
  tmpvar_7 = (unity_World2Shadow[0] * (_Object2World * tmpvar_13));
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_54;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_14 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp float tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD5).x > 
    (xlv_TEXCOORD5.z / xlv_TEXCOORD5.w)
  )), _LightShadowData.x);
  tmpvar_15 = tmpvar_16;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_15;
  mediump vec3 normalWorld_17;
  normalWorld_17 = tmpvar_5;
  mediump vec3 tmpvar_18;
  mediump vec3 tmpvar_19;
  mediump vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = normalWorld_17;
  mediump vec3 x1_21;
  x1_21.x = dot (unity_SHAr, tmpvar_20);
  x1_21.y = dot (unity_SHAg, tmpvar_20);
  x1_21.z = dot (unity_SHAb, tmpvar_20);
  tmpvar_19 = (xlv_TEXCOORD4 + x1_21);
  tmpvar_18 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_18;
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_24 = tmpvar_25;
  c_23.xyz = ((tmpvar_9 * tmpvar_18) * diff_24);
  c_23.w = tmpvar_10;
  c_22.w = c_23.w;
  c_22.xyz = (c_23.xyz + (tmpvar_9 * tmpvar_19));
  c_4.xyz = c_22.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_12;
  tmpvar_12 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  FinalPosition_15 = tmpvar_1.xyz;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_15 = tmpvar_19;
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_19;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_19;
      highp float fTime_22;
      highp float fAdherenceScale_23;
      highp vec3 vWindVector_24;
      vWindVector_24 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_22 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (fTime_22 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((fTime_22 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_22 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((fTime_22 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_25.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_26 = (fOscillation_26 * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (tmpvar_19 + ((vWindVector_24 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((fTime_22 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_23 = (1.0 - ((tmpvar_33.x * tmpvar_33.y) * (
        (tmpvar_33.x * tmpvar_33.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_23 = (fAdherenceScale_23 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_13 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_23) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp float fTime_36;
      highp vec3 vWindVector_37;
      vWindVector_37 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_36 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_38;
      highp float fOscillation_39;
      fOscillation_39 = 1.0;
      highp float fAmount_40;
      highp float fTarget_41;
      highp vec4 tmpvar_42;
      tmpvar_42.w = 0.0;
      tmpvar_42.x = (fTime_36 + _glesMultiTexCoord0.w);
      tmpvar_42.y = ((fTime_36 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_42.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_36 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_41 = 1.0;
      fAmount_40 = tmpvar_44;
      if ((tmpvar_44 < 0.0)) {
        fTarget_41 = -1.0;
        fAmount_40 = -(tmpvar_44);
      };
      fOscillation_39 = (((
        mix (mix (tmpvar_44, fTarget_41, fAmount_40), fTarget_41, fAmount_40)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_35 = (vPos_20 + ((vWindVector_37 * fOscillation_39) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_15 = vPos_20;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_45;
    vPos_45 = FinalPosition_15;
    highp float fMoveAmount_46;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    fMoveAmount_46 = ((_ST_WindGlobal.y * (tmpvar_51.x + 
      (tmpvar_51.y * tmpvar_51.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_46 = (fMoveAmount_46 * fAdjust_47);
    vPos_45.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * fMoveAmount_46));
    vPos_45 = (normalize(vPos_45) * fLength_48);
    FinalPosition_15 = vPos_45;
  };
  tmpvar_12.xyz = FinalPosition_15;
  tmpvar_5 = tmpvar_7;
  highp vec4 v_53;
  v_53.x = _World2Object[0].x;
  v_53.y = _World2Object[1].x;
  v_53.z = _World2Object[2].x;
  v_53.w = _World2Object[3].x;
  highp vec4 v_54;
  v_54.x = _World2Object[0].y;
  v_54.y = _World2Object[1].y;
  v_54.z = _World2Object[2].y;
  v_54.w = _World2Object[3].y;
  highp vec4 v_55;
  v_55.x = _World2Object[0].z;
  v_55.y = _World2Object[1].z;
  v_55.z = _World2Object[2].z;
  v_55.w = _World2Object[3].z;
  highp vec3 tmpvar_56;
  tmpvar_56 = normalize(((
    (v_53.xyz * _glesNormal.x)
   + 
    (v_54.xyz * _glesNormal.y)
  ) + (v_55.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_56;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_57;
  tmpvar_57.w = 1.0;
  tmpvar_57.xyz = worldNormal_3;
  mediump vec4 normal_58;
  normal_58 = tmpvar_57;
  mediump vec3 x2_59;
  mediump vec4 tmpvar_60;
  tmpvar_60 = (normal_58.xyzz * normal_58.yzzx);
  x2_59.x = dot (unity_SHBr, tmpvar_60);
  x2_59.y = dot (unity_SHBg, tmpvar_60);
  x2_59.z = dot (unity_SHBb, tmpvar_60);
  tmpvar_6 = (unity_World2Shadow[0] * (_Object2World * tmpvar_12));
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = (x2_59 + (unity_SHC.xyz * (
    (normal_58.x * normal_58.x)
   - 
    (normal_58.y * normal_58.y)
  )));
  xlv_TEXCOORD5 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_14 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp float shadow_15;
  shadow_15 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD5.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_15;
  mediump vec3 normalWorld_16;
  normalWorld_16 = tmpvar_5;
  mediump vec3 tmpvar_17;
  mediump vec3 tmpvar_18;
  mediump vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = normalWorld_16;
  mediump vec3 x1_20;
  x1_20.x = dot (unity_SHAr, tmpvar_19);
  x1_20.y = dot (unity_SHAg, tmpvar_19);
  x1_20.z = dot (unity_SHAb, tmpvar_19);
  tmpvar_18 = (xlv_TEXCOORD4 + x1_20);
  tmpvar_17 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_17;
  lowp vec4 c_21;
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_23 = tmpvar_24;
  c_22.xyz = ((tmpvar_9 * tmpvar_17) * diff_23);
  c_22.w = tmpvar_10;
  c_21.w = c_22.w;
  c_21.xyz = (c_22.xyz + (tmpvar_9 * tmpvar_18));
  c_4.xyz = c_21.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec3 t3;
highp vec3 t4;
highp vec3 t5;
highp vec4 t6;
mediump vec3 t16_7;
highp vec2 t8;
bool tb8;
highp vec2 t16;
highp vec2 t20;
highp vec2 t22;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
highp float t29;
mediump float t16_31;
void main()
{
    //Instruction 14932
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 14933
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 14934
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 14935
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 14936
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 14937
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 14938
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 14939
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 14940
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 14941
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 14942
    //LT
    tb8 = 0.0<t16_2.x;
    //Instruction 14943
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 14944
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 14945
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 14946
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 14947
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 14948
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 14949
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 14950
    //ADD
    t3.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 14951
    //MAD
    t3.xyz = unity_LODFade.xxx * t3.xyz + in_POSITION0.xyz;
    //Instruction 14952
    //GE
    tb25 = t16_2.x>=3.000000;
    //Instruction 14953
    //IF
    if(tb25){
        //Instruction 14954
        //EQ
        tb25 = t16_2.x==5.000000;
        //Instruction 14955
        //IF
        if(tb25){
            //Instruction 14956
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 14957
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 14958
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 14959
            //DP3
            t25 = dot(t4.xyz, t4.xyz);
            //Instruction 14960
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 14961
            //MUL
            t4.xyz = vec3(t25) * t4.xyz;
            //Instruction 14962
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 14963
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 14964
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 14965
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 14966
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 14967
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 14968
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 14969
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 14970
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 14971
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 14972
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 14973
            //FRC
            t2 = fract(t2);
            //Instruction 14974
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 14975
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 14976
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 14977
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 14978
            //ADD
            t2 = t2 + t2;
            //Instruction 14979
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 14980
            //LT
            tb27 = t6.w<0.0;
            //Instruction 14981
            //MOV
            t6.y = (-t6.w);
            //Instruction 14982
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 14983
            //MOVC
            t6.xy = (bool(tb27)) ? t6.xy : t6.zw;
            //Instruction 14984
            //MAD
            t27 = (-t2.y) * t2.z + t6.x;
            //Instruction 14985
            //MAD
            t27 = t6.y * t27 + t6.w;
            //Instruction 14986
            //ADD
            t28 = (-t27) + t6.x;
            //Instruction 14987
            //MAD
            t27 = t6.y * t28 + t27;
            //Instruction 14988
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 14989
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 14990
            //ADD
            t29 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 14991
            //MUL
            t29 = t2.x * t29;
            //Instruction 14992
            //MAD
            t27 = t27 * t28 + t29;
            //Instruction 14993
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 14994
            //MUL
            t27 = t27 * t28;
            //Instruction 14995
            //MUL
            t5.xyz = vec3(t27) * t5.xyz;
            //Instruction 14996
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 14997
            //MAD
            t6.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 14998
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 14999
            //MAD
            t6.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 15000
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 15001
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 15002
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 15003
            //MUL
            t22.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 15004
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 15005
            //MAD
            t6.xy = t22.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 15006
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 15007
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 15008
            //MUL
            t25 = t6.x * t6.y;
            //Instruction 15009
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 15010
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 15011
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 15012
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 15013
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 15014
            //MUL
            t4.xyz = vec3(t25) * t4.xyz;
            //Instruction 15015
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 15016
        //ELSE
        } else {
            //Instruction 15017
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 15018
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 15019
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 15020
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 15021
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 15022
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 15023
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 15024
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 15025
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 15026
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 15027
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 15028
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 15029
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 15030
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 15031
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 15032
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 15033
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 15034
            //LT
            tb0 = t2.w<0.0;
            //Instruction 15035
            //MOV
            t2.y = (-t2.w);
            //Instruction 15036
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 15037
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 15038
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 15039
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 15040
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 15041
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 15042
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 15043
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 15044
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 15045
            //MUL
            t27 = t27 * t5.x;
            //Instruction 15046
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 15047
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 15048
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 15049
        //ENDIF
        }
        //Instruction 15050
    //ENDIF
    }
    //Instruction 15051
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 15052
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 15053
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 15054
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 15055
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 15056
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 15057
    //NE
    tb27 = t25!=0.0;
    //Instruction 15058
    //LOG
    t4.x = log2(t25);
    //Instruction 15059
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 15060
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 15061
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 15062
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 15063
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 15064
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 15065
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 15066
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 15067
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 15068
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 15069
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 15070
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 15071
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 15072
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 15073
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 15074
    //MUL
    t25 = t25 * t27;
    //Instruction 15075
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 15076
    //MOV
    t4.y = t3.y;
    //Instruction 15077
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 15078
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 15079
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 15080
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 15081
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 15082
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 15083
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 15084
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 15085
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 15086
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 15087
    //MAD
    t3.xyz = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 15088
    //MAD
    t3.xyz = _Object2World[2].xyz * t0.zzz + t3.xyz;
    //Instruction 15089
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xyz;
    //Instruction 15090
    //MOV
    t3.x = _World2Object[0].x;
    //Instruction 15091
    //MOV
    t3.y = _World2Object[1].x;
    //Instruction 15092
    //MOV
    t3.z = _World2Object[2].x;
    //Instruction 15093
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 15094
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 15095
    //MOV
    t4.z = _World2Object[2].y;
    //Instruction 15096
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 15097
    //MAD
    t3.xyz = t3.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 15098
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 15099
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 15100
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 15101
    //MAD
    t3.xyz = t4.xyz * in_NORMAL0.zzz + t3.xyz;
    //Instruction 15102
    //DP3
    t24 = dot(t3.xyz, t3.xyz);
    //Instruction 15103
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 15104
    //MUL
    t3.xyz = vec3(t24) * t3.xyz;
    //Instruction 15105
    //MUL
    t16_2 = t3.yzzx * t3.xyzz;
    //Instruction 15106
    //DP4
    t16_7.x = dot(unity_SHBr, t16_2);
    //Instruction 15107
    //DP4
    t16_7.y = dot(unity_SHBg, t16_2);
    //Instruction 15108
    //DP4
    t16_7.z = dot(unity_SHBb, t16_2);
    //Instruction 15109
    //MUL
    t16_31 = t3.y * t3.y;
    //Instruction 15110
    //MAD
    t16_31 = t3.x * t3.x + (-t16_31);
    //Instruction 15111
    //MAD
    vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(t16_31) + t16_7.xyz;
    //Instruction 15112
    //MUL
    t2 = t0.yyyy * _Object2World[1];
    //Instruction 15113
    //MAD
    t2 = _Object2World[0] * t0.xxxx + t2;
    //Instruction 15114
    //MAD
    t0 = _Object2World[2] * t0.zzzz + t2;
    //Instruction 15115
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 15116
    //MUL
    t2 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 15117
    //MAD
    t2 = unity_World2Shadow[0][0] * t0.xxxx + t2;
    //Instruction 15118
    //MAD
    t2 = unity_World2Shadow[0][2] * t0.zzzz + t2;
    //Instruction 15119
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t2;
    //Instruction 15120
    //MOV
    vs_TEXCOORD0.xyz = t3.xyz;
    //Instruction 15121
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 15122
    //MOV
    vs_TEXCOORD5 = t0;
    //Instruction 15123
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 15124
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 15125
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
mediump vec3 t16_1;
mediump float t16_2;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump float t16_12;
mediump float t16_13;
void main()
{
    //Instruction 14903
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 14904
    //MOV
    t16_0.w = 1.0;
    //Instruction 14905
    //DP4
    t16_1.x = dot(unity_SHAr, t16_0);
    //Instruction 14906
    //DP4
    t16_1.y = dot(unity_SHAg, t16_0);
    //Instruction 14907
    //DP4
    t16_1.z = dot(unity_SHAb, t16_0);
    //Instruction 14908
    //ADD
    t16_0.xyz = t16_1.xyz + vs_TEXCOORD4.xyz;
    //Instruction 14909
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 14910
    //ADD
    t16_1.xyz = (-t10_2.xyz) + _HueVariation.xyz;
    //Instruction 14911
    //MAD
    t16_1.xyz = vs_TEXCOORD3.zzz * t16_1.xyz + t10_2.xyz;
    //Instruction 14912
    //MAX
    t16_12 = max(t16_1.z, t16_1.y);
    //Instruction 14913
    //MAX
    t16_12 = max(t16_12, t16_1.x);
    //Instruction 14914
    //MAX
    t16_13 = max(t10_2.z, t10_2.y);
    //Instruction 14915
    //MAX
    t16_13 = max(t16_13, t10_2.x);
    //Instruction 14916
    //DIV
    t16_12 = t16_13 / t16_12;
    //Instruction 14917
    //MAD
    t16_2 = t16_12 * 0.500000 + 0.500000;
    //Instruction 14918
    //MUL
    t16_1.xyz = t16_1.xyz * vec3(t16_2);
    t16_1.xyz = clamp(t16_1.xyz, 0.0, 1.0);
    //Instruction 14919
    //MUL
    t16_1.xyz = t16_1.xyz * vs_TEXCOORD2.xyz;
    //Instruction 14920
    //MUL
    t16_0.xyz = t16_0.xyz * t16_1.xyz;
    //Instruction 14921
    //SAMPLE_C_LZ
    vec3 txVec37 = vec3(vs_TEXCOORD5.xy,vs_TEXCOORD5.z);
    t16_12 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec37, 0.0);
    //Instruction 14922
    //ADD
    t16_13 = (-_LightShadowData.x) + 1.0;
    //Instruction 14923
    //MAD
    t16_12 = t16_12 * t16_13 + _LightShadowData.x;
    //Instruction 14924
    //MUL
    t16_3.xyz = vec3(t16_12) * _LightColor0.xyz;
    //Instruction 14925
    //MUL
    t16_1.xyz = t16_1.xyz * t16_3.xyz;
    //Instruction 14926
    //DP3
    t16_12 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 14927
    //MAX
    t16_12 = max(t16_12, 0.0);
    //Instruction 14928
    //MAD
    t16_0.xyz = t16_1.xyz * vec3(t16_12) + t16_0.xyz;
    //Instruction 14929
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 14930
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 14931
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_2.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  tmpvar_13 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  FinalPosition_16 = tmpvar_1.xyz;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_20;
  tmpvar_20 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_16 = tmpvar_20;
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_20;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_22;
      vPos_22 = tmpvar_20;
      highp float fTime_23;
      highp float fAdherenceScale_24;
      highp vec3 vWindVector_25;
      vWindVector_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_23 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_26;
      highp float fOscillation_27;
      fOscillation_27 = 1.0;
      highp float fAmount_28;
      highp float fTarget_29;
      highp vec4 tmpvar_30;
      tmpvar_30.x = (fTime_23 + _glesMultiTexCoord0.w);
      tmpvar_30.y = ((fTime_23 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_30.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_23 + _glesMultiTexCoord0.w));
      tmpvar_30.w = ((fTime_23 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      vOscillations_26 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      highp float tmpvar_32;
      tmpvar_32 = (vOscillations_26.y * vOscillations_26.z);
      fTarget_29 = 1.0;
      fAmount_28 = tmpvar_32;
      if ((tmpvar_32 < 0.0)) {
        fTarget_29 = -1.0;
        fAmount_28 = -(tmpvar_32);
      };
      fOscillation_27 = (((
        mix (mix (tmpvar_32, fTarget_29, fAmount_28), fTarget_29, fAmount_28)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_26.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_27 = (fOscillation_27 * (1.0 + (vOscillations_26.w * _ST_WindBranchWhip.x)));
      vPos_22 = (tmpvar_20 + ((vWindVector_25 * fOscillation_27) * _ST_WindBranch.y));
      highp vec4 tmpvar_33;
      tmpvar_33.zw = vec2(0.0, 0.0);
      tmpvar_33.x = ((fTime_23 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_33.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_34;
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      tmpvar_34 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((tmpvar_34.x * tmpvar_34.y) * (
        (tmpvar_34.x * tmpvar_34.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_26.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_22 = (vPos_22 + ((
        ((vRotatedBranchAnchor_14 - vPos_22) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_21 = vPos_22;
    } else {
      highp vec3 vPos_36;
      vPos_36 = vPos_21;
      highp float fTime_37;
      highp vec3 vWindVector_38;
      vWindVector_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_37 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_39;
      highp float fOscillation_40;
      fOscillation_40 = 1.0;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (fTime_37 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((fTime_37 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_37 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_39 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_39.y * vOscillations_39.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      fOscillation_40 = (((
        mix (mix (tmpvar_45, fTarget_42, fAmount_41), fTarget_42, fAmount_41)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_39.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_36 = (vPos_21 + ((vWindVector_38 * fOscillation_40) * _ST_WindBranch.y));
      vPos_21 = vPos_36;
    };
    FinalPosition_16 = vPos_21;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_16;
    highp float fMoveAmount_47;
    highp float fAdjust_48;
    highp float fLength_49;
    fLength_49 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_50;
    tmpvar_50 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_48 = tmpvar_50;
    if ((tmpvar_50 != 0.0)) {
      fAdjust_48 = pow (tmpvar_50, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_51;
    tmpvar_51.zw = vec2(0.0, 0.0);
    tmpvar_51.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_51.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_52;
    highp vec4 tmpvar_53;
    tmpvar_53 = abs(((
      fract((tmpvar_51 + 0.5))
     * 2.0) - 1.0));
    tmpvar_52 = (((
      (tmpvar_53 * tmpvar_53)
     * 
      (3.0 - (2.0 * tmpvar_53))
    ) - 0.5) * 2.0);
    fMoveAmount_47 = ((_ST_WindGlobal.y * (tmpvar_52.x + 
      (tmpvar_52.y * tmpvar_52.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_47 = (fMoveAmount_47 * fAdjust_48);
    vPos_46.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * fMoveAmount_47));
    vPos_46 = (normalize(vPos_46) * fLength_49);
    FinalPosition_16 = vPos_46;
  };
  tmpvar_13.xyz = FinalPosition_16;
  tmpvar_5 = tmpvar_8;
  highp vec3 tmpvar_54;
  tmpvar_54 = (_Object2World * tmpvar_13).xyz;
  highp vec4 v_55;
  v_55.x = _World2Object[0].x;
  v_55.y = _World2Object[1].x;
  v_55.z = _World2Object[2].x;
  v_55.w = _World2Object[3].x;
  highp vec4 v_56;
  v_56.x = _World2Object[0].y;
  v_56.y = _World2Object[1].y;
  v_56.z = _World2Object[2].y;
  v_56.w = _World2Object[3].y;
  highp vec4 v_57;
  v_57.x = _World2Object[0].z;
  v_57.y = _World2Object[1].z;
  v_57.z = _World2Object[2].z;
  v_57.w = _World2Object[3].z;
  highp vec3 tmpvar_58;
  tmpvar_58 = normalize(((
    (v_55.xyz * _glesNormal.x)
   + 
    (v_56.xyz * _glesNormal.y)
  ) + (v_57.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_58;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_59;
  tmpvar_59.w = 1.0;
  tmpvar_59.xyz = worldNormal_3;
  mediump vec4 normal_60;
  normal_60 = tmpvar_59;
  mediump vec3 x2_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = (normal_60.xyzz * normal_60.yzzx);
  x2_61.x = dot (unity_SHBr, tmpvar_62);
  x2_61.y = dot (unity_SHBg, tmpvar_62);
  x2_61.z = dot (unity_SHBb, tmpvar_62);
  highp vec3 lightColor0_63;
  lightColor0_63 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_64;
  lightColor1_64 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_65;
  lightColor2_65 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_66;
  lightColor3_66 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_67;
  lightAttenSq_67 = unity_4LightAtten0;
  highp vec3 normal_68;
  normal_68 = worldNormal_3;
  highp vec3 col_69;
  highp vec4 ndotl_70;
  highp vec4 lengthSq_71;
  highp vec4 tmpvar_72;
  tmpvar_72 = (unity_4LightPosX0 - tmpvar_54.x);
  highp vec4 tmpvar_73;
  tmpvar_73 = (unity_4LightPosY0 - tmpvar_54.y);
  highp vec4 tmpvar_74;
  tmpvar_74 = (unity_4LightPosZ0 - tmpvar_54.z);
  lengthSq_71 = (tmpvar_72 * tmpvar_72);
  lengthSq_71 = (lengthSq_71 + (tmpvar_73 * tmpvar_73));
  lengthSq_71 = (lengthSq_71 + (tmpvar_74 * tmpvar_74));
  ndotl_70 = (tmpvar_72 * normal_68.x);
  ndotl_70 = (ndotl_70 + (tmpvar_73 * normal_68.y));
  ndotl_70 = (ndotl_70 + (tmpvar_74 * normal_68.z));
  highp vec4 tmpvar_75;
  tmpvar_75 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_70 * inversesqrt(lengthSq_71)));
  ndotl_70 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = (tmpvar_75 * (1.0/((1.0 + 
    (lengthSq_71 * lightAttenSq_67)
  ))));
  col_69 = (lightColor0_63 * tmpvar_76.x);
  col_69 = (col_69 + (lightColor1_64 * tmpvar_76.y));
  col_69 = (col_69 + (lightColor2_65 * tmpvar_76.z));
  col_69 = (col_69 + (lightColor3_66 * tmpvar_76.w));
  tmpvar_6 = ((x2_61 + (unity_SHC.xyz * 
    ((normal_60.x * normal_60.x) - (normal_60.y * normal_60.y))
  )) + col_69);
  tmpvar_7 = (unity_World2Shadow[0] * (_Object2World * tmpvar_13));
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_54;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_14 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp float shadow_15;
  shadow_15 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD5.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_15;
  mediump vec3 normalWorld_16;
  normalWorld_16 = tmpvar_5;
  mediump vec3 tmpvar_17;
  mediump vec3 tmpvar_18;
  mediump vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = normalWorld_16;
  mediump vec3 x1_20;
  x1_20.x = dot (unity_SHAr, tmpvar_19);
  x1_20.y = dot (unity_SHAg, tmpvar_19);
  x1_20.z = dot (unity_SHAb, tmpvar_19);
  tmpvar_18 = (xlv_TEXCOORD4 + x1_20);
  tmpvar_17 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_17;
  lowp vec4 c_21;
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_23 = tmpvar_24;
  c_22.xyz = ((tmpvar_9 * tmpvar_17) * diff_23);
  c_22.w = tmpvar_10;
  c_21.w = c_22.w;
  c_21.xyz = (c_22.xyz + (tmpvar_9 * tmpvar_18));
  c_4.xyz = c_21.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec3 t3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
mediump vec3 t16_7;
highp vec4 t8;
highp vec2 t9;
bool tb9;
highp vec2 t18;
highp vec2 t22;
highp vec2 t24;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
highp float t32;
mediump float t16_34;
void main()
{
    //Instruction 14328
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 14329
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 14330
    //ADD
    t9.x = t0.x + _Object2World[3].z;
    //Instruction 14331
    //ADD
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 14332
    //ADD
    t9.y = t18.x + in_NORMAL0.x;
    //Instruction 14333
    //FRC
    t9.xy = fract(t9.xy);
    //Instruction 14334
    //MAD
    t9.x = t9.y * 0.500000 + t9.x;
    //Instruction 14335
    //ADD
    t9.x = t9.x + -0.300000;
    //Instruction 14336
    //MUL
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 14337
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 14338
    //LT
    tb9 = 0.0<t16_2.x;
    //Instruction 14339
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 14340
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 14341
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 14342
    //DP3
    t18.x = dot(t3.xyz, t3.xyz);
    //Instruction 14343
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 14344
    //MUL
    t18.xy = t18.xx * t3.xz;
    //Instruction 14345
    //AND
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, bvec2(tb9));
    //Instruction 14346
    //ADD
    t3.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 14347
    //MAD
    t3.xyz = unity_LODFade.xxx * t3.xyz + in_POSITION0.xyz;
    //Instruction 14348
    //GE
    tb28 = t16_2.x>=3.000000;
    //Instruction 14349
    //IF
    if(tb28){
        //Instruction 14350
        //EQ
        tb28 = t16_2.x==5.000000;
        //Instruction 14351
        //IF
        if(tb28){
            //Instruction 14352
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 14353
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 14354
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 14355
            //DP3
            t28 = dot(t4.xyz, t4.xyz);
            //Instruction 14356
            //RSQ
            t28 = inversesqrt(t28);
            //Instruction 14357
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 14358
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 14359
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 14360
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 14361
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 14362
            //ADD
            t28 = t0.x + _ST_WindBranch.x;
            //Instruction 14363
            //ADD
            t2.x = t28 + in_TEXCOORD0.w;
            //Instruction 14364
            //MAD
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 14365
            //MUL
            t30 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 14366
            //MUL
            t2.z = t30 * 0.500000;
            //Instruction 14367
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 14368
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 14369
            //FRC
            t2 = fract(t2);
            //Instruction 14370
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 14371
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 14372
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 14373
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 14374
            //ADD
            t2 = t2 + t2;
            //Instruction 14375
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 14376
            //LT
            tb30 = t6.w<0.0;
            //Instruction 14377
            //MOV
            t6.y = (-t6.w);
            //Instruction 14378
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 14379
            //MOVC
            t6.xy = (bool(tb30)) ? t6.xy : t6.zw;
            //Instruction 14380
            //MAD
            t30 = (-t2.y) * t2.z + t6.x;
            //Instruction 14381
            //MAD
            t30 = t6.y * t30 + t6.w;
            //Instruction 14382
            //ADD
            t31 = (-t30) + t6.x;
            //Instruction 14383
            //MAD
            t30 = t6.y * t31 + t30;
            //Instruction 14384
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 14385
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 14386
            //ADD
            t32 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 14387
            //MUL
            t32 = t2.x * t32;
            //Instruction 14388
            //MAD
            t30 = t30 * t31 + t32;
            //Instruction 14389
            //MAD
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 14390
            //MUL
            t30 = t30 * t31;
            //Instruction 14391
            //MUL
            t5.xyz = vec3(t30) * t5.xyz;
            //Instruction 14392
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 14393
            //MAD
            t6.x = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 14394
            //MUL
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 14395
            //MAD
            t6.y = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 14396
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 14397
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 14398
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 14399
            //MUL
            t24.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 14400
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 14401
            //MAD
            t6.xy = t24.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 14402
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 14403
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 14404
            //MUL
            t28 = t6.x * t6.y;
            //Instruction 14405
            //MAD
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            //Instruction 14406
            //MUL
            t30 = t2.w * _ST_WindVector.w;
            //Instruction 14407
            //MAD
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            //Instruction 14408
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 14409
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 14410
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 14411
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 14412
        //ELSE
        } else {
            //Instruction 14413
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 14414
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 14415
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 14416
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 14417
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 14418
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 14419
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 14420
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 14421
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 14422
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 14423
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 14424
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 14425
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 14426
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 14427
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 14428
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 14429
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 14430
            //LT
            tb0 = t2.w<0.0;
            //Instruction 14431
            //MOV
            t2.y = (-t2.w);
            //Instruction 14432
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 14433
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 14434
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 14435
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 14436
            //ADD
            t28 = (-t0.x) + t6.x;
            //Instruction 14437
            //MAD
            t0.x = t6.y * t28 + t0.x;
            //Instruction 14438
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 14439
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 14440
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 14441
            //MUL
            t30 = t30 * t5.x;
            //Instruction 14442
            //MAD
            t0.x = t0.x * t28 + t30;
            //Instruction 14443
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 14444
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 14445
        //ENDIF
        }
        //Instruction 14446
    //ENDIF
    }
    //Instruction 14447
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 14448
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 14449
    //DIV
    t28 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 14450
    //MAD
    t28 = (-t28) * 0.250000 + t3.y;
    //Instruction 14451
    //MAX
    t28 = max(t28, 0.0);
    //Instruction 14452
    //MUL
    t28 = t28 * _ST_WindGlobal.z;
    //Instruction 14453
    //NE
    tb30 = t28!=0.0;
    //Instruction 14454
    //LOG
    t4.x = log2(t28);
    //Instruction 14455
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 14456
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 14457
    //MOVC
    t28 = (tb30) ? t4.x : t28;
    //Instruction 14458
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 14459
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 14460
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 14461
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 14462
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 14463
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 14464
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 14465
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 14466
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 14467
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 14468
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 14469
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 14470
    //MUL
    t28 = t28 * t30;
    //Instruction 14471
    //MAD
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    //Instruction 14472
    //MOV
    t4.y = t3.y;
    //Instruction 14473
    //DP3
    t18.x = dot(t4.xyz, t4.xyz);
    //Instruction 14474
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 14475
    //MUL
    t4.xyz = t18.xxx * t4.xyz;
    //Instruction 14476
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 14477
    //MOVC
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    //Instruction 14478
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 14479
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 14480
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 14481
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 14482
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 14483
    //MAD
    t3.xyz = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 14484
    //MAD
    t3.xyz = _Object2World[2].xyz * t0.zzz + t3.xyz;
    //Instruction 14485
    //MAD
    t3.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xyz;
    //Instruction 14486
    //MOV
    t4.x = _World2Object[0].x;
    //Instruction 14487
    //MOV
    t4.y = _World2Object[1].x;
    //Instruction 14488
    //MOV
    t4.z = _World2Object[2].x;
    //Instruction 14489
    //MOV
    t5.x = _World2Object[0].y;
    //Instruction 14490
    //MOV
    t5.y = _World2Object[1].y;
    //Instruction 14491
    //MOV
    t5.z = _World2Object[2].y;
    //Instruction 14492
    //MUL
    t5.xyz = t5.xyz * in_NORMAL0.yyy;
    //Instruction 14493
    //MAD
    t4.xyz = t4.xyz * in_NORMAL0.xxx + t5.xyz;
    //Instruction 14494
    //MOV
    t5.x = _World2Object[0].z;
    //Instruction 14495
    //MOV
    t5.y = _World2Object[1].z;
    //Instruction 14496
    //MOV
    t5.z = _World2Object[2].z;
    //Instruction 14497
    //MAD
    t4.xyz = t5.xyz * in_NORMAL0.zzz + t4.xyz;
    //Instruction 14498
    //DP3
    t27 = dot(t4.xyz, t4.xyz);
    //Instruction 14499
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 14500
    //MUL
    t4.xyz = vec3(t27) * t4.xyz;
    //Instruction 14501
    //MUL
    t16_2 = t4.yzzx * t4.xyzz;
    //Instruction 14502
    //DP4
    t16_7.x = dot(unity_SHBr, t16_2);
    //Instruction 14503
    //DP4
    t16_7.y = dot(unity_SHBg, t16_2);
    //Instruction 14504
    //DP4
    t16_7.z = dot(unity_SHBb, t16_2);
    //Instruction 14505
    //MUL
    t16_34 = t4.y * t4.y;
    //Instruction 14506
    //MAD
    t16_34 = t4.x * t4.x + (-t16_34);
    //Instruction 14507
    //MAD
    t16_7.xyz = unity_SHC.xyz * vec3(t16_34) + t16_7.xyz;
    //Instruction 14508
    //ADD
    t2 = (-t3.xxxx) + unity_4LightPosX0;
    //Instruction 14509
    //ADD
    t5 = (-t3.yyyy) + unity_4LightPosY0;
    //Instruction 14510
    //ADD
    t6 = (-t3.zzzz) + unity_4LightPosZ0;
    //Instruction 14511
    //MUL
    t8 = t5 * t5;
    //Instruction 14512
    //MAD
    t8 = t2 * t2 + t8;
    //Instruction 14513
    //MAD
    t8 = t6 * t6 + t8;
    //Instruction 14514
    //MUL
    t5 = t4.yyyy * t5;
    //Instruction 14515
    //MAD
    t2 = t2 * t4.xxxx + t5;
    //Instruction 14516
    //MAD
    t2 = t6 * t4.zzzz + t2;
    //Instruction 14517
    //RSQ
    t5 = inversesqrt(t8);
    //Instruction 14518
    //MUL
    t2 = t2 * t5;
    //Instruction 14519
    //MAX
    t2 = max(t2, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 14520
    //MAD
    t5 = t8 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 14521
    //DIV
    t5 = vec4(1.0, 1.0, 1.0, 1.0) / t5;
    //Instruction 14522
    //MUL
    t2 = t2 * t5;
    //Instruction 14523
    //MUL
    t5.xyz = t2.yyy * unity_LightColor[1].xyz;
    //Instruction 14524
    //MAD
    t5.xyz = unity_LightColor[0].xyz * t2.xxx + t5.xyz;
    //Instruction 14525
    //MAD
    t5.xyz = unity_LightColor[2].xyz * t2.zzz + t5.xyz;
    //Instruction 14526
    //MAD
    t5.xyz = unity_LightColor[3].xyz * t2.www + t5.xyz;
    //Instruction 14527
    //ADD
    t5.xyz = t5.xyz + t16_7.xyz;
    //Instruction 14528
    //MUL
    t2 = t0.yyyy * _Object2World[1];
    //Instruction 14529
    //MAD
    t2 = _Object2World[0] * t0.xxxx + t2;
    //Instruction 14530
    //MAD
    t0 = _Object2World[2] * t0.zzzz + t2;
    //Instruction 14531
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 14532
    //MUL
    t2 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 14533
    //MAD
    t2 = unity_World2Shadow[0][0] * t0.xxxx + t2;
    //Instruction 14534
    //MAD
    t2 = unity_World2Shadow[0][2] * t0.zzzz + t2;
    //Instruction 14535
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t2;
    //Instruction 14536
    //MOV
    vs_TEXCOORD0.xyz = t4.xyz;
    //Instruction 14537
    //MOV
    vs_TEXCOORD1.xyz = t3.xyz;
    //Instruction 14538
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 14539
    //MOV
    vs_TEXCOORD5 = t0;
    //Instruction 14540
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 14541
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 14542
    //MOV
    vs_TEXCOORD4.xyz = t5.xyz;
    //Instruction 14543
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
mediump vec3 t16_1;
mediump float t16_2;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump float t16_12;
mediump float t16_13;
void main()
{
    //Instruction 14299
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 14300
    //MOV
    t16_0.w = 1.0;
    //Instruction 14301
    //DP4
    t16_1.x = dot(unity_SHAr, t16_0);
    //Instruction 14302
    //DP4
    t16_1.y = dot(unity_SHAg, t16_0);
    //Instruction 14303
    //DP4
    t16_1.z = dot(unity_SHAb, t16_0);
    //Instruction 14304
    //ADD
    t16_0.xyz = t16_1.xyz + vs_TEXCOORD4.xyz;
    //Instruction 14305
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 14306
    //ADD
    t16_1.xyz = (-t10_2.xyz) + _HueVariation.xyz;
    //Instruction 14307
    //MAD
    t16_1.xyz = vs_TEXCOORD3.zzz * t16_1.xyz + t10_2.xyz;
    //Instruction 14308
    //MAX
    t16_12 = max(t16_1.z, t16_1.y);
    //Instruction 14309
    //MAX
    t16_12 = max(t16_12, t16_1.x);
    //Instruction 14310
    //MAX
    t16_13 = max(t10_2.z, t10_2.y);
    //Instruction 14311
    //MAX
    t16_13 = max(t16_13, t10_2.x);
    //Instruction 14312
    //DIV
    t16_12 = t16_13 / t16_12;
    //Instruction 14313
    //MAD
    t16_2 = t16_12 * 0.500000 + 0.500000;
    //Instruction 14314
    //MUL
    t16_1.xyz = t16_1.xyz * vec3(t16_2);
    t16_1.xyz = clamp(t16_1.xyz, 0.0, 1.0);
    //Instruction 14315
    //MUL
    t16_1.xyz = t16_1.xyz * vs_TEXCOORD2.xyz;
    //Instruction 14316
    //MUL
    t16_0.xyz = t16_0.xyz * t16_1.xyz;
    //Instruction 14317
    //SAMPLE_C_LZ
    vec3 txVec32 = vec3(vs_TEXCOORD5.xy,vs_TEXCOORD5.z);
    t16_12 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec32, 0.0);
    //Instruction 14318
    //ADD
    t16_13 = (-_LightShadowData.x) + 1.0;
    //Instruction 14319
    //MAD
    t16_12 = t16_12 * t16_13 + _LightShadowData.x;
    //Instruction 14320
    //MUL
    t16_3.xyz = vec3(t16_12) * _LightColor0.xyz;
    //Instruction 14321
    //MUL
    t16_1.xyz = t16_1.xyz * t16_3.xyz;
    //Instruction 14322
    //DP3
    t16_12 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 14323
    //MAX
    t16_12 = max(t16_12, 0.0);
    //Instruction 14324
    //MAD
    t16_0.xyz = t16_1.xyz * vec3(t16_12) + t16_0.xyz;
    //Instruction 14325
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 14326
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 14327
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_12;
  tmpvar_12 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  FinalPosition_15 = tmpvar_1.xyz;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_15 = tmpvar_19;
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_19;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_19;
      highp float fTime_22;
      highp float fAdherenceScale_23;
      highp vec3 vWindVector_24;
      vWindVector_24 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_22 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (fTime_22 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((fTime_22 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_22 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((fTime_22 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_25.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_26 = (fOscillation_26 * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (tmpvar_19 + ((vWindVector_24 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((fTime_22 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_23 = (1.0 - ((tmpvar_33.x * tmpvar_33.y) * (
        (tmpvar_33.x * tmpvar_33.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_23 = (fAdherenceScale_23 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_13 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_23) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp float fTime_36;
      highp vec3 vWindVector_37;
      vWindVector_37 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_36 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_38;
      highp float fOscillation_39;
      fOscillation_39 = 1.0;
      highp float fAmount_40;
      highp float fTarget_41;
      highp vec4 tmpvar_42;
      tmpvar_42.w = 0.0;
      tmpvar_42.x = (fTime_36 + _glesMultiTexCoord0.w);
      tmpvar_42.y = ((fTime_36 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_42.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_36 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_41 = 1.0;
      fAmount_40 = tmpvar_44;
      if ((tmpvar_44 < 0.0)) {
        fTarget_41 = -1.0;
        fAmount_40 = -(tmpvar_44);
      };
      fOscillation_39 = (((
        mix (mix (tmpvar_44, fTarget_41, fAmount_40), fTarget_41, fAmount_40)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_35 = (vPos_20 + ((vWindVector_37 * fOscillation_39) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_15 = vPos_20;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_45;
    vPos_45 = FinalPosition_15;
    highp float fMoveAmount_46;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    fMoveAmount_46 = ((_ST_WindGlobal.y * (tmpvar_51.x + 
      (tmpvar_51.y * tmpvar_51.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_46 = (fMoveAmount_46 * fAdjust_47);
    vPos_45.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * fMoveAmount_46));
    vPos_45 = (normalize(vPos_45) * fLength_48);
    FinalPosition_15 = vPos_45;
  };
  tmpvar_12.xyz = FinalPosition_15;
  tmpvar_6 = tmpvar_7;
  highp vec3 tmpvar_53;
  tmpvar_53 = (_Object2World * tmpvar_12).xyz;
  highp vec4 v_54;
  v_54.x = _World2Object[0].x;
  v_54.y = _World2Object[1].x;
  v_54.z = _World2Object[2].x;
  v_54.w = _World2Object[3].x;
  highp vec4 v_55;
  v_55.x = _World2Object[0].y;
  v_55.y = _World2Object[1].y;
  v_55.z = _World2Object[2].y;
  v_55.w = _World2Object[3].y;
  highp vec4 v_56;
  v_56.x = _World2Object[0].z;
  v_56.y = _World2Object[1].z;
  v_56.z = _World2Object[2].z;
  v_56.w = _World2Object[3].z;
  highp vec3 tmpvar_57;
  tmpvar_57 = normalize(((
    (v_54.xyz * _glesNormal.x)
   + 
    (v_55.xyz * _glesNormal.y)
  ) + (v_56.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_57;
  highp mat3 tmpvar_58;
  tmpvar_58[0] = _Object2World[0].xyz;
  tmpvar_58[1] = _Object2World[1].xyz;
  tmpvar_58[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_59;
  tmpvar_59 = normalize((tmpvar_58 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_59;
  lowp vec3 tmpvar_60;
  tmpvar_60 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_61;
  tmpvar_61 = (tmpvar_60 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_61;
  highp vec4 tmpvar_62;
  tmpvar_62.x = worldTangent_4.x;
  tmpvar_62.y = worldBinormal_3.x;
  tmpvar_62.z = worldNormal_5.x;
  tmpvar_62.w = tmpvar_53.x;
  highp vec4 tmpvar_63;
  tmpvar_63.x = worldTangent_4.y;
  tmpvar_63.y = worldBinormal_3.y;
  tmpvar_63.z = worldNormal_5.y;
  tmpvar_63.w = tmpvar_53.y;
  highp vec4 tmpvar_64;
  tmpvar_64.x = worldTangent_4.z;
  tmpvar_64.y = worldBinormal_3.z;
  tmpvar_64.z = worldNormal_5.z;
  tmpvar_64.w = tmpvar_53.z;
  lowp vec4 tmpvar_65;
  tmpvar_65.w = 1.0;
  tmpvar_65.xyz = worldNormal_5;
  mediump vec4 normal_66;
  normal_66 = tmpvar_65;
  mediump vec3 x2_67;
  mediump vec4 tmpvar_68;
  tmpvar_68 = (normal_66.xyzz * normal_66.yzzx);
  x2_67.x = dot (unity_SHBr, tmpvar_68);
  x2_67.y = dot (unity_SHBg, tmpvar_68);
  x2_67.z = dot (unity_SHBb, tmpvar_68);
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_62;
  xlv_TEXCOORD1 = tmpvar_63;
  xlv_TEXCOORD2 = tmpvar_64;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = (x2_67 + (unity_SHC.xyz * (
    (normal_66.x * normal_66.x)
   - 
    (normal_66.y * normal_66.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  mediump vec3 tmpvar_13;
  tmpvar_13 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_13.x, max (tmpvar_13.y, tmpvar_13.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_13 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_14;
  tmpvar_14 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_15;
  tmpvar_15 = dot (xlv_TEXCOORD0.xyz, tmpvar_14);
  worldN_3.x = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (xlv_TEXCOORD1.xyz, tmpvar_14);
  worldN_3.y = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD2.xyz, tmpvar_14);
  worldN_3.z = tmpvar_17;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_18;
  normalWorld_18 = worldN_3;
  mediump vec3 tmpvar_19;
  mediump vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = normalWorld_18;
  mediump vec3 x1_21;
  x1_21.x = dot (unity_SHAr, tmpvar_20);
  x1_21.y = dot (unity_SHAg, tmpvar_20);
  x1_21.z = dot (unity_SHAb, tmpvar_20);
  tmpvar_19 = (xlv_TEXCOORD5 + x1_21);
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_24 = tmpvar_25;
  c_23.xyz = ((tmpvar_8 * tmpvar_1) * diff_24);
  c_23.w = tmpvar_9;
  c_22.w = c_23.w;
  c_22.xyz = (c_23.xyz + (tmpvar_8 * tmpvar_19));
  c_4.xyz = c_22.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
highp vec3 t4;
highp vec3 t5;
mediump vec4 t16_5;
highp vec4 t6;
lowp vec3 t10_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp vec2 t18;
highp vec2 t22;
highp vec2 t24;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
highp float t32;
mediump float t16_35;
void main()
{
    //Instruction 14411
    //MUL
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 14412
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 14413
    //ADD
    t9.x = t0.x + _Object2World[3].z;
    //Instruction 14414
    //ADD
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 14415
    //ADD
    t9.y = t18.x + in_NORMAL0.x;
    //Instruction 14416
    //FRC
    t9.xy = fract(t9.xy);
    //Instruction 14417
    //MAD
    t9.x = t9.y * 0.500000 + t9.x;
    //Instruction 14418
    //ADD
    t9.x = t9.x + -0.300000;
    //Instruction 14419
    //MUL
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 14420
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 14421
    //LT
    tb9 = 0.0<t16_2;
    //Instruction 14422
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 14423
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 14424
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 14425
    //DP3
    t18.x = dot(t3.xyz, t3.xyz);
    //Instruction 14426
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 14427
    //MUL
    t18.xy = t18.xx * t3.xz;
    //Instruction 14428
    //AND
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, bvec2(tb9));
    //Instruction 14429
    //ADD
    t3.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 14430
    //MAD
    t3.xyz = unity_LODFade.xxx * t3.xyz + in_POSITION0.xyz;
    //Instruction 14431
    //GE
    tb28 = t16_2>=3.000000;
    //Instruction 14432
    //IF
    if(tb28){
        //Instruction 14433
        //EQ
        tb28 = t16_2==5.000000;
        //Instruction 14434
        //IF
        if(tb28){
            //Instruction 14435
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 14436
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 14437
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 14438
            //DP3
            t28 = dot(t4.xyz, t4.xyz);
            //Instruction 14439
            //RSQ
            t28 = inversesqrt(t28);
            //Instruction 14440
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 14441
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 14442
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 14443
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 14444
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 14445
            //ADD
            t28 = t0.x + _ST_WindBranch.x;
            //Instruction 14446
            //ADD
            t2.x = t28 + in_TEXCOORD0.w;
            //Instruction 14447
            //MAD
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 14448
            //MUL
            t30 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 14449
            //MUL
            t2.z = t30 * 0.500000;
            //Instruction 14450
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 14451
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 14452
            //FRC
            t2 = fract(t2);
            //Instruction 14453
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 14454
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 14455
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 14456
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 14457
            //ADD
            t2 = t2 + t2;
            //Instruction 14458
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 14459
            //LT
            tb30 = t6.w<0.0;
            //Instruction 14460
            //MOV
            t6.y = (-t6.w);
            //Instruction 14461
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 14462
            //MOVC
            t6.xy = (bool(tb30)) ? t6.xy : t6.zw;
            //Instruction 14463
            //MAD
            t30 = (-t2.y) * t2.z + t6.x;
            //Instruction 14464
            //MAD
            t30 = t6.y * t30 + t6.w;
            //Instruction 14465
            //ADD
            t31 = (-t30) + t6.x;
            //Instruction 14466
            //MAD
            t30 = t6.y * t31 + t30;
            //Instruction 14467
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 14468
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 14469
            //ADD
            t32 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 14470
            //MUL
            t32 = t2.x * t32;
            //Instruction 14471
            //MAD
            t30 = t30 * t31 + t32;
            //Instruction 14472
            //MAD
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 14473
            //MUL
            t30 = t30 * t31;
            //Instruction 14474
            //MUL
            t5.xyz = vec3(t30) * t5.xyz;
            //Instruction 14475
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 14476
            //MAD
            t6.x = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 14477
            //MUL
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 14478
            //MAD
            t6.y = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 14479
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 14480
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 14481
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 14482
            //MUL
            t24.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 14483
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 14484
            //MAD
            t6.xy = t24.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 14485
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 14486
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 14487
            //MUL
            t28 = t6.x * t6.y;
            //Instruction 14488
            //MAD
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            //Instruction 14489
            //MUL
            t30 = t2.w * _ST_WindVector.w;
            //Instruction 14490
            //MAD
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            //Instruction 14491
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 14492
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 14493
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 14494
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 14495
        //ELSE
        } else {
            //Instruction 14496
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 14497
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 14498
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 14499
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 14500
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 14501
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 14502
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 14503
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 14504
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 14505
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 14506
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 14507
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 14508
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 14509
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 14510
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 14511
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 14512
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 14513
            //LT
            tb0 = t2.w<0.0;
            //Instruction 14514
            //MOV
            t2.y = (-t2.w);
            //Instruction 14515
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 14516
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 14517
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 14518
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 14519
            //ADD
            t28 = (-t0.x) + t6.x;
            //Instruction 14520
            //MAD
            t0.x = t6.y * t28 + t0.x;
            //Instruction 14521
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 14522
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 14523
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 14524
            //MUL
            t30 = t30 * t5.x;
            //Instruction 14525
            //MAD
            t0.x = t0.x * t28 + t30;
            //Instruction 14526
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 14527
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 14528
        //ENDIF
        }
        //Instruction 14529
    //ENDIF
    }
    //Instruction 14530
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 14531
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 14532
    //DIV
    t28 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 14533
    //MAD
    t28 = (-t28) * 0.250000 + t3.y;
    //Instruction 14534
    //MAX
    t28 = max(t28, 0.0);
    //Instruction 14535
    //MUL
    t28 = t28 * _ST_WindGlobal.z;
    //Instruction 14536
    //NE
    tb30 = t28!=0.0;
    //Instruction 14537
    //LOG
    t4.x = log2(t28);
    //Instruction 14538
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 14539
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 14540
    //MOVC
    t28 = (tb30) ? t4.x : t28;
    //Instruction 14541
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 14542
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 14543
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 14544
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 14545
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 14546
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 14547
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 14548
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 14549
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 14550
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 14551
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 14552
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 14553
    //MUL
    t28 = t28 * t30;
    //Instruction 14554
    //MAD
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    //Instruction 14555
    //MOV
    t4.y = t3.y;
    //Instruction 14556
    //DP3
    t18.x = dot(t4.xyz, t4.xyz);
    //Instruction 14557
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 14558
    //MUL
    t4.xyz = t18.xxx * t4.xyz;
    //Instruction 14559
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 14560
    //MOVC
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    //Instruction 14561
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 14562
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 14563
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 14564
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 14565
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 14566
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 14567
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 14568
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 14569
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 14570
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 14571
    //MOV
    t2.zw = _World2Object[2].xx;
    //Instruction 14572
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 14573
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 14574
    //MOV
    t3.zw = _World2Object[2].yy;
    //Instruction 14575
    //MUL
    t3 = t3 * in_NORMAL0.yyyy;
    //Instruction 14576
    //MAD
    t2 = t2 * in_NORMAL0.xxxx + t3;
    //Instruction 14577
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 14578
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 14579
    //MOV
    t3.zw = _World2Object[2].zz;
    //Instruction 14580
    //MAD
    t2 = t3 * in_NORMAL0.zzzz + t2;
    //Instruction 14581
    //DP3
    t27 = dot(t2.xyw, t2.xyw);
    //Instruction 14582
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 14583
    //MUL
    t2 = vec4(t27) * t2;
    //Instruction 14584
    //MUL
    t3.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 14585
    //MAD
    t3.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t3.xyz;
    //Instruction 14586
    //MAD
    t3.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t3.xyz;
    //Instruction 14587
    //DP3
    t27 = dot(t3.xyz, t3.xyz);
    //Instruction 14588
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 14589
    //MUL
    t3.xyz = vec3(t27) * t3.xyz;
    //Instruction 14590
    //MUL
    t10_7.xyz = t2.wxy * t3.xyz;
    //Instruction 14591
    //MAD
    t10_7.xyz = t2.ywx * t3.yzx + (-t10_7.xyz);
    //Instruction 14592
    //MUL
    t4.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 14593
    //MUL
    t16_5 = t2.ywzx * t2;
    //Instruction 14594
    //DP4
    t16_8.x = dot(unity_SHBr, t16_5);
    //Instruction 14595
    //DP4
    t16_8.y = dot(unity_SHBg, t16_5);
    //Instruction 14596
    //DP4
    t16_8.z = dot(unity_SHBb, t16_5);
    //Instruction 14597
    //MUL
    t16_35 = t2.y * t2.y;
    //Instruction 14598
    //MAD
    t16_35 = t2.x * t2.x + (-t16_35);
    //Instruction 14599
    //MAD
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(t16_35) + t16_8.xyz;
    //Instruction 14600
    //MOV
    vs_TEXCOORD0.x = t3.z;
    //Instruction 14601
    //MOV
    vs_TEXCOORD0.y = t4.x;
    //Instruction 14602
    //MOV
    vs_TEXCOORD0.z = t2.x;
    //Instruction 14603
    //MOV
    vs_TEXCOORD0.w = t0.x;
    //Instruction 14604
    //MOV
    vs_TEXCOORD1.x = t3.x;
    //Instruction 14605
    //MOV
    vs_TEXCOORD1.y = t4.y;
    //Instruction 14606
    //MOV
    vs_TEXCOORD1.z = t2.y;
    //Instruction 14607
    //MOV
    vs_TEXCOORD1.w = t0.y;
    //Instruction 14608
    //MOV
    vs_TEXCOORD2.x = t3.y;
    //Instruction 14609
    //MOV
    vs_TEXCOORD2.y = t4.z;
    //Instruction 14610
    //MOV
    vs_TEXCOORD2.z = t2.w;
    //Instruction 14611
    //MOV
    vs_TEXCOORD2.w = t0.z;
    //Instruction 14612
    //MOV
    vs_TEXCOORD3.w = _Color.w;
    //Instruction 14613
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 14614
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 14615
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump float t16_0;
lowp vec3 t10_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
lowp vec3 t10_3;
mediump vec3 t16_4;
mediump float t16_16;
void main()
{
    //Instruction 14382
    //SAMPLE
    t10_0.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 14383
    //ADD
    t16_1.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 14384
    //MAD
    t16_1.xyz = vs_TEXCOORD4.zzz * t16_1.xyz + t10_0.xyz;
    //Instruction 14385
    //MAX
    t16_16 = max(t16_1.z, t16_1.y);
    //Instruction 14386
    //MAX
    t16_16 = max(t16_16, t16_1.x);
    //Instruction 14387
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 14388
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 14389
    //DIV
    t16_16 = t16_2.x / t16_16;
    //Instruction 14390
    //MAD
    t16_0 = t16_16 * 0.500000 + 0.500000;
    //Instruction 14391
    //MUL
    t16_1.xyz = vec3(t16_0) * t16_1.xyz;
    t16_1.xyz = clamp(t16_1.xyz, 0.0, 1.0);
    //Instruction 14392
    //MUL
    t16_1.xyz = t16_1.xyz * vs_TEXCOORD3.xyz;
    //Instruction 14393
    //MUL
    t16_2.xyz = t16_1.xyz * _LightColor0.xyz;
    //Instruction 14394
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 14395
    //MAD
    t10_3.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 14396
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_3.xyz);
    //Instruction 14397
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_3.xyz);
    //Instruction 14398
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_3.xyz);
    //Instruction 14399
    //MOV
    t0.w = 1.0;
    //Instruction 14400
    //DP4
    t16_4.x = dot(unity_SHAr, t0);
    //Instruction 14401
    //DP4
    t16_4.y = dot(unity_SHAg, t0);
    //Instruction 14402
    //DP4
    t16_4.z = dot(unity_SHAb, t0);
    //Instruction 14403
    //DP3
    t16_16 = dot(t0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 14404
    //MAX
    t16_16 = max(t16_16, 0.0);
    //Instruction 14405
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD5.xyz;
    //Instruction 14406
    //MUL
    t16_1.xyz = t16_1.xyz * t16_4.xyz;
    //Instruction 14407
    //MAD
    t16_1.xyz = t16_2.xyz * vec3(t16_16) + t16_1.xyz;
    //Instruction 14408
    //MOV
    SV_Target0.xyz = t16_1.xyz;
    //Instruction 14409
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 14410
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_2.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  tmpvar_13 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  FinalPosition_16 = tmpvar_1.xyz;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_20;
  tmpvar_20 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_16 = tmpvar_20;
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_20;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_22;
      vPos_22 = tmpvar_20;
      highp float fTime_23;
      highp float fAdherenceScale_24;
      highp vec3 vWindVector_25;
      vWindVector_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_23 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_26;
      highp float fOscillation_27;
      fOscillation_27 = 1.0;
      highp float fAmount_28;
      highp float fTarget_29;
      highp vec4 tmpvar_30;
      tmpvar_30.x = (fTime_23 + _glesMultiTexCoord0.w);
      tmpvar_30.y = ((fTime_23 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_30.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_23 + _glesMultiTexCoord0.w));
      tmpvar_30.w = ((fTime_23 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      vOscillations_26 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      highp float tmpvar_32;
      tmpvar_32 = (vOscillations_26.y * vOscillations_26.z);
      fTarget_29 = 1.0;
      fAmount_28 = tmpvar_32;
      if ((tmpvar_32 < 0.0)) {
        fTarget_29 = -1.0;
        fAmount_28 = -(tmpvar_32);
      };
      fOscillation_27 = (((
        mix (mix (tmpvar_32, fTarget_29, fAmount_28), fTarget_29, fAmount_28)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_26.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_27 = (fOscillation_27 * (1.0 + (vOscillations_26.w * _ST_WindBranchWhip.x)));
      vPos_22 = (tmpvar_20 + ((vWindVector_25 * fOscillation_27) * _ST_WindBranch.y));
      highp vec4 tmpvar_33;
      tmpvar_33.zw = vec2(0.0, 0.0);
      tmpvar_33.x = ((fTime_23 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_33.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_34;
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      tmpvar_34 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((tmpvar_34.x * tmpvar_34.y) * (
        (tmpvar_34.x * tmpvar_34.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_26.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_22 = (vPos_22 + ((
        ((vRotatedBranchAnchor_14 - vPos_22) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_21 = vPos_22;
    } else {
      highp vec3 vPos_36;
      vPos_36 = vPos_21;
      highp float fTime_37;
      highp vec3 vWindVector_38;
      vWindVector_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_37 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_39;
      highp float fOscillation_40;
      fOscillation_40 = 1.0;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (fTime_37 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((fTime_37 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_37 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_39 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_39.y * vOscillations_39.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      fOscillation_40 = (((
        mix (mix (tmpvar_45, fTarget_42, fAmount_41), fTarget_42, fAmount_41)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_39.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_36 = (vPos_21 + ((vWindVector_38 * fOscillation_40) * _ST_WindBranch.y));
      vPos_21 = vPos_36;
    };
    FinalPosition_16 = vPos_21;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_16;
    highp float fMoveAmount_47;
    highp float fAdjust_48;
    highp float fLength_49;
    fLength_49 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_50;
    tmpvar_50 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_48 = tmpvar_50;
    if ((tmpvar_50 != 0.0)) {
      fAdjust_48 = pow (tmpvar_50, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_51;
    tmpvar_51.zw = vec2(0.0, 0.0);
    tmpvar_51.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_51.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_52;
    highp vec4 tmpvar_53;
    tmpvar_53 = abs(((
      fract((tmpvar_51 + 0.5))
     * 2.0) - 1.0));
    tmpvar_52 = (((
      (tmpvar_53 * tmpvar_53)
     * 
      (3.0 - (2.0 * tmpvar_53))
    ) - 0.5) * 2.0);
    fMoveAmount_47 = ((_ST_WindGlobal.y * (tmpvar_52.x + 
      (tmpvar_52.y * tmpvar_52.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_47 = (fMoveAmount_47 * fAdjust_48);
    vPos_46.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * fMoveAmount_47));
    vPos_46 = (normalize(vPos_46) * fLength_49);
    FinalPosition_16 = vPos_46;
  };
  tmpvar_13.xyz = FinalPosition_16;
  tmpvar_6 = tmpvar_8;
  highp vec3 tmpvar_54;
  tmpvar_54 = (_Object2World * tmpvar_13).xyz;
  highp vec4 v_55;
  v_55.x = _World2Object[0].x;
  v_55.y = _World2Object[1].x;
  v_55.z = _World2Object[2].x;
  v_55.w = _World2Object[3].x;
  highp vec4 v_56;
  v_56.x = _World2Object[0].y;
  v_56.y = _World2Object[1].y;
  v_56.z = _World2Object[2].y;
  v_56.w = _World2Object[3].y;
  highp vec4 v_57;
  v_57.x = _World2Object[0].z;
  v_57.y = _World2Object[1].z;
  v_57.z = _World2Object[2].z;
  v_57.w = _World2Object[3].z;
  highp vec3 tmpvar_58;
  tmpvar_58 = normalize(((
    (v_55.xyz * _glesNormal.x)
   + 
    (v_56.xyz * _glesNormal.y)
  ) + (v_57.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_58;
  highp mat3 tmpvar_59;
  tmpvar_59[0] = _Object2World[0].xyz;
  tmpvar_59[1] = _Object2World[1].xyz;
  tmpvar_59[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_60;
  tmpvar_60 = normalize((tmpvar_59 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_60;
  lowp vec3 tmpvar_61;
  tmpvar_61 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_62;
  tmpvar_62 = (tmpvar_61 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_62;
  highp vec4 tmpvar_63;
  tmpvar_63.x = worldTangent_4.x;
  tmpvar_63.y = worldBinormal_3.x;
  tmpvar_63.z = worldNormal_5.x;
  tmpvar_63.w = tmpvar_54.x;
  highp vec4 tmpvar_64;
  tmpvar_64.x = worldTangent_4.y;
  tmpvar_64.y = worldBinormal_3.y;
  tmpvar_64.z = worldNormal_5.y;
  tmpvar_64.w = tmpvar_54.y;
  highp vec4 tmpvar_65;
  tmpvar_65.x = worldTangent_4.z;
  tmpvar_65.y = worldBinormal_3.z;
  tmpvar_65.z = worldNormal_5.z;
  tmpvar_65.w = tmpvar_54.z;
  lowp vec4 tmpvar_66;
  tmpvar_66.w = 1.0;
  tmpvar_66.xyz = worldNormal_5;
  mediump vec4 normal_67;
  normal_67 = tmpvar_66;
  mediump vec3 x2_68;
  mediump vec4 tmpvar_69;
  tmpvar_69 = (normal_67.xyzz * normal_67.yzzx);
  x2_68.x = dot (unity_SHBr, tmpvar_69);
  x2_68.y = dot (unity_SHBg, tmpvar_69);
  x2_68.z = dot (unity_SHBb, tmpvar_69);
  tmpvar_7 = (unity_World2Shadow[0] * (_Object2World * tmpvar_13));
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_63;
  xlv_TEXCOORD1 = tmpvar_64;
  xlv_TEXCOORD2 = tmpvar_65;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = (x2_68 + (unity_SHC.xyz * (
    (normal_67.x * normal_67.x)
   - 
    (normal_67.y * normal_67.y)
  )));
  xlv_TEXCOORD6 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_14 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_15;
  tmpvar_15 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_16 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD0.xyz, tmpvar_15);
  worldN_4.x = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD1.xyz, tmpvar_15);
  worldN_4.y = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD2.xyz, tmpvar_15);
  worldN_4.z = tmpvar_20;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_16;
  mediump vec3 normalWorld_21;
  normalWorld_21 = worldN_4;
  mediump vec3 tmpvar_22;
  mediump vec3 tmpvar_23;
  mediump vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = normalWorld_21;
  mediump vec3 x1_25;
  x1_25.x = dot (unity_SHAr, tmpvar_24);
  x1_25.y = dot (unity_SHAg, tmpvar_24);
  x1_25.z = dot (unity_SHAb, tmpvar_24);
  tmpvar_23 = (xlv_TEXCOORD5 + x1_25);
  tmpvar_22 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_22;
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_28 = tmpvar_29;
  c_27.xyz = ((tmpvar_9 * tmpvar_22) * diff_28);
  c_27.w = tmpvar_10;
  c_26.w = c_27.w;
  c_26.xyz = (c_27.xyz + (tmpvar_9 * tmpvar_23));
  c_5.xyz = c_26.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_2.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  tmpvar_13 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  FinalPosition_16 = tmpvar_1.xyz;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_20;
  tmpvar_20 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_16 = tmpvar_20;
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_20;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_22;
      vPos_22 = tmpvar_20;
      highp float fTime_23;
      highp float fAdherenceScale_24;
      highp vec3 vWindVector_25;
      vWindVector_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_23 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_26;
      highp float fOscillation_27;
      fOscillation_27 = 1.0;
      highp float fAmount_28;
      highp float fTarget_29;
      highp vec4 tmpvar_30;
      tmpvar_30.x = (fTime_23 + _glesMultiTexCoord0.w);
      tmpvar_30.y = ((fTime_23 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_30.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_23 + _glesMultiTexCoord0.w));
      tmpvar_30.w = ((fTime_23 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      vOscillations_26 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      highp float tmpvar_32;
      tmpvar_32 = (vOscillations_26.y * vOscillations_26.z);
      fTarget_29 = 1.0;
      fAmount_28 = tmpvar_32;
      if ((tmpvar_32 < 0.0)) {
        fTarget_29 = -1.0;
        fAmount_28 = -(tmpvar_32);
      };
      fOscillation_27 = (((
        mix (mix (tmpvar_32, fTarget_29, fAmount_28), fTarget_29, fAmount_28)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_26.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_27 = (fOscillation_27 * (1.0 + (vOscillations_26.w * _ST_WindBranchWhip.x)));
      vPos_22 = (tmpvar_20 + ((vWindVector_25 * fOscillation_27) * _ST_WindBranch.y));
      highp vec4 tmpvar_33;
      tmpvar_33.zw = vec2(0.0, 0.0);
      tmpvar_33.x = ((fTime_23 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_33.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_34;
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      tmpvar_34 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((tmpvar_34.x * tmpvar_34.y) * (
        (tmpvar_34.x * tmpvar_34.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_26.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_22 = (vPos_22 + ((
        ((vRotatedBranchAnchor_14 - vPos_22) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_21 = vPos_22;
    } else {
      highp vec3 vPos_36;
      vPos_36 = vPos_21;
      highp float fTime_37;
      highp vec3 vWindVector_38;
      vWindVector_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_37 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_39;
      highp float fOscillation_40;
      fOscillation_40 = 1.0;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (fTime_37 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((fTime_37 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_37 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_39 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_39.y * vOscillations_39.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      fOscillation_40 = (((
        mix (mix (tmpvar_45, fTarget_42, fAmount_41), fTarget_42, fAmount_41)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_39.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_36 = (vPos_21 + ((vWindVector_38 * fOscillation_40) * _ST_WindBranch.y));
      vPos_21 = vPos_36;
    };
    FinalPosition_16 = vPos_21;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_16;
    highp float fMoveAmount_47;
    highp float fAdjust_48;
    highp float fLength_49;
    fLength_49 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_50;
    tmpvar_50 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_48 = tmpvar_50;
    if ((tmpvar_50 != 0.0)) {
      fAdjust_48 = pow (tmpvar_50, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_51;
    tmpvar_51.zw = vec2(0.0, 0.0);
    tmpvar_51.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_51.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_52;
    highp vec4 tmpvar_53;
    tmpvar_53 = abs(((
      fract((tmpvar_51 + 0.5))
     * 2.0) - 1.0));
    tmpvar_52 = (((
      (tmpvar_53 * tmpvar_53)
     * 
      (3.0 - (2.0 * tmpvar_53))
    ) - 0.5) * 2.0);
    fMoveAmount_47 = ((_ST_WindGlobal.y * (tmpvar_52.x + 
      (tmpvar_52.y * tmpvar_52.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_47 = (fMoveAmount_47 * fAdjust_48);
    vPos_46.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * fMoveAmount_47));
    vPos_46 = (normalize(vPos_46) * fLength_49);
    FinalPosition_16 = vPos_46;
  };
  tmpvar_13.xyz = FinalPosition_16;
  tmpvar_6 = tmpvar_8;
  highp vec3 tmpvar_54;
  tmpvar_54 = (_Object2World * tmpvar_13).xyz;
  highp vec4 v_55;
  v_55.x = _World2Object[0].x;
  v_55.y = _World2Object[1].x;
  v_55.z = _World2Object[2].x;
  v_55.w = _World2Object[3].x;
  highp vec4 v_56;
  v_56.x = _World2Object[0].y;
  v_56.y = _World2Object[1].y;
  v_56.z = _World2Object[2].y;
  v_56.w = _World2Object[3].y;
  highp vec4 v_57;
  v_57.x = _World2Object[0].z;
  v_57.y = _World2Object[1].z;
  v_57.z = _World2Object[2].z;
  v_57.w = _World2Object[3].z;
  highp vec3 tmpvar_58;
  tmpvar_58 = normalize(((
    (v_55.xyz * _glesNormal.x)
   + 
    (v_56.xyz * _glesNormal.y)
  ) + (v_57.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_58;
  highp mat3 tmpvar_59;
  tmpvar_59[0] = _Object2World[0].xyz;
  tmpvar_59[1] = _Object2World[1].xyz;
  tmpvar_59[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_60;
  tmpvar_60 = normalize((tmpvar_59 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_60;
  lowp vec3 tmpvar_61;
  tmpvar_61 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_62;
  tmpvar_62 = (tmpvar_61 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_62;
  highp vec4 tmpvar_63;
  tmpvar_63.x = worldTangent_4.x;
  tmpvar_63.y = worldBinormal_3.x;
  tmpvar_63.z = worldNormal_5.x;
  tmpvar_63.w = tmpvar_54.x;
  highp vec4 tmpvar_64;
  tmpvar_64.x = worldTangent_4.y;
  tmpvar_64.y = worldBinormal_3.y;
  tmpvar_64.z = worldNormal_5.y;
  tmpvar_64.w = tmpvar_54.y;
  highp vec4 tmpvar_65;
  tmpvar_65.x = worldTangent_4.z;
  tmpvar_65.y = worldBinormal_3.z;
  tmpvar_65.z = worldNormal_5.z;
  tmpvar_65.w = tmpvar_54.z;
  lowp vec4 tmpvar_66;
  tmpvar_66.w = 1.0;
  tmpvar_66.xyz = worldNormal_5;
  mediump vec4 normal_67;
  normal_67 = tmpvar_66;
  mediump vec3 x2_68;
  mediump vec4 tmpvar_69;
  tmpvar_69 = (normal_67.xyzz * normal_67.yzzx);
  x2_68.x = dot (unity_SHBr, tmpvar_69);
  x2_68.y = dot (unity_SHBg, tmpvar_69);
  x2_68.z = dot (unity_SHBb, tmpvar_69);
  highp vec3 lightColor0_70;
  lightColor0_70 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_71;
  lightColor1_71 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_72;
  lightColor2_72 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_73;
  lightColor3_73 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_74;
  lightAttenSq_74 = unity_4LightAtten0;
  highp vec3 normal_75;
  normal_75 = worldNormal_5;
  highp vec3 col_76;
  highp vec4 ndotl_77;
  highp vec4 lengthSq_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = (unity_4LightPosX0 - tmpvar_54.x);
  highp vec4 tmpvar_80;
  tmpvar_80 = (unity_4LightPosY0 - tmpvar_54.y);
  highp vec4 tmpvar_81;
  tmpvar_81 = (unity_4LightPosZ0 - tmpvar_54.z);
  lengthSq_78 = (tmpvar_79 * tmpvar_79);
  lengthSq_78 = (lengthSq_78 + (tmpvar_80 * tmpvar_80));
  lengthSq_78 = (lengthSq_78 + (tmpvar_81 * tmpvar_81));
  ndotl_77 = (tmpvar_79 * normal_75.x);
  ndotl_77 = (ndotl_77 + (tmpvar_80 * normal_75.y));
  ndotl_77 = (ndotl_77 + (tmpvar_81 * normal_75.z));
  highp vec4 tmpvar_82;
  tmpvar_82 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_77 * inversesqrt(lengthSq_78)));
  ndotl_77 = tmpvar_82;
  highp vec4 tmpvar_83;
  tmpvar_83 = (tmpvar_82 * (1.0/((1.0 + 
    (lengthSq_78 * lightAttenSq_74)
  ))));
  col_76 = (lightColor0_70 * tmpvar_83.x);
  col_76 = (col_76 + (lightColor1_71 * tmpvar_83.y));
  col_76 = (col_76 + (lightColor2_72 * tmpvar_83.z));
  col_76 = (col_76 + (lightColor3_73 * tmpvar_83.w));
  tmpvar_7 = ((x2_68 + (unity_SHC.xyz * 
    ((normal_67.x * normal_67.x) - (normal_67.y * normal_67.y))
  )) + col_76);
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_63;
  xlv_TEXCOORD1 = tmpvar_64;
  xlv_TEXCOORD2 = tmpvar_65;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  mediump vec3 tmpvar_13;
  tmpvar_13 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_13.x, max (tmpvar_13.y, tmpvar_13.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_13 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_14;
  tmpvar_14 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_15;
  tmpvar_15 = dot (xlv_TEXCOORD0.xyz, tmpvar_14);
  worldN_3.x = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (xlv_TEXCOORD1.xyz, tmpvar_14);
  worldN_3.y = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD2.xyz, tmpvar_14);
  worldN_3.z = tmpvar_17;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_18;
  normalWorld_18 = worldN_3;
  mediump vec3 tmpvar_19;
  mediump vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = normalWorld_18;
  mediump vec3 x1_21;
  x1_21.x = dot (unity_SHAr, tmpvar_20);
  x1_21.y = dot (unity_SHAg, tmpvar_20);
  x1_21.z = dot (unity_SHAb, tmpvar_20);
  tmpvar_19 = (xlv_TEXCOORD5 + x1_21);
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_24 = tmpvar_25;
  c_23.xyz = ((tmpvar_8 * tmpvar_1) * diff_24);
  c_23.w = tmpvar_9;
  c_22.w = c_23.w;
  c_22.xyz = (c_23.xyz + (tmpvar_8 * tmpvar_19));
  c_4.xyz = c_22.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
highp vec3 t4;
highp vec4 t5;
mediump vec4 t16_5;
highp vec4 t6;
highp vec4 t7;
lowp vec3 t10_7;
mediump vec3 t16_8;
highp vec4 t9;
highp vec2 t10;
bool tb10;
highp vec2 t20;
highp vec2 t24;
highp vec2 t26;
highp float t30;
highp float t31;
bool tb31;
highp float t33;
bool tb33;
highp float t34;
highp float t35;
mediump float t16_38;
void main()
{
    //Instruction 14645
    //MUL
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 14646
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 14647
    //ADD
    t10.x = t0.x + _Object2World[3].z;
    //Instruction 14648
    //ADD
    t20.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 14649
    //ADD
    t10.y = t20.x + in_NORMAL0.x;
    //Instruction 14650
    //FRC
    t10.xy = fract(t10.xy);
    //Instruction 14651
    //MAD
    t10.x = t10.y * 0.500000 + t10.x;
    //Instruction 14652
    //ADD
    t10.x = t10.x + -0.300000;
    //Instruction 14653
    //MUL
    t1.z = t10.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 14654
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 14655
    //LT
    tb10 = 0.0<t16_2;
    //Instruction 14656
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 14657
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 14658
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 14659
    //DP3
    t20.x = dot(t3.xyz, t3.xyz);
    //Instruction 14660
    //RSQ
    t20.x = inversesqrt(t20.x);
    //Instruction 14661
    //MUL
    t20.xy = t20.xx * t3.xz;
    //Instruction 14662
    //AND
    t20.xy = mix(vec2(0.0, 0.0), t20.xy, bvec2(tb10));
    //Instruction 14663
    //ADD
    t3.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 14664
    //MAD
    t3.xyz = unity_LODFade.xxx * t3.xyz + in_POSITION0.xyz;
    //Instruction 14665
    //GE
    tb31 = t16_2>=3.000000;
    //Instruction 14666
    //IF
    if(tb31){
        //Instruction 14667
        //EQ
        tb31 = t16_2==5.000000;
        //Instruction 14668
        //IF
        if(tb31){
            //Instruction 14669
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 14670
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 14671
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 14672
            //DP3
            t31 = dot(t4.xyz, t4.xyz);
            //Instruction 14673
            //RSQ
            t31 = inversesqrt(t31);
            //Instruction 14674
            //MUL
            t4.xyz = vec3(t31) * t4.xyz;
            //Instruction 14675
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 14676
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 14677
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 14678
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 14679
            //ADD
            t31 = t0.x + _ST_WindBranch.x;
            //Instruction 14680
            //ADD
            t2.x = t31 + in_TEXCOORD0.w;
            //Instruction 14681
            //MAD
            t2.y = t31 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 14682
            //MUL
            t33 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 14683
            //MUL
            t2.z = t33 * 0.500000;
            //Instruction 14684
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 14685
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 14686
            //FRC
            t2 = fract(t2);
            //Instruction 14687
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 14688
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 14689
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 14690
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 14691
            //ADD
            t2 = t2 + t2;
            //Instruction 14692
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 14693
            //LT
            tb33 = t6.w<0.0;
            //Instruction 14694
            //MOV
            t6.y = (-t6.w);
            //Instruction 14695
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 14696
            //MOVC
            t6.xy = (bool(tb33)) ? t6.xy : t6.zw;
            //Instruction 14697
            //MAD
            t33 = (-t2.y) * t2.z + t6.x;
            //Instruction 14698
            //MAD
            t33 = t6.y * t33 + t6.w;
            //Instruction 14699
            //ADD
            t34 = (-t33) + t6.x;
            //Instruction 14700
            //MAD
            t33 = t6.y * t34 + t33;
            //Instruction 14701
            //MUL
            t33 = t33 * _ST_WindBranchTwitch.x;
            //Instruction 14702
            //ADD
            t34 = (-_ST_WindVector.w) + 1.0;
            //Instruction 14703
            //ADD
            t35 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 14704
            //MUL
            t35 = t2.x * t35;
            //Instruction 14705
            //MAD
            t33 = t33 * t34 + t35;
            //Instruction 14706
            //MAD
            t34 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 14707
            //MUL
            t33 = t33 * t34;
            //Instruction 14708
            //MUL
            t5.xyz = vec3(t33) * t5.xyz;
            //Instruction 14709
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 14710
            //MAD
            t6.x = t31 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 14711
            //MUL
            t31 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 14712
            //MAD
            t6.y = t31 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 14713
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 14714
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 14715
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 14716
            //MUL
            t26.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 14717
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 14718
            //MAD
            t6.xy = t26.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 14719
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 14720
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 14721
            //MUL
            t31 = t6.x * t6.y;
            //Instruction 14722
            //MAD
            t31 = (-t31) * _ST_WindTurbulences.x + 1.0;
            //Instruction 14723
            //MUL
            t33 = t2.w * _ST_WindVector.w;
            //Instruction 14724
            //MAD
            t31 = t33 * _ST_WindBranchWhip.x + t31;
            //Instruction 14725
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 14726
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 14727
            //MUL
            t4.xyz = vec3(t31) * t4.xyz;
            //Instruction 14728
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 14729
        //ELSE
        } else {
            //Instruction 14730
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 14731
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 14732
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 14733
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 14734
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 14735
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 14736
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 14737
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 14738
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 14739
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 14740
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 14741
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 14742
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 14743
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 14744
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 14745
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 14746
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 14747
            //LT
            tb0 = t2.w<0.0;
            //Instruction 14748
            //MOV
            t2.y = (-t2.w);
            //Instruction 14749
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 14750
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 14751
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 14752
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 14753
            //ADD
            t31 = (-t0.x) + t6.x;
            //Instruction 14754
            //MAD
            t0.x = t6.y * t31 + t0.x;
            //Instruction 14755
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 14756
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 14757
            //ADD
            t33 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 14758
            //MUL
            t33 = t33 * t5.x;
            //Instruction 14759
            //MAD
            t0.x = t0.x * t31 + t33;
            //Instruction 14760
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 14761
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 14762
        //ENDIF
        }
        //Instruction 14763
    //ENDIF
    }
    //Instruction 14764
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 14765
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 14766
    //DIV
    t31 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 14767
    //MAD
    t31 = (-t31) * 0.250000 + t3.y;
    //Instruction 14768
    //MAX
    t31 = max(t31, 0.0);
    //Instruction 14769
    //MUL
    t31 = t31 * _ST_WindGlobal.z;
    //Instruction 14770
    //NE
    tb33 = t31!=0.0;
    //Instruction 14771
    //LOG
    t4.x = log2(t31);
    //Instruction 14772
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 14773
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 14774
    //MOVC
    t31 = (tb33) ? t4.x : t31;
    //Instruction 14775
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 14776
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 14777
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 14778
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 14779
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 14780
    //MUL
    t24.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 14781
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 14782
    //MAD
    t4.xy = t24.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 14783
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 14784
    //MAD
    t33 = t4.y * t4.y + t4.x;
    //Instruction 14785
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 14786
    //MAD
    t33 = _ST_WindGlobal.y * t33 + t4.x;
    //Instruction 14787
    //MUL
    t31 = t31 * t33;
    //Instruction 14788
    //MAD
    t4.xz = t20.xy * vec2(t31) + t3.xz;
    //Instruction 14789
    //MOV
    t4.y = t3.y;
    //Instruction 14790
    //DP3
    t20.x = dot(t4.xyz, t4.xyz);
    //Instruction 14791
    //RSQ
    t20.x = inversesqrt(t20.x);
    //Instruction 14792
    //MUL
    t4.xyz = t20.xxx * t4.xyz;
    //Instruction 14793
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 14794
    //MOVC
    t0.xyz = (bool(tb10)) ? t0.xzw : t3.xyz;
    //Instruction 14795
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 14796
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 14797
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 14798
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 14799
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 14800
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 14801
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 14802
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 14803
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 14804
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 14805
    //MOV
    t2.zw = _World2Object[2].xx;
    //Instruction 14806
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 14807
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 14808
    //MOV
    t3.zw = _World2Object[2].yy;
    //Instruction 14809
    //MUL
    t3 = t3 * in_NORMAL0.yyyy;
    //Instruction 14810
    //MAD
    t2 = t2 * in_NORMAL0.xxxx + t3;
    //Instruction 14811
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 14812
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 14813
    //MOV
    t3.zw = _World2Object[2].zz;
    //Instruction 14814
    //MAD
    t2 = t3 * in_NORMAL0.zzzz + t2;
    //Instruction 14815
    //DP3
    t30 = dot(t2.xyw, t2.xyw);
    //Instruction 14816
    //RSQ
    t30 = inversesqrt(t30);
    //Instruction 14817
    //MUL
    t2 = vec4(t30) * t2;
    //Instruction 14818
    //MUL
    t3.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 14819
    //MAD
    t3.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t3.xyz;
    //Instruction 14820
    //MAD
    t3.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t3.xyz;
    //Instruction 14821
    //DP3
    t30 = dot(t3.xyz, t3.xyz);
    //Instruction 14822
    //RSQ
    t30 = inversesqrt(t30);
    //Instruction 14823
    //MUL
    t3.xyz = vec3(t30) * t3.xyz;
    //Instruction 14824
    //MUL
    t10_7.xyz = t2.wxy * t3.xyz;
    //Instruction 14825
    //MAD
    t10_7.xyz = t2.ywx * t3.yzx + (-t10_7.xyz);
    //Instruction 14826
    //MUL
    t4.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 14827
    //MUL
    t16_5 = t2.ywzx * t2;
    //Instruction 14828
    //DP4
    t16_8.x = dot(unity_SHBr, t16_5);
    //Instruction 14829
    //DP4
    t16_8.y = dot(unity_SHBg, t16_5);
    //Instruction 14830
    //DP4
    t16_8.z = dot(unity_SHBb, t16_5);
    //Instruction 14831
    //MUL
    t16_38 = t2.y * t2.y;
    //Instruction 14832
    //MAD
    t16_38 = t2.x * t2.x + (-t16_38);
    //Instruction 14833
    //MAD
    t16_8.xyz = unity_SHC.xyz * vec3(t16_38) + t16_8.xyz;
    //Instruction 14834
    //ADD
    t5 = (-t0.xxxx) + unity_4LightPosX0;
    //Instruction 14835
    //ADD
    t6 = (-t0.yyyy) + unity_4LightPosY0;
    //Instruction 14836
    //ADD
    t7 = (-t0.zzzz) + unity_4LightPosZ0;
    //Instruction 14837
    //MUL
    t9 = t6 * t6;
    //Instruction 14838
    //MAD
    t9 = t5 * t5 + t9;
    //Instruction 14839
    //MAD
    t9 = t7 * t7 + t9;
    //Instruction 14840
    //MUL
    t6 = t2.yyyy * t6;
    //Instruction 14841
    //MAD
    t5 = t5 * t2.xxxx + t6;
    //Instruction 14842
    //MAD
    t5 = t7 * t2.wwww + t5;
    //Instruction 14843
    //RSQ
    t6 = inversesqrt(t9);
    //Instruction 14844
    //MUL
    t5 = t5 * t6;
    //Instruction 14845
    //MAX
    t5 = max(t5, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 14846
    //MAD
    t6 = t9 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 14847
    //DIV
    t6 = vec4(1.0, 1.0, 1.0, 1.0) / t6;
    //Instruction 14848
    //MUL
    t5 = t5 * t6;
    //Instruction 14849
    //MUL
    t6.xyz = t5.yyy * unity_LightColor[1].xyz;
    //Instruction 14850
    //MAD
    t6.xyz = unity_LightColor[0].xyz * t5.xxx + t6.xyz;
    //Instruction 14851
    //MAD
    t6.xyz = unity_LightColor[2].xyz * t5.zzz + t6.xyz;
    //Instruction 14852
    //MAD
    t6.xyz = unity_LightColor[3].xyz * t5.www + t6.xyz;
    //Instruction 14853
    //ADD
    t6.xyz = t6.xyz + t16_8.xyz;
    //Instruction 14854
    //MOV
    vs_TEXCOORD0.x = t3.z;
    //Instruction 14855
    //MOV
    vs_TEXCOORD0.y = t4.x;
    //Instruction 14856
    //MOV
    vs_TEXCOORD0.z = t2.x;
    //Instruction 14857
    //MOV
    vs_TEXCOORD0.w = t0.x;
    //Instruction 14858
    //MOV
    vs_TEXCOORD1.x = t3.x;
    //Instruction 14859
    //MOV
    vs_TEXCOORD1.y = t4.y;
    //Instruction 14860
    //MOV
    vs_TEXCOORD1.z = t2.y;
    //Instruction 14861
    //MOV
    vs_TEXCOORD1.w = t0.y;
    //Instruction 14862
    //MOV
    vs_TEXCOORD2.x = t3.y;
    //Instruction 14863
    //MOV
    vs_TEXCOORD2.y = t4.z;
    //Instruction 14864
    //MOV
    vs_TEXCOORD2.z = t2.w;
    //Instruction 14865
    //MOV
    vs_TEXCOORD2.w = t0.z;
    //Instruction 14866
    //MOV
    vs_TEXCOORD3.w = _Color.w;
    //Instruction 14867
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 14868
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 14869
    //MOV
    vs_TEXCOORD5.xyz = t6.xyz;
    //Instruction 14870
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump float t16_0;
lowp vec3 t10_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
lowp vec3 t10_3;
mediump vec3 t16_4;
mediump float t16_16;
void main()
{
    //Instruction 14616
    //SAMPLE
    t10_0.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 14617
    //ADD
    t16_1.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 14618
    //MAD
    t16_1.xyz = vs_TEXCOORD4.zzz * t16_1.xyz + t10_0.xyz;
    //Instruction 14619
    //MAX
    t16_16 = max(t16_1.z, t16_1.y);
    //Instruction 14620
    //MAX
    t16_16 = max(t16_16, t16_1.x);
    //Instruction 14621
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 14622
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 14623
    //DIV
    t16_16 = t16_2.x / t16_16;
    //Instruction 14624
    //MAD
    t16_0 = t16_16 * 0.500000 + 0.500000;
    //Instruction 14625
    //MUL
    t16_1.xyz = vec3(t16_0) * t16_1.xyz;
    t16_1.xyz = clamp(t16_1.xyz, 0.0, 1.0);
    //Instruction 14626
    //MUL
    t16_1.xyz = t16_1.xyz * vs_TEXCOORD3.xyz;
    //Instruction 14627
    //MUL
    t16_2.xyz = t16_1.xyz * _LightColor0.xyz;
    //Instruction 14628
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 14629
    //MAD
    t10_3.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 14630
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_3.xyz);
    //Instruction 14631
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_3.xyz);
    //Instruction 14632
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_3.xyz);
    //Instruction 14633
    //MOV
    t0.w = 1.0;
    //Instruction 14634
    //DP4
    t16_4.x = dot(unity_SHAr, t0);
    //Instruction 14635
    //DP4
    t16_4.y = dot(unity_SHAg, t0);
    //Instruction 14636
    //DP4
    t16_4.z = dot(unity_SHAb, t0);
    //Instruction 14637
    //DP3
    t16_16 = dot(t0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 14638
    //MAX
    t16_16 = max(t16_16, 0.0);
    //Instruction 14639
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD5.xyz;
    //Instruction 14640
    //MUL
    t16_1.xyz = t16_1.xyz * t16_4.xyz;
    //Instruction 14641
    //MAD
    t16_1.xyz = t16_2.xyz * vec3(t16_16) + t16_1.xyz;
    //Instruction 14642
    //MOV
    SV_Target0.xyz = t16_1.xyz;
    //Instruction 14643
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 14644
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec4 tmpvar_8;
  lowp vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10.xy = tmpvar_2.xy;
  tmpvar_9.w = _Color.w;
  tmpvar_9.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].x;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].y;
  tmpvar_11 = clamp (((
    fract(((tmpvar_12 + tmpvar_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_10.z = tmpvar_11;
  highp vec4 tmpvar_14;
  tmpvar_14 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  FinalPosition_17 = tmpvar_1.xyz;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_17 = tmpvar_21;
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_21;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = tmpvar_21;
      highp float fTime_24;
      highp float fAdherenceScale_25;
      highp vec3 vWindVector_26;
      vWindVector_26 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_24 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (fTime_24 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((fTime_24 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_24 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((fTime_24 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_27.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_28 = (fOscillation_28 * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (tmpvar_21 + ((vWindVector_26 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((fTime_24 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_25 = (1.0 - ((tmpvar_35.x * tmpvar_35.y) * (
        (tmpvar_35.x * tmpvar_35.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_25 = (fAdherenceScale_25 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((vRotatedBranchAnchor_15 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_25) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp float fTime_38;
      highp vec3 vWindVector_39;
      vWindVector_39 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_38 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_40;
      highp float fOscillation_41;
      fOscillation_41 = 1.0;
      highp float fAmount_42;
      highp float fTarget_43;
      highp vec4 tmpvar_44;
      tmpvar_44.w = 0.0;
      tmpvar_44.x = (fTime_38 + _glesMultiTexCoord0.w);
      tmpvar_44.y = ((fTime_38 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_44.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_38 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_43 = 1.0;
      fAmount_42 = tmpvar_46;
      if ((tmpvar_46 < 0.0)) {
        fTarget_43 = -1.0;
        fAmount_42 = -(tmpvar_46);
      };
      fOscillation_41 = (((
        mix (mix (tmpvar_46, fTarget_43, fAmount_42), fTarget_43, fAmount_42)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_37 = (vPos_22 + ((vWindVector_39 * fOscillation_41) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_47;
    vPos_47 = FinalPosition_17;
    highp float fMoveAmount_48;
    highp float fAdjust_49;
    highp float fLength_50;
    fLength_50 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_51;
    tmpvar_51 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_49 = tmpvar_51;
    if ((tmpvar_51 != 0.0)) {
      fAdjust_49 = pow (tmpvar_51, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_52;
    tmpvar_52.zw = vec2(0.0, 0.0);
    tmpvar_52.x = (tmpvar_12 + _ST_WindGlobal.x);
    tmpvar_52.y = (tmpvar_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_53;
    highp vec4 tmpvar_54;
    tmpvar_54 = abs(((
      fract((tmpvar_52 + 0.5))
     * 2.0) - 1.0));
    tmpvar_53 = (((
      (tmpvar_54 * tmpvar_54)
     * 
      (3.0 - (2.0 * tmpvar_54))
    ) - 0.5) * 2.0);
    fMoveAmount_48 = ((_ST_WindGlobal.y * (tmpvar_53.x + 
      (tmpvar_53.y * tmpvar_53.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_48 = (fMoveAmount_48 * fAdjust_49);
    vPos_47.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_48));
    vPos_47 = (normalize(vPos_47) * fLength_50);
    FinalPosition_17 = vPos_47;
  };
  tmpvar_14.xyz = FinalPosition_17;
  tmpvar_6 = tmpvar_9;
  highp vec3 tmpvar_55;
  tmpvar_55 = (_Object2World * tmpvar_14).xyz;
  highp vec4 v_56;
  v_56.x = _World2Object[0].x;
  v_56.y = _World2Object[1].x;
  v_56.z = _World2Object[2].x;
  v_56.w = _World2Object[3].x;
  highp vec4 v_57;
  v_57.x = _World2Object[0].y;
  v_57.y = _World2Object[1].y;
  v_57.z = _World2Object[2].y;
  v_57.w = _World2Object[3].y;
  highp vec4 v_58;
  v_58.x = _World2Object[0].z;
  v_58.y = _World2Object[1].z;
  v_58.z = _World2Object[2].z;
  v_58.w = _World2Object[3].z;
  highp vec3 tmpvar_59;
  tmpvar_59 = normalize(((
    (v_56.xyz * _glesNormal.x)
   + 
    (v_57.xyz * _glesNormal.y)
  ) + (v_58.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_59;
  highp mat3 tmpvar_60;
  tmpvar_60[0] = _Object2World[0].xyz;
  tmpvar_60[1] = _Object2World[1].xyz;
  tmpvar_60[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_61;
  tmpvar_61 = normalize((tmpvar_60 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_61;
  lowp vec3 tmpvar_62;
  tmpvar_62 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_63;
  tmpvar_63 = (tmpvar_62 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_63;
  highp vec4 tmpvar_64;
  tmpvar_64.x = worldTangent_4.x;
  tmpvar_64.y = worldBinormal_3.x;
  tmpvar_64.z = worldNormal_5.x;
  tmpvar_64.w = tmpvar_55.x;
  highp vec4 tmpvar_65;
  tmpvar_65.x = worldTangent_4.y;
  tmpvar_65.y = worldBinormal_3.y;
  tmpvar_65.z = worldNormal_5.y;
  tmpvar_65.w = tmpvar_55.y;
  highp vec4 tmpvar_66;
  tmpvar_66.x = worldTangent_4.z;
  tmpvar_66.y = worldBinormal_3.z;
  tmpvar_66.z = worldNormal_5.z;
  tmpvar_66.w = tmpvar_55.z;
  lowp vec4 tmpvar_67;
  tmpvar_67.w = 1.0;
  tmpvar_67.xyz = worldNormal_5;
  mediump vec4 normal_68;
  normal_68 = tmpvar_67;
  mediump vec3 x2_69;
  mediump vec4 tmpvar_70;
  tmpvar_70 = (normal_68.xyzz * normal_68.yzzx);
  x2_69.x = dot (unity_SHBr, tmpvar_70);
  x2_69.y = dot (unity_SHBg, tmpvar_70);
  x2_69.z = dot (unity_SHBb, tmpvar_70);
  highp vec3 lightColor0_71;
  lightColor0_71 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_72;
  lightColor1_72 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_73;
  lightColor2_73 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_74;
  lightColor3_74 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_75;
  lightAttenSq_75 = unity_4LightAtten0;
  highp vec3 normal_76;
  normal_76 = worldNormal_5;
  highp vec3 col_77;
  highp vec4 ndotl_78;
  highp vec4 lengthSq_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = (unity_4LightPosX0 - tmpvar_55.x);
  highp vec4 tmpvar_81;
  tmpvar_81 = (unity_4LightPosY0 - tmpvar_55.y);
  highp vec4 tmpvar_82;
  tmpvar_82 = (unity_4LightPosZ0 - tmpvar_55.z);
  lengthSq_79 = (tmpvar_80 * tmpvar_80);
  lengthSq_79 = (lengthSq_79 + (tmpvar_81 * tmpvar_81));
  lengthSq_79 = (lengthSq_79 + (tmpvar_82 * tmpvar_82));
  ndotl_78 = (tmpvar_80 * normal_76.x);
  ndotl_78 = (ndotl_78 + (tmpvar_81 * normal_76.y));
  ndotl_78 = (ndotl_78 + (tmpvar_82 * normal_76.z));
  highp vec4 tmpvar_83;
  tmpvar_83 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_78 * inversesqrt(lengthSq_79)));
  ndotl_78 = tmpvar_83;
  highp vec4 tmpvar_84;
  tmpvar_84 = (tmpvar_83 * (1.0/((1.0 + 
    (lengthSq_79 * lightAttenSq_75)
  ))));
  col_77 = (lightColor0_71 * tmpvar_84.x);
  col_77 = (col_77 + (lightColor1_72 * tmpvar_84.y));
  col_77 = (col_77 + (lightColor2_73 * tmpvar_84.z));
  col_77 = (col_77 + (lightColor3_74 * tmpvar_84.w));
  tmpvar_7 = ((x2_69 + (unity_SHC.xyz * 
    ((normal_68.x * normal_68.x) - (normal_68.y * normal_68.y))
  )) + col_77);
  tmpvar_8 = (unity_World2Shadow[0] * (_Object2World * tmpvar_14));
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_64;
  xlv_TEXCOORD1 = tmpvar_65;
  xlv_TEXCOORD2 = tmpvar_66;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_14 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_15;
  tmpvar_15 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_16 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD0.xyz, tmpvar_15);
  worldN_4.x = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD1.xyz, tmpvar_15);
  worldN_4.y = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD2.xyz, tmpvar_15);
  worldN_4.z = tmpvar_20;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_16;
  mediump vec3 normalWorld_21;
  normalWorld_21 = worldN_4;
  mediump vec3 tmpvar_22;
  mediump vec3 tmpvar_23;
  mediump vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = normalWorld_21;
  mediump vec3 x1_25;
  x1_25.x = dot (unity_SHAr, tmpvar_24);
  x1_25.y = dot (unity_SHAg, tmpvar_24);
  x1_25.z = dot (unity_SHAb, tmpvar_24);
  tmpvar_23 = (xlv_TEXCOORD5 + x1_25);
  tmpvar_22 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_22;
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_28 = tmpvar_29;
  c_27.xyz = ((tmpvar_9 * tmpvar_22) * diff_28);
  c_27.w = tmpvar_10;
  c_26.w = c_27.w;
  c_26.xyz = (c_27.xyz + (tmpvar_9 * tmpvar_23));
  c_5.xyz = c_26.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_2.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  tmpvar_13 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  FinalPosition_16 = tmpvar_1.xyz;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_20;
  tmpvar_20 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_16 = tmpvar_20;
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_20;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_22;
      vPos_22 = tmpvar_20;
      highp float fTime_23;
      highp float fAdherenceScale_24;
      highp vec3 vWindVector_25;
      vWindVector_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_23 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_26;
      highp float fOscillation_27;
      fOscillation_27 = 1.0;
      highp float fAmount_28;
      highp float fTarget_29;
      highp vec4 tmpvar_30;
      tmpvar_30.x = (fTime_23 + _glesMultiTexCoord0.w);
      tmpvar_30.y = ((fTime_23 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_30.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_23 + _glesMultiTexCoord0.w));
      tmpvar_30.w = ((fTime_23 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      vOscillations_26 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      highp float tmpvar_32;
      tmpvar_32 = (vOscillations_26.y * vOscillations_26.z);
      fTarget_29 = 1.0;
      fAmount_28 = tmpvar_32;
      if ((tmpvar_32 < 0.0)) {
        fTarget_29 = -1.0;
        fAmount_28 = -(tmpvar_32);
      };
      fOscillation_27 = (((
        mix (mix (tmpvar_32, fTarget_29, fAmount_28), fTarget_29, fAmount_28)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_26.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_27 = (fOscillation_27 * (1.0 + (vOscillations_26.w * _ST_WindBranchWhip.x)));
      vPos_22 = (tmpvar_20 + ((vWindVector_25 * fOscillation_27) * _ST_WindBranch.y));
      highp vec4 tmpvar_33;
      tmpvar_33.zw = vec2(0.0, 0.0);
      tmpvar_33.x = ((fTime_23 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_33.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_34;
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      tmpvar_34 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((tmpvar_34.x * tmpvar_34.y) * (
        (tmpvar_34.x * tmpvar_34.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_26.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_22 = (vPos_22 + ((
        ((vRotatedBranchAnchor_14 - vPos_22) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_21 = vPos_22;
    } else {
      highp vec3 vPos_36;
      vPos_36 = vPos_21;
      highp float fTime_37;
      highp vec3 vWindVector_38;
      vWindVector_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_37 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_39;
      highp float fOscillation_40;
      fOscillation_40 = 1.0;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (fTime_37 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((fTime_37 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_37 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_39 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_39.y * vOscillations_39.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      fOscillation_40 = (((
        mix (mix (tmpvar_45, fTarget_42, fAmount_41), fTarget_42, fAmount_41)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_39.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_36 = (vPos_21 + ((vWindVector_38 * fOscillation_40) * _ST_WindBranch.y));
      vPos_21 = vPos_36;
    };
    FinalPosition_16 = vPos_21;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_16;
    highp float fMoveAmount_47;
    highp float fAdjust_48;
    highp float fLength_49;
    fLength_49 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_50;
    tmpvar_50 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_48 = tmpvar_50;
    if ((tmpvar_50 != 0.0)) {
      fAdjust_48 = pow (tmpvar_50, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_51;
    tmpvar_51.zw = vec2(0.0, 0.0);
    tmpvar_51.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_51.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_52;
    highp vec4 tmpvar_53;
    tmpvar_53 = abs(((
      fract((tmpvar_51 + 0.5))
     * 2.0) - 1.0));
    tmpvar_52 = (((
      (tmpvar_53 * tmpvar_53)
     * 
      (3.0 - (2.0 * tmpvar_53))
    ) - 0.5) * 2.0);
    fMoveAmount_47 = ((_ST_WindGlobal.y * (tmpvar_52.x + 
      (tmpvar_52.y * tmpvar_52.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_47 = (fMoveAmount_47 * fAdjust_48);
    vPos_46.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * fMoveAmount_47));
    vPos_46 = (normalize(vPos_46) * fLength_49);
    FinalPosition_16 = vPos_46;
  };
  tmpvar_13.xyz = FinalPosition_16;
  tmpvar_6 = tmpvar_8;
  highp vec3 tmpvar_54;
  tmpvar_54 = (_Object2World * tmpvar_13).xyz;
  highp vec4 v_55;
  v_55.x = _World2Object[0].x;
  v_55.y = _World2Object[1].x;
  v_55.z = _World2Object[2].x;
  v_55.w = _World2Object[3].x;
  highp vec4 v_56;
  v_56.x = _World2Object[0].y;
  v_56.y = _World2Object[1].y;
  v_56.z = _World2Object[2].y;
  v_56.w = _World2Object[3].y;
  highp vec4 v_57;
  v_57.x = _World2Object[0].z;
  v_57.y = _World2Object[1].z;
  v_57.z = _World2Object[2].z;
  v_57.w = _World2Object[3].z;
  highp vec3 tmpvar_58;
  tmpvar_58 = normalize(((
    (v_55.xyz * _glesNormal.x)
   + 
    (v_56.xyz * _glesNormal.y)
  ) + (v_57.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_58;
  highp mat3 tmpvar_59;
  tmpvar_59[0] = _Object2World[0].xyz;
  tmpvar_59[1] = _Object2World[1].xyz;
  tmpvar_59[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_60;
  tmpvar_60 = normalize((tmpvar_59 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_60;
  lowp vec3 tmpvar_61;
  tmpvar_61 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_62;
  tmpvar_62 = (tmpvar_61 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_62;
  highp vec4 tmpvar_63;
  tmpvar_63.x = worldTangent_4.x;
  tmpvar_63.y = worldBinormal_3.x;
  tmpvar_63.z = worldNormal_5.x;
  tmpvar_63.w = tmpvar_54.x;
  highp vec4 tmpvar_64;
  tmpvar_64.x = worldTangent_4.y;
  tmpvar_64.y = worldBinormal_3.y;
  tmpvar_64.z = worldNormal_5.y;
  tmpvar_64.w = tmpvar_54.y;
  highp vec4 tmpvar_65;
  tmpvar_65.x = worldTangent_4.z;
  tmpvar_65.y = worldBinormal_3.z;
  tmpvar_65.z = worldNormal_5.z;
  tmpvar_65.w = tmpvar_54.z;
  lowp vec4 tmpvar_66;
  tmpvar_66.w = 1.0;
  tmpvar_66.xyz = worldNormal_5;
  mediump vec4 normal_67;
  normal_67 = tmpvar_66;
  mediump vec3 x2_68;
  mediump vec4 tmpvar_69;
  tmpvar_69 = (normal_67.xyzz * normal_67.yzzx);
  x2_68.x = dot (unity_SHBr, tmpvar_69);
  x2_68.y = dot (unity_SHBg, tmpvar_69);
  x2_68.z = dot (unity_SHBb, tmpvar_69);
  tmpvar_7 = (unity_World2Shadow[0] * (_Object2World * tmpvar_13));
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_63;
  xlv_TEXCOORD1 = tmpvar_64;
  xlv_TEXCOORD2 = tmpvar_65;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = (x2_68 + (unity_SHC.xyz * (
    (normal_67.x * normal_67.x)
   - 
    (normal_67.y * normal_67.y)
  )));
  xlv_TEXCOORD6 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_14 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_15;
  tmpvar_15 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float shadow_16;
  shadow_16 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD0.xyz, tmpvar_15);
  worldN_4.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD1.xyz, tmpvar_15);
  worldN_4.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD2.xyz, tmpvar_15);
  worldN_4.z = tmpvar_19;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_16;
  mediump vec3 normalWorld_20;
  normalWorld_20 = worldN_4;
  mediump vec3 tmpvar_21;
  mediump vec3 tmpvar_22;
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = normalWorld_20;
  mediump vec3 x1_24;
  x1_24.x = dot (unity_SHAr, tmpvar_23);
  x1_24.y = dot (unity_SHAg, tmpvar_23);
  x1_24.z = dot (unity_SHAb, tmpvar_23);
  tmpvar_22 = (xlv_TEXCOORD5 + x1_24);
  tmpvar_21 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_21;
  lowp vec4 c_25;
  lowp vec4 c_26;
  lowp float diff_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_27 = tmpvar_28;
  c_26.xyz = ((tmpvar_9 * tmpvar_21) * diff_27);
  c_26.w = tmpvar_10;
  c_25.w = c_26.w;
  c_25.xyz = (c_26.xyz + (tmpvar_9 * tmpvar_22));
  c_5.xyz = c_25.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec4 t4;
highp vec3 t5;
highp vec4 t6;
mediump vec4 t16_6;
lowp vec3 t10_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp vec2 t18;
highp vec2 t22;
highp vec2 t24;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
highp float t32;
mediump float t16_35;
void main()
{
    //Instruction 14904
    //MUL
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 14905
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 14906
    //ADD
    t9.x = t0.x + _Object2World[3].z;
    //Instruction 14907
    //ADD
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 14908
    //ADD
    t9.y = t18.x + in_NORMAL0.x;
    //Instruction 14909
    //FRC
    t9.xy = fract(t9.xy);
    //Instruction 14910
    //MAD
    t9.x = t9.y * 0.500000 + t9.x;
    //Instruction 14911
    //ADD
    t9.x = t9.x + -0.300000;
    //Instruction 14912
    //MUL
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 14913
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 14914
    //LT
    tb9 = 0.0<t16_2;
    //Instruction 14915
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 14916
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 14917
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 14918
    //DP3
    t18.x = dot(t3.xyz, t3.xyz);
    //Instruction 14919
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 14920
    //MUL
    t18.xy = t18.xx * t3.xz;
    //Instruction 14921
    //AND
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, bvec2(tb9));
    //Instruction 14922
    //ADD
    t3.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 14923
    //MAD
    t3.xyz = unity_LODFade.xxx * t3.xyz + in_POSITION0.xyz;
    //Instruction 14924
    //GE
    tb28 = t16_2>=3.000000;
    //Instruction 14925
    //IF
    if(tb28){
        //Instruction 14926
        //EQ
        tb28 = t16_2==5.000000;
        //Instruction 14927
        //IF
        if(tb28){
            //Instruction 14928
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 14929
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 14930
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 14931
            //DP3
            t28 = dot(t4.xyz, t4.xyz);
            //Instruction 14932
            //RSQ
            t28 = inversesqrt(t28);
            //Instruction 14933
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 14934
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 14935
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 14936
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 14937
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 14938
            //ADD
            t28 = t0.x + _ST_WindBranch.x;
            //Instruction 14939
            //ADD
            t2.x = t28 + in_TEXCOORD0.w;
            //Instruction 14940
            //MAD
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 14941
            //MUL
            t30 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 14942
            //MUL
            t2.z = t30 * 0.500000;
            //Instruction 14943
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 14944
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 14945
            //FRC
            t2 = fract(t2);
            //Instruction 14946
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 14947
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 14948
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 14949
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 14950
            //ADD
            t2 = t2 + t2;
            //Instruction 14951
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 14952
            //LT
            tb30 = t6.w<0.0;
            //Instruction 14953
            //MOV
            t6.y = (-t6.w);
            //Instruction 14954
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 14955
            //MOVC
            t6.xy = (bool(tb30)) ? t6.xy : t6.zw;
            //Instruction 14956
            //MAD
            t30 = (-t2.y) * t2.z + t6.x;
            //Instruction 14957
            //MAD
            t30 = t6.y * t30 + t6.w;
            //Instruction 14958
            //ADD
            t31 = (-t30) + t6.x;
            //Instruction 14959
            //MAD
            t30 = t6.y * t31 + t30;
            //Instruction 14960
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 14961
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 14962
            //ADD
            t32 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 14963
            //MUL
            t32 = t2.x * t32;
            //Instruction 14964
            //MAD
            t30 = t30 * t31 + t32;
            //Instruction 14965
            //MAD
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 14966
            //MUL
            t30 = t30 * t31;
            //Instruction 14967
            //MUL
            t5.xyz = vec3(t30) * t5.xyz;
            //Instruction 14968
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 14969
            //MAD
            t6.x = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 14970
            //MUL
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 14971
            //MAD
            t6.y = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 14972
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 14973
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 14974
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 14975
            //MUL
            t24.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 14976
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 14977
            //MAD
            t6.xy = t24.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 14978
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 14979
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 14980
            //MUL
            t28 = t6.x * t6.y;
            //Instruction 14981
            //MAD
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            //Instruction 14982
            //MUL
            t30 = t2.w * _ST_WindVector.w;
            //Instruction 14983
            //MAD
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            //Instruction 14984
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 14985
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 14986
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 14987
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 14988
        //ELSE
        } else {
            //Instruction 14989
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 14990
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 14991
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 14992
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 14993
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 14994
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 14995
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 14996
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 14997
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 14998
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 14999
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 15000
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 15001
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 15002
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 15003
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 15004
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 15005
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 15006
            //LT
            tb0 = t2.w<0.0;
            //Instruction 15007
            //MOV
            t2.y = (-t2.w);
            //Instruction 15008
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 15009
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 15010
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 15011
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 15012
            //ADD
            t28 = (-t0.x) + t6.x;
            //Instruction 15013
            //MAD
            t0.x = t6.y * t28 + t0.x;
            //Instruction 15014
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 15015
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 15016
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 15017
            //MUL
            t30 = t30 * t5.x;
            //Instruction 15018
            //MAD
            t0.x = t0.x * t28 + t30;
            //Instruction 15019
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 15020
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 15021
        //ENDIF
        }
        //Instruction 15022
    //ENDIF
    }
    //Instruction 15023
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 15024
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 15025
    //DIV
    t28 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 15026
    //MAD
    t28 = (-t28) * 0.250000 + t3.y;
    //Instruction 15027
    //MAX
    t28 = max(t28, 0.0);
    //Instruction 15028
    //MUL
    t28 = t28 * _ST_WindGlobal.z;
    //Instruction 15029
    //NE
    tb30 = t28!=0.0;
    //Instruction 15030
    //LOG
    t4.x = log2(t28);
    //Instruction 15031
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 15032
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 15033
    //MOVC
    t28 = (tb30) ? t4.x : t28;
    //Instruction 15034
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 15035
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 15036
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 15037
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 15038
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 15039
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 15040
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 15041
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 15042
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 15043
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 15044
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 15045
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 15046
    //MUL
    t28 = t28 * t30;
    //Instruction 15047
    //MAD
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    //Instruction 15048
    //MOV
    t4.y = t3.y;
    //Instruction 15049
    //DP3
    t18.x = dot(t4.xyz, t4.xyz);
    //Instruction 15050
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 15051
    //MUL
    t4.xyz = t18.xxx * t4.xyz;
    //Instruction 15052
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 15053
    //MOVC
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    //Instruction 15054
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 15055
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 15056
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 15057
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 15058
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 15059
    //MAD
    t3.xyz = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 15060
    //MAD
    t3.xyz = _Object2World[2].xyz * t0.zzz + t3.xyz;
    //Instruction 15061
    //MAD
    t3.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xyz;
    //Instruction 15062
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 15063
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 15064
    //MOV
    t2.zw = _World2Object[2].xx;
    //Instruction 15065
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 15066
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 15067
    //MOV
    t4.zw = _World2Object[2].yy;
    //Instruction 15068
    //MUL
    t4 = t4 * in_NORMAL0.yyyy;
    //Instruction 15069
    //MAD
    t2 = t2 * in_NORMAL0.xxxx + t4;
    //Instruction 15070
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 15071
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 15072
    //MOV
    t4.zw = _World2Object[2].zz;
    //Instruction 15073
    //MAD
    t2 = t4 * in_NORMAL0.zzzz + t2;
    //Instruction 15074
    //DP3
    t27 = dot(t2.xyw, t2.xyw);
    //Instruction 15075
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 15076
    //MUL
    t2 = vec4(t27) * t2;
    //Instruction 15077
    //MUL
    t4.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 15078
    //MAD
    t4.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t4.xyz;
    //Instruction 15079
    //MAD
    t4.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t4.xyz;
    //Instruction 15080
    //DP3
    t27 = dot(t4.xyz, t4.xyz);
    //Instruction 15081
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 15082
    //MUL
    t4.xyz = vec3(t27) * t4.xyz;
    //Instruction 15083
    //MUL
    t10_7.xyz = t2.wxy * t4.xyz;
    //Instruction 15084
    //MAD
    t10_7.xyz = t2.ywx * t4.yzx + (-t10_7.xyz);
    //Instruction 15085
    //MUL
    t5.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 15086
    //MUL
    t16_6 = t2.ywzx * t2;
    //Instruction 15087
    //DP4
    t16_8.x = dot(unity_SHBr, t16_6);
    //Instruction 15088
    //DP4
    t16_8.y = dot(unity_SHBg, t16_6);
    //Instruction 15089
    //DP4
    t16_8.z = dot(unity_SHBb, t16_6);
    //Instruction 15090
    //MUL
    t16_35 = t2.y * t2.y;
    //Instruction 15091
    //MAD
    t16_35 = t2.x * t2.x + (-t16_35);
    //Instruction 15092
    //MAD
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(t16_35) + t16_8.xyz;
    //Instruction 15093
    //MUL
    t6 = t0.yyyy * _Object2World[1];
    //Instruction 15094
    //MAD
    t6 = _Object2World[0] * t0.xxxx + t6;
    //Instruction 15095
    //MAD
    t0 = _Object2World[2] * t0.zzzz + t6;
    //Instruction 15096
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 15097
    //MUL
    t6 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 15098
    //MAD
    t6 = unity_World2Shadow[0][0] * t0.xxxx + t6;
    //Instruction 15099
    //MAD
    t6 = unity_World2Shadow[0][2] * t0.zzzz + t6;
    //Instruction 15100
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t6;
    //Instruction 15101
    //MOV
    vs_TEXCOORD0.x = t4.z;
    //Instruction 15102
    //MOV
    vs_TEXCOORD0.y = t5.x;
    //Instruction 15103
    //MOV
    vs_TEXCOORD0.z = t2.x;
    //Instruction 15104
    //MOV
    vs_TEXCOORD0.w = t3.x;
    //Instruction 15105
    //MOV
    vs_TEXCOORD1.x = t4.x;
    //Instruction 15106
    //MOV
    vs_TEXCOORD1.y = t5.y;
    //Instruction 15107
    //MOV
    vs_TEXCOORD1.z = t2.y;
    //Instruction 15108
    //MOV
    vs_TEXCOORD1.w = t3.y;
    //Instruction 15109
    //MOV
    vs_TEXCOORD2.x = t4.y;
    //Instruction 15110
    //MOV
    vs_TEXCOORD2.y = t5.z;
    //Instruction 15111
    //MOV
    vs_TEXCOORD2.z = t2.w;
    //Instruction 15112
    //MOV
    vs_TEXCOORD2.w = t3.z;
    //Instruction 15113
    //MOV
    vs_TEXCOORD3.w = _Color.w;
    //Instruction 15114
    //MOV
    vs_TEXCOORD6 = t0;
    //Instruction 15115
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 15116
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 15117
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump float t16_0;
lowp vec3 t10_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
lowp vec3 t10_3;
mediump vec3 t16_4;
mediump float t16_16;
void main()
{
    //Instruction 14871
    //SAMPLE
    t10_0.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 14872
    //ADD
    t16_1.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 14873
    //MAD
    t16_1.xyz = vs_TEXCOORD4.zzz * t16_1.xyz + t10_0.xyz;
    //Instruction 14874
    //MAX
    t16_16 = max(t16_1.z, t16_1.y);
    //Instruction 14875
    //MAX
    t16_16 = max(t16_16, t16_1.x);
    //Instruction 14876
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 14877
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 14878
    //DIV
    t16_16 = t16_2.x / t16_16;
    //Instruction 14879
    //MAD
    t16_0 = t16_16 * 0.500000 + 0.500000;
    //Instruction 14880
    //MUL
    t16_1.xyz = vec3(t16_0) * t16_1.xyz;
    t16_1.xyz = clamp(t16_1.xyz, 0.0, 1.0);
    //Instruction 14881
    //MUL
    t16_1.xyz = t16_1.xyz * vs_TEXCOORD3.xyz;
    //Instruction 14882
    //SAMPLE_C_LZ
    vec3 txVec48 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_16 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec48, 0.0);
    //Instruction 14883
    //ADD
    t16_2.x = (-_LightShadowData.x) + 1.0;
    //Instruction 14884
    //MAD
    t16_16 = t16_16 * t16_2.x + _LightShadowData.x;
    //Instruction 14885
    //MUL
    t16_2.xyz = vec3(t16_16) * _LightColor0.xyz;
    //Instruction 14886
    //MUL
    t16_2.xyz = t16_1.xyz * t16_2.xyz;
    //Instruction 14887
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 14888
    //MAD
    t10_3.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 14889
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_3.xyz);
    //Instruction 14890
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_3.xyz);
    //Instruction 14891
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_3.xyz);
    //Instruction 14892
    //MOV
    t0.w = 1.0;
    //Instruction 14893
    //DP4
    t16_4.x = dot(unity_SHAr, t0);
    //Instruction 14894
    //DP4
    t16_4.y = dot(unity_SHAg, t0);
    //Instruction 14895
    //DP4
    t16_4.z = dot(unity_SHAb, t0);
    //Instruction 14896
    //DP3
    t16_16 = dot(t0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 14897
    //MAX
    t16_16 = max(t16_16, 0.0);
    //Instruction 14898
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD5.xyz;
    //Instruction 14899
    //MUL
    t16_1.xyz = t16_1.xyz * t16_4.xyz;
    //Instruction 14900
    //MAD
    t16_1.xyz = t16_2.xyz * vec3(t16_16) + t16_1.xyz;
    //Instruction 14901
    //MOV
    SV_Target0.xyz = t16_1.xyz;
    //Instruction 14902
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 14903
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec4 tmpvar_8;
  lowp vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10.xy = tmpvar_2.xy;
  tmpvar_9.w = _Color.w;
  tmpvar_9.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].x;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].y;
  tmpvar_11 = clamp (((
    fract(((tmpvar_12 + tmpvar_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_10.z = tmpvar_11;
  highp vec4 tmpvar_14;
  tmpvar_14 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  FinalPosition_17 = tmpvar_1.xyz;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_17 = tmpvar_21;
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_21;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = tmpvar_21;
      highp float fTime_24;
      highp float fAdherenceScale_25;
      highp vec3 vWindVector_26;
      vWindVector_26 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_24 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (fTime_24 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((fTime_24 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_24 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((fTime_24 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_27.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_28 = (fOscillation_28 * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (tmpvar_21 + ((vWindVector_26 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((fTime_24 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_25 = (1.0 - ((tmpvar_35.x * tmpvar_35.y) * (
        (tmpvar_35.x * tmpvar_35.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_25 = (fAdherenceScale_25 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((vRotatedBranchAnchor_15 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_25) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp float fTime_38;
      highp vec3 vWindVector_39;
      vWindVector_39 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_38 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_40;
      highp float fOscillation_41;
      fOscillation_41 = 1.0;
      highp float fAmount_42;
      highp float fTarget_43;
      highp vec4 tmpvar_44;
      tmpvar_44.w = 0.0;
      tmpvar_44.x = (fTime_38 + _glesMultiTexCoord0.w);
      tmpvar_44.y = ((fTime_38 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_44.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_38 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_43 = 1.0;
      fAmount_42 = tmpvar_46;
      if ((tmpvar_46 < 0.0)) {
        fTarget_43 = -1.0;
        fAmount_42 = -(tmpvar_46);
      };
      fOscillation_41 = (((
        mix (mix (tmpvar_46, fTarget_43, fAmount_42), fTarget_43, fAmount_42)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_37 = (vPos_22 + ((vWindVector_39 * fOscillation_41) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_47;
    vPos_47 = FinalPosition_17;
    highp float fMoveAmount_48;
    highp float fAdjust_49;
    highp float fLength_50;
    fLength_50 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_51;
    tmpvar_51 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_49 = tmpvar_51;
    if ((tmpvar_51 != 0.0)) {
      fAdjust_49 = pow (tmpvar_51, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_52;
    tmpvar_52.zw = vec2(0.0, 0.0);
    tmpvar_52.x = (tmpvar_12 + _ST_WindGlobal.x);
    tmpvar_52.y = (tmpvar_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_53;
    highp vec4 tmpvar_54;
    tmpvar_54 = abs(((
      fract((tmpvar_52 + 0.5))
     * 2.0) - 1.0));
    tmpvar_53 = (((
      (tmpvar_54 * tmpvar_54)
     * 
      (3.0 - (2.0 * tmpvar_54))
    ) - 0.5) * 2.0);
    fMoveAmount_48 = ((_ST_WindGlobal.y * (tmpvar_53.x + 
      (tmpvar_53.y * tmpvar_53.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_48 = (fMoveAmount_48 * fAdjust_49);
    vPos_47.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_48));
    vPos_47 = (normalize(vPos_47) * fLength_50);
    FinalPosition_17 = vPos_47;
  };
  tmpvar_14.xyz = FinalPosition_17;
  tmpvar_6 = tmpvar_9;
  highp vec3 tmpvar_55;
  tmpvar_55 = (_Object2World * tmpvar_14).xyz;
  highp vec4 v_56;
  v_56.x = _World2Object[0].x;
  v_56.y = _World2Object[1].x;
  v_56.z = _World2Object[2].x;
  v_56.w = _World2Object[3].x;
  highp vec4 v_57;
  v_57.x = _World2Object[0].y;
  v_57.y = _World2Object[1].y;
  v_57.z = _World2Object[2].y;
  v_57.w = _World2Object[3].y;
  highp vec4 v_58;
  v_58.x = _World2Object[0].z;
  v_58.y = _World2Object[1].z;
  v_58.z = _World2Object[2].z;
  v_58.w = _World2Object[3].z;
  highp vec3 tmpvar_59;
  tmpvar_59 = normalize(((
    (v_56.xyz * _glesNormal.x)
   + 
    (v_57.xyz * _glesNormal.y)
  ) + (v_58.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_59;
  highp mat3 tmpvar_60;
  tmpvar_60[0] = _Object2World[0].xyz;
  tmpvar_60[1] = _Object2World[1].xyz;
  tmpvar_60[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_61;
  tmpvar_61 = normalize((tmpvar_60 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_61;
  lowp vec3 tmpvar_62;
  tmpvar_62 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_63;
  tmpvar_63 = (tmpvar_62 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_63;
  highp vec4 tmpvar_64;
  tmpvar_64.x = worldTangent_4.x;
  tmpvar_64.y = worldBinormal_3.x;
  tmpvar_64.z = worldNormal_5.x;
  tmpvar_64.w = tmpvar_55.x;
  highp vec4 tmpvar_65;
  tmpvar_65.x = worldTangent_4.y;
  tmpvar_65.y = worldBinormal_3.y;
  tmpvar_65.z = worldNormal_5.y;
  tmpvar_65.w = tmpvar_55.y;
  highp vec4 tmpvar_66;
  tmpvar_66.x = worldTangent_4.z;
  tmpvar_66.y = worldBinormal_3.z;
  tmpvar_66.z = worldNormal_5.z;
  tmpvar_66.w = tmpvar_55.z;
  lowp vec4 tmpvar_67;
  tmpvar_67.w = 1.0;
  tmpvar_67.xyz = worldNormal_5;
  mediump vec4 normal_68;
  normal_68 = tmpvar_67;
  mediump vec3 x2_69;
  mediump vec4 tmpvar_70;
  tmpvar_70 = (normal_68.xyzz * normal_68.yzzx);
  x2_69.x = dot (unity_SHBr, tmpvar_70);
  x2_69.y = dot (unity_SHBg, tmpvar_70);
  x2_69.z = dot (unity_SHBb, tmpvar_70);
  highp vec3 lightColor0_71;
  lightColor0_71 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_72;
  lightColor1_72 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_73;
  lightColor2_73 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_74;
  lightColor3_74 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_75;
  lightAttenSq_75 = unity_4LightAtten0;
  highp vec3 normal_76;
  normal_76 = worldNormal_5;
  highp vec3 col_77;
  highp vec4 ndotl_78;
  highp vec4 lengthSq_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = (unity_4LightPosX0 - tmpvar_55.x);
  highp vec4 tmpvar_81;
  tmpvar_81 = (unity_4LightPosY0 - tmpvar_55.y);
  highp vec4 tmpvar_82;
  tmpvar_82 = (unity_4LightPosZ0 - tmpvar_55.z);
  lengthSq_79 = (tmpvar_80 * tmpvar_80);
  lengthSq_79 = (lengthSq_79 + (tmpvar_81 * tmpvar_81));
  lengthSq_79 = (lengthSq_79 + (tmpvar_82 * tmpvar_82));
  ndotl_78 = (tmpvar_80 * normal_76.x);
  ndotl_78 = (ndotl_78 + (tmpvar_81 * normal_76.y));
  ndotl_78 = (ndotl_78 + (tmpvar_82 * normal_76.z));
  highp vec4 tmpvar_83;
  tmpvar_83 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_78 * inversesqrt(lengthSq_79)));
  ndotl_78 = tmpvar_83;
  highp vec4 tmpvar_84;
  tmpvar_84 = (tmpvar_83 * (1.0/((1.0 + 
    (lengthSq_79 * lightAttenSq_75)
  ))));
  col_77 = (lightColor0_71 * tmpvar_84.x);
  col_77 = (col_77 + (lightColor1_72 * tmpvar_84.y));
  col_77 = (col_77 + (lightColor2_73 * tmpvar_84.z));
  col_77 = (col_77 + (lightColor3_74 * tmpvar_84.w));
  tmpvar_7 = ((x2_69 + (unity_SHC.xyz * 
    ((normal_68.x * normal_68.x) - (normal_68.y * normal_68.y))
  )) + col_77);
  tmpvar_8 = (unity_World2Shadow[0] * (_Object2World * tmpvar_14));
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_64;
  xlv_TEXCOORD1 = tmpvar_65;
  xlv_TEXCOORD2 = tmpvar_66;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_14 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_15;
  tmpvar_15 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float shadow_16;
  shadow_16 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD0.xyz, tmpvar_15);
  worldN_4.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD1.xyz, tmpvar_15);
  worldN_4.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD2.xyz, tmpvar_15);
  worldN_4.z = tmpvar_19;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_16;
  mediump vec3 normalWorld_20;
  normalWorld_20 = worldN_4;
  mediump vec3 tmpvar_21;
  mediump vec3 tmpvar_22;
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = normalWorld_20;
  mediump vec3 x1_24;
  x1_24.x = dot (unity_SHAr, tmpvar_23);
  x1_24.y = dot (unity_SHAg, tmpvar_23);
  x1_24.z = dot (unity_SHAb, tmpvar_23);
  tmpvar_22 = (xlv_TEXCOORD5 + x1_24);
  tmpvar_21 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_21;
  lowp vec4 c_25;
  lowp vec4 c_26;
  lowp float diff_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_27 = tmpvar_28;
  c_26.xyz = ((tmpvar_9 * tmpvar_21) * diff_27);
  c_26.w = tmpvar_10;
  c_25.w = c_26.w;
  c_25.xyz = (c_26.xyz + (tmpvar_9 * tmpvar_22));
  c_5.xyz = c_25.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec4 t4;
highp vec3 t5;
highp vec4 t6;
mediump vec4 t16_6;
highp vec4 t7;
lowp vec3 t10_7;
mediump vec3 t16_8;
highp vec4 t9;
highp vec4 t10;
highp vec2 t11;
bool tb11;
highp vec2 t22;
highp vec2 t26;
highp vec2 t28;
highp float t33;
highp float t34;
bool tb34;
highp float t36;
bool tb36;
highp float t37;
highp float t38;
mediump float t16_41;
void main()
{
    //Instruction 15159
    //MUL
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 15160
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 15161
    //ADD
    t11.x = t0.x + _Object2World[3].z;
    //Instruction 15162
    //ADD
    t22.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 15163
    //ADD
    t11.y = t22.x + in_NORMAL0.x;
    //Instruction 15164
    //FRC
    t11.xy = fract(t11.xy);
    //Instruction 15165
    //MAD
    t11.x = t11.y * 0.500000 + t11.x;
    //Instruction 15166
    //ADD
    t11.x = t11.x + -0.300000;
    //Instruction 15167
    //MUL
    t1.z = t11.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 15168
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 15169
    //LT
    tb11 = 0.0<t16_2;
    //Instruction 15170
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 15171
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 15172
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 15173
    //DP3
    t22.x = dot(t3.xyz, t3.xyz);
    //Instruction 15174
    //RSQ
    t22.x = inversesqrt(t22.x);
    //Instruction 15175
    //MUL
    t22.xy = t22.xx * t3.xz;
    //Instruction 15176
    //AND
    t22.xy = mix(vec2(0.0, 0.0), t22.xy, bvec2(tb11));
    //Instruction 15177
    //ADD
    t3.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 15178
    //MAD
    t3.xyz = unity_LODFade.xxx * t3.xyz + in_POSITION0.xyz;
    //Instruction 15179
    //GE
    tb34 = t16_2>=3.000000;
    //Instruction 15180
    //IF
    if(tb34){
        //Instruction 15181
        //EQ
        tb34 = t16_2==5.000000;
        //Instruction 15182
        //IF
        if(tb34){
            //Instruction 15183
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 15184
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 15185
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 15186
            //DP3
            t34 = dot(t4.xyz, t4.xyz);
            //Instruction 15187
            //RSQ
            t34 = inversesqrt(t34);
            //Instruction 15188
            //MUL
            t4.xyz = vec3(t34) * t4.xyz;
            //Instruction 15189
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 15190
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 15191
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 15192
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 15193
            //ADD
            t34 = t0.x + _ST_WindBranch.x;
            //Instruction 15194
            //ADD
            t2.x = t34 + in_TEXCOORD0.w;
            //Instruction 15195
            //MAD
            t2.y = t34 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 15196
            //MUL
            t36 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 15197
            //MUL
            t2.z = t36 * 0.500000;
            //Instruction 15198
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 15199
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 15200
            //FRC
            t2 = fract(t2);
            //Instruction 15201
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 15202
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 15203
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 15204
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 15205
            //ADD
            t2 = t2 + t2;
            //Instruction 15206
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 15207
            //LT
            tb36 = t6.w<0.0;
            //Instruction 15208
            //MOV
            t6.y = (-t6.w);
            //Instruction 15209
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 15210
            //MOVC
            t6.xy = (bool(tb36)) ? t6.xy : t6.zw;
            //Instruction 15211
            //MAD
            t36 = (-t2.y) * t2.z + t6.x;
            //Instruction 15212
            //MAD
            t36 = t6.y * t36 + t6.w;
            //Instruction 15213
            //ADD
            t37 = (-t36) + t6.x;
            //Instruction 15214
            //MAD
            t36 = t6.y * t37 + t36;
            //Instruction 15215
            //MUL
            t36 = t36 * _ST_WindBranchTwitch.x;
            //Instruction 15216
            //ADD
            t37 = (-_ST_WindVector.w) + 1.0;
            //Instruction 15217
            //ADD
            t38 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 15218
            //MUL
            t38 = t2.x * t38;
            //Instruction 15219
            //MAD
            t36 = t36 * t37 + t38;
            //Instruction 15220
            //MAD
            t37 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 15221
            //MUL
            t36 = t36 * t37;
            //Instruction 15222
            //MUL
            t5.xyz = vec3(t36) * t5.xyz;
            //Instruction 15223
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 15224
            //MAD
            t6.x = t34 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 15225
            //MUL
            t34 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 15226
            //MAD
            t6.y = t34 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 15227
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 15228
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 15229
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 15230
            //MUL
            t28.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 15231
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 15232
            //MAD
            t6.xy = t28.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 15233
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 15234
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 15235
            //MUL
            t34 = t6.x * t6.y;
            //Instruction 15236
            //MAD
            t34 = (-t34) * _ST_WindTurbulences.x + 1.0;
            //Instruction 15237
            //MUL
            t36 = t2.w * _ST_WindVector.w;
            //Instruction 15238
            //MAD
            t34 = t36 * _ST_WindBranchWhip.x + t34;
            //Instruction 15239
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 15240
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 15241
            //MUL
            t4.xyz = vec3(t34) * t4.xyz;
            //Instruction 15242
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 15243
        //ELSE
        } else {
            //Instruction 15244
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 15245
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 15246
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 15247
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 15248
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 15249
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 15250
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 15251
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 15252
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 15253
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 15254
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 15255
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 15256
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 15257
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 15258
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 15259
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 15260
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 15261
            //LT
            tb0 = t2.w<0.0;
            //Instruction 15262
            //MOV
            t2.y = (-t2.w);
            //Instruction 15263
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 15264
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 15265
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 15266
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 15267
            //ADD
            t34 = (-t0.x) + t6.x;
            //Instruction 15268
            //MAD
            t0.x = t6.y * t34 + t0.x;
            //Instruction 15269
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 15270
            //ADD
            t34 = (-_ST_WindVector.w) + 1.0;
            //Instruction 15271
            //ADD
            t36 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 15272
            //MUL
            t36 = t36 * t5.x;
            //Instruction 15273
            //MAD
            t0.x = t0.x * t34 + t36;
            //Instruction 15274
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 15275
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 15276
        //ENDIF
        }
        //Instruction 15277
    //ENDIF
    }
    //Instruction 15278
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 15279
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 15280
    //DIV
    t34 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 15281
    //MAD
    t34 = (-t34) * 0.250000 + t3.y;
    //Instruction 15282
    //MAX
    t34 = max(t34, 0.0);
    //Instruction 15283
    //MUL
    t34 = t34 * _ST_WindGlobal.z;
    //Instruction 15284
    //NE
    tb36 = t34!=0.0;
    //Instruction 15285
    //LOG
    t4.x = log2(t34);
    //Instruction 15286
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 15287
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 15288
    //MOVC
    t34 = (tb36) ? t4.x : t34;
    //Instruction 15289
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 15290
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 15291
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 15292
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 15293
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 15294
    //MUL
    t26.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 15295
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 15296
    //MAD
    t4.xy = t26.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 15297
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 15298
    //MAD
    t36 = t4.y * t4.y + t4.x;
    //Instruction 15299
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 15300
    //MAD
    t36 = _ST_WindGlobal.y * t36 + t4.x;
    //Instruction 15301
    //MUL
    t34 = t34 * t36;
    //Instruction 15302
    //MAD
    t4.xz = t22.xy * vec2(t34) + t3.xz;
    //Instruction 15303
    //MOV
    t4.y = t3.y;
    //Instruction 15304
    //DP3
    t22.x = dot(t4.xyz, t4.xyz);
    //Instruction 15305
    //RSQ
    t22.x = inversesqrt(t22.x);
    //Instruction 15306
    //MUL
    t4.xyz = t22.xxx * t4.xyz;
    //Instruction 15307
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 15308
    //MOVC
    t0.xyz = (bool(tb11)) ? t0.xzw : t3.xyz;
    //Instruction 15309
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 15310
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 15311
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 15312
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 15313
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 15314
    //MAD
    t3.xyz = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 15315
    //MAD
    t3.xyz = _Object2World[2].xyz * t0.zzz + t3.xyz;
    //Instruction 15316
    //MAD
    t3.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xyz;
    //Instruction 15317
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 15318
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 15319
    //MOV
    t2.zw = _World2Object[2].xx;
    //Instruction 15320
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 15321
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 15322
    //MOV
    t4.zw = _World2Object[2].yy;
    //Instruction 15323
    //MUL
    t4 = t4 * in_NORMAL0.yyyy;
    //Instruction 15324
    //MAD
    t2 = t2 * in_NORMAL0.xxxx + t4;
    //Instruction 15325
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 15326
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 15327
    //MOV
    t4.zw = _World2Object[2].zz;
    //Instruction 15328
    //MAD
    t2 = t4 * in_NORMAL0.zzzz + t2;
    //Instruction 15329
    //DP3
    t33 = dot(t2.xyw, t2.xyw);
    //Instruction 15330
    //RSQ
    t33 = inversesqrt(t33);
    //Instruction 15331
    //MUL
    t2 = vec4(t33) * t2;
    //Instruction 15332
    //MUL
    t4.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 15333
    //MAD
    t4.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t4.xyz;
    //Instruction 15334
    //MAD
    t4.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t4.xyz;
    //Instruction 15335
    //DP3
    t33 = dot(t4.xyz, t4.xyz);
    //Instruction 15336
    //RSQ
    t33 = inversesqrt(t33);
    //Instruction 15337
    //MUL
    t4.xyz = vec3(t33) * t4.xyz;
    //Instruction 15338
    //MUL
    t10_7.xyz = t2.wxy * t4.xyz;
    //Instruction 15339
    //MAD
    t10_7.xyz = t2.ywx * t4.yzx + (-t10_7.xyz);
    //Instruction 15340
    //MUL
    t5.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 15341
    //MUL
    t16_6 = t2.ywzx * t2;
    //Instruction 15342
    //DP4
    t16_8.x = dot(unity_SHBr, t16_6);
    //Instruction 15343
    //DP4
    t16_8.y = dot(unity_SHBg, t16_6);
    //Instruction 15344
    //DP4
    t16_8.z = dot(unity_SHBb, t16_6);
    //Instruction 15345
    //MUL
    t16_41 = t2.y * t2.y;
    //Instruction 15346
    //MAD
    t16_41 = t2.x * t2.x + (-t16_41);
    //Instruction 15347
    //MAD
    t16_8.xyz = unity_SHC.xyz * vec3(t16_41) + t16_8.xyz;
    //Instruction 15348
    //ADD
    t6 = (-t3.xxxx) + unity_4LightPosX0;
    //Instruction 15349
    //ADD
    t7 = (-t3.yyyy) + unity_4LightPosY0;
    //Instruction 15350
    //ADD
    t9 = (-t3.zzzz) + unity_4LightPosZ0;
    //Instruction 15351
    //MUL
    t10 = t7 * t7;
    //Instruction 15352
    //MAD
    t10 = t6 * t6 + t10;
    //Instruction 15353
    //MAD
    t10 = t9 * t9 + t10;
    //Instruction 15354
    //MUL
    t7 = t2.yyyy * t7;
    //Instruction 15355
    //MAD
    t6 = t6 * t2.xxxx + t7;
    //Instruction 15356
    //MAD
    t6 = t9 * t2.wwww + t6;
    //Instruction 15357
    //RSQ
    t7 = inversesqrt(t10);
    //Instruction 15358
    //MUL
    t6 = t6 * t7;
    //Instruction 15359
    //MAX
    t6 = max(t6, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 15360
    //MAD
    t7 = t10 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 15361
    //DIV
    t7 = vec4(1.0, 1.0, 1.0, 1.0) / t7;
    //Instruction 15362
    //MUL
    t6 = t6 * t7;
    //Instruction 15363
    //MUL
    t9.xyz = t6.yyy * unity_LightColor[1].xyz;
    //Instruction 15364
    //MAD
    t9.xyz = unity_LightColor[0].xyz * t6.xxx + t9.xyz;
    //Instruction 15365
    //MAD
    t9.xyz = unity_LightColor[2].xyz * t6.zzz + t9.xyz;
    //Instruction 15366
    //MAD
    t9.xyz = unity_LightColor[3].xyz * t6.www + t9.xyz;
    //Instruction 15367
    //ADD
    t9.xyz = t16_8.xyz + t9.xyz;
    //Instruction 15368
    //MUL
    t6 = t0.yyyy * _Object2World[1];
    //Instruction 15369
    //MAD
    t6 = _Object2World[0] * t0.xxxx + t6;
    //Instruction 15370
    //MAD
    t0 = _Object2World[2] * t0.zzzz + t6;
    //Instruction 15371
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 15372
    //MUL
    t6 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 15373
    //MAD
    t6 = unity_World2Shadow[0][0] * t0.xxxx + t6;
    //Instruction 15374
    //MAD
    t6 = unity_World2Shadow[0][2] * t0.zzzz + t6;
    //Instruction 15375
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t6;
    //Instruction 15376
    //MOV
    vs_TEXCOORD0.x = t4.z;
    //Instruction 15377
    //MOV
    vs_TEXCOORD0.y = t5.x;
    //Instruction 15378
    //MOV
    vs_TEXCOORD0.z = t2.x;
    //Instruction 15379
    //MOV
    vs_TEXCOORD0.w = t3.x;
    //Instruction 15380
    //MOV
    vs_TEXCOORD1.x = t4.x;
    //Instruction 15381
    //MOV
    vs_TEXCOORD1.y = t5.y;
    //Instruction 15382
    //MOV
    vs_TEXCOORD1.z = t2.y;
    //Instruction 15383
    //MOV
    vs_TEXCOORD1.w = t3.y;
    //Instruction 15384
    //MOV
    vs_TEXCOORD2.x = t4.y;
    //Instruction 15385
    //MOV
    vs_TEXCOORD2.y = t5.z;
    //Instruction 15386
    //MOV
    vs_TEXCOORD2.z = t2.w;
    //Instruction 15387
    //MOV
    vs_TEXCOORD2.w = t3.z;
    //Instruction 15388
    //MOV
    vs_TEXCOORD3.w = _Color.w;
    //Instruction 15389
    //MOV
    vs_TEXCOORD6 = t0;
    //Instruction 15390
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 15391
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 15392
    //MOV
    vs_TEXCOORD5.xyz = t9.xyz;
    //Instruction 15393
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec4 t0;
mediump float t16_0;
lowp vec3 t10_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
lowp vec3 t10_3;
mediump vec3 t16_4;
mediump float t16_16;
void main()
{
    //Instruction 15126
    //SAMPLE
    t10_0.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 15127
    //ADD
    t16_1.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 15128
    //MAD
    t16_1.xyz = vs_TEXCOORD4.zzz * t16_1.xyz + t10_0.xyz;
    //Instruction 15129
    //MAX
    t16_16 = max(t16_1.z, t16_1.y);
    //Instruction 15130
    //MAX
    t16_16 = max(t16_16, t16_1.x);
    //Instruction 15131
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 15132
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 15133
    //DIV
    t16_16 = t16_2.x / t16_16;
    //Instruction 15134
    //MAD
    t16_0 = t16_16 * 0.500000 + 0.500000;
    //Instruction 15135
    //MUL
    t16_1.xyz = vec3(t16_0) * t16_1.xyz;
    t16_1.xyz = clamp(t16_1.xyz, 0.0, 1.0);
    //Instruction 15136
    //MUL
    t16_1.xyz = t16_1.xyz * vs_TEXCOORD3.xyz;
    //Instruction 15137
    //SAMPLE_C_LZ
    vec3 txVec38 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_16 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec38, 0.0);
    //Instruction 15138
    //ADD
    t16_2.x = (-_LightShadowData.x) + 1.0;
    //Instruction 15139
    //MAD
    t16_16 = t16_16 * t16_2.x + _LightShadowData.x;
    //Instruction 15140
    //MUL
    t16_2.xyz = vec3(t16_16) * _LightColor0.xyz;
    //Instruction 15141
    //MUL
    t16_2.xyz = t16_1.xyz * t16_2.xyz;
    //Instruction 15142
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 15143
    //MAD
    t10_3.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 15144
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_3.xyz);
    //Instruction 15145
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_3.xyz);
    //Instruction 15146
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_3.xyz);
    //Instruction 15147
    //MOV
    t0.w = 1.0;
    //Instruction 15148
    //DP4
    t16_4.x = dot(unity_SHAr, t0);
    //Instruction 15149
    //DP4
    t16_4.y = dot(unity_SHAg, t0);
    //Instruction 15150
    //DP4
    t16_4.z = dot(unity_SHAb, t0);
    //Instruction 15151
    //DP3
    t16_16 = dot(t0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 15152
    //MAX
    t16_16 = max(t16_16, 0.0);
    //Instruction 15153
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD5.xyz;
    //Instruction 15154
    //MUL
    t16_1.xyz = t16_1.xyz * t16_4.xyz;
    //Instruction 15155
    //MAD
    t16_1.xyz = t16_2.xyz * vec3(t16_16) + t16_1.xyz;
    //Instruction 15156
    //MOV
    SV_Target0.xyz = t16_1.xyz;
    //Instruction 15157
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 15158
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp vec3 tmpvar_9;
  tmpvar_9.xy = _glesMultiTexCoord2.zw;
  tmpvar_9.z = _glesMultiTexCoord1.w;
  tmpvar_8 = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_11;
  highp vec3 vRotatedWindVector_12;
  highp vec3 FinalPosition_13;
  FinalPosition_13 = tmpvar_1.xyz;
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  mediump float tmpvar_15;
  tmpvar_15 = (_WindQuality * _WindEnabled);
  if ((tmpvar_15 > 0.0)) {
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedWindVector_12 = normalize((tmpvar_16 * _ST_WindVector.xyz));
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_11 = (normalize((tmpvar_17 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_13 = tmpvar_18;
  if ((tmpvar_15 >= 3.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_18;
    if ((tmpvar_15 == 5.0)) {
      highp vec3 vPos_20;
      vPos_20 = tmpvar_18;
      highp float fTime_21;
      highp float fAdherenceScale_22;
      highp vec3 vWindVector_23;
      vWindVector_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_21 = (_ST_WindBranch.x + (tmpvar_14.x + tmpvar_14.y));
      highp vec4 vOscillations_24;
      highp float fOscillation_25;
      fOscillation_25 = 1.0;
      highp float fAmount_26;
      highp float fTarget_27;
      highp vec4 tmpvar_28;
      tmpvar_28.x = (fTime_21 + _glesMultiTexCoord0.w);
      tmpvar_28.y = ((fTime_21 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_28.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_21 + _glesMultiTexCoord0.w));
      tmpvar_28.w = ((fTime_21 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_29;
      tmpvar_29 = abs(((
        fract((tmpvar_28 + 0.5))
       * 2.0) - 1.0));
      vOscillations_24 = (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0);
      highp float tmpvar_30;
      tmpvar_30 = (vOscillations_24.y * vOscillations_24.z);
      fTarget_27 = 1.0;
      fAmount_26 = tmpvar_30;
      if ((tmpvar_30 < 0.0)) {
        fTarget_27 = -1.0;
        fAmount_26 = -(tmpvar_30);
      };
      fOscillation_25 = (((
        mix (mix (tmpvar_30, fTarget_27, fAmount_26), fTarget_27, fAmount_26)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_24.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_25 = (fOscillation_25 * (1.0 + (vOscillations_24.w * _ST_WindBranchWhip.x)));
      vPos_20 = (tmpvar_18 + ((vWindVector_23 * fOscillation_25) * _ST_WindBranch.y));
      highp vec4 tmpvar_31;
      tmpvar_31.zw = vec2(0.0, 0.0);
      tmpvar_31.x = ((fTime_21 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_31.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_32;
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      tmpvar_32 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((tmpvar_32.x * tmpvar_32.y) * (
        (tmpvar_32.x * tmpvar_32.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_24.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_20 = (vPos_20 + ((
        ((vRotatedBranchAnchor_11 - vPos_20) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_19 = vPos_20;
    } else {
      highp vec3 vPos_34;
      vPos_34 = vPos_19;
      highp float fTime_35;
      highp vec3 vWindVector_36;
      vWindVector_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_35 = (_ST_WindBranch.x + (tmpvar_14.x + tmpvar_14.y));
      highp vec4 vOscillations_37;
      highp float fOscillation_38;
      fOscillation_38 = 1.0;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (fTime_35 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((fTime_35 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_35 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_37 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_37.y * vOscillations_37.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      fOscillation_38 = (((
        mix (mix (tmpvar_43, fTarget_40, fAmount_39), fTarget_40, fAmount_39)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_37.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_34 = (vPos_19 + ((vWindVector_36 * fOscillation_38) * _ST_WindBranch.y));
      vPos_19 = vPos_34;
    };
    FinalPosition_13 = vPos_19;
  };
  if ((tmpvar_15 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = FinalPosition_13;
    highp float fMoveAmount_45;
    highp float fAdjust_46;
    highp float fLength_47;
    fLength_47 = sqrt(dot (FinalPosition_13, FinalPosition_13));
    highp float tmpvar_48;
    tmpvar_48 = (max ((FinalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_46 = tmpvar_48;
    if ((tmpvar_48 != 0.0)) {
      fAdjust_46 = pow (tmpvar_48, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_49;
    tmpvar_49.zw = vec2(0.0, 0.0);
    tmpvar_49.x = (tmpvar_14.x + _ST_WindGlobal.x);
    tmpvar_49.y = (tmpvar_14.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_50;
    highp vec4 tmpvar_51;
    tmpvar_51 = abs(((
      fract((tmpvar_49 + 0.5))
     * 2.0) - 1.0));
    tmpvar_50 = (((
      (tmpvar_51 * tmpvar_51)
     * 
      (3.0 - (2.0 * tmpvar_51))
    ) - 0.5) * 2.0);
    fMoveAmount_45 = ((_ST_WindGlobal.y * (tmpvar_50.x + 
      (tmpvar_50.y * tmpvar_50.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_45 = (fMoveAmount_45 * fAdjust_46);
    vPos_44.xz = (FinalPosition_13.xz + (vRotatedWindVector_12.xz * fMoveAmount_45));
    vPos_44 = (normalize(vPos_44) * fLength_47);
    FinalPosition_13 = vPos_44;
  };
  tmpvar_10.xyz = FinalPosition_13;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_52;
  v_52.x = _World2Object[0].x;
  v_52.y = _World2Object[1].x;
  v_52.z = _World2Object[2].x;
  v_52.w = _World2Object[3].x;
  highp vec4 v_53;
  v_53.x = _World2Object[0].y;
  v_53.y = _World2Object[1].y;
  v_53.z = _World2Object[2].y;
  v_53.w = _World2Object[3].y;
  highp vec4 v_54;
  v_54.x = _World2Object[0].z;
  v_54.y = _World2Object[1].z;
  v_54.z = _World2Object[2].z;
  v_54.w = _World2Object[3].z;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(((
    (v_52.xyz * _glesNormal.x)
   + 
    (v_53.xyz * _glesNormal.y)
  ) + (v_54.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_55;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_56;
  tmpvar_56.w = 1.0;
  tmpvar_56.xyz = worldNormal_3;
  mediump vec4 normal_57;
  normal_57 = tmpvar_56;
  mediump vec3 x2_58;
  mediump vec4 tmpvar_59;
  tmpvar_59 = (normal_57.xyzz * normal_57.yzzx);
  x2_58.x = dot (unity_SHBr, tmpvar_59);
  x2_58.y = dot (unity_SHBg, tmpvar_59);
  x2_58.z = dot (unity_SHBb, tmpvar_59);
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = (x2_58 + (unity_SHC.xyz * (
    (normal_57.x * normal_57.x)
   - 
    (normal_57.y * normal_57.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 blendColor_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_10 = tmpvar_13;
  diffuseColor_11.xyz = mix (blendColor_10.xyz, diffuseColor_11.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_14;
  normalWorld_14 = tmpvar_4;
  mediump vec3 tmpvar_15;
  mediump vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = normalWorld_14;
  mediump vec3 x1_17;
  x1_17.x = dot (unity_SHAr, tmpvar_16);
  x1_17.y = dot (unity_SHAg, tmpvar_16);
  x1_17.z = dot (unity_SHAb, tmpvar_16);
  tmpvar_15 = (xlv_TEXCOORD5 + x1_17);
  lowp vec4 c_18;
  lowp vec4 c_19;
  lowp float diff_20;
  mediump float tmpvar_21;
  tmpvar_21 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_20 = tmpvar_21;
  c_19.xyz = ((tmpvar_8 * tmpvar_1) * diff_20);
  c_19.w = tmpvar_9;
  c_18.w = c_19.w;
  c_18.xyz = (c_19.xyz + (tmpvar_8 * tmpvar_15));
  c_3.xyz = c_18.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
mediump vec3 t16_6;
highp vec3 t8;
highp float t10;
highp float t15;
highp vec2 t17;
highp vec2 t19;
highp float t22;
bool tb22;
highp float t23;
bool tb23;
highp float t24;
highp float t25;
mediump float t16_27;
void main()
{
    //Instruction 14564
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 14565
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 14566
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 14567
    //MUL
    t8.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 14568
    //MAD
    t8.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t8.xyz;
    //Instruction 14569
    //MAD
    t8.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t8.xyz;
    //Instruction 14570
    //DP3
    t15 = dot(t8.xyz, t8.xyz);
    //Instruction 14571
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 14572
    //MUL
    t8.xy = vec2(t15) * t8.xz;
    //Instruction 14573
    //AND
    t8.xy = mix(vec2(0.0, 0.0), t8.xy, bvec2(tb1));
    //Instruction 14574
    //ADD
    t2.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 14575
    //MAD
    t2.xyz = unity_LODFade.xxx * t2.xyz + in_POSITION0.xyz;
    //Instruction 14576
    //GE
    tb22 = t16_0.x>=3.000000;
    //Instruction 14577
    //IF
    if(tb22){
        //Instruction 14578
        //EQ
        tb22 = t16_0.x==5.000000;
        //Instruction 14579
        //IF
        if(tb22){
            //Instruction 14580
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 14581
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 14582
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 14583
            //DP3
            t22 = dot(t3.xyz, t3.xyz);
            //Instruction 14584
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 14585
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 14586
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 14587
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 14588
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 14589
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 14590
            //ADD
            t22 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 14591
            //ADD
            t22 = t22 + _ST_WindBranch.x;
            //Instruction 14592
            //ADD
            t0.x = t22 + in_TEXCOORD0.w;
            //Instruction 14593
            //MAD
            t0.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 14594
            //MUL
            t23 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 14595
            //MUL
            t0.z = t23 * 0.500000;
            //Instruction 14596
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 14597
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 14598
            //FRC
            t0 = fract(t0);
            //Instruction 14599
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 14600
            //MUL
            t5 = abs(t0) * abs(t0);
            //Instruction 14601
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 14602
            //MAD
            t0 = t5 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 14603
            //ADD
            t0 = t0 + t0;
            //Instruction 14604
            //MUL
            t5.w = t0.z * t0.y;
            //Instruction 14605
            //LT
            tb23 = t5.w<0.0;
            //Instruction 14606
            //MOV
            t5.y = (-t5.w);
            //Instruction 14607
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 14608
            //MOVC
            t5.xy = (bool(tb23)) ? t5.xy : t5.zw;
            //Instruction 14609
            //MAD
            t23 = (-t0.y) * t0.z + t5.x;
            //Instruction 14610
            //MAD
            t23 = t5.y * t23 + t5.w;
            //Instruction 14611
            //ADD
            t24 = (-t23) + t5.x;
            //Instruction 14612
            //MAD
            t23 = t5.y * t24 + t23;
            //Instruction 14613
            //MUL
            t23 = t23 * _ST_WindBranchTwitch.x;
            //Instruction 14614
            //ADD
            t24 = (-_ST_WindVector.w) + 1.0;
            //Instruction 14615
            //ADD
            t25 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 14616
            //MUL
            t25 = t0.x * t25;
            //Instruction 14617
            //MAD
            t23 = t23 * t24 + t25;
            //Instruction 14618
            //MAD
            t24 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 14619
            //MUL
            t23 = t23 * t24;
            //Instruction 14620
            //MUL
            t4.xyz = vec3(t23) * t4.xyz;
            //Instruction 14621
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 14622
            //MAD
            t5.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 14623
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 14624
            //MAD
            t5.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 14625
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 14626
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 14627
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 14628
            //MUL
            t19.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 14629
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 14630
            //MAD
            t5.xy = t19.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 14631
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 14632
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 14633
            //MUL
            t22 = t5.x * t5.y;
            //Instruction 14634
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 14635
            //MUL
            t23 = t0.w * _ST_WindVector.w;
            //Instruction 14636
            //MAD
            t22 = t23 * _ST_WindBranchWhip.x + t22;
            //Instruction 14637
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 14638
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 14639
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 14640
            //MAD
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 14641
        //ELSE
        } else {
            //Instruction 14642
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 14643
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 14644
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 14645
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 14646
            //ADD
            t22 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 14647
            //ADD
            t22 = t22 + _ST_WindBranch.x;
            //Instruction 14648
            //ADD
            t4.x = t22 + in_TEXCOORD0.w;
            //Instruction 14649
            //MAD
            t4.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 14650
            //MUL
            t22 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 14651
            //MUL
            t4.z = t22 * 0.500000;
            //Instruction 14652
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 14653
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 14654
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 14655
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 14656
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 14657
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 14658
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 14659
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 14660
            //LT
            tb22 = t0.w<0.0;
            //Instruction 14661
            //MOV
            t0.y = (-t0.w);
            //Instruction 14662
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 14663
            //MOVC
            t5.xy = (bool(tb22)) ? t0.xy : t0.zw;
            //Instruction 14664
            //MAD
            t22 = (-t4.y) * t4.z + t5.x;
            //Instruction 14665
            //MAD
            t22 = t5.y * t22 + t0.w;
            //Instruction 14666
            //ADD
            t23 = (-t22) + t5.x;
            //Instruction 14667
            //MAD
            t22 = t5.y * t23 + t22;
            //Instruction 14668
            //MUL
            t22 = t22 * _ST_WindBranchTwitch.x;
            //Instruction 14669
            //ADD
            t23 = (-_ST_WindVector.w) + 1.0;
            //Instruction 14670
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 14671
            //MUL
            t24 = t24 * t4.x;
            //Instruction 14672
            //MAD
            t22 = t22 * t23 + t24;
            //Instruction 14673
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 14674
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 14675
        //ENDIF
        }
        //Instruction 14676
    //ENDIF
    }
    //Instruction 14677
    //DP3
    t22 = dot(t2.xyz, t2.xyz);
    //Instruction 14678
    //SQRT
    t22 = sqrt(t22);
    //Instruction 14679
    //DIV
    t23 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 14680
    //MAD
    t23 = (-t23) * 0.250000 + t2.y;
    //Instruction 14681
    //MAX
    t23 = max(t23, 0.0);
    //Instruction 14682
    //MUL
    t23 = t23 * _ST_WindGlobal.z;
    //Instruction 14683
    //NE
    tb3 = t23!=0.0;
    //Instruction 14684
    //LOG
    t10 = log2(t23);
    //Instruction 14685
    //MUL
    t10 = t10 * _ST_WindGlobal.w;
    //Instruction 14686
    //EXP
    t10 = exp2(t10);
    //Instruction 14687
    //MOVC
    t23 = (tb3) ? t10 : t23;
    //Instruction 14688
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 14689
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 14690
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 14691
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 14692
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 14693
    //MUL
    t17.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 14694
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 14695
    //MAD
    t3.xy = t17.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 14696
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 14697
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 14698
    //DIV
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 14699
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t10;
    //Instruction 14700
    //MUL
    t23 = t23 * t3.x;
    //Instruction 14701
    //MAD
    t3.xz = t8.xy * vec2(t23) + t2.xz;
    //Instruction 14702
    //MOV
    t3.y = t2.y;
    //Instruction 14703
    //DP3
    t8.x = dot(t3.xyz, t3.xyz);
    //Instruction 14704
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 14705
    //MUL
    t3.xyz = t8.xxx * t3.xyz;
    //Instruction 14706
    //MUL
    t8.xyz = vec3(t22) * t3.xyz;
    //Instruction 14707
    //MOVC
    t1.xyz = (bool(tb1)) ? t8.xyz : t2.xyz;
    //Instruction 14708
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 14709
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 14710
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 14711
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 14712
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 14713
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 14714
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 14715
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 14716
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 14717
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 14718
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 14719
    //MOV
    t2.x = _World2Object[0].y;
    //Instruction 14720
    //MOV
    t2.y = _World2Object[1].y;
    //Instruction 14721
    //MOV
    t2.z = _World2Object[2].y;
    //Instruction 14722
    //MUL
    t2.xyz = t2.xyz * in_NORMAL0.yyy;
    //Instruction 14723
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t2.xyz;
    //Instruction 14724
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 14725
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 14726
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 14727
    //MAD
    t1.xyz = t2.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 14728
    //DP3
    t22 = dot(t1.xyz, t1.xyz);
    //Instruction 14729
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 14730
    //MUL
    t1.xyz = vec3(t22) * t1.xyz;
    //Instruction 14731
    //MUL
    t16_0 = t1.yzzx * t1.xyzz;
    //Instruction 14732
    //DP4
    t16_6.x = dot(unity_SHBr, t16_0);
    //Instruction 14733
    //DP4
    t16_6.y = dot(unity_SHBg, t16_0);
    //Instruction 14734
    //DP4
    t16_6.z = dot(unity_SHBb, t16_0);
    //Instruction 14735
    //MUL
    t16_27 = t1.y * t1.y;
    //Instruction 14736
    //MAD
    t16_27 = t1.x * t1.x + (-t16_27);
    //Instruction 14737
    //MAD
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(t16_27) + t16_6.xyz;
    //Instruction 14738
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 14739
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 14740
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 14741
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 14742
    //MOV
    t1.xy = in_TEXCOORD2.zw;
    //Instruction 14743
    //MOV
    t1.z = in_TEXCOORD1.w;
    //Instruction 14744
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 14745
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
mediump vec3 t16_1;
lowp vec3 t10_2;
lowp vec3 t10_3;
mediump float t16_12;
void main()
{
    //Instruction 14544
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 14545
    //MOV
    t16_0.w = 1.0;
    //Instruction 14546
    //DP4
    t16_1.x = dot(unity_SHAr, t16_0);
    //Instruction 14547
    //DP4
    t16_1.y = dot(unity_SHAg, t16_0);
    //Instruction 14548
    //DP4
    t16_1.z = dot(unity_SHAb, t16_0);
    //Instruction 14549
    //ADD
    t16_0.xyz = t16_1.xyz + vs_TEXCOORD5.xyz;
    //Instruction 14550
    //MOV
    t16_12 = vs_TEXCOORD4.z;
    t16_12 = clamp(t16_12, 0.0, 1.0);
    //Instruction 14551
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 14552
    //SAMPLE
    t10_3.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 14553
    //ADD
    t16_1.xyz = t10_2.xyz + (-t10_3.xyz);
    //Instruction 14554
    //MAD
    t16_1.xyz = vec3(t16_12) * t16_1.xyz + t10_3.xyz;
    //Instruction 14555
    //MUL
    t16_1.xyz = t16_1.xyz * vs_TEXCOORD2.xyz;
    //Instruction 14556
    //MUL
    t16_0.xyz = t16_0.xyz * t16_1.xyz;
    //Instruction 14557
    //MUL
    t16_1.xyz = t16_1.xyz * _LightColor0.xyz;
    //Instruction 14558
    //DP3
    t16_12 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 14559
    //MAX
    t16_12 = max(t16_12, 0.0);
    //Instruction 14560
    //MAD
    t16_0.xyz = t16_1.xyz * vec3(t16_12) + t16_0.xyz;
    //Instruction 14561
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 14562
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 14563
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec3 tmpvar_10;
  tmpvar_10.xy = _glesMultiTexCoord2.zw;
  tmpvar_10.z = _glesMultiTexCoord1.w;
  tmpvar_9 = tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  FinalPosition_14 = tmpvar_1.xyz;
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_14 = tmpvar_19;
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_19;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_19;
      highp float fTime_22;
      highp float fAdherenceScale_23;
      highp vec3 vWindVector_24;
      vWindVector_24 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_22 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (fTime_22 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((fTime_22 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_22 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((fTime_22 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_25.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_26 = (fOscillation_26 * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (tmpvar_19 + ((vWindVector_24 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((fTime_22 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_23 = (1.0 - ((tmpvar_33.x * tmpvar_33.y) * (
        (tmpvar_33.x * tmpvar_33.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_23 = (fAdherenceScale_23 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_12 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_23) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp float fTime_36;
      highp vec3 vWindVector_37;
      vWindVector_37 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_36 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_38;
      highp float fOscillation_39;
      fOscillation_39 = 1.0;
      highp float fAmount_40;
      highp float fTarget_41;
      highp vec4 tmpvar_42;
      tmpvar_42.w = 0.0;
      tmpvar_42.x = (fTime_36 + _glesMultiTexCoord0.w);
      tmpvar_42.y = ((fTime_36 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_42.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_36 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_41 = 1.0;
      fAmount_40 = tmpvar_44;
      if ((tmpvar_44 < 0.0)) {
        fTarget_41 = -1.0;
        fAmount_40 = -(tmpvar_44);
      };
      fOscillation_39 = (((
        mix (mix (tmpvar_44, fTarget_41, fAmount_40), fTarget_41, fAmount_40)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_35 = (vPos_20 + ((vWindVector_37 * fOscillation_39) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_14 = vPos_20;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_45;
    vPos_45 = FinalPosition_14;
    highp float fMoveAmount_46;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_15.x + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_15.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    fMoveAmount_46 = ((_ST_WindGlobal.y * (tmpvar_51.x + 
      (tmpvar_51.y * tmpvar_51.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_46 = (fMoveAmount_46 * fAdjust_47);
    vPos_45.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * fMoveAmount_46));
    vPos_45 = (normalize(vPos_45) * fLength_48);
    FinalPosition_14 = vPos_45;
  };
  tmpvar_11.xyz = FinalPosition_14;
  tmpvar_5 = tmpvar_7;
  highp vec4 v_53;
  v_53.x = _World2Object[0].x;
  v_53.y = _World2Object[1].x;
  v_53.z = _World2Object[2].x;
  v_53.w = _World2Object[3].x;
  highp vec4 v_54;
  v_54.x = _World2Object[0].y;
  v_54.y = _World2Object[1].y;
  v_54.z = _World2Object[2].y;
  v_54.w = _World2Object[3].y;
  highp vec4 v_55;
  v_55.x = _World2Object[0].z;
  v_55.y = _World2Object[1].z;
  v_55.z = _World2Object[2].z;
  v_55.w = _World2Object[3].z;
  highp vec3 tmpvar_56;
  tmpvar_56 = normalize(((
    (v_53.xyz * _glesNormal.x)
   + 
    (v_54.xyz * _glesNormal.y)
  ) + (v_55.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_56;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_57;
  tmpvar_57.w = 1.0;
  tmpvar_57.xyz = worldNormal_3;
  mediump vec4 normal_58;
  normal_58 = tmpvar_57;
  mediump vec3 x2_59;
  mediump vec4 tmpvar_60;
  tmpvar_60 = (normal_58.xyzz * normal_58.yzzx);
  x2_59.x = dot (unity_SHBr, tmpvar_60);
  x2_59.y = dot (unity_SHBg, tmpvar_60);
  x2_59.z = dot (unity_SHBb, tmpvar_60);
  tmpvar_6 = (unity_World2Shadow[0] * (_Object2World * tmpvar_11));
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = (x2_59 + (unity_SHC.xyz * (
    (normal_58.x * normal_58.x)
   - 
    (normal_58.y * normal_58.y)
  )));
  xlv_TEXCOORD6 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 blendColor_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_11 = tmpvar_14;
  diffuseColor_12.xyz = mix (blendColor_11.xyz, diffuseColor_12.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp float tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_15 = tmpvar_16;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_15;
  mediump vec3 normalWorld_17;
  normalWorld_17 = tmpvar_5;
  mediump vec3 tmpvar_18;
  mediump vec3 tmpvar_19;
  mediump vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = normalWorld_17;
  mediump vec3 x1_21;
  x1_21.x = dot (unity_SHAr, tmpvar_20);
  x1_21.y = dot (unity_SHAg, tmpvar_20);
  x1_21.z = dot (unity_SHAb, tmpvar_20);
  tmpvar_19 = (xlv_TEXCOORD5 + x1_21);
  tmpvar_18 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_18;
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_24 = tmpvar_25;
  c_23.xyz = ((tmpvar_9 * tmpvar_18) * diff_24);
  c_23.w = tmpvar_10;
  c_22.w = c_23.w;
  c_22.xyz = (c_23.xyz + (tmpvar_9 * tmpvar_19));
  c_4.xyz = c_22.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec3 tmpvar_10;
  tmpvar_10.xy = _glesMultiTexCoord2.zw;
  tmpvar_10.z = _glesMultiTexCoord1.w;
  tmpvar_9 = tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  FinalPosition_14 = tmpvar_1.xyz;
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_14 = tmpvar_19;
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_19;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_19;
      highp float fTime_22;
      highp float fAdherenceScale_23;
      highp vec3 vWindVector_24;
      vWindVector_24 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_22 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (fTime_22 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((fTime_22 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_22 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((fTime_22 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_25.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_26 = (fOscillation_26 * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (tmpvar_19 + ((vWindVector_24 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((fTime_22 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_23 = (1.0 - ((tmpvar_33.x * tmpvar_33.y) * (
        (tmpvar_33.x * tmpvar_33.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_23 = (fAdherenceScale_23 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_12 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_23) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp float fTime_36;
      highp vec3 vWindVector_37;
      vWindVector_37 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_36 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_38;
      highp float fOscillation_39;
      fOscillation_39 = 1.0;
      highp float fAmount_40;
      highp float fTarget_41;
      highp vec4 tmpvar_42;
      tmpvar_42.w = 0.0;
      tmpvar_42.x = (fTime_36 + _glesMultiTexCoord0.w);
      tmpvar_42.y = ((fTime_36 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_42.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_36 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_41 = 1.0;
      fAmount_40 = tmpvar_44;
      if ((tmpvar_44 < 0.0)) {
        fTarget_41 = -1.0;
        fAmount_40 = -(tmpvar_44);
      };
      fOscillation_39 = (((
        mix (mix (tmpvar_44, fTarget_41, fAmount_40), fTarget_41, fAmount_40)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_35 = (vPos_20 + ((vWindVector_37 * fOscillation_39) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_14 = vPos_20;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_45;
    vPos_45 = FinalPosition_14;
    highp float fMoveAmount_46;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_15.x + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_15.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    fMoveAmount_46 = ((_ST_WindGlobal.y * (tmpvar_51.x + 
      (tmpvar_51.y * tmpvar_51.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_46 = (fMoveAmount_46 * fAdjust_47);
    vPos_45.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * fMoveAmount_46));
    vPos_45 = (normalize(vPos_45) * fLength_48);
    FinalPosition_14 = vPos_45;
  };
  tmpvar_11.xyz = FinalPosition_14;
  tmpvar_5 = tmpvar_7;
  highp vec3 tmpvar_53;
  tmpvar_53 = (_Object2World * tmpvar_11).xyz;
  highp vec4 v_54;
  v_54.x = _World2Object[0].x;
  v_54.y = _World2Object[1].x;
  v_54.z = _World2Object[2].x;
  v_54.w = _World2Object[3].x;
  highp vec4 v_55;
  v_55.x = _World2Object[0].y;
  v_55.y = _World2Object[1].y;
  v_55.z = _World2Object[2].y;
  v_55.w = _World2Object[3].y;
  highp vec4 v_56;
  v_56.x = _World2Object[0].z;
  v_56.y = _World2Object[1].z;
  v_56.z = _World2Object[2].z;
  v_56.w = _World2Object[3].z;
  highp vec3 tmpvar_57;
  tmpvar_57 = normalize(((
    (v_54.xyz * _glesNormal.x)
   + 
    (v_55.xyz * _glesNormal.y)
  ) + (v_56.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_57;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_58;
  tmpvar_58.w = 1.0;
  tmpvar_58.xyz = worldNormal_3;
  mediump vec4 normal_59;
  normal_59 = tmpvar_58;
  mediump vec3 x2_60;
  mediump vec4 tmpvar_61;
  tmpvar_61 = (normal_59.xyzz * normal_59.yzzx);
  x2_60.x = dot (unity_SHBr, tmpvar_61);
  x2_60.y = dot (unity_SHBg, tmpvar_61);
  x2_60.z = dot (unity_SHBb, tmpvar_61);
  highp vec3 lightColor0_62;
  lightColor0_62 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_63;
  lightColor1_63 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_64;
  lightColor2_64 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_65;
  lightColor3_65 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_66;
  lightAttenSq_66 = unity_4LightAtten0;
  highp vec3 normal_67;
  normal_67 = worldNormal_3;
  highp vec3 col_68;
  highp vec4 ndotl_69;
  highp vec4 lengthSq_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = (unity_4LightPosX0 - tmpvar_53.x);
  highp vec4 tmpvar_72;
  tmpvar_72 = (unity_4LightPosY0 - tmpvar_53.y);
  highp vec4 tmpvar_73;
  tmpvar_73 = (unity_4LightPosZ0 - tmpvar_53.z);
  lengthSq_70 = (tmpvar_71 * tmpvar_71);
  lengthSq_70 = (lengthSq_70 + (tmpvar_72 * tmpvar_72));
  lengthSq_70 = (lengthSq_70 + (tmpvar_73 * tmpvar_73));
  ndotl_69 = (tmpvar_71 * normal_67.x);
  ndotl_69 = (ndotl_69 + (tmpvar_72 * normal_67.y));
  ndotl_69 = (ndotl_69 + (tmpvar_73 * normal_67.z));
  highp vec4 tmpvar_74;
  tmpvar_74 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_69 * inversesqrt(lengthSq_70)));
  ndotl_69 = tmpvar_74;
  highp vec4 tmpvar_75;
  tmpvar_75 = (tmpvar_74 * (1.0/((1.0 + 
    (lengthSq_70 * lightAttenSq_66)
  ))));
  col_68 = (lightColor0_62 * tmpvar_75.x);
  col_68 = (col_68 + (lightColor1_63 * tmpvar_75.y));
  col_68 = (col_68 + (lightColor2_64 * tmpvar_75.z));
  col_68 = (col_68 + (lightColor3_65 * tmpvar_75.w));
  tmpvar_6 = ((x2_60 + (unity_SHC.xyz * 
    ((normal_59.x * normal_59.x) - (normal_59.y * normal_59.y))
  )) + col_68);
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_53;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 blendColor_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_10 = tmpvar_13;
  diffuseColor_11.xyz = mix (blendColor_10.xyz, diffuseColor_11.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_14;
  normalWorld_14 = tmpvar_4;
  mediump vec3 tmpvar_15;
  mediump vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = normalWorld_14;
  mediump vec3 x1_17;
  x1_17.x = dot (unity_SHAr, tmpvar_16);
  x1_17.y = dot (unity_SHAg, tmpvar_16);
  x1_17.z = dot (unity_SHAb, tmpvar_16);
  tmpvar_15 = (xlv_TEXCOORD5 + x1_17);
  lowp vec4 c_18;
  lowp vec4 c_19;
  lowp float diff_20;
  mediump float tmpvar_21;
  tmpvar_21 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_20 = tmpvar_21;
  c_19.xyz = ((tmpvar_8 * tmpvar_1) * diff_20);
  c_19.w = tmpvar_9;
  c_18.w = c_19.w;
  c_18.xyz = (c_19.xyz + (tmpvar_8 * tmpvar_15));
  c_3.xyz = c_18.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec4 t3;
bool tb3;
highp vec4 t4;
highp vec4 t5;
mediump vec3 t16_6;
highp vec3 t8;
highp float t10;
highp float t15;
highp vec2 t17;
highp vec2 t19;
highp float t22;
bool tb22;
highp float t23;
bool tb23;
highp float t24;
highp float t25;
mediump float t16_27;
void main()
{
    //Instruction 14766
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 14767
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 14768
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 14769
    //MUL
    t8.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 14770
    //MAD
    t8.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t8.xyz;
    //Instruction 14771
    //MAD
    t8.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t8.xyz;
    //Instruction 14772
    //DP3
    t15 = dot(t8.xyz, t8.xyz);
    //Instruction 14773
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 14774
    //MUL
    t8.xy = vec2(t15) * t8.xz;
    //Instruction 14775
    //AND
    t8.xy = mix(vec2(0.0, 0.0), t8.xy, bvec2(tb1));
    //Instruction 14776
    //ADD
    t2.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 14777
    //MAD
    t2.xyz = unity_LODFade.xxx * t2.xyz + in_POSITION0.xyz;
    //Instruction 14778
    //GE
    tb22 = t16_0.x>=3.000000;
    //Instruction 14779
    //IF
    if(tb22){
        //Instruction 14780
        //EQ
        tb22 = t16_0.x==5.000000;
        //Instruction 14781
        //IF
        if(tb22){
            //Instruction 14782
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 14783
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 14784
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 14785
            //DP3
            t22 = dot(t3.xyz, t3.xyz);
            //Instruction 14786
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 14787
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 14788
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 14789
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 14790
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 14791
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 14792
            //ADD
            t22 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 14793
            //ADD
            t22 = t22 + _ST_WindBranch.x;
            //Instruction 14794
            //ADD
            t0.x = t22 + in_TEXCOORD0.w;
            //Instruction 14795
            //MAD
            t0.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 14796
            //MUL
            t23 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 14797
            //MUL
            t0.z = t23 * 0.500000;
            //Instruction 14798
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 14799
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 14800
            //FRC
            t0 = fract(t0);
            //Instruction 14801
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 14802
            //MUL
            t5 = abs(t0) * abs(t0);
            //Instruction 14803
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 14804
            //MAD
            t0 = t5 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 14805
            //ADD
            t0 = t0 + t0;
            //Instruction 14806
            //MUL
            t5.w = t0.z * t0.y;
            //Instruction 14807
            //LT
            tb23 = t5.w<0.0;
            //Instruction 14808
            //MOV
            t5.y = (-t5.w);
            //Instruction 14809
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 14810
            //MOVC
            t5.xy = (bool(tb23)) ? t5.xy : t5.zw;
            //Instruction 14811
            //MAD
            t23 = (-t0.y) * t0.z + t5.x;
            //Instruction 14812
            //MAD
            t23 = t5.y * t23 + t5.w;
            //Instruction 14813
            //ADD
            t24 = (-t23) + t5.x;
            //Instruction 14814
            //MAD
            t23 = t5.y * t24 + t23;
            //Instruction 14815
            //MUL
            t23 = t23 * _ST_WindBranchTwitch.x;
            //Instruction 14816
            //ADD
            t24 = (-_ST_WindVector.w) + 1.0;
            //Instruction 14817
            //ADD
            t25 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 14818
            //MUL
            t25 = t0.x * t25;
            //Instruction 14819
            //MAD
            t23 = t23 * t24 + t25;
            //Instruction 14820
            //MAD
            t24 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 14821
            //MUL
            t23 = t23 * t24;
            //Instruction 14822
            //MUL
            t4.xyz = vec3(t23) * t4.xyz;
            //Instruction 14823
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 14824
            //MAD
            t5.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 14825
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 14826
            //MAD
            t5.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 14827
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 14828
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 14829
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 14830
            //MUL
            t19.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 14831
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 14832
            //MAD
            t5.xy = t19.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 14833
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 14834
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 14835
            //MUL
            t22 = t5.x * t5.y;
            //Instruction 14836
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 14837
            //MUL
            t23 = t0.w * _ST_WindVector.w;
            //Instruction 14838
            //MAD
            t22 = t23 * _ST_WindBranchWhip.x + t22;
            //Instruction 14839
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 14840
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 14841
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 14842
            //MAD
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 14843
        //ELSE
        } else {
            //Instruction 14844
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 14845
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 14846
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 14847
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 14848
            //ADD
            t22 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 14849
            //ADD
            t22 = t22 + _ST_WindBranch.x;
            //Instruction 14850
            //ADD
            t4.x = t22 + in_TEXCOORD0.w;
            //Instruction 14851
            //MAD
            t4.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 14852
            //MUL
            t22 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 14853
            //MUL
            t4.z = t22 * 0.500000;
            //Instruction 14854
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 14855
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 14856
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 14857
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 14858
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 14859
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 14860
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 14861
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 14862
            //LT
            tb22 = t0.w<0.0;
            //Instruction 14863
            //MOV
            t0.y = (-t0.w);
            //Instruction 14864
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 14865
            //MOVC
            t5.xy = (bool(tb22)) ? t0.xy : t0.zw;
            //Instruction 14866
            //MAD
            t22 = (-t4.y) * t4.z + t5.x;
            //Instruction 14867
            //MAD
            t22 = t5.y * t22 + t0.w;
            //Instruction 14868
            //ADD
            t23 = (-t22) + t5.x;
            //Instruction 14869
            //MAD
            t22 = t5.y * t23 + t22;
            //Instruction 14870
            //MUL
            t22 = t22 * _ST_WindBranchTwitch.x;
            //Instruction 14871
            //ADD
            t23 = (-_ST_WindVector.w) + 1.0;
            //Instruction 14872
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 14873
            //MUL
            t24 = t24 * t4.x;
            //Instruction 14874
            //MAD
            t22 = t22 * t23 + t24;
            //Instruction 14875
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 14876
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 14877
        //ENDIF
        }
        //Instruction 14878
    //ENDIF
    }
    //Instruction 14879
    //DP3
    t22 = dot(t2.xyz, t2.xyz);
    //Instruction 14880
    //SQRT
    t22 = sqrt(t22);
    //Instruction 14881
    //DIV
    t23 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 14882
    //MAD
    t23 = (-t23) * 0.250000 + t2.y;
    //Instruction 14883
    //MAX
    t23 = max(t23, 0.0);
    //Instruction 14884
    //MUL
    t23 = t23 * _ST_WindGlobal.z;
    //Instruction 14885
    //NE
    tb3 = t23!=0.0;
    //Instruction 14886
    //LOG
    t10 = log2(t23);
    //Instruction 14887
    //MUL
    t10 = t10 * _ST_WindGlobal.w;
    //Instruction 14888
    //EXP
    t10 = exp2(t10);
    //Instruction 14889
    //MOVC
    t23 = (tb3) ? t10 : t23;
    //Instruction 14890
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 14891
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 14892
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 14893
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 14894
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 14895
    //MUL
    t17.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 14896
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 14897
    //MAD
    t3.xy = t17.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 14898
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 14899
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 14900
    //DIV
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 14901
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t10;
    //Instruction 14902
    //MUL
    t23 = t23 * t3.x;
    //Instruction 14903
    //MAD
    t3.xz = t8.xy * vec2(t23) + t2.xz;
    //Instruction 14904
    //MOV
    t3.y = t2.y;
    //Instruction 14905
    //DP3
    t8.x = dot(t3.xyz, t3.xyz);
    //Instruction 14906
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 14907
    //MUL
    t3.xyz = t8.xxx * t3.xyz;
    //Instruction 14908
    //MUL
    t8.xyz = vec3(t22) * t3.xyz;
    //Instruction 14909
    //MOVC
    t1.xyz = (bool(tb1)) ? t8.xyz : t2.xyz;
    //Instruction 14910
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 14911
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 14912
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 14913
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 14914
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 14915
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 14916
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 14917
    //MAD
    t1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 14918
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 14919
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 14920
    //MOV
    t2.z = _World2Object[2].x;
    //Instruction 14921
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 14922
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 14923
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 14924
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 14925
    //MAD
    t2.xyz = t2.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 14926
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 14927
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 14928
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 14929
    //MAD
    t2.xyz = t3.xyz * in_NORMAL0.zzz + t2.xyz;
    //Instruction 14930
    //DP3
    t22 = dot(t2.xyz, t2.xyz);
    //Instruction 14931
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 14932
    //MUL
    t2.xyz = vec3(t22) * t2.xyz;
    //Instruction 14933
    //MUL
    t16_0 = t2.yzzx * t2.xyzz;
    //Instruction 14934
    //DP4
    t16_6.x = dot(unity_SHBr, t16_0);
    //Instruction 14935
    //DP4
    t16_6.y = dot(unity_SHBg, t16_0);
    //Instruction 14936
    //DP4
    t16_6.z = dot(unity_SHBb, t16_0);
    //Instruction 14937
    //MUL
    t16_27 = t2.y * t2.y;
    //Instruction 14938
    //MAD
    t16_27 = t2.x * t2.x + (-t16_27);
    //Instruction 14939
    //MAD
    t16_6.xyz = unity_SHC.xyz * vec3(t16_27) + t16_6.xyz;
    //Instruction 14940
    //ADD
    t0 = (-t1.xxxx) + unity_4LightPosX0;
    //Instruction 14941
    //ADD
    t3 = (-t1.yyyy) + unity_4LightPosY0;
    //Instruction 14942
    //ADD
    t4 = (-t1.zzzz) + unity_4LightPosZ0;
    //Instruction 14943
    //MUL
    t5 = t3 * t3;
    //Instruction 14944
    //MAD
    t5 = t0 * t0 + t5;
    //Instruction 14945
    //MAD
    t5 = t4 * t4 + t5;
    //Instruction 14946
    //MUL
    t3 = t2.yyyy * t3;
    //Instruction 14947
    //MAD
    t0 = t0 * t2.xxxx + t3;
    //Instruction 14948
    //MAD
    t0 = t4 * t2.zzzz + t0;
    //Instruction 14949
    //RSQ
    t3 = inversesqrt(t5);
    //Instruction 14950
    //MUL
    t0 = t0 * t3;
    //Instruction 14951
    //MAX
    t0 = max(t0, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 14952
    //MAD
    t3 = t5 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 14953
    //DIV
    t3 = vec4(1.0, 1.0, 1.0, 1.0) / t3;
    //Instruction 14954
    //MUL
    t0 = t0 * t3;
    //Instruction 14955
    //MUL
    t3.xyz = t0.yyy * unity_LightColor[1].xyz;
    //Instruction 14956
    //MAD
    t3.xyz = unity_LightColor[0].xyz * t0.xxx + t3.xyz;
    //Instruction 14957
    //MAD
    t3.xyz = unity_LightColor[2].xyz * t0.zzz + t3.xyz;
    //Instruction 14958
    //MAD
    t3.xyz = unity_LightColor[3].xyz * t0.www + t3.xyz;
    //Instruction 14959
    //ADD
    t3.xyz = t3.xyz + t16_6.xyz;
    //Instruction 14960
    //MOV
    vs_TEXCOORD0.xyz = t2.xyz;
    //Instruction 14961
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 14962
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 14963
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 14964
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 14965
    //MOV
    t1.xy = in_TEXCOORD2.zw;
    //Instruction 14966
    //MOV
    t1.z = in_TEXCOORD1.w;
    //Instruction 14967
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 14968
    //MOV
    vs_TEXCOORD5.xyz = t3.xyz;
    //Instruction 14969
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
mediump vec3 t16_1;
lowp vec3 t10_2;
lowp vec3 t10_3;
mediump float t16_12;
void main()
{
    //Instruction 14746
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 14747
    //MOV
    t16_0.w = 1.0;
    //Instruction 14748
    //DP4
    t16_1.x = dot(unity_SHAr, t16_0);
    //Instruction 14749
    //DP4
    t16_1.y = dot(unity_SHAg, t16_0);
    //Instruction 14750
    //DP4
    t16_1.z = dot(unity_SHAb, t16_0);
    //Instruction 14751
    //ADD
    t16_0.xyz = t16_1.xyz + vs_TEXCOORD5.xyz;
    //Instruction 14752
    //MOV
    t16_12 = vs_TEXCOORD4.z;
    t16_12 = clamp(t16_12, 0.0, 1.0);
    //Instruction 14753
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 14754
    //SAMPLE
    t10_3.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 14755
    //ADD
    t16_1.xyz = t10_2.xyz + (-t10_3.xyz);
    //Instruction 14756
    //MAD
    t16_1.xyz = vec3(t16_12) * t16_1.xyz + t10_3.xyz;
    //Instruction 14757
    //MUL
    t16_1.xyz = t16_1.xyz * vs_TEXCOORD2.xyz;
    //Instruction 14758
    //MUL
    t16_0.xyz = t16_0.xyz * t16_1.xyz;
    //Instruction 14759
    //MUL
    t16_1.xyz = t16_1.xyz * _LightColor0.xyz;
    //Instruction 14760
    //DP3
    t16_12 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 14761
    //MAX
    t16_12 = max(t16_12, 0.0);
    //Instruction 14762
    //MAD
    t16_0.xyz = t16_1.xyz * vec3(t16_12) + t16_0.xyz;
    //Instruction 14763
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 14764
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 14765
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_9.xy = tmpvar_2.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp vec3 tmpvar_11;
  tmpvar_11.xy = _glesMultiTexCoord2.zw;
  tmpvar_11.z = _glesMultiTexCoord1.w;
  tmpvar_10 = tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  FinalPosition_15 = tmpvar_1.xyz;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_20;
  tmpvar_20 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_15 = tmpvar_20;
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_20;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_22;
      vPos_22 = tmpvar_20;
      highp float fTime_23;
      highp float fAdherenceScale_24;
      highp vec3 vWindVector_25;
      vWindVector_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_23 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_26;
      highp float fOscillation_27;
      fOscillation_27 = 1.0;
      highp float fAmount_28;
      highp float fTarget_29;
      highp vec4 tmpvar_30;
      tmpvar_30.x = (fTime_23 + _glesMultiTexCoord0.w);
      tmpvar_30.y = ((fTime_23 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_30.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_23 + _glesMultiTexCoord0.w));
      tmpvar_30.w = ((fTime_23 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      vOscillations_26 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      highp float tmpvar_32;
      tmpvar_32 = (vOscillations_26.y * vOscillations_26.z);
      fTarget_29 = 1.0;
      fAmount_28 = tmpvar_32;
      if ((tmpvar_32 < 0.0)) {
        fTarget_29 = -1.0;
        fAmount_28 = -(tmpvar_32);
      };
      fOscillation_27 = (((
        mix (mix (tmpvar_32, fTarget_29, fAmount_28), fTarget_29, fAmount_28)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_26.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_27 = (fOscillation_27 * (1.0 + (vOscillations_26.w * _ST_WindBranchWhip.x)));
      vPos_22 = (tmpvar_20 + ((vWindVector_25 * fOscillation_27) * _ST_WindBranch.y));
      highp vec4 tmpvar_33;
      tmpvar_33.zw = vec2(0.0, 0.0);
      tmpvar_33.x = ((fTime_23 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_33.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_34;
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      tmpvar_34 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((tmpvar_34.x * tmpvar_34.y) * (
        (tmpvar_34.x * tmpvar_34.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_26.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_22 = (vPos_22 + ((
        ((vRotatedBranchAnchor_13 - vPos_22) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_21 = vPos_22;
    } else {
      highp vec3 vPos_36;
      vPos_36 = vPos_21;
      highp float fTime_37;
      highp vec3 vWindVector_38;
      vWindVector_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_37 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_39;
      highp float fOscillation_40;
      fOscillation_40 = 1.0;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (fTime_37 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((fTime_37 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_37 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_39 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_39.y * vOscillations_39.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      fOscillation_40 = (((
        mix (mix (tmpvar_45, fTarget_42, fAmount_41), fTarget_42, fAmount_41)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_39.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_36 = (vPos_21 + ((vWindVector_38 * fOscillation_40) * _ST_WindBranch.y));
      vPos_21 = vPos_36;
    };
    FinalPosition_15 = vPos_21;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_15;
    highp float fMoveAmount_47;
    highp float fAdjust_48;
    highp float fLength_49;
    fLength_49 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_50;
    tmpvar_50 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_48 = tmpvar_50;
    if ((tmpvar_50 != 0.0)) {
      fAdjust_48 = pow (tmpvar_50, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_51;
    tmpvar_51.zw = vec2(0.0, 0.0);
    tmpvar_51.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_51.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_52;
    highp vec4 tmpvar_53;
    tmpvar_53 = abs(((
      fract((tmpvar_51 + 0.5))
     * 2.0) - 1.0));
    tmpvar_52 = (((
      (tmpvar_53 * tmpvar_53)
     * 
      (3.0 - (2.0 * tmpvar_53))
    ) - 0.5) * 2.0);
    fMoveAmount_47 = ((_ST_WindGlobal.y * (tmpvar_52.x + 
      (tmpvar_52.y * tmpvar_52.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_47 = (fMoveAmount_47 * fAdjust_48);
    vPos_46.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * fMoveAmount_47));
    vPos_46 = (normalize(vPos_46) * fLength_49);
    FinalPosition_15 = vPos_46;
  };
  tmpvar_12.xyz = FinalPosition_15;
  tmpvar_5 = tmpvar_8;
  highp vec3 tmpvar_54;
  tmpvar_54 = (_Object2World * tmpvar_12).xyz;
  highp vec4 v_55;
  v_55.x = _World2Object[0].x;
  v_55.y = _World2Object[1].x;
  v_55.z = _World2Object[2].x;
  v_55.w = _World2Object[3].x;
  highp vec4 v_56;
  v_56.x = _World2Object[0].y;
  v_56.y = _World2Object[1].y;
  v_56.z = _World2Object[2].y;
  v_56.w = _World2Object[3].y;
  highp vec4 v_57;
  v_57.x = _World2Object[0].z;
  v_57.y = _World2Object[1].z;
  v_57.z = _World2Object[2].z;
  v_57.w = _World2Object[3].z;
  highp vec3 tmpvar_58;
  tmpvar_58 = normalize(((
    (v_55.xyz * _glesNormal.x)
   + 
    (v_56.xyz * _glesNormal.y)
  ) + (v_57.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_58;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_59;
  tmpvar_59.w = 1.0;
  tmpvar_59.xyz = worldNormal_3;
  mediump vec4 normal_60;
  normal_60 = tmpvar_59;
  mediump vec3 x2_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = (normal_60.xyzz * normal_60.yzzx);
  x2_61.x = dot (unity_SHBr, tmpvar_62);
  x2_61.y = dot (unity_SHBg, tmpvar_62);
  x2_61.z = dot (unity_SHBb, tmpvar_62);
  highp vec3 lightColor0_63;
  lightColor0_63 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_64;
  lightColor1_64 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_65;
  lightColor2_65 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_66;
  lightColor3_66 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_67;
  lightAttenSq_67 = unity_4LightAtten0;
  highp vec3 normal_68;
  normal_68 = worldNormal_3;
  highp vec3 col_69;
  highp vec4 ndotl_70;
  highp vec4 lengthSq_71;
  highp vec4 tmpvar_72;
  tmpvar_72 = (unity_4LightPosX0 - tmpvar_54.x);
  highp vec4 tmpvar_73;
  tmpvar_73 = (unity_4LightPosY0 - tmpvar_54.y);
  highp vec4 tmpvar_74;
  tmpvar_74 = (unity_4LightPosZ0 - tmpvar_54.z);
  lengthSq_71 = (tmpvar_72 * tmpvar_72);
  lengthSq_71 = (lengthSq_71 + (tmpvar_73 * tmpvar_73));
  lengthSq_71 = (lengthSq_71 + (tmpvar_74 * tmpvar_74));
  ndotl_70 = (tmpvar_72 * normal_68.x);
  ndotl_70 = (ndotl_70 + (tmpvar_73 * normal_68.y));
  ndotl_70 = (ndotl_70 + (tmpvar_74 * normal_68.z));
  highp vec4 tmpvar_75;
  tmpvar_75 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_70 * inversesqrt(lengthSq_71)));
  ndotl_70 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = (tmpvar_75 * (1.0/((1.0 + 
    (lengthSq_71 * lightAttenSq_67)
  ))));
  col_69 = (lightColor0_63 * tmpvar_76.x);
  col_69 = (col_69 + (lightColor1_64 * tmpvar_76.y));
  col_69 = (col_69 + (lightColor2_65 * tmpvar_76.z));
  col_69 = (col_69 + (lightColor3_66 * tmpvar_76.w));
  tmpvar_6 = ((x2_61 + (unity_SHC.xyz * 
    ((normal_60.x * normal_60.x) - (normal_60.y * normal_60.y))
  )) + col_69);
  tmpvar_7 = (unity_World2Shadow[0] * (_Object2World * tmpvar_12));
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_54;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 blendColor_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_11 = tmpvar_14;
  diffuseColor_12.xyz = mix (blendColor_11.xyz, diffuseColor_12.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp float tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_15 = tmpvar_16;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_15;
  mediump vec3 normalWorld_17;
  normalWorld_17 = tmpvar_5;
  mediump vec3 tmpvar_18;
  mediump vec3 tmpvar_19;
  mediump vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = normalWorld_17;
  mediump vec3 x1_21;
  x1_21.x = dot (unity_SHAr, tmpvar_20);
  x1_21.y = dot (unity_SHAg, tmpvar_20);
  x1_21.z = dot (unity_SHAb, tmpvar_20);
  tmpvar_19 = (xlv_TEXCOORD5 + x1_21);
  tmpvar_18 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_18;
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_24 = tmpvar_25;
  c_23.xyz = ((tmpvar_9 * tmpvar_18) * diff_24);
  c_23.w = tmpvar_10;
  c_22.w = c_23.w;
  c_22.xyz = (c_23.xyz + (tmpvar_9 * tmpvar_19));
  c_4.xyz = c_22.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec3 tmpvar_10;
  tmpvar_10.xy = _glesMultiTexCoord2.zw;
  tmpvar_10.z = _glesMultiTexCoord1.w;
  tmpvar_9 = tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  FinalPosition_14 = tmpvar_1.xyz;
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_14 = tmpvar_19;
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_19;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_19;
      highp float fTime_22;
      highp float fAdherenceScale_23;
      highp vec3 vWindVector_24;
      vWindVector_24 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_22 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (fTime_22 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((fTime_22 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_22 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((fTime_22 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_25.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_26 = (fOscillation_26 * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (tmpvar_19 + ((vWindVector_24 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((fTime_22 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_23 = (1.0 - ((tmpvar_33.x * tmpvar_33.y) * (
        (tmpvar_33.x * tmpvar_33.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_23 = (fAdherenceScale_23 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_12 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_23) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp float fTime_36;
      highp vec3 vWindVector_37;
      vWindVector_37 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_36 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_38;
      highp float fOscillation_39;
      fOscillation_39 = 1.0;
      highp float fAmount_40;
      highp float fTarget_41;
      highp vec4 tmpvar_42;
      tmpvar_42.w = 0.0;
      tmpvar_42.x = (fTime_36 + _glesMultiTexCoord0.w);
      tmpvar_42.y = ((fTime_36 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_42.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_36 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_41 = 1.0;
      fAmount_40 = tmpvar_44;
      if ((tmpvar_44 < 0.0)) {
        fTarget_41 = -1.0;
        fAmount_40 = -(tmpvar_44);
      };
      fOscillation_39 = (((
        mix (mix (tmpvar_44, fTarget_41, fAmount_40), fTarget_41, fAmount_40)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_35 = (vPos_20 + ((vWindVector_37 * fOscillation_39) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_14 = vPos_20;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_45;
    vPos_45 = FinalPosition_14;
    highp float fMoveAmount_46;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_15.x + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_15.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    fMoveAmount_46 = ((_ST_WindGlobal.y * (tmpvar_51.x + 
      (tmpvar_51.y * tmpvar_51.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_46 = (fMoveAmount_46 * fAdjust_47);
    vPos_45.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * fMoveAmount_46));
    vPos_45 = (normalize(vPos_45) * fLength_48);
    FinalPosition_14 = vPos_45;
  };
  tmpvar_11.xyz = FinalPosition_14;
  tmpvar_5 = tmpvar_7;
  highp vec4 v_53;
  v_53.x = _World2Object[0].x;
  v_53.y = _World2Object[1].x;
  v_53.z = _World2Object[2].x;
  v_53.w = _World2Object[3].x;
  highp vec4 v_54;
  v_54.x = _World2Object[0].y;
  v_54.y = _World2Object[1].y;
  v_54.z = _World2Object[2].y;
  v_54.w = _World2Object[3].y;
  highp vec4 v_55;
  v_55.x = _World2Object[0].z;
  v_55.y = _World2Object[1].z;
  v_55.z = _World2Object[2].z;
  v_55.w = _World2Object[3].z;
  highp vec3 tmpvar_56;
  tmpvar_56 = normalize(((
    (v_53.xyz * _glesNormal.x)
   + 
    (v_54.xyz * _glesNormal.y)
  ) + (v_55.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_56;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_57;
  tmpvar_57.w = 1.0;
  tmpvar_57.xyz = worldNormal_3;
  mediump vec4 normal_58;
  normal_58 = tmpvar_57;
  mediump vec3 x2_59;
  mediump vec4 tmpvar_60;
  tmpvar_60 = (normal_58.xyzz * normal_58.yzzx);
  x2_59.x = dot (unity_SHBr, tmpvar_60);
  x2_59.y = dot (unity_SHBg, tmpvar_60);
  x2_59.z = dot (unity_SHBb, tmpvar_60);
  tmpvar_6 = (unity_World2Shadow[0] * (_Object2World * tmpvar_11));
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = (x2_59 + (unity_SHC.xyz * (
    (normal_58.x * normal_58.x)
   - 
    (normal_58.y * normal_58.y)
  )));
  xlv_TEXCOORD6 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 blendColor_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_11 = tmpvar_14;
  diffuseColor_12.xyz = mix (blendColor_11.xyz, diffuseColor_12.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp float shadow_15;
  shadow_15 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_15;
  mediump vec3 normalWorld_16;
  normalWorld_16 = tmpvar_5;
  mediump vec3 tmpvar_17;
  mediump vec3 tmpvar_18;
  mediump vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = normalWorld_16;
  mediump vec3 x1_20;
  x1_20.x = dot (unity_SHAr, tmpvar_19);
  x1_20.y = dot (unity_SHAg, tmpvar_19);
  x1_20.z = dot (unity_SHAb, tmpvar_19);
  tmpvar_18 = (xlv_TEXCOORD5 + x1_20);
  tmpvar_17 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_17;
  lowp vec4 c_21;
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_23 = tmpvar_24;
  c_22.xyz = ((tmpvar_9 * tmpvar_17) * diff_23);
  c_22.w = tmpvar_10;
  c_21.w = c_22.w;
  c_21.xyz = (c_22.xyz + (tmpvar_9 * tmpvar_18));
  c_4.xyz = c_21.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
mediump vec3 t16_6;
highp vec3 t8;
highp float t10;
highp float t15;
highp vec2 t17;
highp vec2 t19;
highp float t22;
bool tb22;
highp float t23;
bool tb23;
highp float t24;
highp float t25;
mediump float t16_27;
void main()
{
    //Instruction 14994
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 14995
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 14996
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 14997
    //MUL
    t8.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 14998
    //MAD
    t8.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t8.xyz;
    //Instruction 14999
    //MAD
    t8.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t8.xyz;
    //Instruction 15000
    //DP3
    t15 = dot(t8.xyz, t8.xyz);
    //Instruction 15001
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 15002
    //MUL
    t8.xy = vec2(t15) * t8.xz;
    //Instruction 15003
    //AND
    t8.xy = mix(vec2(0.0, 0.0), t8.xy, bvec2(tb1));
    //Instruction 15004
    //ADD
    t2.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 15005
    //MAD
    t2.xyz = unity_LODFade.xxx * t2.xyz + in_POSITION0.xyz;
    //Instruction 15006
    //GE
    tb22 = t16_0.x>=3.000000;
    //Instruction 15007
    //IF
    if(tb22){
        //Instruction 15008
        //EQ
        tb22 = t16_0.x==5.000000;
        //Instruction 15009
        //IF
        if(tb22){
            //Instruction 15010
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 15011
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 15012
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 15013
            //DP3
            t22 = dot(t3.xyz, t3.xyz);
            //Instruction 15014
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 15015
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 15016
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 15017
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 15018
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 15019
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 15020
            //ADD
            t22 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 15021
            //ADD
            t22 = t22 + _ST_WindBranch.x;
            //Instruction 15022
            //ADD
            t0.x = t22 + in_TEXCOORD0.w;
            //Instruction 15023
            //MAD
            t0.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 15024
            //MUL
            t23 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 15025
            //MUL
            t0.z = t23 * 0.500000;
            //Instruction 15026
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 15027
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 15028
            //FRC
            t0 = fract(t0);
            //Instruction 15029
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 15030
            //MUL
            t5 = abs(t0) * abs(t0);
            //Instruction 15031
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 15032
            //MAD
            t0 = t5 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 15033
            //ADD
            t0 = t0 + t0;
            //Instruction 15034
            //MUL
            t5.w = t0.z * t0.y;
            //Instruction 15035
            //LT
            tb23 = t5.w<0.0;
            //Instruction 15036
            //MOV
            t5.y = (-t5.w);
            //Instruction 15037
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 15038
            //MOVC
            t5.xy = (bool(tb23)) ? t5.xy : t5.zw;
            //Instruction 15039
            //MAD
            t23 = (-t0.y) * t0.z + t5.x;
            //Instruction 15040
            //MAD
            t23 = t5.y * t23 + t5.w;
            //Instruction 15041
            //ADD
            t24 = (-t23) + t5.x;
            //Instruction 15042
            //MAD
            t23 = t5.y * t24 + t23;
            //Instruction 15043
            //MUL
            t23 = t23 * _ST_WindBranchTwitch.x;
            //Instruction 15044
            //ADD
            t24 = (-_ST_WindVector.w) + 1.0;
            //Instruction 15045
            //ADD
            t25 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 15046
            //MUL
            t25 = t0.x * t25;
            //Instruction 15047
            //MAD
            t23 = t23 * t24 + t25;
            //Instruction 15048
            //MAD
            t24 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 15049
            //MUL
            t23 = t23 * t24;
            //Instruction 15050
            //MUL
            t4.xyz = vec3(t23) * t4.xyz;
            //Instruction 15051
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 15052
            //MAD
            t5.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 15053
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 15054
            //MAD
            t5.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 15055
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 15056
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 15057
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 15058
            //MUL
            t19.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 15059
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 15060
            //MAD
            t5.xy = t19.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 15061
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 15062
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 15063
            //MUL
            t22 = t5.x * t5.y;
            //Instruction 15064
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 15065
            //MUL
            t23 = t0.w * _ST_WindVector.w;
            //Instruction 15066
            //MAD
            t22 = t23 * _ST_WindBranchWhip.x + t22;
            //Instruction 15067
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 15068
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 15069
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 15070
            //MAD
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 15071
        //ELSE
        } else {
            //Instruction 15072
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 15073
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 15074
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 15075
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 15076
            //ADD
            t22 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 15077
            //ADD
            t22 = t22 + _ST_WindBranch.x;
            //Instruction 15078
            //ADD
            t4.x = t22 + in_TEXCOORD0.w;
            //Instruction 15079
            //MAD
            t4.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 15080
            //MUL
            t22 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 15081
            //MUL
            t4.z = t22 * 0.500000;
            //Instruction 15082
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 15083
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 15084
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 15085
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 15086
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 15087
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 15088
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 15089
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 15090
            //LT
            tb22 = t0.w<0.0;
            //Instruction 15091
            //MOV
            t0.y = (-t0.w);
            //Instruction 15092
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 15093
            //MOVC
            t5.xy = (bool(tb22)) ? t0.xy : t0.zw;
            //Instruction 15094
            //MAD
            t22 = (-t4.y) * t4.z + t5.x;
            //Instruction 15095
            //MAD
            t22 = t5.y * t22 + t0.w;
            //Instruction 15096
            //ADD
            t23 = (-t22) + t5.x;
            //Instruction 15097
            //MAD
            t22 = t5.y * t23 + t22;
            //Instruction 15098
            //MUL
            t22 = t22 * _ST_WindBranchTwitch.x;
            //Instruction 15099
            //ADD
            t23 = (-_ST_WindVector.w) + 1.0;
            //Instruction 15100
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 15101
            //MUL
            t24 = t24 * t4.x;
            //Instruction 15102
            //MAD
            t22 = t22 * t23 + t24;
            //Instruction 15103
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 15104
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 15105
        //ENDIF
        }
        //Instruction 15106
    //ENDIF
    }
    //Instruction 15107
    //DP3
    t22 = dot(t2.xyz, t2.xyz);
    //Instruction 15108
    //SQRT
    t22 = sqrt(t22);
    //Instruction 15109
    //DIV
    t23 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 15110
    //MAD
    t23 = (-t23) * 0.250000 + t2.y;
    //Instruction 15111
    //MAX
    t23 = max(t23, 0.0);
    //Instruction 15112
    //MUL
    t23 = t23 * _ST_WindGlobal.z;
    //Instruction 15113
    //NE
    tb3 = t23!=0.0;
    //Instruction 15114
    //LOG
    t10 = log2(t23);
    //Instruction 15115
    //MUL
    t10 = t10 * _ST_WindGlobal.w;
    //Instruction 15116
    //EXP
    t10 = exp2(t10);
    //Instruction 15117
    //MOVC
    t23 = (tb3) ? t10 : t23;
    //Instruction 15118
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 15119
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 15120
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 15121
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 15122
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 15123
    //MUL
    t17.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 15124
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 15125
    //MAD
    t3.xy = t17.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 15126
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 15127
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 15128
    //DIV
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 15129
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t10;
    //Instruction 15130
    //MUL
    t23 = t23 * t3.x;
    //Instruction 15131
    //MAD
    t3.xz = t8.xy * vec2(t23) + t2.xz;
    //Instruction 15132
    //MOV
    t3.y = t2.y;
    //Instruction 15133
    //DP3
    t8.x = dot(t3.xyz, t3.xyz);
    //Instruction 15134
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 15135
    //MUL
    t3.xyz = t8.xxx * t3.xyz;
    //Instruction 15136
    //MUL
    t8.xyz = vec3(t22) * t3.xyz;
    //Instruction 15137
    //MOVC
    t1.xyz = (bool(tb1)) ? t8.xyz : t2.xyz;
    //Instruction 15138
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 15139
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 15140
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 15141
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 15142
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 15143
    //MAD
    t2.xyz = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 15144
    //MAD
    t2.xyz = _Object2World[2].xyz * t1.zzz + t2.xyz;
    //Instruction 15145
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t2.xyz;
    //Instruction 15146
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 15147
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 15148
    //MOV
    t2.z = _World2Object[2].x;
    //Instruction 15149
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 15150
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 15151
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 15152
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 15153
    //MAD
    t2.xyz = t2.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 15154
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 15155
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 15156
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 15157
    //MAD
    t2.xyz = t3.xyz * in_NORMAL0.zzz + t2.xyz;
    //Instruction 15158
    //DP3
    t22 = dot(t2.xyz, t2.xyz);
    //Instruction 15159
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 15160
    //MUL
    t2.xyz = vec3(t22) * t2.xyz;
    //Instruction 15161
    //MUL
    t16_0 = t2.yzzx * t2.xyzz;
    //Instruction 15162
    //DP4
    t16_6.x = dot(unity_SHBr, t16_0);
    //Instruction 15163
    //DP4
    t16_6.y = dot(unity_SHBg, t16_0);
    //Instruction 15164
    //DP4
    t16_6.z = dot(unity_SHBb, t16_0);
    //Instruction 15165
    //MUL
    t16_27 = t2.y * t2.y;
    //Instruction 15166
    //MAD
    t16_27 = t2.x * t2.x + (-t16_27);
    //Instruction 15167
    //MAD
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(t16_27) + t16_6.xyz;
    //Instruction 15168
    //MUL
    t0 = t1.yyyy * _Object2World[1];
    //Instruction 15169
    //MAD
    t0 = _Object2World[0] * t1.xxxx + t0;
    //Instruction 15170
    //MAD
    t0 = _Object2World[2] * t1.zzzz + t0;
    //Instruction 15171
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 15172
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 15173
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 15174
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 15175
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 15176
    //MOV
    vs_TEXCOORD0.xyz = t2.xyz;
    //Instruction 15177
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 15178
    //MOV
    vs_TEXCOORD6 = t0;
    //Instruction 15179
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 15180
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 15181
    //MOV
    t1.xy = in_TEXCOORD2.zw;
    //Instruction 15182
    //MOV
    t1.z = in_TEXCOORD1.w;
    //Instruction 15183
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 15184
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
mediump vec3 t16_1;
lowp vec3 t10_2;
lowp vec3 t10_3;
mediump vec3 t16_4;
mediump float t16_15;
mediump float t16_16;
void main()
{
    //Instruction 14970
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 14971
    //MOV
    t16_0.w = 1.0;
    //Instruction 14972
    //DP4
    t16_1.x = dot(unity_SHAr, t16_0);
    //Instruction 14973
    //DP4
    t16_1.y = dot(unity_SHAg, t16_0);
    //Instruction 14974
    //DP4
    t16_1.z = dot(unity_SHAb, t16_0);
    //Instruction 14975
    //ADD
    t16_0.xyz = t16_1.xyz + vs_TEXCOORD5.xyz;
    //Instruction 14976
    //MOV
    t16_15 = vs_TEXCOORD4.z;
    t16_15 = clamp(t16_15, 0.0, 1.0);
    //Instruction 14977
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 14978
    //SAMPLE
    t10_3.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 14979
    //ADD
    t16_1.xyz = t10_2.xyz + (-t10_3.xyz);
    //Instruction 14980
    //MAD
    t16_1.xyz = vec3(t16_15) * t16_1.xyz + t10_3.xyz;
    //Instruction 14981
    //MUL
    t16_1.xyz = t16_1.xyz * vs_TEXCOORD2.xyz;
    //Instruction 14982
    //MUL
    t16_0.xyz = t16_0.xyz * t16_1.xyz;
    //Instruction 14983
    //SAMPLE_C_LZ
    vec3 txVec33 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_15 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec33, 0.0);
    //Instruction 14984
    //ADD
    t16_16 = (-_LightShadowData.x) + 1.0;
    //Instruction 14985
    //MAD
    t16_15 = t16_15 * t16_16 + _LightShadowData.x;
    //Instruction 14986
    //MUL
    t16_4.xyz = vec3(t16_15) * _LightColor0.xyz;
    //Instruction 14987
    //MUL
    t16_1.xyz = t16_1.xyz * t16_4.xyz;
    //Instruction 14988
    //DP3
    t16_15 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 14989
    //MAX
    t16_15 = max(t16_15, 0.0);
    //Instruction 14990
    //MAD
    t16_0.xyz = t16_1.xyz * vec3(t16_15) + t16_0.xyz;
    //Instruction 14991
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 14992
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 14993
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_9.xy = tmpvar_2.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp vec3 tmpvar_11;
  tmpvar_11.xy = _glesMultiTexCoord2.zw;
  tmpvar_11.z = _glesMultiTexCoord1.w;
  tmpvar_10 = tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  FinalPosition_15 = tmpvar_1.xyz;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_20;
  tmpvar_20 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_15 = tmpvar_20;
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_20;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_22;
      vPos_22 = tmpvar_20;
      highp float fTime_23;
      highp float fAdherenceScale_24;
      highp vec3 vWindVector_25;
      vWindVector_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_23 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_26;
      highp float fOscillation_27;
      fOscillation_27 = 1.0;
      highp float fAmount_28;
      highp float fTarget_29;
      highp vec4 tmpvar_30;
      tmpvar_30.x = (fTime_23 + _glesMultiTexCoord0.w);
      tmpvar_30.y = ((fTime_23 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_30.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_23 + _glesMultiTexCoord0.w));
      tmpvar_30.w = ((fTime_23 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      vOscillations_26 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      highp float tmpvar_32;
      tmpvar_32 = (vOscillations_26.y * vOscillations_26.z);
      fTarget_29 = 1.0;
      fAmount_28 = tmpvar_32;
      if ((tmpvar_32 < 0.0)) {
        fTarget_29 = -1.0;
        fAmount_28 = -(tmpvar_32);
      };
      fOscillation_27 = (((
        mix (mix (tmpvar_32, fTarget_29, fAmount_28), fTarget_29, fAmount_28)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_26.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_27 = (fOscillation_27 * (1.0 + (vOscillations_26.w * _ST_WindBranchWhip.x)));
      vPos_22 = (tmpvar_20 + ((vWindVector_25 * fOscillation_27) * _ST_WindBranch.y));
      highp vec4 tmpvar_33;
      tmpvar_33.zw = vec2(0.0, 0.0);
      tmpvar_33.x = ((fTime_23 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_33.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_34;
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      tmpvar_34 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((tmpvar_34.x * tmpvar_34.y) * (
        (tmpvar_34.x * tmpvar_34.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_26.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_22 = (vPos_22 + ((
        ((vRotatedBranchAnchor_13 - vPos_22) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_21 = vPos_22;
    } else {
      highp vec3 vPos_36;
      vPos_36 = vPos_21;
      highp float fTime_37;
      highp vec3 vWindVector_38;
      vWindVector_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_37 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_39;
      highp float fOscillation_40;
      fOscillation_40 = 1.0;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (fTime_37 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((fTime_37 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_37 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_39 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_39.y * vOscillations_39.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      fOscillation_40 = (((
        mix (mix (tmpvar_45, fTarget_42, fAmount_41), fTarget_42, fAmount_41)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_39.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_36 = (vPos_21 + ((vWindVector_38 * fOscillation_40) * _ST_WindBranch.y));
      vPos_21 = vPos_36;
    };
    FinalPosition_15 = vPos_21;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_15;
    highp float fMoveAmount_47;
    highp float fAdjust_48;
    highp float fLength_49;
    fLength_49 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_50;
    tmpvar_50 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_48 = tmpvar_50;
    if ((tmpvar_50 != 0.0)) {
      fAdjust_48 = pow (tmpvar_50, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_51;
    tmpvar_51.zw = vec2(0.0, 0.0);
    tmpvar_51.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_51.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_52;
    highp vec4 tmpvar_53;
    tmpvar_53 = abs(((
      fract((tmpvar_51 + 0.5))
     * 2.0) - 1.0));
    tmpvar_52 = (((
      (tmpvar_53 * tmpvar_53)
     * 
      (3.0 - (2.0 * tmpvar_53))
    ) - 0.5) * 2.0);
    fMoveAmount_47 = ((_ST_WindGlobal.y * (tmpvar_52.x + 
      (tmpvar_52.y * tmpvar_52.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_47 = (fMoveAmount_47 * fAdjust_48);
    vPos_46.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * fMoveAmount_47));
    vPos_46 = (normalize(vPos_46) * fLength_49);
    FinalPosition_15 = vPos_46;
  };
  tmpvar_12.xyz = FinalPosition_15;
  tmpvar_5 = tmpvar_8;
  highp vec3 tmpvar_54;
  tmpvar_54 = (_Object2World * tmpvar_12).xyz;
  highp vec4 v_55;
  v_55.x = _World2Object[0].x;
  v_55.y = _World2Object[1].x;
  v_55.z = _World2Object[2].x;
  v_55.w = _World2Object[3].x;
  highp vec4 v_56;
  v_56.x = _World2Object[0].y;
  v_56.y = _World2Object[1].y;
  v_56.z = _World2Object[2].y;
  v_56.w = _World2Object[3].y;
  highp vec4 v_57;
  v_57.x = _World2Object[0].z;
  v_57.y = _World2Object[1].z;
  v_57.z = _World2Object[2].z;
  v_57.w = _World2Object[3].z;
  highp vec3 tmpvar_58;
  tmpvar_58 = normalize(((
    (v_55.xyz * _glesNormal.x)
   + 
    (v_56.xyz * _glesNormal.y)
  ) + (v_57.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_58;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_59;
  tmpvar_59.w = 1.0;
  tmpvar_59.xyz = worldNormal_3;
  mediump vec4 normal_60;
  normal_60 = tmpvar_59;
  mediump vec3 x2_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = (normal_60.xyzz * normal_60.yzzx);
  x2_61.x = dot (unity_SHBr, tmpvar_62);
  x2_61.y = dot (unity_SHBg, tmpvar_62);
  x2_61.z = dot (unity_SHBb, tmpvar_62);
  highp vec3 lightColor0_63;
  lightColor0_63 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_64;
  lightColor1_64 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_65;
  lightColor2_65 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_66;
  lightColor3_66 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_67;
  lightAttenSq_67 = unity_4LightAtten0;
  highp vec3 normal_68;
  normal_68 = worldNormal_3;
  highp vec3 col_69;
  highp vec4 ndotl_70;
  highp vec4 lengthSq_71;
  highp vec4 tmpvar_72;
  tmpvar_72 = (unity_4LightPosX0 - tmpvar_54.x);
  highp vec4 tmpvar_73;
  tmpvar_73 = (unity_4LightPosY0 - tmpvar_54.y);
  highp vec4 tmpvar_74;
  tmpvar_74 = (unity_4LightPosZ0 - tmpvar_54.z);
  lengthSq_71 = (tmpvar_72 * tmpvar_72);
  lengthSq_71 = (lengthSq_71 + (tmpvar_73 * tmpvar_73));
  lengthSq_71 = (lengthSq_71 + (tmpvar_74 * tmpvar_74));
  ndotl_70 = (tmpvar_72 * normal_68.x);
  ndotl_70 = (ndotl_70 + (tmpvar_73 * normal_68.y));
  ndotl_70 = (ndotl_70 + (tmpvar_74 * normal_68.z));
  highp vec4 tmpvar_75;
  tmpvar_75 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_70 * inversesqrt(lengthSq_71)));
  ndotl_70 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = (tmpvar_75 * (1.0/((1.0 + 
    (lengthSq_71 * lightAttenSq_67)
  ))));
  col_69 = (lightColor0_63 * tmpvar_76.x);
  col_69 = (col_69 + (lightColor1_64 * tmpvar_76.y));
  col_69 = (col_69 + (lightColor2_65 * tmpvar_76.z));
  col_69 = (col_69 + (lightColor3_66 * tmpvar_76.w));
  tmpvar_6 = ((x2_61 + (unity_SHC.xyz * 
    ((normal_60.x * normal_60.x) - (normal_60.y * normal_60.y))
  )) + col_69);
  tmpvar_7 = (unity_World2Shadow[0] * (_Object2World * tmpvar_12));
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_54;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 blendColor_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_11 = tmpvar_14;
  diffuseColor_12.xyz = mix (blendColor_11.xyz, diffuseColor_12.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp float shadow_15;
  shadow_15 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_15;
  mediump vec3 normalWorld_16;
  normalWorld_16 = tmpvar_5;
  mediump vec3 tmpvar_17;
  mediump vec3 tmpvar_18;
  mediump vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = normalWorld_16;
  mediump vec3 x1_20;
  x1_20.x = dot (unity_SHAr, tmpvar_19);
  x1_20.y = dot (unity_SHAg, tmpvar_19);
  x1_20.z = dot (unity_SHAb, tmpvar_19);
  tmpvar_18 = (xlv_TEXCOORD5 + x1_20);
  tmpvar_17 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_17;
  lowp vec4 c_21;
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_23 = tmpvar_24;
  c_22.xyz = ((tmpvar_9 * tmpvar_17) * diff_23);
  c_22.w = tmpvar_10;
  c_21.w = c_22.w;
  c_21.xyz = (c_22.xyz + (tmpvar_9 * tmpvar_18));
  c_4.xyz = c_21.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
bool tb3;
highp vec4 t4;
highp vec4 t5;
mediump vec3 t16_6;
highp vec4 t7;
highp vec3 t9;
highp float t11;
highp float t17;
highp vec2 t19;
highp vec2 t21;
highp float t25;
bool tb25;
highp float t26;
bool tb26;
highp float t27;
highp float t28;
mediump float t16_30;
void main()
{
    //Instruction 15418
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 15419
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 15420
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 15421
    //MUL
    t9.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 15422
    //MAD
    t9.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t9.xyz;
    //Instruction 15423
    //MAD
    t9.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t9.xyz;
    //Instruction 15424
    //DP3
    t17 = dot(t9.xyz, t9.xyz);
    //Instruction 15425
    //RSQ
    t17 = inversesqrt(t17);
    //Instruction 15426
    //MUL
    t9.xy = vec2(t17) * t9.xz;
    //Instruction 15427
    //AND
    t9.xy = mix(vec2(0.0, 0.0), t9.xy, bvec2(tb1));
    //Instruction 15428
    //ADD
    t2.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 15429
    //MAD
    t2.xyz = unity_LODFade.xxx * t2.xyz + in_POSITION0.xyz;
    //Instruction 15430
    //GE
    tb25 = t16_0.x>=3.000000;
    //Instruction 15431
    //IF
    if(tb25){
        //Instruction 15432
        //EQ
        tb25 = t16_0.x==5.000000;
        //Instruction 15433
        //IF
        if(tb25){
            //Instruction 15434
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 15435
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 15436
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 15437
            //DP3
            t25 = dot(t3.xyz, t3.xyz);
            //Instruction 15438
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 15439
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 15440
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 15441
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 15442
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 15443
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 15444
            //ADD
            t25 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 15445
            //ADD
            t25 = t25 + _ST_WindBranch.x;
            //Instruction 15446
            //ADD
            t0.x = t25 + in_TEXCOORD0.w;
            //Instruction 15447
            //MAD
            t0.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 15448
            //MUL
            t26 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 15449
            //MUL
            t0.z = t26 * 0.500000;
            //Instruction 15450
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 15451
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 15452
            //FRC
            t0 = fract(t0);
            //Instruction 15453
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 15454
            //MUL
            t5 = abs(t0) * abs(t0);
            //Instruction 15455
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 15456
            //MAD
            t0 = t5 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 15457
            //ADD
            t0 = t0 + t0;
            //Instruction 15458
            //MUL
            t5.w = t0.z * t0.y;
            //Instruction 15459
            //LT
            tb26 = t5.w<0.0;
            //Instruction 15460
            //MOV
            t5.y = (-t5.w);
            //Instruction 15461
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 15462
            //MOVC
            t5.xy = (bool(tb26)) ? t5.xy : t5.zw;
            //Instruction 15463
            //MAD
            t26 = (-t0.y) * t0.z + t5.x;
            //Instruction 15464
            //MAD
            t26 = t5.y * t26 + t5.w;
            //Instruction 15465
            //ADD
            t27 = (-t26) + t5.x;
            //Instruction 15466
            //MAD
            t26 = t5.y * t27 + t26;
            //Instruction 15467
            //MUL
            t26 = t26 * _ST_WindBranchTwitch.x;
            //Instruction 15468
            //ADD
            t27 = (-_ST_WindVector.w) + 1.0;
            //Instruction 15469
            //ADD
            t28 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 15470
            //MUL
            t28 = t0.x * t28;
            //Instruction 15471
            //MAD
            t26 = t26 * t27 + t28;
            //Instruction 15472
            //MAD
            t27 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 15473
            //MUL
            t26 = t26 * t27;
            //Instruction 15474
            //MUL
            t4.xyz = vec3(t26) * t4.xyz;
            //Instruction 15475
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 15476
            //MAD
            t5.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 15477
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 15478
            //MAD
            t5.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 15479
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 15480
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 15481
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 15482
            //MUL
            t21.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 15483
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 15484
            //MAD
            t5.xy = t21.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 15485
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 15486
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 15487
            //MUL
            t25 = t5.x * t5.y;
            //Instruction 15488
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 15489
            //MUL
            t26 = t0.w * _ST_WindVector.w;
            //Instruction 15490
            //MAD
            t25 = t26 * _ST_WindBranchWhip.x + t25;
            //Instruction 15491
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 15492
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 15493
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 15494
            //MAD
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 15495
        //ELSE
        } else {
            //Instruction 15496
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 15497
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 15498
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 15499
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 15500
            //ADD
            t25 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 15501
            //ADD
            t25 = t25 + _ST_WindBranch.x;
            //Instruction 15502
            //ADD
            t4.x = t25 + in_TEXCOORD0.w;
            //Instruction 15503
            //MAD
            t4.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 15504
            //MUL
            t25 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 15505
            //MUL
            t4.z = t25 * 0.500000;
            //Instruction 15506
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 15507
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 15508
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 15509
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 15510
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 15511
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 15512
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 15513
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 15514
            //LT
            tb25 = t0.w<0.0;
            //Instruction 15515
            //MOV
            t0.y = (-t0.w);
            //Instruction 15516
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 15517
            //MOVC
            t5.xy = (bool(tb25)) ? t0.xy : t0.zw;
            //Instruction 15518
            //MAD
            t25 = (-t4.y) * t4.z + t5.x;
            //Instruction 15519
            //MAD
            t25 = t5.y * t25 + t0.w;
            //Instruction 15520
            //ADD
            t26 = (-t25) + t5.x;
            //Instruction 15521
            //MAD
            t25 = t5.y * t26 + t25;
            //Instruction 15522
            //MUL
            t25 = t25 * _ST_WindBranchTwitch.x;
            //Instruction 15523
            //ADD
            t26 = (-_ST_WindVector.w) + 1.0;
            //Instruction 15524
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 15525
            //MUL
            t27 = t27 * t4.x;
            //Instruction 15526
            //MAD
            t25 = t25 * t26 + t27;
            //Instruction 15527
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 15528
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 15529
        //ENDIF
        }
        //Instruction 15530
    //ENDIF
    }
    //Instruction 15531
    //DP3
    t25 = dot(t2.xyz, t2.xyz);
    //Instruction 15532
    //SQRT
    t25 = sqrt(t25);
    //Instruction 15533
    //DIV
    t26 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 15534
    //MAD
    t26 = (-t26) * 0.250000 + t2.y;
    //Instruction 15535
    //MAX
    t26 = max(t26, 0.0);
    //Instruction 15536
    //MUL
    t26 = t26 * _ST_WindGlobal.z;
    //Instruction 15537
    //NE
    tb3 = t26!=0.0;
    //Instruction 15538
    //LOG
    t11 = log2(t26);
    //Instruction 15539
    //MUL
    t11 = t11 * _ST_WindGlobal.w;
    //Instruction 15540
    //EXP
    t11 = exp2(t11);
    //Instruction 15541
    //MOVC
    t26 = (tb3) ? t11 : t26;
    //Instruction 15542
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 15543
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 15544
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 15545
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 15546
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 15547
    //MUL
    t19.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 15548
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 15549
    //MAD
    t3.xy = t19.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 15550
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 15551
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 15552
    //DIV
    t11 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 15553
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t11;
    //Instruction 15554
    //MUL
    t26 = t26 * t3.x;
    //Instruction 15555
    //MAD
    t3.xz = t9.xy * vec2(t26) + t2.xz;
    //Instruction 15556
    //MOV
    t3.y = t2.y;
    //Instruction 15557
    //DP3
    t9.x = dot(t3.xyz, t3.xyz);
    //Instruction 15558
    //RSQ
    t9.x = inversesqrt(t9.x);
    //Instruction 15559
    //MUL
    t3.xyz = t9.xxx * t3.xyz;
    //Instruction 15560
    //MUL
    t9.xyz = vec3(t25) * t3.xyz;
    //Instruction 15561
    //MOVC
    t1.xyz = (bool(tb1)) ? t9.xyz : t2.xyz;
    //Instruction 15562
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 15563
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 15564
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 15565
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 15566
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 15567
    //MAD
    t2.xyz = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 15568
    //MAD
    t2.xyz = _Object2World[2].xyz * t1.zzz + t2.xyz;
    //Instruction 15569
    //MAD
    t2.xyz = _Object2World[3].xyz * in_POSITION0.www + t2.xyz;
    //Instruction 15570
    //MOV
    t3.x = _World2Object[0].x;
    //Instruction 15571
    //MOV
    t3.y = _World2Object[1].x;
    //Instruction 15572
    //MOV
    t3.z = _World2Object[2].x;
    //Instruction 15573
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 15574
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 15575
    //MOV
    t4.z = _World2Object[2].y;
    //Instruction 15576
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 15577
    //MAD
    t3.xyz = t3.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 15578
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 15579
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 15580
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 15581
    //MAD
    t3.xyz = t4.xyz * in_NORMAL0.zzz + t3.xyz;
    //Instruction 15582
    //DP3
    t25 = dot(t3.xyz, t3.xyz);
    //Instruction 15583
    //RSQ
    t25 = inversesqrt(t25);
    //Instruction 15584
    //MUL
    t3.xyz = vec3(t25) * t3.xyz;
    //Instruction 15585
    //MUL
    t16_0 = t3.yzzx * t3.xyzz;
    //Instruction 15586
    //DP4
    t16_6.x = dot(unity_SHBr, t16_0);
    //Instruction 15587
    //DP4
    t16_6.y = dot(unity_SHBg, t16_0);
    //Instruction 15588
    //DP4
    t16_6.z = dot(unity_SHBb, t16_0);
    //Instruction 15589
    //MUL
    t16_30 = t3.y * t3.y;
    //Instruction 15590
    //MAD
    t16_30 = t3.x * t3.x + (-t16_30);
    //Instruction 15591
    //MAD
    t16_6.xyz = unity_SHC.xyz * vec3(t16_30) + t16_6.xyz;
    //Instruction 15592
    //ADD
    t0 = (-t2.xxxx) + unity_4LightPosX0;
    //Instruction 15593
    //ADD
    t4 = (-t2.yyyy) + unity_4LightPosY0;
    //Instruction 15594
    //ADD
    t5 = (-t2.zzzz) + unity_4LightPosZ0;
    //Instruction 15595
    //MUL
    t7 = t4 * t4;
    //Instruction 15596
    //MAD
    t7 = t0 * t0 + t7;
    //Instruction 15597
    //MAD
    t7 = t5 * t5 + t7;
    //Instruction 15598
    //MUL
    t4 = t3.yyyy * t4;
    //Instruction 15599
    //MAD
    t0 = t0 * t3.xxxx + t4;
    //Instruction 15600
    //MAD
    t0 = t5 * t3.zzzz + t0;
    //Instruction 15601
    //RSQ
    t4 = inversesqrt(t7);
    //Instruction 15602
    //MUL
    t0 = t0 * t4;
    //Instruction 15603
    //MAX
    t0 = max(t0, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 15604
    //MAD
    t4 = t7 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 15605
    //DIV
    t4 = vec4(1.0, 1.0, 1.0, 1.0) / t4;
    //Instruction 15606
    //MUL
    t0 = t0 * t4;
    //Instruction 15607
    //MUL
    t4.xyz = t0.yyy * unity_LightColor[1].xyz;
    //Instruction 15608
    //MAD
    t4.xyz = unity_LightColor[0].xyz * t0.xxx + t4.xyz;
    //Instruction 15609
    //MAD
    t4.xyz = unity_LightColor[2].xyz * t0.zzz + t4.xyz;
    //Instruction 15610
    //MAD
    t4.xyz = unity_LightColor[3].xyz * t0.www + t4.xyz;
    //Instruction 15611
    //ADD
    t4.xyz = t4.xyz + t16_6.xyz;
    //Instruction 15612
    //MUL
    t0 = t1.yyyy * _Object2World[1];
    //Instruction 15613
    //MAD
    t0 = _Object2World[0] * t1.xxxx + t0;
    //Instruction 15614
    //MAD
    t0 = _Object2World[2] * t1.zzzz + t0;
    //Instruction 15615
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 15616
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 15617
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 15618
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 15619
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 15620
    //MOV
    vs_TEXCOORD0.xyz = t3.xyz;
    //Instruction 15621
    //MOV
    vs_TEXCOORD1.xyz = t2.xyz;
    //Instruction 15622
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 15623
    //MOV
    vs_TEXCOORD6 = t0;
    //Instruction 15624
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 15625
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 15626
    //MOV
    t1.xy = in_TEXCOORD2.zw;
    //Instruction 15627
    //MOV
    t1.z = in_TEXCOORD1.w;
    //Instruction 15628
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 15629
    //MOV
    vs_TEXCOORD5.xyz = t4.xyz;
    //Instruction 15630
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
mediump vec3 t16_1;
lowp vec3 t10_2;
lowp vec3 t10_3;
mediump vec3 t16_4;
mediump float t16_15;
mediump float t16_16;
void main()
{
    //Instruction 15394
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 15395
    //MOV
    t16_0.w = 1.0;
    //Instruction 15396
    //DP4
    t16_1.x = dot(unity_SHAr, t16_0);
    //Instruction 15397
    //DP4
    t16_1.y = dot(unity_SHAg, t16_0);
    //Instruction 15398
    //DP4
    t16_1.z = dot(unity_SHAb, t16_0);
    //Instruction 15399
    //ADD
    t16_0.xyz = t16_1.xyz + vs_TEXCOORD5.xyz;
    //Instruction 15400
    //MOV
    t16_15 = vs_TEXCOORD4.z;
    t16_15 = clamp(t16_15, 0.0, 1.0);
    //Instruction 15401
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 15402
    //SAMPLE
    t10_3.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 15403
    //ADD
    t16_1.xyz = t10_2.xyz + (-t10_3.xyz);
    //Instruction 15404
    //MAD
    t16_1.xyz = vec3(t16_15) * t16_1.xyz + t10_3.xyz;
    //Instruction 15405
    //MUL
    t16_1.xyz = t16_1.xyz * vs_TEXCOORD2.xyz;
    //Instruction 15406
    //MUL
    t16_0.xyz = t16_0.xyz * t16_1.xyz;
    //Instruction 15407
    //SAMPLE_C_LZ
    vec3 txVec39 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_15 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec39, 0.0);
    //Instruction 15408
    //ADD
    t16_16 = (-_LightShadowData.x) + 1.0;
    //Instruction 15409
    //MAD
    t16_15 = t16_15 * t16_16 + _LightShadowData.x;
    //Instruction 15410
    //MUL
    t16_4.xyz = vec3(t16_15) * _LightColor0.xyz;
    //Instruction 15411
    //MUL
    t16_1.xyz = t16_1.xyz * t16_4.xyz;
    //Instruction 15412
    //DP3
    t16_15 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 15413
    //MAX
    t16_15 = max(t16_15, 0.0);
    //Instruction 15414
    //MAD
    t16_0.xyz = t16_1.xyz * vec3(t16_15) + t16_0.xyz;
    //Instruction 15415
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 15416
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 15417
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_9;
  highp vec3 tmpvar_12;
  tmpvar_12.xy = _glesMultiTexCoord2.zw;
  tmpvar_12.z = _glesMultiTexCoord1.w;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  FinalPosition_16 = tmpvar_1.xyz;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_20;
  tmpvar_20 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_16 = tmpvar_20;
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_20;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_22;
      vPos_22 = tmpvar_20;
      highp float fTime_23;
      highp float fAdherenceScale_24;
      highp vec3 vWindVector_25;
      vWindVector_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_23 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_26;
      highp float fOscillation_27;
      fOscillation_27 = 1.0;
      highp float fAmount_28;
      highp float fTarget_29;
      highp vec4 tmpvar_30;
      tmpvar_30.x = (fTime_23 + _glesMultiTexCoord0.w);
      tmpvar_30.y = ((fTime_23 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_30.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_23 + _glesMultiTexCoord0.w));
      tmpvar_30.w = ((fTime_23 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      vOscillations_26 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      highp float tmpvar_32;
      tmpvar_32 = (vOscillations_26.y * vOscillations_26.z);
      fTarget_29 = 1.0;
      fAmount_28 = tmpvar_32;
      if ((tmpvar_32 < 0.0)) {
        fTarget_29 = -1.0;
        fAmount_28 = -(tmpvar_32);
      };
      fOscillation_27 = (((
        mix (mix (tmpvar_32, fTarget_29, fAmount_28), fTarget_29, fAmount_28)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_26.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_27 = (fOscillation_27 * (1.0 + (vOscillations_26.w * _ST_WindBranchWhip.x)));
      vPos_22 = (tmpvar_20 + ((vWindVector_25 * fOscillation_27) * _ST_WindBranch.y));
      highp vec4 tmpvar_33;
      tmpvar_33.zw = vec2(0.0, 0.0);
      tmpvar_33.x = ((fTime_23 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_33.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_34;
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      tmpvar_34 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((tmpvar_34.x * tmpvar_34.y) * (
        (tmpvar_34.x * tmpvar_34.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_26.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_22 = (vPos_22 + ((
        ((vRotatedBranchAnchor_14 - vPos_22) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_21 = vPos_22;
    } else {
      highp vec3 vPos_36;
      vPos_36 = vPos_21;
      highp float fTime_37;
      highp vec3 vWindVector_38;
      vWindVector_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_37 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_39;
      highp float fOscillation_40;
      fOscillation_40 = 1.0;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (fTime_37 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((fTime_37 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_37 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_39 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_39.y * vOscillations_39.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      fOscillation_40 = (((
        mix (mix (tmpvar_45, fTarget_42, fAmount_41), fTarget_42, fAmount_41)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_39.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_36 = (vPos_21 + ((vWindVector_38 * fOscillation_40) * _ST_WindBranch.y));
      vPos_21 = vPos_36;
    };
    FinalPosition_16 = vPos_21;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_16;
    highp float fMoveAmount_47;
    highp float fAdjust_48;
    highp float fLength_49;
    fLength_49 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_50;
    tmpvar_50 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_48 = tmpvar_50;
    if ((tmpvar_50 != 0.0)) {
      fAdjust_48 = pow (tmpvar_50, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_51;
    tmpvar_51.zw = vec2(0.0, 0.0);
    tmpvar_51.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_51.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_52;
    highp vec4 tmpvar_53;
    tmpvar_53 = abs(((
      fract((tmpvar_51 + 0.5))
     * 2.0) - 1.0));
    tmpvar_52 = (((
      (tmpvar_53 * tmpvar_53)
     * 
      (3.0 - (2.0 * tmpvar_53))
    ) - 0.5) * 2.0);
    fMoveAmount_47 = ((_ST_WindGlobal.y * (tmpvar_52.x + 
      (tmpvar_52.y * tmpvar_52.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_47 = (fMoveAmount_47 * fAdjust_48);
    vPos_46.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * fMoveAmount_47));
    vPos_46 = (normalize(vPos_46) * fLength_49);
    FinalPosition_16 = vPos_46;
  };
  tmpvar_13.xyz = FinalPosition_16;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_54;
  v_54.x = _World2Object[0].x;
  v_54.y = _World2Object[1].x;
  v_54.z = _World2Object[2].x;
  v_54.w = _World2Object[3].x;
  highp vec4 v_55;
  v_55.x = _World2Object[0].y;
  v_55.y = _World2Object[1].y;
  v_55.z = _World2Object[2].y;
  v_55.w = _World2Object[3].y;
  highp vec4 v_56;
  v_56.x = _World2Object[0].z;
  v_56.y = _World2Object[1].z;
  v_56.z = _World2Object[2].z;
  v_56.w = _World2Object[3].z;
  highp vec3 tmpvar_57;
  tmpvar_57 = normalize(((
    (v_54.xyz * _glesNormal.x)
   + 
    (v_55.xyz * _glesNormal.y)
  ) + (v_56.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_57;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_58;
  tmpvar_58.w = 1.0;
  tmpvar_58.xyz = worldNormal_3;
  mediump vec4 normal_59;
  normal_59 = tmpvar_58;
  mediump vec3 x2_60;
  mediump vec4 tmpvar_61;
  tmpvar_61 = (normal_59.xyzz * normal_59.yzzx);
  x2_60.x = dot (unity_SHBr, tmpvar_61);
  x2_60.y = dot (unity_SHBg, tmpvar_61);
  x2_60.z = dot (unity_SHBb, tmpvar_61);
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = (x2_60 + (unity_SHC.xyz * (
    (normal_59.x * normal_59.x)
   - 
    (normal_59.y * normal_59.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 blendColor_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_9 = (diffuseColor_12.w * _Color.w);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_11 = tmpvar_14;
  diffuseColor_12.xyz = mix (blendColor_11.xyz, diffuseColor_12.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_15 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_12.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_16;
  normalWorld_16 = tmpvar_4;
  mediump vec3 tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = normalWorld_16;
  mediump vec3 x1_19;
  x1_19.x = dot (unity_SHAr, tmpvar_18);
  x1_19.y = dot (unity_SHAg, tmpvar_18);
  x1_19.z = dot (unity_SHAb, tmpvar_18);
  tmpvar_17 = (xlv_TEXCOORD5 + x1_19);
  lowp vec4 c_20;
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_22 = tmpvar_23;
  c_21.xyz = ((tmpvar_8 * tmpvar_1) * diff_22);
  c_21.w = tmpvar_9;
  c_20.w = c_21.w;
  c_20.xyz = (c_21.xyz + (tmpvar_8 * tmpvar_17));
  c_3.xyz = c_20.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec3 t3;
highp vec3 t4;
highp vec3 t5;
highp vec4 t6;
mediump vec3 t16_7;
highp vec2 t8;
bool tb8;
highp vec2 t16;
highp vec2 t20;
highp vec2 t22;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
highp float t29;
mediump float t16_31;
void main()
{
    //Instruction 15147
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 15148
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 15149
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 15150
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 15151
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 15152
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 15153
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 15154
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 15155
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 15156
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 15157
    //LT
    tb8 = 0.0<t16_2.x;
    //Instruction 15158
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 15159
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 15160
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 15161
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 15162
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 15163
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 15164
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 15165
    //ADD
    t3.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 15166
    //MAD
    t3.xyz = unity_LODFade.xxx * t3.xyz + in_POSITION0.xyz;
    //Instruction 15167
    //GE
    tb25 = t16_2.x>=3.000000;
    //Instruction 15168
    //IF
    if(tb25){
        //Instruction 15169
        //EQ
        tb25 = t16_2.x==5.000000;
        //Instruction 15170
        //IF
        if(tb25){
            //Instruction 15171
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 15172
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 15173
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 15174
            //DP3
            t25 = dot(t4.xyz, t4.xyz);
            //Instruction 15175
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 15176
            //MUL
            t4.xyz = vec3(t25) * t4.xyz;
            //Instruction 15177
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 15178
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 15179
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 15180
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 15181
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 15182
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 15183
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 15184
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 15185
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 15186
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 15187
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 15188
            //FRC
            t2 = fract(t2);
            //Instruction 15189
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 15190
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 15191
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 15192
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 15193
            //ADD
            t2 = t2 + t2;
            //Instruction 15194
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 15195
            //LT
            tb27 = t6.w<0.0;
            //Instruction 15196
            //MOV
            t6.y = (-t6.w);
            //Instruction 15197
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 15198
            //MOVC
            t6.xy = (bool(tb27)) ? t6.xy : t6.zw;
            //Instruction 15199
            //MAD
            t27 = (-t2.y) * t2.z + t6.x;
            //Instruction 15200
            //MAD
            t27 = t6.y * t27 + t6.w;
            //Instruction 15201
            //ADD
            t28 = (-t27) + t6.x;
            //Instruction 15202
            //MAD
            t27 = t6.y * t28 + t27;
            //Instruction 15203
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 15204
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 15205
            //ADD
            t29 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 15206
            //MUL
            t29 = t2.x * t29;
            //Instruction 15207
            //MAD
            t27 = t27 * t28 + t29;
            //Instruction 15208
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 15209
            //MUL
            t27 = t27 * t28;
            //Instruction 15210
            //MUL
            t5.xyz = vec3(t27) * t5.xyz;
            //Instruction 15211
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 15212
            //MAD
            t6.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 15213
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 15214
            //MAD
            t6.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 15215
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 15216
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 15217
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 15218
            //MUL
            t22.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 15219
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 15220
            //MAD
            t6.xy = t22.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 15221
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 15222
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 15223
            //MUL
            t25 = t6.x * t6.y;
            //Instruction 15224
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 15225
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 15226
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 15227
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 15228
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 15229
            //MUL
            t4.xyz = vec3(t25) * t4.xyz;
            //Instruction 15230
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 15231
        //ELSE
        } else {
            //Instruction 15232
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 15233
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 15234
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 15235
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 15236
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 15237
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 15238
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 15239
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 15240
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 15241
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 15242
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 15243
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 15244
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 15245
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 15246
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 15247
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 15248
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 15249
            //LT
            tb0 = t2.w<0.0;
            //Instruction 15250
            //MOV
            t2.y = (-t2.w);
            //Instruction 15251
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 15252
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 15253
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 15254
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 15255
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 15256
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 15257
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 15258
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 15259
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 15260
            //MUL
            t27 = t27 * t5.x;
            //Instruction 15261
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 15262
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 15263
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 15264
        //ENDIF
        }
        //Instruction 15265
    //ENDIF
    }
    //Instruction 15266
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 15267
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 15268
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 15269
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 15270
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 15271
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 15272
    //NE
    tb27 = t25!=0.0;
    //Instruction 15273
    //LOG
    t4.x = log2(t25);
    //Instruction 15274
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 15275
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 15276
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 15277
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 15278
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 15279
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 15280
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 15281
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 15282
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 15283
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 15284
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 15285
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 15286
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 15287
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 15288
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 15289
    //MUL
    t25 = t25 * t27;
    //Instruction 15290
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 15291
    //MOV
    t4.y = t3.y;
    //Instruction 15292
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 15293
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 15294
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 15295
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 15296
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 15297
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 15298
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 15299
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 15300
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 15301
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 15302
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 15303
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 15304
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 15305
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 15306
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 15307
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 15308
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 15309
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 15310
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 15311
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 15312
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 15313
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 15314
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 15315
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 15316
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 15317
    //DP3
    t24 = dot(t0.xyz, t0.xyz);
    //Instruction 15318
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 15319
    //MUL
    t0.xyz = vec3(t24) * t0.xyz;
    //Instruction 15320
    //MUL
    t16_2 = t0.yzzx * t0.xyzz;
    //Instruction 15321
    //DP4
    t16_7.x = dot(unity_SHBr, t16_2);
    //Instruction 15322
    //DP4
    t16_7.y = dot(unity_SHBg, t16_2);
    //Instruction 15323
    //DP4
    t16_7.z = dot(unity_SHBb, t16_2);
    //Instruction 15324
    //MUL
    t16_31 = t0.y * t0.y;
    //Instruction 15325
    //MAD
    t16_31 = t0.x * t0.x + (-t16_31);
    //Instruction 15326
    //MAD
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(t16_31) + t16_7.xyz;
    //Instruction 15327
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 15328
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 15329
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 15330
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 15331
    //MOV
    t0.xy = in_TEXCOORD2.zw;
    //Instruction 15332
    //MOV
    t0.z = in_TEXCOORD1.w;
    //Instruction 15333
    //MOV
    vs_TEXCOORD4.xyz = t0.xyz;
    //Instruction 15334
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec4 t16_1;
lowp vec3 t10_1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_12;
void main()
{
    //Instruction 15118
    //MOV
    t16_0.x = vs_TEXCOORD4.z;
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 15119
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 15120
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 15121
    //ADD
    t16_4.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 15122
    //MAD
    t16_0.xyz = t16_0.xxx * t16_4.xyz + t10_2.xyz;
    //Instruction 15123
    //MAX
    t16_12 = max(t16_0.z, t16_0.y);
    //Instruction 15124
    //MAX
    t16_12 = max(t16_12, t16_0.x);
    //Instruction 15125
    //ADD
    t16_3.xyz = (-t16_0.xyz) + _HueVariation.xyz;
    //Instruction 15126
    //MAD
    t16_0.xyz = vs_TEXCOORD3.zzz * t16_3.xyz + t16_0.xyz;
    //Instruction 15127
    //MAX
    t16_3.x = max(t16_0.z, t16_0.y);
    //Instruction 15128
    //MAX
    t16_3.x = max(t16_0.x, t16_3.x);
    //Instruction 15129
    //DIV
    t16_12 = t16_12 / t16_3.x;
    //Instruction 15130
    //MAD
    t16_1.x = t16_12 * 0.500000 + 0.500000;
    //Instruction 15131
    //MUL
    t16_0.xyz = t16_0.xyz * t16_1.xxx;
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 15132
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 15133
    //MOV
    t16_1.xyz = vs_TEXCOORD0.xyz;
    //Instruction 15134
    //MOV
    t16_1.w = 1.0;
    //Instruction 15135
    //DP4
    t16_3.x = dot(unity_SHAr, t16_1);
    //Instruction 15136
    //DP4
    t16_3.y = dot(unity_SHAg, t16_1);
    //Instruction 15137
    //DP4
    t16_3.z = dot(unity_SHAb, t16_1);
    //Instruction 15138
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD5.xyz;
    //Instruction 15139
    //MUL
    t16_3.xyz = t16_0.xyz * t16_3.xyz;
    //Instruction 15140
    //MUL
    t16_0.xyz = t16_0.xyz * _LightColor0.xyz;
    //Instruction 15141
    //DP3
    t16_12 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 15142
    //MAX
    t16_12 = max(t16_12, 0.0);
    //Instruction 15143
    //MAD
    t16_0.xyz = t16_0.xyz * vec3(t16_12) + t16_3.xyz;
    //Instruction 15144
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 15145
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 15146
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_10;
  highp vec3 tmpvar_13;
  tmpvar_13.xy = _glesMultiTexCoord2.zw;
  tmpvar_13.z = _glesMultiTexCoord1.w;
  tmpvar_9 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  FinalPosition_17 = tmpvar_1.xyz;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_17 = tmpvar_21;
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_21;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = tmpvar_21;
      highp float fTime_24;
      highp float fAdherenceScale_25;
      highp vec3 vWindVector_26;
      vWindVector_26 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_24 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (fTime_24 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((fTime_24 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_24 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((fTime_24 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_27.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_28 = (fOscillation_28 * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (tmpvar_21 + ((vWindVector_26 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((fTime_24 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_25 = (1.0 - ((tmpvar_35.x * tmpvar_35.y) * (
        (tmpvar_35.x * tmpvar_35.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_25 = (fAdherenceScale_25 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((vRotatedBranchAnchor_15 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_25) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp float fTime_38;
      highp vec3 vWindVector_39;
      vWindVector_39 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_38 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_40;
      highp float fOscillation_41;
      fOscillation_41 = 1.0;
      highp float fAmount_42;
      highp float fTarget_43;
      highp vec4 tmpvar_44;
      tmpvar_44.w = 0.0;
      tmpvar_44.x = (fTime_38 + _glesMultiTexCoord0.w);
      tmpvar_44.y = ((fTime_38 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_44.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_38 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_43 = 1.0;
      fAmount_42 = tmpvar_46;
      if ((tmpvar_46 < 0.0)) {
        fTarget_43 = -1.0;
        fAmount_42 = -(tmpvar_46);
      };
      fOscillation_41 = (((
        mix (mix (tmpvar_46, fTarget_43, fAmount_42), fTarget_43, fAmount_42)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_37 = (vPos_22 + ((vWindVector_39 * fOscillation_41) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_47;
    vPos_47 = FinalPosition_17;
    highp float fMoveAmount_48;
    highp float fAdjust_49;
    highp float fLength_50;
    fLength_50 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_51;
    tmpvar_51 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_49 = tmpvar_51;
    if ((tmpvar_51 != 0.0)) {
      fAdjust_49 = pow (tmpvar_51, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_52;
    tmpvar_52.zw = vec2(0.0, 0.0);
    tmpvar_52.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_52.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_53;
    highp vec4 tmpvar_54;
    tmpvar_54 = abs(((
      fract((tmpvar_52 + 0.5))
     * 2.0) - 1.0));
    tmpvar_53 = (((
      (tmpvar_54 * tmpvar_54)
     * 
      (3.0 - (2.0 * tmpvar_54))
    ) - 0.5) * 2.0);
    fMoveAmount_48 = ((_ST_WindGlobal.y * (tmpvar_53.x + 
      (tmpvar_53.y * tmpvar_53.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_48 = (fMoveAmount_48 * fAdjust_49);
    vPos_47.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_48));
    vPos_47 = (normalize(vPos_47) * fLength_50);
    FinalPosition_17 = vPos_47;
  };
  tmpvar_14.xyz = FinalPosition_17;
  tmpvar_5 = tmpvar_7;
  highp vec4 v_55;
  v_55.x = _World2Object[0].x;
  v_55.y = _World2Object[1].x;
  v_55.z = _World2Object[2].x;
  v_55.w = _World2Object[3].x;
  highp vec4 v_56;
  v_56.x = _World2Object[0].y;
  v_56.y = _World2Object[1].y;
  v_56.z = _World2Object[2].y;
  v_56.w = _World2Object[3].y;
  highp vec4 v_57;
  v_57.x = _World2Object[0].z;
  v_57.y = _World2Object[1].z;
  v_57.z = _World2Object[2].z;
  v_57.w = _World2Object[3].z;
  highp vec3 tmpvar_58;
  tmpvar_58 = normalize(((
    (v_55.xyz * _glesNormal.x)
   + 
    (v_56.xyz * _glesNormal.y)
  ) + (v_57.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_58;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_59;
  tmpvar_59.w = 1.0;
  tmpvar_59.xyz = worldNormal_3;
  mediump vec4 normal_60;
  normal_60 = tmpvar_59;
  mediump vec3 x2_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = (normal_60.xyzz * normal_60.yzzx);
  x2_61.x = dot (unity_SHBr, tmpvar_62);
  x2_61.y = dot (unity_SHBg, tmpvar_62);
  x2_61.z = dot (unity_SHBb, tmpvar_62);
  tmpvar_6 = (unity_World2Shadow[0] * (_Object2World * tmpvar_14));
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = (x2_61 + (unity_SHC.xyz * (
    (normal_60.x * normal_60.x)
   - 
    (normal_60.y * normal_60.y)
  )));
  xlv_TEXCOORD6 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 blendColor_12;
  mediump vec4 diffuseColor_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_13 = tmpvar_14;
  tmpvar_10 = (diffuseColor_13.w * _Color.w);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_12 = tmpvar_15;
  diffuseColor_13.xyz = mix (blendColor_12.xyz, diffuseColor_13.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_13.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_11 = (max (diffuseColor_13.x, max (diffuseColor_13.y, diffuseColor_13.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_13.xyz = clamp ((tmpvar_16 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_13.xyz * tmpvar_7.xyz);
  lowp float tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_17 = tmpvar_18;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_17;
  mediump vec3 normalWorld_19;
  normalWorld_19 = tmpvar_5;
  mediump vec3 tmpvar_20;
  mediump vec3 tmpvar_21;
  mediump vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = normalWorld_19;
  mediump vec3 x1_23;
  x1_23.x = dot (unity_SHAr, tmpvar_22);
  x1_23.y = dot (unity_SHAg, tmpvar_22);
  x1_23.z = dot (unity_SHAb, tmpvar_22);
  tmpvar_21 = (xlv_TEXCOORD5 + x1_23);
  tmpvar_20 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_20;
  lowp vec4 c_24;
  lowp vec4 c_25;
  lowp float diff_26;
  mediump float tmpvar_27;
  tmpvar_27 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_26 = tmpvar_27;
  c_25.xyz = ((tmpvar_9 * tmpvar_20) * diff_26);
  c_25.w = tmpvar_10;
  c_24.w = c_25.w;
  c_24.xyz = (c_25.xyz + (tmpvar_9 * tmpvar_21));
  c_4.xyz = c_24.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_10;
  highp vec3 tmpvar_13;
  tmpvar_13.xy = _glesMultiTexCoord2.zw;
  tmpvar_13.z = _glesMultiTexCoord1.w;
  tmpvar_9 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  FinalPosition_17 = tmpvar_1.xyz;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_17 = tmpvar_21;
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_21;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = tmpvar_21;
      highp float fTime_24;
      highp float fAdherenceScale_25;
      highp vec3 vWindVector_26;
      vWindVector_26 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_24 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (fTime_24 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((fTime_24 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_24 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((fTime_24 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_27.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_28 = (fOscillation_28 * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (tmpvar_21 + ((vWindVector_26 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((fTime_24 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_25 = (1.0 - ((tmpvar_35.x * tmpvar_35.y) * (
        (tmpvar_35.x * tmpvar_35.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_25 = (fAdherenceScale_25 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((vRotatedBranchAnchor_15 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_25) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp float fTime_38;
      highp vec3 vWindVector_39;
      vWindVector_39 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_38 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_40;
      highp float fOscillation_41;
      fOscillation_41 = 1.0;
      highp float fAmount_42;
      highp float fTarget_43;
      highp vec4 tmpvar_44;
      tmpvar_44.w = 0.0;
      tmpvar_44.x = (fTime_38 + _glesMultiTexCoord0.w);
      tmpvar_44.y = ((fTime_38 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_44.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_38 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_43 = 1.0;
      fAmount_42 = tmpvar_46;
      if ((tmpvar_46 < 0.0)) {
        fTarget_43 = -1.0;
        fAmount_42 = -(tmpvar_46);
      };
      fOscillation_41 = (((
        mix (mix (tmpvar_46, fTarget_43, fAmount_42), fTarget_43, fAmount_42)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_37 = (vPos_22 + ((vWindVector_39 * fOscillation_41) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_47;
    vPos_47 = FinalPosition_17;
    highp float fMoveAmount_48;
    highp float fAdjust_49;
    highp float fLength_50;
    fLength_50 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_51;
    tmpvar_51 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_49 = tmpvar_51;
    if ((tmpvar_51 != 0.0)) {
      fAdjust_49 = pow (tmpvar_51, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_52;
    tmpvar_52.zw = vec2(0.0, 0.0);
    tmpvar_52.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_52.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_53;
    highp vec4 tmpvar_54;
    tmpvar_54 = abs(((
      fract((tmpvar_52 + 0.5))
     * 2.0) - 1.0));
    tmpvar_53 = (((
      (tmpvar_54 * tmpvar_54)
     * 
      (3.0 - (2.0 * tmpvar_54))
    ) - 0.5) * 2.0);
    fMoveAmount_48 = ((_ST_WindGlobal.y * (tmpvar_53.x + 
      (tmpvar_53.y * tmpvar_53.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_48 = (fMoveAmount_48 * fAdjust_49);
    vPos_47.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_48));
    vPos_47 = (normalize(vPos_47) * fLength_50);
    FinalPosition_17 = vPos_47;
  };
  tmpvar_14.xyz = FinalPosition_17;
  tmpvar_5 = tmpvar_7;
  highp vec3 tmpvar_55;
  tmpvar_55 = (_Object2World * tmpvar_14).xyz;
  highp vec4 v_56;
  v_56.x = _World2Object[0].x;
  v_56.y = _World2Object[1].x;
  v_56.z = _World2Object[2].x;
  v_56.w = _World2Object[3].x;
  highp vec4 v_57;
  v_57.x = _World2Object[0].y;
  v_57.y = _World2Object[1].y;
  v_57.z = _World2Object[2].y;
  v_57.w = _World2Object[3].y;
  highp vec4 v_58;
  v_58.x = _World2Object[0].z;
  v_58.y = _World2Object[1].z;
  v_58.z = _World2Object[2].z;
  v_58.w = _World2Object[3].z;
  highp vec3 tmpvar_59;
  tmpvar_59 = normalize(((
    (v_56.xyz * _glesNormal.x)
   + 
    (v_57.xyz * _glesNormal.y)
  ) + (v_58.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_59;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_60;
  tmpvar_60.w = 1.0;
  tmpvar_60.xyz = worldNormal_3;
  mediump vec4 normal_61;
  normal_61 = tmpvar_60;
  mediump vec3 x2_62;
  mediump vec4 tmpvar_63;
  tmpvar_63 = (normal_61.xyzz * normal_61.yzzx);
  x2_62.x = dot (unity_SHBr, tmpvar_63);
  x2_62.y = dot (unity_SHBg, tmpvar_63);
  x2_62.z = dot (unity_SHBb, tmpvar_63);
  highp vec3 lightColor0_64;
  lightColor0_64 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_65;
  lightColor1_65 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_66;
  lightColor2_66 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_67;
  lightColor3_67 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_68;
  lightAttenSq_68 = unity_4LightAtten0;
  highp vec3 normal_69;
  normal_69 = worldNormal_3;
  highp vec3 col_70;
  highp vec4 ndotl_71;
  highp vec4 lengthSq_72;
  highp vec4 tmpvar_73;
  tmpvar_73 = (unity_4LightPosX0 - tmpvar_55.x);
  highp vec4 tmpvar_74;
  tmpvar_74 = (unity_4LightPosY0 - tmpvar_55.y);
  highp vec4 tmpvar_75;
  tmpvar_75 = (unity_4LightPosZ0 - tmpvar_55.z);
  lengthSq_72 = (tmpvar_73 * tmpvar_73);
  lengthSq_72 = (lengthSq_72 + (tmpvar_74 * tmpvar_74));
  lengthSq_72 = (lengthSq_72 + (tmpvar_75 * tmpvar_75));
  ndotl_71 = (tmpvar_73 * normal_69.x);
  ndotl_71 = (ndotl_71 + (tmpvar_74 * normal_69.y));
  ndotl_71 = (ndotl_71 + (tmpvar_75 * normal_69.z));
  highp vec4 tmpvar_76;
  tmpvar_76 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_71 * inversesqrt(lengthSq_72)));
  ndotl_71 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = (tmpvar_76 * (1.0/((1.0 + 
    (lengthSq_72 * lightAttenSq_68)
  ))));
  col_70 = (lightColor0_64 * tmpvar_77.x);
  col_70 = (col_70 + (lightColor1_65 * tmpvar_77.y));
  col_70 = (col_70 + (lightColor2_66 * tmpvar_77.z));
  col_70 = (col_70 + (lightColor3_67 * tmpvar_77.w));
  tmpvar_6 = ((x2_62 + (unity_SHC.xyz * 
    ((normal_61.x * normal_61.x) - (normal_61.y * normal_61.y))
  )) + col_70);
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_55;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 blendColor_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_9 = (diffuseColor_12.w * _Color.w);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_11 = tmpvar_14;
  diffuseColor_12.xyz = mix (blendColor_11.xyz, diffuseColor_12.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_15 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_12.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_16;
  normalWorld_16 = tmpvar_4;
  mediump vec3 tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = normalWorld_16;
  mediump vec3 x1_19;
  x1_19.x = dot (unity_SHAr, tmpvar_18);
  x1_19.y = dot (unity_SHAg, tmpvar_18);
  x1_19.z = dot (unity_SHAb, tmpvar_18);
  tmpvar_17 = (xlv_TEXCOORD5 + x1_19);
  lowp vec4 c_20;
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_22 = tmpvar_23;
  c_21.xyz = ((tmpvar_8 * tmpvar_1) * diff_22);
  c_21.w = tmpvar_9;
  c_20.w = c_21.w;
  c_20.xyz = (c_21.xyz + (tmpvar_8 * tmpvar_17));
  c_3.xyz = c_20.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
mediump vec3 t16_7;
highp vec2 t8;
bool tb8;
highp vec2 t16;
highp vec2 t20;
highp vec2 t22;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
highp float t29;
mediump float t16_31;
void main()
{
    //Instruction 15364
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 15365
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 15366
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 15367
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 15368
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 15369
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 15370
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 15371
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 15372
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 15373
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 15374
    //LT
    tb8 = 0.0<t16_2.x;
    //Instruction 15375
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 15376
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 15377
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 15378
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 15379
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 15380
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 15381
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 15382
    //ADD
    t3.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 15383
    //MAD
    t3.xyz = unity_LODFade.xxx * t3.xyz + in_POSITION0.xyz;
    //Instruction 15384
    //GE
    tb25 = t16_2.x>=3.000000;
    //Instruction 15385
    //IF
    if(tb25){
        //Instruction 15386
        //EQ
        tb25 = t16_2.x==5.000000;
        //Instruction 15387
        //IF
        if(tb25){
            //Instruction 15388
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 15389
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 15390
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 15391
            //DP3
            t25 = dot(t4.xyz, t4.xyz);
            //Instruction 15392
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 15393
            //MUL
            t4.xyz = vec3(t25) * t4.xyz;
            //Instruction 15394
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 15395
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 15396
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 15397
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 15398
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 15399
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 15400
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 15401
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 15402
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 15403
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 15404
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 15405
            //FRC
            t2 = fract(t2);
            //Instruction 15406
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 15407
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 15408
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 15409
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 15410
            //ADD
            t2 = t2 + t2;
            //Instruction 15411
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 15412
            //LT
            tb27 = t6.w<0.0;
            //Instruction 15413
            //MOV
            t6.y = (-t6.w);
            //Instruction 15414
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 15415
            //MOVC
            t6.xy = (bool(tb27)) ? t6.xy : t6.zw;
            //Instruction 15416
            //MAD
            t27 = (-t2.y) * t2.z + t6.x;
            //Instruction 15417
            //MAD
            t27 = t6.y * t27 + t6.w;
            //Instruction 15418
            //ADD
            t28 = (-t27) + t6.x;
            //Instruction 15419
            //MAD
            t27 = t6.y * t28 + t27;
            //Instruction 15420
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 15421
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 15422
            //ADD
            t29 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 15423
            //MUL
            t29 = t2.x * t29;
            //Instruction 15424
            //MAD
            t27 = t27 * t28 + t29;
            //Instruction 15425
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 15426
            //MUL
            t27 = t27 * t28;
            //Instruction 15427
            //MUL
            t5.xyz = vec3(t27) * t5.xyz;
            //Instruction 15428
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 15429
            //MAD
            t6.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 15430
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 15431
            //MAD
            t6.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 15432
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 15433
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 15434
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 15435
            //MUL
            t22.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 15436
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 15437
            //MAD
            t6.xy = t22.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 15438
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 15439
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 15440
            //MUL
            t25 = t6.x * t6.y;
            //Instruction 15441
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 15442
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 15443
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 15444
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 15445
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 15446
            //MUL
            t4.xyz = vec3(t25) * t4.xyz;
            //Instruction 15447
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 15448
        //ELSE
        } else {
            //Instruction 15449
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 15450
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 15451
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 15452
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 15453
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 15454
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 15455
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 15456
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 15457
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 15458
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 15459
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 15460
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 15461
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 15462
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 15463
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 15464
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 15465
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 15466
            //LT
            tb0 = t2.w<0.0;
            //Instruction 15467
            //MOV
            t2.y = (-t2.w);
            //Instruction 15468
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 15469
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 15470
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 15471
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 15472
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 15473
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 15474
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 15475
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 15476
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 15477
            //MUL
            t27 = t27 * t5.x;
            //Instruction 15478
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 15479
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 15480
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 15481
        //ENDIF
        }
        //Instruction 15482
    //ENDIF
    }
    //Instruction 15483
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 15484
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 15485
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 15486
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 15487
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 15488
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 15489
    //NE
    tb27 = t25!=0.0;
    //Instruction 15490
    //LOG
    t4.x = log2(t25);
    //Instruction 15491
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 15492
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 15493
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 15494
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 15495
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 15496
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 15497
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 15498
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 15499
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 15500
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 15501
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 15502
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 15503
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 15504
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 15505
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 15506
    //MUL
    t25 = t25 * t27;
    //Instruction 15507
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 15508
    //MOV
    t4.y = t3.y;
    //Instruction 15509
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 15510
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 15511
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 15512
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 15513
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 15514
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 15515
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 15516
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 15517
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 15518
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 15519
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 15520
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 15521
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 15522
    //MOV
    t3.x = _World2Object[0].x;
    //Instruction 15523
    //MOV
    t3.y = _World2Object[1].x;
    //Instruction 15524
    //MOV
    t3.z = _World2Object[2].x;
    //Instruction 15525
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 15526
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 15527
    //MOV
    t4.z = _World2Object[2].y;
    //Instruction 15528
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 15529
    //MAD
    t3.xyz = t3.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 15530
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 15531
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 15532
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 15533
    //MAD
    t3.xyz = t4.xyz * in_NORMAL0.zzz + t3.xyz;
    //Instruction 15534
    //DP3
    t24 = dot(t3.xyz, t3.xyz);
    //Instruction 15535
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 15536
    //MUL
    t3.xyz = vec3(t24) * t3.xyz;
    //Instruction 15537
    //MUL
    t16_2 = t3.yzzx * t3.xyzz;
    //Instruction 15538
    //DP4
    t16_7.x = dot(unity_SHBr, t16_2);
    //Instruction 15539
    //DP4
    t16_7.y = dot(unity_SHBg, t16_2);
    //Instruction 15540
    //DP4
    t16_7.z = dot(unity_SHBb, t16_2);
    //Instruction 15541
    //MUL
    t16_31 = t3.y * t3.y;
    //Instruction 15542
    //MAD
    t16_31 = t3.x * t3.x + (-t16_31);
    //Instruction 15543
    //MAD
    t16_7.xyz = unity_SHC.xyz * vec3(t16_31) + t16_7.xyz;
    //Instruction 15544
    //ADD
    t2 = (-t0.xxxx) + unity_4LightPosX0;
    //Instruction 15545
    //ADD
    t4 = (-t0.yyyy) + unity_4LightPosY0;
    //Instruction 15546
    //ADD
    t5 = (-t0.zzzz) + unity_4LightPosZ0;
    //Instruction 15547
    //MUL
    t6 = t4 * t4;
    //Instruction 15548
    //MAD
    t6 = t2 * t2 + t6;
    //Instruction 15549
    //MAD
    t6 = t5 * t5 + t6;
    //Instruction 15550
    //MUL
    t4 = t3.yyyy * t4;
    //Instruction 15551
    //MAD
    t2 = t2 * t3.xxxx + t4;
    //Instruction 15552
    //MAD
    t2 = t5 * t3.zzzz + t2;
    //Instruction 15553
    //RSQ
    t4 = inversesqrt(t6);
    //Instruction 15554
    //MUL
    t2 = t2 * t4;
    //Instruction 15555
    //MAX
    t2 = max(t2, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 15556
    //MAD
    t4 = t6 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 15557
    //DIV
    t4 = vec4(1.0, 1.0, 1.0, 1.0) / t4;
    //Instruction 15558
    //MUL
    t2 = t2 * t4;
    //Instruction 15559
    //MUL
    t4.xyz = t2.yyy * unity_LightColor[1].xyz;
    //Instruction 15560
    //MAD
    t4.xyz = unity_LightColor[0].xyz * t2.xxx + t4.xyz;
    //Instruction 15561
    //MAD
    t4.xyz = unity_LightColor[2].xyz * t2.zzz + t4.xyz;
    //Instruction 15562
    //MAD
    t4.xyz = unity_LightColor[3].xyz * t2.www + t4.xyz;
    //Instruction 15563
    //ADD
    t4.xyz = t4.xyz + t16_7.xyz;
    //Instruction 15564
    //MOV
    vs_TEXCOORD0.xyz = t3.xyz;
    //Instruction 15565
    //MOV
    vs_TEXCOORD1.xyz = t0.xyz;
    //Instruction 15566
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 15567
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 15568
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 15569
    //MOV
    t0.xy = in_TEXCOORD2.zw;
    //Instruction 15570
    //MOV
    t0.z = in_TEXCOORD1.w;
    //Instruction 15571
    //MOV
    vs_TEXCOORD4.xyz = t0.xyz;
    //Instruction 15572
    //MOV
    vs_TEXCOORD5.xyz = t4.xyz;
    //Instruction 15573
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec4 t16_1;
lowp vec3 t10_1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_12;
void main()
{
    //Instruction 15335
    //MOV
    t16_0.x = vs_TEXCOORD4.z;
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 15336
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 15337
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 15338
    //ADD
    t16_4.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 15339
    //MAD
    t16_0.xyz = t16_0.xxx * t16_4.xyz + t10_2.xyz;
    //Instruction 15340
    //MAX
    t16_12 = max(t16_0.z, t16_0.y);
    //Instruction 15341
    //MAX
    t16_12 = max(t16_12, t16_0.x);
    //Instruction 15342
    //ADD
    t16_3.xyz = (-t16_0.xyz) + _HueVariation.xyz;
    //Instruction 15343
    //MAD
    t16_0.xyz = vs_TEXCOORD3.zzz * t16_3.xyz + t16_0.xyz;
    //Instruction 15344
    //MAX
    t16_3.x = max(t16_0.z, t16_0.y);
    //Instruction 15345
    //MAX
    t16_3.x = max(t16_0.x, t16_3.x);
    //Instruction 15346
    //DIV
    t16_12 = t16_12 / t16_3.x;
    //Instruction 15347
    //MAD
    t16_1.x = t16_12 * 0.500000 + 0.500000;
    //Instruction 15348
    //MUL
    t16_0.xyz = t16_0.xyz * t16_1.xxx;
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 15349
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 15350
    //MOV
    t16_1.xyz = vs_TEXCOORD0.xyz;
    //Instruction 15351
    //MOV
    t16_1.w = 1.0;
    //Instruction 15352
    //DP4
    t16_3.x = dot(unity_SHAr, t16_1);
    //Instruction 15353
    //DP4
    t16_3.y = dot(unity_SHAg, t16_1);
    //Instruction 15354
    //DP4
    t16_3.z = dot(unity_SHAb, t16_1);
    //Instruction 15355
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD5.xyz;
    //Instruction 15356
    //MUL
    t16_3.xyz = t16_0.xyz * t16_3.xyz;
    //Instruction 15357
    //MUL
    t16_0.xyz = t16_0.xyz * _LightColor0.xyz;
    //Instruction 15358
    //DP3
    t16_12 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 15359
    //MAX
    t16_12 = max(t16_12, 0.0);
    //Instruction 15360
    //MAD
    t16_0.xyz = t16_0.xyz * vec3(t16_12) + t16_3.xyz;
    //Instruction 15361
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 15362
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 15363
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_9.xy = tmpvar_2.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].x;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].y;
  tmpvar_11 = clamp (((
    fract(((tmpvar_12 + tmpvar_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_11;
  highp vec3 tmpvar_14;
  tmpvar_14.xy = _glesMultiTexCoord2.zw;
  tmpvar_14.z = _glesMultiTexCoord1.w;
  tmpvar_10 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  FinalPosition_18 = tmpvar_1.xyz;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_18 = tmpvar_22;
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_23;
    vPos_23 = tmpvar_22;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_24;
      vPos_24 = tmpvar_22;
      highp float fTime_25;
      highp float fAdherenceScale_26;
      highp vec3 vWindVector_27;
      vWindVector_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_25 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_28;
      highp float fOscillation_29;
      fOscillation_29 = 1.0;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.x = (fTime_25 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((fTime_25 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_25 + _glesMultiTexCoord0.w));
      tmpvar_32.w = ((fTime_25 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_28 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_28.y * vOscillations_28.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      fOscillation_29 = (((
        mix (mix (tmpvar_34, fTarget_31, fAmount_30), fTarget_31, fAmount_30)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_28.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_29 = (fOscillation_29 * (1.0 + (vOscillations_28.w * _ST_WindBranchWhip.x)));
      vPos_24 = (tmpvar_22 + ((vWindVector_27 * fOscillation_29) * _ST_WindBranch.y));
      highp vec4 tmpvar_35;
      tmpvar_35.zw = vec2(0.0, 0.0);
      tmpvar_35.x = ((fTime_25 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_35.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_36;
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      tmpvar_36 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      fAdherenceScale_26 = (1.0 - ((tmpvar_36.x * tmpvar_36.y) * (
        (tmpvar_36.x * tmpvar_36.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_26 = (fAdherenceScale_26 + ((vOscillations_28.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_24 = (vPos_24 + ((
        ((vRotatedBranchAnchor_16 - vPos_24) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_26) * _glesMultiTexCoord0.z));
      vPos_23 = vPos_24;
    } else {
      highp vec3 vPos_38;
      vPos_38 = vPos_23;
      highp float fTime_39;
      highp vec3 vWindVector_40;
      vWindVector_40 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_39 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_41;
      highp float fOscillation_42;
      fOscillation_42 = 1.0;
      highp float fAmount_43;
      highp float fTarget_44;
      highp vec4 tmpvar_45;
      tmpvar_45.w = 0.0;
      tmpvar_45.x = (fTime_39 + _glesMultiTexCoord0.w);
      tmpvar_45.y = ((fTime_39 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_45.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_39 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      vOscillations_41 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = (vOscillations_41.y * vOscillations_41.z);
      fTarget_44 = 1.0;
      fAmount_43 = tmpvar_47;
      if ((tmpvar_47 < 0.0)) {
        fTarget_44 = -1.0;
        fAmount_43 = -(tmpvar_47);
      };
      fOscillation_42 = (((
        mix (mix (tmpvar_47, fTarget_44, fAmount_43), fTarget_44, fAmount_43)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_41.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_38 = (vPos_23 + ((vWindVector_40 * fOscillation_42) * _ST_WindBranch.y));
      vPos_23 = vPos_38;
    };
    FinalPosition_18 = vPos_23;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_48;
    vPos_48 = FinalPosition_18;
    highp float fMoveAmount_49;
    highp float fAdjust_50;
    highp float fLength_51;
    fLength_51 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_52;
    tmpvar_52 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_50 = tmpvar_52;
    if ((tmpvar_52 != 0.0)) {
      fAdjust_50 = pow (tmpvar_52, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_53;
    tmpvar_53.zw = vec2(0.0, 0.0);
    tmpvar_53.x = (tmpvar_12 + _ST_WindGlobal.x);
    tmpvar_53.y = (tmpvar_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_54;
    highp vec4 tmpvar_55;
    tmpvar_55 = abs(((
      fract((tmpvar_53 + 0.5))
     * 2.0) - 1.0));
    tmpvar_54 = (((
      (tmpvar_55 * tmpvar_55)
     * 
      (3.0 - (2.0 * tmpvar_55))
    ) - 0.5) * 2.0);
    fMoveAmount_49 = ((_ST_WindGlobal.y * (tmpvar_54.x + 
      (tmpvar_54.y * tmpvar_54.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_49 = (fMoveAmount_49 * fAdjust_50);
    vPos_48.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * fMoveAmount_49));
    vPos_48 = (normalize(vPos_48) * fLength_51);
    FinalPosition_18 = vPos_48;
  };
  tmpvar_15.xyz = FinalPosition_18;
  tmpvar_5 = tmpvar_8;
  highp vec3 tmpvar_56;
  tmpvar_56 = (_Object2World * tmpvar_15).xyz;
  highp vec4 v_57;
  v_57.x = _World2Object[0].x;
  v_57.y = _World2Object[1].x;
  v_57.z = _World2Object[2].x;
  v_57.w = _World2Object[3].x;
  highp vec4 v_58;
  v_58.x = _World2Object[0].y;
  v_58.y = _World2Object[1].y;
  v_58.z = _World2Object[2].y;
  v_58.w = _World2Object[3].y;
  highp vec4 v_59;
  v_59.x = _World2Object[0].z;
  v_59.y = _World2Object[1].z;
  v_59.z = _World2Object[2].z;
  v_59.w = _World2Object[3].z;
  highp vec3 tmpvar_60;
  tmpvar_60 = normalize(((
    (v_57.xyz * _glesNormal.x)
   + 
    (v_58.xyz * _glesNormal.y)
  ) + (v_59.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_60;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_61;
  tmpvar_61.w = 1.0;
  tmpvar_61.xyz = worldNormal_3;
  mediump vec4 normal_62;
  normal_62 = tmpvar_61;
  mediump vec3 x2_63;
  mediump vec4 tmpvar_64;
  tmpvar_64 = (normal_62.xyzz * normal_62.yzzx);
  x2_63.x = dot (unity_SHBr, tmpvar_64);
  x2_63.y = dot (unity_SHBg, tmpvar_64);
  x2_63.z = dot (unity_SHBb, tmpvar_64);
  highp vec3 lightColor0_65;
  lightColor0_65 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_66;
  lightColor1_66 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_67;
  lightColor2_67 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_68;
  lightColor3_68 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_69;
  lightAttenSq_69 = unity_4LightAtten0;
  highp vec3 normal_70;
  normal_70 = worldNormal_3;
  highp vec3 col_71;
  highp vec4 ndotl_72;
  highp vec4 lengthSq_73;
  highp vec4 tmpvar_74;
  tmpvar_74 = (unity_4LightPosX0 - tmpvar_56.x);
  highp vec4 tmpvar_75;
  tmpvar_75 = (unity_4LightPosY0 - tmpvar_56.y);
  highp vec4 tmpvar_76;
  tmpvar_76 = (unity_4LightPosZ0 - tmpvar_56.z);
  lengthSq_73 = (tmpvar_74 * tmpvar_74);
  lengthSq_73 = (lengthSq_73 + (tmpvar_75 * tmpvar_75));
  lengthSq_73 = (lengthSq_73 + (tmpvar_76 * tmpvar_76));
  ndotl_72 = (tmpvar_74 * normal_70.x);
  ndotl_72 = (ndotl_72 + (tmpvar_75 * normal_70.y));
  ndotl_72 = (ndotl_72 + (tmpvar_76 * normal_70.z));
  highp vec4 tmpvar_77;
  tmpvar_77 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_72 * inversesqrt(lengthSq_73)));
  ndotl_72 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = (tmpvar_77 * (1.0/((1.0 + 
    (lengthSq_73 * lightAttenSq_69)
  ))));
  col_71 = (lightColor0_65 * tmpvar_78.x);
  col_71 = (col_71 + (lightColor1_66 * tmpvar_78.y));
  col_71 = (col_71 + (lightColor2_67 * tmpvar_78.z));
  col_71 = (col_71 + (lightColor3_68 * tmpvar_78.w));
  tmpvar_6 = ((x2_63 + (unity_SHC.xyz * 
    ((normal_62.x * normal_62.x) - (normal_62.y * normal_62.y))
  )) + col_71);
  tmpvar_7 = (unity_World2Shadow[0] * (_Object2World * tmpvar_15));
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_56;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 blendColor_12;
  mediump vec4 diffuseColor_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_13 = tmpvar_14;
  tmpvar_10 = (diffuseColor_13.w * _Color.w);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_12 = tmpvar_15;
  diffuseColor_13.xyz = mix (blendColor_12.xyz, diffuseColor_13.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_13.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_11 = (max (diffuseColor_13.x, max (diffuseColor_13.y, diffuseColor_13.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_13.xyz = clamp ((tmpvar_16 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_13.xyz * tmpvar_7.xyz);
  lowp float tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_17 = tmpvar_18;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_17;
  mediump vec3 normalWorld_19;
  normalWorld_19 = tmpvar_5;
  mediump vec3 tmpvar_20;
  mediump vec3 tmpvar_21;
  mediump vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = normalWorld_19;
  mediump vec3 x1_23;
  x1_23.x = dot (unity_SHAr, tmpvar_22);
  x1_23.y = dot (unity_SHAg, tmpvar_22);
  x1_23.z = dot (unity_SHAb, tmpvar_22);
  tmpvar_21 = (xlv_TEXCOORD5 + x1_23);
  tmpvar_20 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_20;
  lowp vec4 c_24;
  lowp vec4 c_25;
  lowp float diff_26;
  mediump float tmpvar_27;
  tmpvar_27 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_26 = tmpvar_27;
  c_25.xyz = ((tmpvar_9 * tmpvar_20) * diff_26);
  c_25.w = tmpvar_10;
  c_24.w = c_25.w;
  c_24.xyz = (c_25.xyz + (tmpvar_9 * tmpvar_21));
  c_4.xyz = c_24.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_10;
  highp vec3 tmpvar_13;
  tmpvar_13.xy = _glesMultiTexCoord2.zw;
  tmpvar_13.z = _glesMultiTexCoord1.w;
  tmpvar_9 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  FinalPosition_17 = tmpvar_1.xyz;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_17 = tmpvar_21;
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_21;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = tmpvar_21;
      highp float fTime_24;
      highp float fAdherenceScale_25;
      highp vec3 vWindVector_26;
      vWindVector_26 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_24 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (fTime_24 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((fTime_24 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_24 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((fTime_24 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_27.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_28 = (fOscillation_28 * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (tmpvar_21 + ((vWindVector_26 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((fTime_24 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_25 = (1.0 - ((tmpvar_35.x * tmpvar_35.y) * (
        (tmpvar_35.x * tmpvar_35.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_25 = (fAdherenceScale_25 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((vRotatedBranchAnchor_15 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_25) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp float fTime_38;
      highp vec3 vWindVector_39;
      vWindVector_39 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_38 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_40;
      highp float fOscillation_41;
      fOscillation_41 = 1.0;
      highp float fAmount_42;
      highp float fTarget_43;
      highp vec4 tmpvar_44;
      tmpvar_44.w = 0.0;
      tmpvar_44.x = (fTime_38 + _glesMultiTexCoord0.w);
      tmpvar_44.y = ((fTime_38 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_44.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_38 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_43 = 1.0;
      fAmount_42 = tmpvar_46;
      if ((tmpvar_46 < 0.0)) {
        fTarget_43 = -1.0;
        fAmount_42 = -(tmpvar_46);
      };
      fOscillation_41 = (((
        mix (mix (tmpvar_46, fTarget_43, fAmount_42), fTarget_43, fAmount_42)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_37 = (vPos_22 + ((vWindVector_39 * fOscillation_41) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_47;
    vPos_47 = FinalPosition_17;
    highp float fMoveAmount_48;
    highp float fAdjust_49;
    highp float fLength_50;
    fLength_50 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_51;
    tmpvar_51 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_49 = tmpvar_51;
    if ((tmpvar_51 != 0.0)) {
      fAdjust_49 = pow (tmpvar_51, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_52;
    tmpvar_52.zw = vec2(0.0, 0.0);
    tmpvar_52.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_52.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_53;
    highp vec4 tmpvar_54;
    tmpvar_54 = abs(((
      fract((tmpvar_52 + 0.5))
     * 2.0) - 1.0));
    tmpvar_53 = (((
      (tmpvar_54 * tmpvar_54)
     * 
      (3.0 - (2.0 * tmpvar_54))
    ) - 0.5) * 2.0);
    fMoveAmount_48 = ((_ST_WindGlobal.y * (tmpvar_53.x + 
      (tmpvar_53.y * tmpvar_53.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_48 = (fMoveAmount_48 * fAdjust_49);
    vPos_47.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_48));
    vPos_47 = (normalize(vPos_47) * fLength_50);
    FinalPosition_17 = vPos_47;
  };
  tmpvar_14.xyz = FinalPosition_17;
  tmpvar_5 = tmpvar_7;
  highp vec4 v_55;
  v_55.x = _World2Object[0].x;
  v_55.y = _World2Object[1].x;
  v_55.z = _World2Object[2].x;
  v_55.w = _World2Object[3].x;
  highp vec4 v_56;
  v_56.x = _World2Object[0].y;
  v_56.y = _World2Object[1].y;
  v_56.z = _World2Object[2].y;
  v_56.w = _World2Object[3].y;
  highp vec4 v_57;
  v_57.x = _World2Object[0].z;
  v_57.y = _World2Object[1].z;
  v_57.z = _World2Object[2].z;
  v_57.w = _World2Object[3].z;
  highp vec3 tmpvar_58;
  tmpvar_58 = normalize(((
    (v_55.xyz * _glesNormal.x)
   + 
    (v_56.xyz * _glesNormal.y)
  ) + (v_57.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_58;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_59;
  tmpvar_59.w = 1.0;
  tmpvar_59.xyz = worldNormal_3;
  mediump vec4 normal_60;
  normal_60 = tmpvar_59;
  mediump vec3 x2_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = (normal_60.xyzz * normal_60.yzzx);
  x2_61.x = dot (unity_SHBr, tmpvar_62);
  x2_61.y = dot (unity_SHBg, tmpvar_62);
  x2_61.z = dot (unity_SHBb, tmpvar_62);
  tmpvar_6 = (unity_World2Shadow[0] * (_Object2World * tmpvar_14));
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = (x2_61 + (unity_SHC.xyz * (
    (normal_60.x * normal_60.x)
   - 
    (normal_60.y * normal_60.y)
  )));
  xlv_TEXCOORD6 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 blendColor_12;
  mediump vec4 diffuseColor_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_13 = tmpvar_14;
  tmpvar_10 = (diffuseColor_13.w * _Color.w);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_12 = tmpvar_15;
  diffuseColor_13.xyz = mix (blendColor_12.xyz, diffuseColor_13.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_13.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_11 = (max (diffuseColor_13.x, max (diffuseColor_13.y, diffuseColor_13.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_13.xyz = clamp ((tmpvar_16 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_13.xyz * tmpvar_7.xyz);
  lowp float shadow_17;
  shadow_17 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_17;
  mediump vec3 normalWorld_18;
  normalWorld_18 = tmpvar_5;
  mediump vec3 tmpvar_19;
  mediump vec3 tmpvar_20;
  mediump vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = normalWorld_18;
  mediump vec3 x1_22;
  x1_22.x = dot (unity_SHAr, tmpvar_21);
  x1_22.y = dot (unity_SHAg, tmpvar_21);
  x1_22.z = dot (unity_SHAb, tmpvar_21);
  tmpvar_20 = (xlv_TEXCOORD5 + x1_22);
  tmpvar_19 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_19;
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_9 * tmpvar_19) * diff_25);
  c_24.w = tmpvar_10;
  c_23.w = c_24.w;
  c_23.xyz = (c_24.xyz + (tmpvar_9 * tmpvar_20));
  c_4.xyz = c_23.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec3 t3;
highp vec3 t4;
highp vec3 t5;
highp vec4 t6;
mediump vec3 t16_7;
highp vec2 t8;
bool tb8;
highp vec2 t16;
highp vec2 t20;
highp vec2 t22;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
highp float t29;
mediump float t16_31;
void main()
{
    //Instruction 15607
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 15608
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 15609
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 15610
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 15611
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 15612
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 15613
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 15614
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 15615
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 15616
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 15617
    //LT
    tb8 = 0.0<t16_2.x;
    //Instruction 15618
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 15619
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 15620
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 15621
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 15622
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 15623
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 15624
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 15625
    //ADD
    t3.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 15626
    //MAD
    t3.xyz = unity_LODFade.xxx * t3.xyz + in_POSITION0.xyz;
    //Instruction 15627
    //GE
    tb25 = t16_2.x>=3.000000;
    //Instruction 15628
    //IF
    if(tb25){
        //Instruction 15629
        //EQ
        tb25 = t16_2.x==5.000000;
        //Instruction 15630
        //IF
        if(tb25){
            //Instruction 15631
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 15632
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 15633
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 15634
            //DP3
            t25 = dot(t4.xyz, t4.xyz);
            //Instruction 15635
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 15636
            //MUL
            t4.xyz = vec3(t25) * t4.xyz;
            //Instruction 15637
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 15638
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 15639
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 15640
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 15641
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 15642
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 15643
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 15644
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 15645
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 15646
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 15647
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 15648
            //FRC
            t2 = fract(t2);
            //Instruction 15649
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 15650
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 15651
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 15652
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 15653
            //ADD
            t2 = t2 + t2;
            //Instruction 15654
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 15655
            //LT
            tb27 = t6.w<0.0;
            //Instruction 15656
            //MOV
            t6.y = (-t6.w);
            //Instruction 15657
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 15658
            //MOVC
            t6.xy = (bool(tb27)) ? t6.xy : t6.zw;
            //Instruction 15659
            //MAD
            t27 = (-t2.y) * t2.z + t6.x;
            //Instruction 15660
            //MAD
            t27 = t6.y * t27 + t6.w;
            //Instruction 15661
            //ADD
            t28 = (-t27) + t6.x;
            //Instruction 15662
            //MAD
            t27 = t6.y * t28 + t27;
            //Instruction 15663
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 15664
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 15665
            //ADD
            t29 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 15666
            //MUL
            t29 = t2.x * t29;
            //Instruction 15667
            //MAD
            t27 = t27 * t28 + t29;
            //Instruction 15668
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 15669
            //MUL
            t27 = t27 * t28;
            //Instruction 15670
            //MUL
            t5.xyz = vec3(t27) * t5.xyz;
            //Instruction 15671
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 15672
            //MAD
            t6.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 15673
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 15674
            //MAD
            t6.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 15675
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 15676
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 15677
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 15678
            //MUL
            t22.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 15679
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 15680
            //MAD
            t6.xy = t22.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 15681
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 15682
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 15683
            //MUL
            t25 = t6.x * t6.y;
            //Instruction 15684
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 15685
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 15686
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 15687
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 15688
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 15689
            //MUL
            t4.xyz = vec3(t25) * t4.xyz;
            //Instruction 15690
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 15691
        //ELSE
        } else {
            //Instruction 15692
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 15693
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 15694
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 15695
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 15696
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 15697
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 15698
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 15699
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 15700
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 15701
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 15702
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 15703
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 15704
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 15705
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 15706
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 15707
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 15708
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 15709
            //LT
            tb0 = t2.w<0.0;
            //Instruction 15710
            //MOV
            t2.y = (-t2.w);
            //Instruction 15711
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 15712
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 15713
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 15714
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 15715
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 15716
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 15717
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 15718
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 15719
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 15720
            //MUL
            t27 = t27 * t5.x;
            //Instruction 15721
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 15722
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 15723
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 15724
        //ENDIF
        }
        //Instruction 15725
    //ENDIF
    }
    //Instruction 15726
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 15727
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 15728
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 15729
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 15730
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 15731
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 15732
    //NE
    tb27 = t25!=0.0;
    //Instruction 15733
    //LOG
    t4.x = log2(t25);
    //Instruction 15734
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 15735
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 15736
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 15737
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 15738
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 15739
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 15740
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 15741
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 15742
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 15743
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 15744
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 15745
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 15746
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 15747
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 15748
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 15749
    //MUL
    t25 = t25 * t27;
    //Instruction 15750
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 15751
    //MOV
    t4.y = t3.y;
    //Instruction 15752
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 15753
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 15754
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 15755
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 15756
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 15757
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 15758
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 15759
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 15760
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 15761
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 15762
    //MAD
    t3.xyz = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 15763
    //MAD
    t3.xyz = _Object2World[2].xyz * t0.zzz + t3.xyz;
    //Instruction 15764
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xyz;
    //Instruction 15765
    //MOV
    t3.x = _World2Object[0].x;
    //Instruction 15766
    //MOV
    t3.y = _World2Object[1].x;
    //Instruction 15767
    //MOV
    t3.z = _World2Object[2].x;
    //Instruction 15768
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 15769
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 15770
    //MOV
    t4.z = _World2Object[2].y;
    //Instruction 15771
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 15772
    //MAD
    t3.xyz = t3.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 15773
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 15774
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 15775
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 15776
    //MAD
    t3.xyz = t4.xyz * in_NORMAL0.zzz + t3.xyz;
    //Instruction 15777
    //DP3
    t24 = dot(t3.xyz, t3.xyz);
    //Instruction 15778
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 15779
    //MUL
    t3.xyz = vec3(t24) * t3.xyz;
    //Instruction 15780
    //MUL
    t16_2 = t3.yzzx * t3.xyzz;
    //Instruction 15781
    //DP4
    t16_7.x = dot(unity_SHBr, t16_2);
    //Instruction 15782
    //DP4
    t16_7.y = dot(unity_SHBg, t16_2);
    //Instruction 15783
    //DP4
    t16_7.z = dot(unity_SHBb, t16_2);
    //Instruction 15784
    //MUL
    t16_31 = t3.y * t3.y;
    //Instruction 15785
    //MAD
    t16_31 = t3.x * t3.x + (-t16_31);
    //Instruction 15786
    //MAD
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(t16_31) + t16_7.xyz;
    //Instruction 15787
    //MUL
    t2 = t0.yyyy * _Object2World[1];
    //Instruction 15788
    //MAD
    t2 = _Object2World[0] * t0.xxxx + t2;
    //Instruction 15789
    //MAD
    t0 = _Object2World[2] * t0.zzzz + t2;
    //Instruction 15790
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 15791
    //MUL
    t2 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 15792
    //MAD
    t2 = unity_World2Shadow[0][0] * t0.xxxx + t2;
    //Instruction 15793
    //MAD
    t2 = unity_World2Shadow[0][2] * t0.zzzz + t2;
    //Instruction 15794
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t2;
    //Instruction 15795
    //MOV
    vs_TEXCOORD0.xyz = t3.xyz;
    //Instruction 15796
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 15797
    //MOV
    vs_TEXCOORD6 = t0;
    //Instruction 15798
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 15799
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 15800
    //MOV
    t0.xy = in_TEXCOORD2.zw;
    //Instruction 15801
    //MOV
    t0.z = in_TEXCOORD1.w;
    //Instruction 15802
    //MOV
    vs_TEXCOORD4.xyz = t0.xyz;
    //Instruction 15803
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec4 t16_1;
lowp vec3 t10_1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump float t16_15;
mediump float t16_18;
void main()
{
    //Instruction 15574
    //MOV
    t16_0.x = vs_TEXCOORD4.z;
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 15575
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 15576
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 15577
    //ADD
    t16_5.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 15578
    //MAD
    t16_0.xyz = t16_0.xxx * t16_5.xyz + t10_2.xyz;
    //Instruction 15579
    //MAX
    t16_15 = max(t16_0.z, t16_0.y);
    //Instruction 15580
    //MAX
    t16_15 = max(t16_15, t16_0.x);
    //Instruction 15581
    //ADD
    t16_3.xyz = (-t16_0.xyz) + _HueVariation.xyz;
    //Instruction 15582
    //MAD
    t16_0.xyz = vs_TEXCOORD3.zzz * t16_3.xyz + t16_0.xyz;
    //Instruction 15583
    //MAX
    t16_3.x = max(t16_0.z, t16_0.y);
    //Instruction 15584
    //MAX
    t16_3.x = max(t16_0.x, t16_3.x);
    //Instruction 15585
    //DIV
    t16_15 = t16_15 / t16_3.x;
    //Instruction 15586
    //MAD
    t16_1.x = t16_15 * 0.500000 + 0.500000;
    //Instruction 15587
    //MUL
    t16_0.xyz = t16_0.xyz * t16_1.xxx;
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 15588
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 15589
    //MOV
    t16_1.xyz = vs_TEXCOORD0.xyz;
    //Instruction 15590
    //MOV
    t16_1.w = 1.0;
    //Instruction 15591
    //DP4
    t16_3.x = dot(unity_SHAr, t16_1);
    //Instruction 15592
    //DP4
    t16_3.y = dot(unity_SHAg, t16_1);
    //Instruction 15593
    //DP4
    t16_3.z = dot(unity_SHAb, t16_1);
    //Instruction 15594
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD5.xyz;
    //Instruction 15595
    //MUL
    t16_3.xyz = t16_0.xyz * t16_3.xyz;
    //Instruction 15596
    //SAMPLE_C_LZ
    vec3 txVec49 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_15 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec49, 0.0);
    //Instruction 15597
    //ADD
    t16_18 = (-_LightShadowData.x) + 1.0;
    //Instruction 15598
    //MAD
    t16_15 = t16_15 * t16_18 + _LightShadowData.x;
    //Instruction 15599
    //MUL
    t16_4.xyz = vec3(t16_15) * _LightColor0.xyz;
    //Instruction 15600
    //MUL
    t16_0.xyz = t16_0.xyz * t16_4.xyz;
    //Instruction 15601
    //DP3
    t16_15 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 15602
    //MAX
    t16_15 = max(t16_15, 0.0);
    //Instruction 15603
    //MAD
    t16_0.xyz = t16_0.xyz * vec3(t16_15) + t16_3.xyz;
    //Instruction 15604
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 15605
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 15606
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_9.xy = tmpvar_2.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].x;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].y;
  tmpvar_11 = clamp (((
    fract(((tmpvar_12 + tmpvar_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_11;
  highp vec3 tmpvar_14;
  tmpvar_14.xy = _glesMultiTexCoord2.zw;
  tmpvar_14.z = _glesMultiTexCoord1.w;
  tmpvar_10 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  FinalPosition_18 = tmpvar_1.xyz;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_18 = tmpvar_22;
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_23;
    vPos_23 = tmpvar_22;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_24;
      vPos_24 = tmpvar_22;
      highp float fTime_25;
      highp float fAdherenceScale_26;
      highp vec3 vWindVector_27;
      vWindVector_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_25 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_28;
      highp float fOscillation_29;
      fOscillation_29 = 1.0;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.x = (fTime_25 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((fTime_25 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_25 + _glesMultiTexCoord0.w));
      tmpvar_32.w = ((fTime_25 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_28 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_28.y * vOscillations_28.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      fOscillation_29 = (((
        mix (mix (tmpvar_34, fTarget_31, fAmount_30), fTarget_31, fAmount_30)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_28.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_29 = (fOscillation_29 * (1.0 + (vOscillations_28.w * _ST_WindBranchWhip.x)));
      vPos_24 = (tmpvar_22 + ((vWindVector_27 * fOscillation_29) * _ST_WindBranch.y));
      highp vec4 tmpvar_35;
      tmpvar_35.zw = vec2(0.0, 0.0);
      tmpvar_35.x = ((fTime_25 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_35.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_36;
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      tmpvar_36 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      fAdherenceScale_26 = (1.0 - ((tmpvar_36.x * tmpvar_36.y) * (
        (tmpvar_36.x * tmpvar_36.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_26 = (fAdherenceScale_26 + ((vOscillations_28.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_24 = (vPos_24 + ((
        ((vRotatedBranchAnchor_16 - vPos_24) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_26) * _glesMultiTexCoord0.z));
      vPos_23 = vPos_24;
    } else {
      highp vec3 vPos_38;
      vPos_38 = vPos_23;
      highp float fTime_39;
      highp vec3 vWindVector_40;
      vWindVector_40 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_39 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_41;
      highp float fOscillation_42;
      fOscillation_42 = 1.0;
      highp float fAmount_43;
      highp float fTarget_44;
      highp vec4 tmpvar_45;
      tmpvar_45.w = 0.0;
      tmpvar_45.x = (fTime_39 + _glesMultiTexCoord0.w);
      tmpvar_45.y = ((fTime_39 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_45.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_39 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      vOscillations_41 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = (vOscillations_41.y * vOscillations_41.z);
      fTarget_44 = 1.0;
      fAmount_43 = tmpvar_47;
      if ((tmpvar_47 < 0.0)) {
        fTarget_44 = -1.0;
        fAmount_43 = -(tmpvar_47);
      };
      fOscillation_42 = (((
        mix (mix (tmpvar_47, fTarget_44, fAmount_43), fTarget_44, fAmount_43)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_41.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_38 = (vPos_23 + ((vWindVector_40 * fOscillation_42) * _ST_WindBranch.y));
      vPos_23 = vPos_38;
    };
    FinalPosition_18 = vPos_23;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_48;
    vPos_48 = FinalPosition_18;
    highp float fMoveAmount_49;
    highp float fAdjust_50;
    highp float fLength_51;
    fLength_51 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_52;
    tmpvar_52 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_50 = tmpvar_52;
    if ((tmpvar_52 != 0.0)) {
      fAdjust_50 = pow (tmpvar_52, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_53;
    tmpvar_53.zw = vec2(0.0, 0.0);
    tmpvar_53.x = (tmpvar_12 + _ST_WindGlobal.x);
    tmpvar_53.y = (tmpvar_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_54;
    highp vec4 tmpvar_55;
    tmpvar_55 = abs(((
      fract((tmpvar_53 + 0.5))
     * 2.0) - 1.0));
    tmpvar_54 = (((
      (tmpvar_55 * tmpvar_55)
     * 
      (3.0 - (2.0 * tmpvar_55))
    ) - 0.5) * 2.0);
    fMoveAmount_49 = ((_ST_WindGlobal.y * (tmpvar_54.x + 
      (tmpvar_54.y * tmpvar_54.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_49 = (fMoveAmount_49 * fAdjust_50);
    vPos_48.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * fMoveAmount_49));
    vPos_48 = (normalize(vPos_48) * fLength_51);
    FinalPosition_18 = vPos_48;
  };
  tmpvar_15.xyz = FinalPosition_18;
  tmpvar_5 = tmpvar_8;
  highp vec3 tmpvar_56;
  tmpvar_56 = (_Object2World * tmpvar_15).xyz;
  highp vec4 v_57;
  v_57.x = _World2Object[0].x;
  v_57.y = _World2Object[1].x;
  v_57.z = _World2Object[2].x;
  v_57.w = _World2Object[3].x;
  highp vec4 v_58;
  v_58.x = _World2Object[0].y;
  v_58.y = _World2Object[1].y;
  v_58.z = _World2Object[2].y;
  v_58.w = _World2Object[3].y;
  highp vec4 v_59;
  v_59.x = _World2Object[0].z;
  v_59.y = _World2Object[1].z;
  v_59.z = _World2Object[2].z;
  v_59.w = _World2Object[3].z;
  highp vec3 tmpvar_60;
  tmpvar_60 = normalize(((
    (v_57.xyz * _glesNormal.x)
   + 
    (v_58.xyz * _glesNormal.y)
  ) + (v_59.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_60;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_61;
  tmpvar_61.w = 1.0;
  tmpvar_61.xyz = worldNormal_3;
  mediump vec4 normal_62;
  normal_62 = tmpvar_61;
  mediump vec3 x2_63;
  mediump vec4 tmpvar_64;
  tmpvar_64 = (normal_62.xyzz * normal_62.yzzx);
  x2_63.x = dot (unity_SHBr, tmpvar_64);
  x2_63.y = dot (unity_SHBg, tmpvar_64);
  x2_63.z = dot (unity_SHBb, tmpvar_64);
  highp vec3 lightColor0_65;
  lightColor0_65 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_66;
  lightColor1_66 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_67;
  lightColor2_67 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_68;
  lightColor3_68 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_69;
  lightAttenSq_69 = unity_4LightAtten0;
  highp vec3 normal_70;
  normal_70 = worldNormal_3;
  highp vec3 col_71;
  highp vec4 ndotl_72;
  highp vec4 lengthSq_73;
  highp vec4 tmpvar_74;
  tmpvar_74 = (unity_4LightPosX0 - tmpvar_56.x);
  highp vec4 tmpvar_75;
  tmpvar_75 = (unity_4LightPosY0 - tmpvar_56.y);
  highp vec4 tmpvar_76;
  tmpvar_76 = (unity_4LightPosZ0 - tmpvar_56.z);
  lengthSq_73 = (tmpvar_74 * tmpvar_74);
  lengthSq_73 = (lengthSq_73 + (tmpvar_75 * tmpvar_75));
  lengthSq_73 = (lengthSq_73 + (tmpvar_76 * tmpvar_76));
  ndotl_72 = (tmpvar_74 * normal_70.x);
  ndotl_72 = (ndotl_72 + (tmpvar_75 * normal_70.y));
  ndotl_72 = (ndotl_72 + (tmpvar_76 * normal_70.z));
  highp vec4 tmpvar_77;
  tmpvar_77 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_72 * inversesqrt(lengthSq_73)));
  ndotl_72 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = (tmpvar_77 * (1.0/((1.0 + 
    (lengthSq_73 * lightAttenSq_69)
  ))));
  col_71 = (lightColor0_65 * tmpvar_78.x);
  col_71 = (col_71 + (lightColor1_66 * tmpvar_78.y));
  col_71 = (col_71 + (lightColor2_67 * tmpvar_78.z));
  col_71 = (col_71 + (lightColor3_68 * tmpvar_78.w));
  tmpvar_6 = ((x2_63 + (unity_SHC.xyz * 
    ((normal_62.x * normal_62.x) - (normal_62.y * normal_62.y))
  )) + col_71);
  tmpvar_7 = (unity_World2Shadow[0] * (_Object2World * tmpvar_15));
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_56;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 blendColor_12;
  mediump vec4 diffuseColor_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_13 = tmpvar_14;
  tmpvar_10 = (diffuseColor_13.w * _Color.w);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_12 = tmpvar_15;
  diffuseColor_13.xyz = mix (blendColor_12.xyz, diffuseColor_13.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_13.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_11 = (max (diffuseColor_13.x, max (diffuseColor_13.y, diffuseColor_13.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_13.xyz = clamp ((tmpvar_16 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_13.xyz * tmpvar_7.xyz);
  lowp float shadow_17;
  shadow_17 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_17;
  mediump vec3 normalWorld_18;
  normalWorld_18 = tmpvar_5;
  mediump vec3 tmpvar_19;
  mediump vec3 tmpvar_20;
  mediump vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = normalWorld_18;
  mediump vec3 x1_22;
  x1_22.x = dot (unity_SHAr, tmpvar_21);
  x1_22.y = dot (unity_SHAg, tmpvar_21);
  x1_22.z = dot (unity_SHAb, tmpvar_21);
  tmpvar_20 = (xlv_TEXCOORD5 + x1_22);
  tmpvar_19 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_19;
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_9 * tmpvar_19) * diff_25);
  c_24.w = tmpvar_10;
  c_23.w = c_24.w;
  c_23.xyz = (c_24.xyz + (tmpvar_9 * tmpvar_20));
  c_4.xyz = c_23.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec3 t3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
mediump vec3 t16_7;
highp vec4 t8;
highp vec2 t9;
bool tb9;
highp vec2 t18;
highp vec2 t22;
highp vec2 t24;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
highp float t32;
mediump float t16_34;
void main()
{
    //Instruction 15218
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 15219
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 15220
    //ADD
    t9.x = t0.x + _Object2World[3].z;
    //Instruction 15221
    //ADD
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 15222
    //ADD
    t9.y = t18.x + in_NORMAL0.x;
    //Instruction 15223
    //FRC
    t9.xy = fract(t9.xy);
    //Instruction 15224
    //MAD
    t9.x = t9.y * 0.500000 + t9.x;
    //Instruction 15225
    //ADD
    t9.x = t9.x + -0.300000;
    //Instruction 15226
    //MUL
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 15227
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 15228
    //LT
    tb9 = 0.0<t16_2.x;
    //Instruction 15229
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 15230
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 15231
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 15232
    //DP3
    t18.x = dot(t3.xyz, t3.xyz);
    //Instruction 15233
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 15234
    //MUL
    t18.xy = t18.xx * t3.xz;
    //Instruction 15235
    //AND
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, bvec2(tb9));
    //Instruction 15236
    //ADD
    t3.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 15237
    //MAD
    t3.xyz = unity_LODFade.xxx * t3.xyz + in_POSITION0.xyz;
    //Instruction 15238
    //GE
    tb28 = t16_2.x>=3.000000;
    //Instruction 15239
    //IF
    if(tb28){
        //Instruction 15240
        //EQ
        tb28 = t16_2.x==5.000000;
        //Instruction 15241
        //IF
        if(tb28){
            //Instruction 15242
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 15243
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 15244
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 15245
            //DP3
            t28 = dot(t4.xyz, t4.xyz);
            //Instruction 15246
            //RSQ
            t28 = inversesqrt(t28);
            //Instruction 15247
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 15248
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 15249
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 15250
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 15251
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 15252
            //ADD
            t28 = t0.x + _ST_WindBranch.x;
            //Instruction 15253
            //ADD
            t2.x = t28 + in_TEXCOORD0.w;
            //Instruction 15254
            //MAD
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 15255
            //MUL
            t30 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 15256
            //MUL
            t2.z = t30 * 0.500000;
            //Instruction 15257
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 15258
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 15259
            //FRC
            t2 = fract(t2);
            //Instruction 15260
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 15261
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 15262
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 15263
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 15264
            //ADD
            t2 = t2 + t2;
            //Instruction 15265
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 15266
            //LT
            tb30 = t6.w<0.0;
            //Instruction 15267
            //MOV
            t6.y = (-t6.w);
            //Instruction 15268
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 15269
            //MOVC
            t6.xy = (bool(tb30)) ? t6.xy : t6.zw;
            //Instruction 15270
            //MAD
            t30 = (-t2.y) * t2.z + t6.x;
            //Instruction 15271
            //MAD
            t30 = t6.y * t30 + t6.w;
            //Instruction 15272
            //ADD
            t31 = (-t30) + t6.x;
            //Instruction 15273
            //MAD
            t30 = t6.y * t31 + t30;
            //Instruction 15274
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 15275
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 15276
            //ADD
            t32 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 15277
            //MUL
            t32 = t2.x * t32;
            //Instruction 15278
            //MAD
            t30 = t30 * t31 + t32;
            //Instruction 15279
            //MAD
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 15280
            //MUL
            t30 = t30 * t31;
            //Instruction 15281
            //MUL
            t5.xyz = vec3(t30) * t5.xyz;
            //Instruction 15282
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 15283
            //MAD
            t6.x = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 15284
            //MUL
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 15285
            //MAD
            t6.y = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 15286
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 15287
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 15288
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 15289
            //MUL
            t24.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 15290
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 15291
            //MAD
            t6.xy = t24.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 15292
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 15293
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 15294
            //MUL
            t28 = t6.x * t6.y;
            //Instruction 15295
            //MAD
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            //Instruction 15296
            //MUL
            t30 = t2.w * _ST_WindVector.w;
            //Instruction 15297
            //MAD
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            //Instruction 15298
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 15299
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 15300
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 15301
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 15302
        //ELSE
        } else {
            //Instruction 15303
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 15304
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 15305
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 15306
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 15307
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 15308
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 15309
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 15310
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 15311
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 15312
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 15313
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 15314
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 15315
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 15316
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 15317
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 15318
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 15319
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 15320
            //LT
            tb0 = t2.w<0.0;
            //Instruction 15321
            //MOV
            t2.y = (-t2.w);
            //Instruction 15322
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 15323
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 15324
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 15325
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 15326
            //ADD
            t28 = (-t0.x) + t6.x;
            //Instruction 15327
            //MAD
            t0.x = t6.y * t28 + t0.x;
            //Instruction 15328
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 15329
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 15330
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 15331
            //MUL
            t30 = t30 * t5.x;
            //Instruction 15332
            //MAD
            t0.x = t0.x * t28 + t30;
            //Instruction 15333
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 15334
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 15335
        //ENDIF
        }
        //Instruction 15336
    //ENDIF
    }
    //Instruction 15337
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 15338
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 15339
    //DIV
    t28 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 15340
    //MAD
    t28 = (-t28) * 0.250000 + t3.y;
    //Instruction 15341
    //MAX
    t28 = max(t28, 0.0);
    //Instruction 15342
    //MUL
    t28 = t28 * _ST_WindGlobal.z;
    //Instruction 15343
    //NE
    tb30 = t28!=0.0;
    //Instruction 15344
    //LOG
    t4.x = log2(t28);
    //Instruction 15345
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 15346
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 15347
    //MOVC
    t28 = (tb30) ? t4.x : t28;
    //Instruction 15348
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 15349
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 15350
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 15351
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 15352
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 15353
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 15354
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 15355
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 15356
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 15357
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 15358
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 15359
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 15360
    //MUL
    t28 = t28 * t30;
    //Instruction 15361
    //MAD
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    //Instruction 15362
    //MOV
    t4.y = t3.y;
    //Instruction 15363
    //DP3
    t18.x = dot(t4.xyz, t4.xyz);
    //Instruction 15364
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 15365
    //MUL
    t4.xyz = t18.xxx * t4.xyz;
    //Instruction 15366
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 15367
    //MOVC
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    //Instruction 15368
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 15369
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 15370
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 15371
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 15372
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 15373
    //MAD
    t3.xyz = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 15374
    //MAD
    t3.xyz = _Object2World[2].xyz * t0.zzz + t3.xyz;
    //Instruction 15375
    //MAD
    t3.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xyz;
    //Instruction 15376
    //MOV
    t4.x = _World2Object[0].x;
    //Instruction 15377
    //MOV
    t4.y = _World2Object[1].x;
    //Instruction 15378
    //MOV
    t4.z = _World2Object[2].x;
    //Instruction 15379
    //MOV
    t5.x = _World2Object[0].y;
    //Instruction 15380
    //MOV
    t5.y = _World2Object[1].y;
    //Instruction 15381
    //MOV
    t5.z = _World2Object[2].y;
    //Instruction 15382
    //MUL
    t5.xyz = t5.xyz * in_NORMAL0.yyy;
    //Instruction 15383
    //MAD
    t4.xyz = t4.xyz * in_NORMAL0.xxx + t5.xyz;
    //Instruction 15384
    //MOV
    t5.x = _World2Object[0].z;
    //Instruction 15385
    //MOV
    t5.y = _World2Object[1].z;
    //Instruction 15386
    //MOV
    t5.z = _World2Object[2].z;
    //Instruction 15387
    //MAD
    t4.xyz = t5.xyz * in_NORMAL0.zzz + t4.xyz;
    //Instruction 15388
    //DP3
    t27 = dot(t4.xyz, t4.xyz);
    //Instruction 15389
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 15390
    //MUL
    t4.xyz = vec3(t27) * t4.xyz;
    //Instruction 15391
    //MUL
    t16_2 = t4.yzzx * t4.xyzz;
    //Instruction 15392
    //DP4
    t16_7.x = dot(unity_SHBr, t16_2);
    //Instruction 15393
    //DP4
    t16_7.y = dot(unity_SHBg, t16_2);
    //Instruction 15394
    //DP4
    t16_7.z = dot(unity_SHBb, t16_2);
    //Instruction 15395
    //MUL
    t16_34 = t4.y * t4.y;
    //Instruction 15396
    //MAD
    t16_34 = t4.x * t4.x + (-t16_34);
    //Instruction 15397
    //MAD
    t16_7.xyz = unity_SHC.xyz * vec3(t16_34) + t16_7.xyz;
    //Instruction 15398
    //ADD
    t2 = (-t3.xxxx) + unity_4LightPosX0;
    //Instruction 15399
    //ADD
    t5 = (-t3.yyyy) + unity_4LightPosY0;
    //Instruction 15400
    //ADD
    t6 = (-t3.zzzz) + unity_4LightPosZ0;
    //Instruction 15401
    //MUL
    t8 = t5 * t5;
    //Instruction 15402
    //MAD
    t8 = t2 * t2 + t8;
    //Instruction 15403
    //MAD
    t8 = t6 * t6 + t8;
    //Instruction 15404
    //MUL
    t5 = t4.yyyy * t5;
    //Instruction 15405
    //MAD
    t2 = t2 * t4.xxxx + t5;
    //Instruction 15406
    //MAD
    t2 = t6 * t4.zzzz + t2;
    //Instruction 15407
    //RSQ
    t5 = inversesqrt(t8);
    //Instruction 15408
    //MUL
    t2 = t2 * t5;
    //Instruction 15409
    //MAX
    t2 = max(t2, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 15410
    //MAD
    t5 = t8 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 15411
    //DIV
    t5 = vec4(1.0, 1.0, 1.0, 1.0) / t5;
    //Instruction 15412
    //MUL
    t2 = t2 * t5;
    //Instruction 15413
    //MUL
    t5.xyz = t2.yyy * unity_LightColor[1].xyz;
    //Instruction 15414
    //MAD
    t5.xyz = unity_LightColor[0].xyz * t2.xxx + t5.xyz;
    //Instruction 15415
    //MAD
    t5.xyz = unity_LightColor[2].xyz * t2.zzz + t5.xyz;
    //Instruction 15416
    //MAD
    t5.xyz = unity_LightColor[3].xyz * t2.www + t5.xyz;
    //Instruction 15417
    //ADD
    t5.xyz = t5.xyz + t16_7.xyz;
    //Instruction 15418
    //MUL
    t2 = t0.yyyy * _Object2World[1];
    //Instruction 15419
    //MAD
    t2 = _Object2World[0] * t0.xxxx + t2;
    //Instruction 15420
    //MAD
    t0 = _Object2World[2] * t0.zzzz + t2;
    //Instruction 15421
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 15422
    //MUL
    t2 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 15423
    //MAD
    t2 = unity_World2Shadow[0][0] * t0.xxxx + t2;
    //Instruction 15424
    //MAD
    t2 = unity_World2Shadow[0][2] * t0.zzzz + t2;
    //Instruction 15425
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t2;
    //Instruction 15426
    //MOV
    vs_TEXCOORD0.xyz = t4.xyz;
    //Instruction 15427
    //MOV
    vs_TEXCOORD1.xyz = t3.xyz;
    //Instruction 15428
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 15429
    //MOV
    vs_TEXCOORD6 = t0;
    //Instruction 15430
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 15431
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 15432
    //MOV
    t0.xy = in_TEXCOORD2.zw;
    //Instruction 15433
    //MOV
    t0.z = in_TEXCOORD1.w;
    //Instruction 15434
    //MOV
    vs_TEXCOORD4.xyz = t0.xyz;
    //Instruction 15435
    //MOV
    vs_TEXCOORD5.xyz = t5.xyz;
    //Instruction 15436
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
mediump vec4 t16_1;
lowp vec3 t10_1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump float t16_15;
mediump float t16_18;
void main()
{
    //Instruction 15185
    //MOV
    t16_0.x = vs_TEXCOORD4.z;
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 15186
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 15187
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 15188
    //ADD
    t16_5.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 15189
    //MAD
    t16_0.xyz = t16_0.xxx * t16_5.xyz + t10_2.xyz;
    //Instruction 15190
    //MAX
    t16_15 = max(t16_0.z, t16_0.y);
    //Instruction 15191
    //MAX
    t16_15 = max(t16_15, t16_0.x);
    //Instruction 15192
    //ADD
    t16_3.xyz = (-t16_0.xyz) + _HueVariation.xyz;
    //Instruction 15193
    //MAD
    t16_0.xyz = vs_TEXCOORD3.zzz * t16_3.xyz + t16_0.xyz;
    //Instruction 15194
    //MAX
    t16_3.x = max(t16_0.z, t16_0.y);
    //Instruction 15195
    //MAX
    t16_3.x = max(t16_0.x, t16_3.x);
    //Instruction 15196
    //DIV
    t16_15 = t16_15 / t16_3.x;
    //Instruction 15197
    //MAD
    t16_1.x = t16_15 * 0.500000 + 0.500000;
    //Instruction 15198
    //MUL
    t16_0.xyz = t16_0.xyz * t16_1.xxx;
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 15199
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 15200
    //MOV
    t16_1.xyz = vs_TEXCOORD0.xyz;
    //Instruction 15201
    //MOV
    t16_1.w = 1.0;
    //Instruction 15202
    //DP4
    t16_3.x = dot(unity_SHAr, t16_1);
    //Instruction 15203
    //DP4
    t16_3.y = dot(unity_SHAg, t16_1);
    //Instruction 15204
    //DP4
    t16_3.z = dot(unity_SHAb, t16_1);
    //Instruction 15205
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD5.xyz;
    //Instruction 15206
    //MUL
    t16_3.xyz = t16_0.xyz * t16_3.xyz;
    //Instruction 15207
    //SAMPLE_C_LZ
    vec3 txVec34 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_15 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec34, 0.0);
    //Instruction 15208
    //ADD
    t16_18 = (-_LightShadowData.x) + 1.0;
    //Instruction 15209
    //MAD
    t16_15 = t16_15 * t16_18 + _LightShadowData.x;
    //Instruction 15210
    //MUL
    t16_4.xyz = vec3(t16_15) * _LightColor0.xyz;
    //Instruction 15211
    //MUL
    t16_0.xyz = t16_0.xyz * t16_4.xyz;
    //Instruction 15212
    //DP3
    t16_15 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 15213
    //MAX
    t16_15 = max(t16_15, 0.0);
    //Instruction 15214
    //MAD
    t16_0.xyz = t16_0.xyz * vec3(t16_15) + t16_3.xyz;
    //Instruction 15215
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 15216
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 15217
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_10;
  highp vec3 tmpvar_13;
  tmpvar_13.xy = _glesMultiTexCoord2.zw;
  tmpvar_13.z = _glesMultiTexCoord1.w;
  tmpvar_9 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  FinalPosition_17 = tmpvar_1.xyz;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_17 = tmpvar_21;
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_21;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = tmpvar_21;
      highp float fTime_24;
      highp float fAdherenceScale_25;
      highp vec3 vWindVector_26;
      vWindVector_26 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_24 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (fTime_24 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((fTime_24 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_24 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((fTime_24 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_27.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_28 = (fOscillation_28 * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (tmpvar_21 + ((vWindVector_26 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((fTime_24 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_25 = (1.0 - ((tmpvar_35.x * tmpvar_35.y) * (
        (tmpvar_35.x * tmpvar_35.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_25 = (fAdherenceScale_25 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((vRotatedBranchAnchor_15 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_25) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp float fTime_38;
      highp vec3 vWindVector_39;
      vWindVector_39 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_38 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_40;
      highp float fOscillation_41;
      fOscillation_41 = 1.0;
      highp float fAmount_42;
      highp float fTarget_43;
      highp vec4 tmpvar_44;
      tmpvar_44.w = 0.0;
      tmpvar_44.x = (fTime_38 + _glesMultiTexCoord0.w);
      tmpvar_44.y = ((fTime_38 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_44.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_38 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_43 = 1.0;
      fAmount_42 = tmpvar_46;
      if ((tmpvar_46 < 0.0)) {
        fTarget_43 = -1.0;
        fAmount_42 = -(tmpvar_46);
      };
      fOscillation_41 = (((
        mix (mix (tmpvar_46, fTarget_43, fAmount_42), fTarget_43, fAmount_42)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_37 = (vPos_22 + ((vWindVector_39 * fOscillation_41) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_47;
    vPos_47 = FinalPosition_17;
    highp float fMoveAmount_48;
    highp float fAdjust_49;
    highp float fLength_50;
    fLength_50 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_51;
    tmpvar_51 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_49 = tmpvar_51;
    if ((tmpvar_51 != 0.0)) {
      fAdjust_49 = pow (tmpvar_51, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_52;
    tmpvar_52.zw = vec2(0.0, 0.0);
    tmpvar_52.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_52.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_53;
    highp vec4 tmpvar_54;
    tmpvar_54 = abs(((
      fract((tmpvar_52 + 0.5))
     * 2.0) - 1.0));
    tmpvar_53 = (((
      (tmpvar_54 * tmpvar_54)
     * 
      (3.0 - (2.0 * tmpvar_54))
    ) - 0.5) * 2.0);
    fMoveAmount_48 = ((_ST_WindGlobal.y * (tmpvar_53.x + 
      (tmpvar_53.y * tmpvar_53.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_48 = (fMoveAmount_48 * fAdjust_49);
    vPos_47.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_48));
    vPos_47 = (normalize(vPos_47) * fLength_50);
    FinalPosition_17 = vPos_47;
  };
  tmpvar_14.xyz = FinalPosition_17;
  tmpvar_6 = tmpvar_7;
  highp vec3 tmpvar_55;
  tmpvar_55 = (_Object2World * tmpvar_14).xyz;
  highp vec4 v_56;
  v_56.x = _World2Object[0].x;
  v_56.y = _World2Object[1].x;
  v_56.z = _World2Object[2].x;
  v_56.w = _World2Object[3].x;
  highp vec4 v_57;
  v_57.x = _World2Object[0].y;
  v_57.y = _World2Object[1].y;
  v_57.z = _World2Object[2].y;
  v_57.w = _World2Object[3].y;
  highp vec4 v_58;
  v_58.x = _World2Object[0].z;
  v_58.y = _World2Object[1].z;
  v_58.z = _World2Object[2].z;
  v_58.w = _World2Object[3].z;
  highp vec3 tmpvar_59;
  tmpvar_59 = normalize(((
    (v_56.xyz * _glesNormal.x)
   + 
    (v_57.xyz * _glesNormal.y)
  ) + (v_58.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_59;
  highp mat3 tmpvar_60;
  tmpvar_60[0] = _Object2World[0].xyz;
  tmpvar_60[1] = _Object2World[1].xyz;
  tmpvar_60[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_61;
  tmpvar_61 = normalize((tmpvar_60 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_61;
  lowp vec3 tmpvar_62;
  tmpvar_62 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_63;
  tmpvar_63 = (tmpvar_62 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_63;
  highp vec4 tmpvar_64;
  tmpvar_64.x = worldTangent_4.x;
  tmpvar_64.y = worldBinormal_3.x;
  tmpvar_64.z = worldNormal_5.x;
  tmpvar_64.w = tmpvar_55.x;
  highp vec4 tmpvar_65;
  tmpvar_65.x = worldTangent_4.y;
  tmpvar_65.y = worldBinormal_3.y;
  tmpvar_65.z = worldNormal_5.y;
  tmpvar_65.w = tmpvar_55.y;
  highp vec4 tmpvar_66;
  tmpvar_66.x = worldTangent_4.z;
  tmpvar_66.y = worldBinormal_3.z;
  tmpvar_66.z = worldNormal_5.z;
  tmpvar_66.w = tmpvar_55.z;
  lowp vec4 tmpvar_67;
  tmpvar_67.w = 1.0;
  tmpvar_67.xyz = worldNormal_5;
  mediump vec4 normal_68;
  normal_68 = tmpvar_67;
  mediump vec3 x2_69;
  mediump vec4 tmpvar_70;
  tmpvar_70 = (normal_68.xyzz * normal_68.yzzx);
  x2_69.x = dot (unity_SHBr, tmpvar_70);
  x2_69.y = dot (unity_SHBg, tmpvar_70);
  x2_69.z = dot (unity_SHBb, tmpvar_70);
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_64;
  xlv_TEXCOORD1 = tmpvar_65;
  xlv_TEXCOORD2 = tmpvar_66;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = (x2_69 + (unity_SHC.xyz * (
    (normal_68.x * normal_68.x)
   - 
    (normal_68.y * normal_68.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 blendColor_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_9 = (diffuseColor_12.w * _Color.w);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  blendColor_11 = tmpvar_14;
  diffuseColor_12.xyz = mix (blendColor_11.xyz, diffuseColor_12.xyz, vec3(clamp (xlv_TEXCOORD5.z, 0.0, 1.0)));
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_10 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_15 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_12.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_16;
  tmpvar_16 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD0.xyz, tmpvar_16);
  worldN_3.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD1.xyz, tmpvar_16);
  worldN_3.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD2.xyz, tmpvar_16);
  worldN_3.z = tmpvar_19;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_20;
  normalWorld_20 = worldN_3;
  mediump vec3 tmpvar_21;
  mediump vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = normalWorld_20;
  mediump vec3 x1_23;
  x1_23.x = dot (unity_SHAr, tmpvar_22);
  x1_23.y = dot (unity_SHAg, tmpvar_22);
  x1_23.z = dot (unity_SHAb, tmpvar_22);
  tmpvar_21 = (xlv_TEXCOORD6 + x1_23);
  lowp vec4 c_24;
  lowp vec4 c_25;
  lowp float diff_26;
  mediump float tmpvar_27;
  tmpvar_27 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_26 = tmpvar_27;
  c_25.xyz = ((tmpvar_8 * tmpvar_1) * diff_26);
  c_25.w = tmpvar_9;
  c_24.w = c_25.w;
  c_24.xyz = (c_25.xyz + (tmpvar_8 * tmpvar_21));
  c_4.xyz = c_24.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
highp vec3 t4;
highp vec3 t5;
mediump vec4 t16_5;
highp vec4 t6;
lowp vec3 t10_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp vec2 t18;
highp vec2 t22;
highp vec2 t24;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
highp float t32;
mediump float t16_35;
void main()
{
    //Instruction 15664
    //MUL
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 15665
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 15666
    //ADD
    t9.x = t0.x + _Object2World[3].z;
    //Instruction 15667
    //ADD
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 15668
    //ADD
    t9.y = t18.x + in_NORMAL0.x;
    //Instruction 15669
    //FRC
    t9.xy = fract(t9.xy);
    //Instruction 15670
    //MAD
    t9.x = t9.y * 0.500000 + t9.x;
    //Instruction 15671
    //ADD
    t9.x = t9.x + -0.300000;
    //Instruction 15672
    //MUL
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 15673
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 15674
    //LT
    tb9 = 0.0<t16_2;
    //Instruction 15675
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 15676
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 15677
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 15678
    //DP3
    t18.x = dot(t3.xyz, t3.xyz);
    //Instruction 15679
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 15680
    //MUL
    t18.xy = t18.xx * t3.xz;
    //Instruction 15681
    //AND
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, bvec2(tb9));
    //Instruction 15682
    //ADD
    t3.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 15683
    //MAD
    t3.xyz = unity_LODFade.xxx * t3.xyz + in_POSITION0.xyz;
    //Instruction 15684
    //GE
    tb28 = t16_2>=3.000000;
    //Instruction 15685
    //IF
    if(tb28){
        //Instruction 15686
        //EQ
        tb28 = t16_2==5.000000;
        //Instruction 15687
        //IF
        if(tb28){
            //Instruction 15688
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 15689
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 15690
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 15691
            //DP3
            t28 = dot(t4.xyz, t4.xyz);
            //Instruction 15692
            //RSQ
            t28 = inversesqrt(t28);
            //Instruction 15693
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 15694
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 15695
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 15696
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 15697
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 15698
            //ADD
            t28 = t0.x + _ST_WindBranch.x;
            //Instruction 15699
            //ADD
            t2.x = t28 + in_TEXCOORD0.w;
            //Instruction 15700
            //MAD
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 15701
            //MUL
            t30 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 15702
            //MUL
            t2.z = t30 * 0.500000;
            //Instruction 15703
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 15704
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 15705
            //FRC
            t2 = fract(t2);
            //Instruction 15706
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 15707
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 15708
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 15709
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 15710
            //ADD
            t2 = t2 + t2;
            //Instruction 15711
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 15712
            //LT
            tb30 = t6.w<0.0;
            //Instruction 15713
            //MOV
            t6.y = (-t6.w);
            //Instruction 15714
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 15715
            //MOVC
            t6.xy = (bool(tb30)) ? t6.xy : t6.zw;
            //Instruction 15716
            //MAD
            t30 = (-t2.y) * t2.z + t6.x;
            //Instruction 15717
            //MAD
            t30 = t6.y * t30 + t6.w;
            //Instruction 15718
            //ADD
            t31 = (-t30) + t6.x;
            //Instruction 15719
            //MAD
            t30 = t6.y * t31 + t30;
            //Instruction 15720
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 15721
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 15722
            //ADD
            t32 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 15723
            //MUL
            t32 = t2.x * t32;
            //Instruction 15724
            //MAD
            t30 = t30 * t31 + t32;
            //Instruction 15725
            //MAD
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 15726
            //MUL
            t30 = t30 * t31;
            //Instruction 15727
            //MUL
            t5.xyz = vec3(t30) * t5.xyz;
            //Instruction 15728
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 15729
            //MAD
            t6.x = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 15730
            //MUL
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 15731
            //MAD
            t6.y = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 15732
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 15733
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 15734
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 15735
            //MUL
            t24.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 15736
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 15737
            //MAD
            t6.xy = t24.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 15738
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 15739
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 15740
            //MUL
            t28 = t6.x * t6.y;
            //Instruction 15741
            //MAD
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            //Instruction 15742
            //MUL
            t30 = t2.w * _ST_WindVector.w;
            //Instruction 15743
            //MAD
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            //Instruction 15744
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 15745
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 15746
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 15747
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 15748
        //ELSE
        } else {
            //Instruction 15749
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 15750
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 15751
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 15752
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 15753
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 15754
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 15755
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 15756
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 15757
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 15758
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 15759
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 15760
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 15761
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 15762
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 15763
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 15764
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 15765
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 15766
            //LT
            tb0 = t2.w<0.0;
            //Instruction 15767
            //MOV
            t2.y = (-t2.w);
            //Instruction 15768
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 15769
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 15770
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 15771
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 15772
            //ADD
            t28 = (-t0.x) + t6.x;
            //Instruction 15773
            //MAD
            t0.x = t6.y * t28 + t0.x;
            //Instruction 15774
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 15775
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 15776
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 15777
            //MUL
            t30 = t30 * t5.x;
            //Instruction 15778
            //MAD
            t0.x = t0.x * t28 + t30;
            //Instruction 15779
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 15780
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 15781
        //ENDIF
        }
        //Instruction 15782
    //ENDIF
    }
    //Instruction 15783
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 15784
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 15785
    //DIV
    t28 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 15786
    //MAD
    t28 = (-t28) * 0.250000 + t3.y;
    //Instruction 15787
    //MAX
    t28 = max(t28, 0.0);
    //Instruction 15788
    //MUL
    t28 = t28 * _ST_WindGlobal.z;
    //Instruction 15789
    //NE
    tb30 = t28!=0.0;
    //Instruction 15790
    //LOG
    t4.x = log2(t28);
    //Instruction 15791
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 15792
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 15793
    //MOVC
    t28 = (tb30) ? t4.x : t28;
    //Instruction 15794
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 15795
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 15796
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 15797
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 15798
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 15799
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 15800
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 15801
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 15802
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 15803
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 15804
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 15805
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 15806
    //MUL
    t28 = t28 * t30;
    //Instruction 15807
    //MAD
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    //Instruction 15808
    //MOV
    t4.y = t3.y;
    //Instruction 15809
    //DP3
    t18.x = dot(t4.xyz, t4.xyz);
    //Instruction 15810
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 15811
    //MUL
    t4.xyz = t18.xxx * t4.xyz;
    //Instruction 15812
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 15813
    //MOVC
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    //Instruction 15814
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 15815
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 15816
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 15817
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 15818
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 15819
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 15820
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 15821
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 15822
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 15823
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 15824
    //MOV
    t2.zw = _World2Object[2].xx;
    //Instruction 15825
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 15826
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 15827
    //MOV
    t3.zw = _World2Object[2].yy;
    //Instruction 15828
    //MUL
    t3 = t3 * in_NORMAL0.yyyy;
    //Instruction 15829
    //MAD
    t2 = t2 * in_NORMAL0.xxxx + t3;
    //Instruction 15830
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 15831
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 15832
    //MOV
    t3.zw = _World2Object[2].zz;
    //Instruction 15833
    //MAD
    t2 = t3 * in_NORMAL0.zzzz + t2;
    //Instruction 15834
    //DP3
    t27 = dot(t2.xyw, t2.xyw);
    //Instruction 15835
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 15836
    //MUL
    t2 = vec4(t27) * t2;
    //Instruction 15837
    //MUL
    t3.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 15838
    //MAD
    t3.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t3.xyz;
    //Instruction 15839
    //MAD
    t3.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t3.xyz;
    //Instruction 15840
    //DP3
    t27 = dot(t3.xyz, t3.xyz);
    //Instruction 15841
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 15842
    //MUL
    t3.xyz = vec3(t27) * t3.xyz;
    //Instruction 15843
    //MUL
    t10_7.xyz = t2.wxy * t3.xyz;
    //Instruction 15844
    //MAD
    t10_7.xyz = t2.ywx * t3.yzx + (-t10_7.xyz);
    //Instruction 15845
    //MUL
    t4.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 15846
    //MUL
    t16_5 = t2.ywzx * t2;
    //Instruction 15847
    //DP4
    t16_8.x = dot(unity_SHBr, t16_5);
    //Instruction 15848
    //DP4
    t16_8.y = dot(unity_SHBg, t16_5);
    //Instruction 15849
    //DP4
    t16_8.z = dot(unity_SHBb, t16_5);
    //Instruction 15850
    //MUL
    t16_35 = t2.y * t2.y;
    //Instruction 15851
    //MAD
    t16_35 = t2.x * t2.x + (-t16_35);
    //Instruction 15852
    //MAD
    vs_TEXCOORD6.xyz = unity_SHC.xyz * vec3(t16_35) + t16_8.xyz;
    //Instruction 15853
    //MOV
    vs_TEXCOORD0.x = t3.z;
    //Instruction 15854
    //MOV
    vs_TEXCOORD0.y = t4.x;
    //Instruction 15855
    //MOV
    vs_TEXCOORD0.z = t2.x;
    //Instruction 15856
    //MOV
    vs_TEXCOORD0.w = t0.x;
    //Instruction 15857
    //MOV
    vs_TEXCOORD1.x = t3.x;
    //Instruction 15858
    //MOV
    vs_TEXCOORD1.y = t4.y;
    //Instruction 15859
    //MOV
    vs_TEXCOORD1.z = t2.y;
    //Instruction 15860
    //MOV
    vs_TEXCOORD1.w = t0.y;
    //Instruction 15861
    //MOV
    vs_TEXCOORD2.x = t3.y;
    //Instruction 15862
    //MOV
    vs_TEXCOORD2.y = t4.z;
    //Instruction 15863
    //MOV
    vs_TEXCOORD2.z = t2.w;
    //Instruction 15864
    //MOV
    vs_TEXCOORD2.w = t0.z;
    //Instruction 15865
    //MOV
    vs_TEXCOORD3.w = _Color.w;
    //Instruction 15866
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 15867
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 15868
    //MOV
    t0.xy = in_TEXCOORD2.zw;
    //Instruction 15869
    //MOV
    t0.z = in_TEXCOORD1.w;
    //Instruction 15870
    //MOV
    vs_TEXCOORD5.xyz = t0.xyz;
    //Instruction 15871
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec4 t1;
mediump float t16_1;
lowp vec3 t10_1;
lowp vec3 t10_2;
mediump vec3 t16_3;
lowp vec3 t10_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump float t16_18;
void main()
{
    //Instruction 15631
    //MOV
    t16_0.x = vs_TEXCOORD5.z;
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 15632
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 15633
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD5.xy).xyz;
    //Instruction 15634
    //ADD
    t16_6.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 15635
    //MAD
    t16_0.xyz = t16_0.xxx * t16_6.xyz + t10_2.xyz;
    //Instruction 15636
    //MAX
    t16_18 = max(t16_0.z, t16_0.y);
    //Instruction 15637
    //MAX
    t16_18 = max(t16_18, t16_0.x);
    //Instruction 15638
    //ADD
    t16_3.xyz = (-t16_0.xyz) + _HueVariation.xyz;
    //Instruction 15639
    //MAD
    t16_0.xyz = vs_TEXCOORD4.zzz * t16_3.xyz + t16_0.xyz;
    //Instruction 15640
    //MAX
    t16_3.x = max(t16_0.z, t16_0.y);
    //Instruction 15641
    //MAX
    t16_3.x = max(t16_0.x, t16_3.x);
    //Instruction 15642
    //DIV
    t16_18 = t16_18 / t16_3.x;
    //Instruction 15643
    //MAD
    t16_1 = t16_18 * 0.500000 + 0.500000;
    //Instruction 15644
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_1);
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 15645
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD3.xyz;
    //Instruction 15646
    //MUL
    t16_3.xyz = t16_0.xyz * _LightColor0.xyz;
    //Instruction 15647
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 15648
    //MAD
    t10_4.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 15649
    //DP3
    t1.x = dot(vs_TEXCOORD0.xyz, t10_4.xyz);
    //Instruction 15650
    //DP3
    t1.y = dot(vs_TEXCOORD1.xyz, t10_4.xyz);
    //Instruction 15651
    //DP3
    t1.z = dot(vs_TEXCOORD2.xyz, t10_4.xyz);
    //Instruction 15652
    //MOV
    t1.w = 1.0;
    //Instruction 15653
    //DP4
    t16_5.x = dot(unity_SHAr, t1);
    //Instruction 15654
    //DP4
    t16_5.y = dot(unity_SHAg, t1);
    //Instruction 15655
    //DP4
    t16_5.z = dot(unity_SHAb, t1);
    //Instruction 15656
    //DP3
    t16_18 = dot(t1.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 15657
    //MAX
    t16_18 = max(t16_18, 0.0);
    //Instruction 15658
    //ADD
    t16_5.xyz = t16_5.xyz + vs_TEXCOORD6.xyz;
    //Instruction 15659
    //MUL
    t16_0.xyz = t16_0.xyz * t16_5.xyz;
    //Instruction 15660
    //MAD
    t16_0.xyz = t16_3.xyz * vec3(t16_18) + t16_0.xyz;
    //Instruction 15661
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 15662
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 15663
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_9.xy = tmpvar_2.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].x;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].y;
  tmpvar_11 = clamp (((
    fract(((tmpvar_12 + tmpvar_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_11;
  highp vec3 tmpvar_14;
  tmpvar_14.xy = _glesMultiTexCoord2.zw;
  tmpvar_14.z = _glesMultiTexCoord1.w;
  tmpvar_10 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  FinalPosition_18 = tmpvar_1.xyz;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_18 = tmpvar_22;
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_23;
    vPos_23 = tmpvar_22;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_24;
      vPos_24 = tmpvar_22;
      highp float fTime_25;
      highp float fAdherenceScale_26;
      highp vec3 vWindVector_27;
      vWindVector_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_25 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_28;
      highp float fOscillation_29;
      fOscillation_29 = 1.0;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.x = (fTime_25 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((fTime_25 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_25 + _glesMultiTexCoord0.w));
      tmpvar_32.w = ((fTime_25 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_28 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_28.y * vOscillations_28.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      fOscillation_29 = (((
        mix (mix (tmpvar_34, fTarget_31, fAmount_30), fTarget_31, fAmount_30)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_28.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_29 = (fOscillation_29 * (1.0 + (vOscillations_28.w * _ST_WindBranchWhip.x)));
      vPos_24 = (tmpvar_22 + ((vWindVector_27 * fOscillation_29) * _ST_WindBranch.y));
      highp vec4 tmpvar_35;
      tmpvar_35.zw = vec2(0.0, 0.0);
      tmpvar_35.x = ((fTime_25 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_35.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_36;
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      tmpvar_36 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      fAdherenceScale_26 = (1.0 - ((tmpvar_36.x * tmpvar_36.y) * (
        (tmpvar_36.x * tmpvar_36.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_26 = (fAdherenceScale_26 + ((vOscillations_28.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_24 = (vPos_24 + ((
        ((vRotatedBranchAnchor_16 - vPos_24) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_26) * _glesMultiTexCoord0.z));
      vPos_23 = vPos_24;
    } else {
      highp vec3 vPos_38;
      vPos_38 = vPos_23;
      highp float fTime_39;
      highp vec3 vWindVector_40;
      vWindVector_40 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_39 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_41;
      highp float fOscillation_42;
      fOscillation_42 = 1.0;
      highp float fAmount_43;
      highp float fTarget_44;
      highp vec4 tmpvar_45;
      tmpvar_45.w = 0.0;
      tmpvar_45.x = (fTime_39 + _glesMultiTexCoord0.w);
      tmpvar_45.y = ((fTime_39 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_45.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_39 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      vOscillations_41 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = (vOscillations_41.y * vOscillations_41.z);
      fTarget_44 = 1.0;
      fAmount_43 = tmpvar_47;
      if ((tmpvar_47 < 0.0)) {
        fTarget_44 = -1.0;
        fAmount_43 = -(tmpvar_47);
      };
      fOscillation_42 = (((
        mix (mix (tmpvar_47, fTarget_44, fAmount_43), fTarget_44, fAmount_43)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_41.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_38 = (vPos_23 + ((vWindVector_40 * fOscillation_42) * _ST_WindBranch.y));
      vPos_23 = vPos_38;
    };
    FinalPosition_18 = vPos_23;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_48;
    vPos_48 = FinalPosition_18;
    highp float fMoveAmount_49;
    highp float fAdjust_50;
    highp float fLength_51;
    fLength_51 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_52;
    tmpvar_52 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_50 = tmpvar_52;
    if ((tmpvar_52 != 0.0)) {
      fAdjust_50 = pow (tmpvar_52, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_53;
    tmpvar_53.zw = vec2(0.0, 0.0);
    tmpvar_53.x = (tmpvar_12 + _ST_WindGlobal.x);
    tmpvar_53.y = (tmpvar_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_54;
    highp vec4 tmpvar_55;
    tmpvar_55 = abs(((
      fract((tmpvar_53 + 0.5))
     * 2.0) - 1.0));
    tmpvar_54 = (((
      (tmpvar_55 * tmpvar_55)
     * 
      (3.0 - (2.0 * tmpvar_55))
    ) - 0.5) * 2.0);
    fMoveAmount_49 = ((_ST_WindGlobal.y * (tmpvar_54.x + 
      (tmpvar_54.y * tmpvar_54.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_49 = (fMoveAmount_49 * fAdjust_50);
    vPos_48.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * fMoveAmount_49));
    vPos_48 = (normalize(vPos_48) * fLength_51);
    FinalPosition_18 = vPos_48;
  };
  tmpvar_15.xyz = FinalPosition_18;
  tmpvar_6 = tmpvar_8;
  highp vec3 tmpvar_56;
  tmpvar_56 = (_Object2World * tmpvar_15).xyz;
  highp vec4 v_57;
  v_57.x = _World2Object[0].x;
  v_57.y = _World2Object[1].x;
  v_57.z = _World2Object[2].x;
  v_57.w = _World2Object[3].x;
  highp vec4 v_58;
  v_58.x = _World2Object[0].y;
  v_58.y = _World2Object[1].y;
  v_58.z = _World2Object[2].y;
  v_58.w = _World2Object[3].y;
  highp vec4 v_59;
  v_59.x = _World2Object[0].z;
  v_59.y = _World2Object[1].z;
  v_59.z = _World2Object[2].z;
  v_59.w = _World2Object[3].z;
  highp vec3 tmpvar_60;
  tmpvar_60 = normalize(((
    (v_57.xyz * _glesNormal.x)
   + 
    (v_58.xyz * _glesNormal.y)
  ) + (v_59.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_60;
  highp mat3 tmpvar_61;
  tmpvar_61[0] = _Object2World[0].xyz;
  tmpvar_61[1] = _Object2World[1].xyz;
  tmpvar_61[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize((tmpvar_61 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_62;
  lowp vec3 tmpvar_63;
  tmpvar_63 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_64;
  tmpvar_64 = (tmpvar_63 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_64;
  highp vec4 tmpvar_65;
  tmpvar_65.x = worldTangent_4.x;
  tmpvar_65.y = worldBinormal_3.x;
  tmpvar_65.z = worldNormal_5.x;
  tmpvar_65.w = tmpvar_56.x;
  highp vec4 tmpvar_66;
  tmpvar_66.x = worldTangent_4.y;
  tmpvar_66.y = worldBinormal_3.y;
  tmpvar_66.z = worldNormal_5.y;
  tmpvar_66.w = tmpvar_56.y;
  highp vec4 tmpvar_67;
  tmpvar_67.x = worldTangent_4.z;
  tmpvar_67.y = worldBinormal_3.z;
  tmpvar_67.z = worldNormal_5.z;
  tmpvar_67.w = tmpvar_56.z;
  lowp vec4 tmpvar_68;
  tmpvar_68.w = 1.0;
  tmpvar_68.xyz = worldNormal_5;
  mediump vec4 normal_69;
  normal_69 = tmpvar_68;
  mediump vec3 x2_70;
  mediump vec4 tmpvar_71;
  tmpvar_71 = (normal_69.xyzz * normal_69.yzzx);
  x2_70.x = dot (unity_SHBr, tmpvar_71);
  x2_70.y = dot (unity_SHBg, tmpvar_71);
  x2_70.z = dot (unity_SHBb, tmpvar_71);
  tmpvar_7 = (unity_World2Shadow[0] * (_Object2World * tmpvar_15));
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_65;
  xlv_TEXCOORD1 = tmpvar_66;
  xlv_TEXCOORD2 = tmpvar_67;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_10;
  xlv_TEXCOORD6 = (x2_70 + (unity_SHC.xyz * (
    (normal_69.x * normal_69.x)
   - 
    (normal_69.y * normal_69.y)
  )));
  xlv_TEXCOORD7 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 blendColor_12;
  mediump vec4 diffuseColor_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_13 = tmpvar_14;
  tmpvar_10 = (diffuseColor_13.w * _Color.w);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  blendColor_12 = tmpvar_15;
  diffuseColor_13.xyz = mix (blendColor_12.xyz, diffuseColor_13.xyz, vec3(clamp (xlv_TEXCOORD5.z, 0.0, 1.0)));
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_13.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_11 = (max (diffuseColor_13.x, max (diffuseColor_13.y, diffuseColor_13.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_13.xyz = clamp ((tmpvar_16 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_13.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7).x > 
    (xlv_TEXCOORD7.z / xlv_TEXCOORD7.w)
  )), _LightShadowData.x);
  tmpvar_18 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD0.xyz, tmpvar_17);
  worldN_4.x = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (xlv_TEXCOORD1.xyz, tmpvar_17);
  worldN_4.y = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (xlv_TEXCOORD2.xyz, tmpvar_17);
  worldN_4.z = tmpvar_22;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_18;
  mediump vec3 normalWorld_23;
  normalWorld_23 = worldN_4;
  mediump vec3 tmpvar_24;
  mediump vec3 tmpvar_25;
  mediump vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = normalWorld_23;
  mediump vec3 x1_27;
  x1_27.x = dot (unity_SHAr, tmpvar_26);
  x1_27.y = dot (unity_SHAg, tmpvar_26);
  x1_27.z = dot (unity_SHAb, tmpvar_26);
  tmpvar_25 = (xlv_TEXCOORD6 + x1_27);
  tmpvar_24 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_24;
  lowp vec4 c_28;
  lowp vec4 c_29;
  lowp float diff_30;
  mediump float tmpvar_31;
  tmpvar_31 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_30 = tmpvar_31;
  c_29.xyz = ((tmpvar_9 * tmpvar_24) * diff_30);
  c_29.w = tmpvar_10;
  c_28.w = c_29.w;
  c_28.xyz = (c_29.xyz + (tmpvar_9 * tmpvar_25));
  c_5.xyz = c_28.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_9.xy = tmpvar_2.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].x;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].y;
  tmpvar_11 = clamp (((
    fract(((tmpvar_12 + tmpvar_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_11;
  highp vec3 tmpvar_14;
  tmpvar_14.xy = _glesMultiTexCoord2.zw;
  tmpvar_14.z = _glesMultiTexCoord1.w;
  tmpvar_10 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  FinalPosition_18 = tmpvar_1.xyz;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_18 = tmpvar_22;
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_23;
    vPos_23 = tmpvar_22;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_24;
      vPos_24 = tmpvar_22;
      highp float fTime_25;
      highp float fAdherenceScale_26;
      highp vec3 vWindVector_27;
      vWindVector_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_25 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_28;
      highp float fOscillation_29;
      fOscillation_29 = 1.0;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.x = (fTime_25 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((fTime_25 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_25 + _glesMultiTexCoord0.w));
      tmpvar_32.w = ((fTime_25 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_28 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_28.y * vOscillations_28.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      fOscillation_29 = (((
        mix (mix (tmpvar_34, fTarget_31, fAmount_30), fTarget_31, fAmount_30)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_28.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_29 = (fOscillation_29 * (1.0 + (vOscillations_28.w * _ST_WindBranchWhip.x)));
      vPos_24 = (tmpvar_22 + ((vWindVector_27 * fOscillation_29) * _ST_WindBranch.y));
      highp vec4 tmpvar_35;
      tmpvar_35.zw = vec2(0.0, 0.0);
      tmpvar_35.x = ((fTime_25 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_35.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_36;
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      tmpvar_36 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      fAdherenceScale_26 = (1.0 - ((tmpvar_36.x * tmpvar_36.y) * (
        (tmpvar_36.x * tmpvar_36.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_26 = (fAdherenceScale_26 + ((vOscillations_28.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_24 = (vPos_24 + ((
        ((vRotatedBranchAnchor_16 - vPos_24) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_26) * _glesMultiTexCoord0.z));
      vPos_23 = vPos_24;
    } else {
      highp vec3 vPos_38;
      vPos_38 = vPos_23;
      highp float fTime_39;
      highp vec3 vWindVector_40;
      vWindVector_40 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_39 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_41;
      highp float fOscillation_42;
      fOscillation_42 = 1.0;
      highp float fAmount_43;
      highp float fTarget_44;
      highp vec4 tmpvar_45;
      tmpvar_45.w = 0.0;
      tmpvar_45.x = (fTime_39 + _glesMultiTexCoord0.w);
      tmpvar_45.y = ((fTime_39 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_45.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_39 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      vOscillations_41 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = (vOscillations_41.y * vOscillations_41.z);
      fTarget_44 = 1.0;
      fAmount_43 = tmpvar_47;
      if ((tmpvar_47 < 0.0)) {
        fTarget_44 = -1.0;
        fAmount_43 = -(tmpvar_47);
      };
      fOscillation_42 = (((
        mix (mix (tmpvar_47, fTarget_44, fAmount_43), fTarget_44, fAmount_43)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_41.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_38 = (vPos_23 + ((vWindVector_40 * fOscillation_42) * _ST_WindBranch.y));
      vPos_23 = vPos_38;
    };
    FinalPosition_18 = vPos_23;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_48;
    vPos_48 = FinalPosition_18;
    highp float fMoveAmount_49;
    highp float fAdjust_50;
    highp float fLength_51;
    fLength_51 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_52;
    tmpvar_52 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_50 = tmpvar_52;
    if ((tmpvar_52 != 0.0)) {
      fAdjust_50 = pow (tmpvar_52, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_53;
    tmpvar_53.zw = vec2(0.0, 0.0);
    tmpvar_53.x = (tmpvar_12 + _ST_WindGlobal.x);
    tmpvar_53.y = (tmpvar_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_54;
    highp vec4 tmpvar_55;
    tmpvar_55 = abs(((
      fract((tmpvar_53 + 0.5))
     * 2.0) - 1.0));
    tmpvar_54 = (((
      (tmpvar_55 * tmpvar_55)
     * 
      (3.0 - (2.0 * tmpvar_55))
    ) - 0.5) * 2.0);
    fMoveAmount_49 = ((_ST_WindGlobal.y * (tmpvar_54.x + 
      (tmpvar_54.y * tmpvar_54.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_49 = (fMoveAmount_49 * fAdjust_50);
    vPos_48.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * fMoveAmount_49));
    vPos_48 = (normalize(vPos_48) * fLength_51);
    FinalPosition_18 = vPos_48;
  };
  tmpvar_15.xyz = FinalPosition_18;
  tmpvar_6 = tmpvar_8;
  highp vec3 tmpvar_56;
  tmpvar_56 = (_Object2World * tmpvar_15).xyz;
  highp vec4 v_57;
  v_57.x = _World2Object[0].x;
  v_57.y = _World2Object[1].x;
  v_57.z = _World2Object[2].x;
  v_57.w = _World2Object[3].x;
  highp vec4 v_58;
  v_58.x = _World2Object[0].y;
  v_58.y = _World2Object[1].y;
  v_58.z = _World2Object[2].y;
  v_58.w = _World2Object[3].y;
  highp vec4 v_59;
  v_59.x = _World2Object[0].z;
  v_59.y = _World2Object[1].z;
  v_59.z = _World2Object[2].z;
  v_59.w = _World2Object[3].z;
  highp vec3 tmpvar_60;
  tmpvar_60 = normalize(((
    (v_57.xyz * _glesNormal.x)
   + 
    (v_58.xyz * _glesNormal.y)
  ) + (v_59.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_60;
  highp mat3 tmpvar_61;
  tmpvar_61[0] = _Object2World[0].xyz;
  tmpvar_61[1] = _Object2World[1].xyz;
  tmpvar_61[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize((tmpvar_61 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_62;
  lowp vec3 tmpvar_63;
  tmpvar_63 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_64;
  tmpvar_64 = (tmpvar_63 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_64;
  highp vec4 tmpvar_65;
  tmpvar_65.x = worldTangent_4.x;
  tmpvar_65.y = worldBinormal_3.x;
  tmpvar_65.z = worldNormal_5.x;
  tmpvar_65.w = tmpvar_56.x;
  highp vec4 tmpvar_66;
  tmpvar_66.x = worldTangent_4.y;
  tmpvar_66.y = worldBinormal_3.y;
  tmpvar_66.z = worldNormal_5.y;
  tmpvar_66.w = tmpvar_56.y;
  highp vec4 tmpvar_67;
  tmpvar_67.x = worldTangent_4.z;
  tmpvar_67.y = worldBinormal_3.z;
  tmpvar_67.z = worldNormal_5.z;
  tmpvar_67.w = tmpvar_56.z;
  lowp vec4 tmpvar_68;
  tmpvar_68.w = 1.0;
  tmpvar_68.xyz = worldNormal_5;
  mediump vec4 normal_69;
  normal_69 = tmpvar_68;
  mediump vec3 x2_70;
  mediump vec4 tmpvar_71;
  tmpvar_71 = (normal_69.xyzz * normal_69.yzzx);
  x2_70.x = dot (unity_SHBr, tmpvar_71);
  x2_70.y = dot (unity_SHBg, tmpvar_71);
  x2_70.z = dot (unity_SHBb, tmpvar_71);
  highp vec3 lightColor0_72;
  lightColor0_72 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_73;
  lightColor1_73 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_74;
  lightColor2_74 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_75;
  lightColor3_75 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_76;
  lightAttenSq_76 = unity_4LightAtten0;
  highp vec3 normal_77;
  normal_77 = worldNormal_5;
  highp vec3 col_78;
  highp vec4 ndotl_79;
  highp vec4 lengthSq_80;
  highp vec4 tmpvar_81;
  tmpvar_81 = (unity_4LightPosX0 - tmpvar_56.x);
  highp vec4 tmpvar_82;
  tmpvar_82 = (unity_4LightPosY0 - tmpvar_56.y);
  highp vec4 tmpvar_83;
  tmpvar_83 = (unity_4LightPosZ0 - tmpvar_56.z);
  lengthSq_80 = (tmpvar_81 * tmpvar_81);
  lengthSq_80 = (lengthSq_80 + (tmpvar_82 * tmpvar_82));
  lengthSq_80 = (lengthSq_80 + (tmpvar_83 * tmpvar_83));
  ndotl_79 = (tmpvar_81 * normal_77.x);
  ndotl_79 = (ndotl_79 + (tmpvar_82 * normal_77.y));
  ndotl_79 = (ndotl_79 + (tmpvar_83 * normal_77.z));
  highp vec4 tmpvar_84;
  tmpvar_84 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_79 * inversesqrt(lengthSq_80)));
  ndotl_79 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = (tmpvar_84 * (1.0/((1.0 + 
    (lengthSq_80 * lightAttenSq_76)
  ))));
  col_78 = (lightColor0_72 * tmpvar_85.x);
  col_78 = (col_78 + (lightColor1_73 * tmpvar_85.y));
  col_78 = (col_78 + (lightColor2_74 * tmpvar_85.z));
  col_78 = (col_78 + (lightColor3_75 * tmpvar_85.w));
  tmpvar_7 = ((x2_70 + (unity_SHC.xyz * 
    ((normal_69.x * normal_69.x) - (normal_69.y * normal_69.y))
  )) + col_78);
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_65;
  xlv_TEXCOORD1 = tmpvar_66;
  xlv_TEXCOORD2 = tmpvar_67;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_10;
  xlv_TEXCOORD6 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 blendColor_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_9 = (diffuseColor_12.w * _Color.w);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  blendColor_11 = tmpvar_14;
  diffuseColor_12.xyz = mix (blendColor_11.xyz, diffuseColor_12.xyz, vec3(clamp (xlv_TEXCOORD5.z, 0.0, 1.0)));
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_10 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_15.x, max (tmpvar_15.y, tmpvar_15.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_15 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_12.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_16;
  tmpvar_16 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD0.xyz, tmpvar_16);
  worldN_3.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD1.xyz, tmpvar_16);
  worldN_3.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD2.xyz, tmpvar_16);
  worldN_3.z = tmpvar_19;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_20;
  normalWorld_20 = worldN_3;
  mediump vec3 tmpvar_21;
  mediump vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = normalWorld_20;
  mediump vec3 x1_23;
  x1_23.x = dot (unity_SHAr, tmpvar_22);
  x1_23.y = dot (unity_SHAg, tmpvar_22);
  x1_23.z = dot (unity_SHAb, tmpvar_22);
  tmpvar_21 = (xlv_TEXCOORD6 + x1_23);
  lowp vec4 c_24;
  lowp vec4 c_25;
  lowp float diff_26;
  mediump float tmpvar_27;
  tmpvar_27 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_26 = tmpvar_27;
  c_25.xyz = ((tmpvar_8 * tmpvar_1) * diff_26);
  c_25.w = tmpvar_9;
  c_24.w = c_25.w;
  c_24.xyz = (c_25.xyz + (tmpvar_8 * tmpvar_21));
  c_4.xyz = c_24.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
highp vec3 t4;
highp vec4 t5;
mediump vec4 t16_5;
highp vec4 t6;
highp vec4 t7;
lowp vec3 t10_7;
mediump vec3 t16_8;
highp vec4 t9;
highp vec2 t10;
bool tb10;
highp vec2 t20;
highp vec2 t24;
highp vec2 t26;
highp float t30;
highp float t31;
bool tb31;
highp float t33;
bool tb33;
highp float t34;
highp float t35;
mediump float t16_38;
void main()
{
    //Instruction 15905
    //MUL
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 15906
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 15907
    //ADD
    t10.x = t0.x + _Object2World[3].z;
    //Instruction 15908
    //ADD
    t20.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 15909
    //ADD
    t10.y = t20.x + in_NORMAL0.x;
    //Instruction 15910
    //FRC
    t10.xy = fract(t10.xy);
    //Instruction 15911
    //MAD
    t10.x = t10.y * 0.500000 + t10.x;
    //Instruction 15912
    //ADD
    t10.x = t10.x + -0.300000;
    //Instruction 15913
    //MUL
    t1.z = t10.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 15914
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 15915
    //LT
    tb10 = 0.0<t16_2;
    //Instruction 15916
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 15917
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 15918
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 15919
    //DP3
    t20.x = dot(t3.xyz, t3.xyz);
    //Instruction 15920
    //RSQ
    t20.x = inversesqrt(t20.x);
    //Instruction 15921
    //MUL
    t20.xy = t20.xx * t3.xz;
    //Instruction 15922
    //AND
    t20.xy = mix(vec2(0.0, 0.0), t20.xy, bvec2(tb10));
    //Instruction 15923
    //ADD
    t3.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 15924
    //MAD
    t3.xyz = unity_LODFade.xxx * t3.xyz + in_POSITION0.xyz;
    //Instruction 15925
    //GE
    tb31 = t16_2>=3.000000;
    //Instruction 15926
    //IF
    if(tb31){
        //Instruction 15927
        //EQ
        tb31 = t16_2==5.000000;
        //Instruction 15928
        //IF
        if(tb31){
            //Instruction 15929
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 15930
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 15931
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 15932
            //DP3
            t31 = dot(t4.xyz, t4.xyz);
            //Instruction 15933
            //RSQ
            t31 = inversesqrt(t31);
            //Instruction 15934
            //MUL
            t4.xyz = vec3(t31) * t4.xyz;
            //Instruction 15935
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 15936
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 15937
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 15938
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 15939
            //ADD
            t31 = t0.x + _ST_WindBranch.x;
            //Instruction 15940
            //ADD
            t2.x = t31 + in_TEXCOORD0.w;
            //Instruction 15941
            //MAD
            t2.y = t31 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 15942
            //MUL
            t33 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 15943
            //MUL
            t2.z = t33 * 0.500000;
            //Instruction 15944
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 15945
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 15946
            //FRC
            t2 = fract(t2);
            //Instruction 15947
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 15948
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 15949
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 15950
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 15951
            //ADD
            t2 = t2 + t2;
            //Instruction 15952
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 15953
            //LT
            tb33 = t6.w<0.0;
            //Instruction 15954
            //MOV
            t6.y = (-t6.w);
            //Instruction 15955
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 15956
            //MOVC
            t6.xy = (bool(tb33)) ? t6.xy : t6.zw;
            //Instruction 15957
            //MAD
            t33 = (-t2.y) * t2.z + t6.x;
            //Instruction 15958
            //MAD
            t33 = t6.y * t33 + t6.w;
            //Instruction 15959
            //ADD
            t34 = (-t33) + t6.x;
            //Instruction 15960
            //MAD
            t33 = t6.y * t34 + t33;
            //Instruction 15961
            //MUL
            t33 = t33 * _ST_WindBranchTwitch.x;
            //Instruction 15962
            //ADD
            t34 = (-_ST_WindVector.w) + 1.0;
            //Instruction 15963
            //ADD
            t35 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 15964
            //MUL
            t35 = t2.x * t35;
            //Instruction 15965
            //MAD
            t33 = t33 * t34 + t35;
            //Instruction 15966
            //MAD
            t34 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 15967
            //MUL
            t33 = t33 * t34;
            //Instruction 15968
            //MUL
            t5.xyz = vec3(t33) * t5.xyz;
            //Instruction 15969
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 15970
            //MAD
            t6.x = t31 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 15971
            //MUL
            t31 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 15972
            //MAD
            t6.y = t31 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 15973
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 15974
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 15975
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 15976
            //MUL
            t26.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 15977
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 15978
            //MAD
            t6.xy = t26.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 15979
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 15980
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 15981
            //MUL
            t31 = t6.x * t6.y;
            //Instruction 15982
            //MAD
            t31 = (-t31) * _ST_WindTurbulences.x + 1.0;
            //Instruction 15983
            //MUL
            t33 = t2.w * _ST_WindVector.w;
            //Instruction 15984
            //MAD
            t31 = t33 * _ST_WindBranchWhip.x + t31;
            //Instruction 15985
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 15986
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 15987
            //MUL
            t4.xyz = vec3(t31) * t4.xyz;
            //Instruction 15988
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 15989
        //ELSE
        } else {
            //Instruction 15990
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 15991
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 15992
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 15993
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 15994
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 15995
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 15996
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 15997
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 15998
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 15999
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 16000
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 16001
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 16002
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 16003
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 16004
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 16005
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 16006
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 16007
            //LT
            tb0 = t2.w<0.0;
            //Instruction 16008
            //MOV
            t2.y = (-t2.w);
            //Instruction 16009
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 16010
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 16011
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 16012
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 16013
            //ADD
            t31 = (-t0.x) + t6.x;
            //Instruction 16014
            //MAD
            t0.x = t6.y * t31 + t0.x;
            //Instruction 16015
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 16016
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 16017
            //ADD
            t33 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 16018
            //MUL
            t33 = t33 * t5.x;
            //Instruction 16019
            //MAD
            t0.x = t0.x * t31 + t33;
            //Instruction 16020
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 16021
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 16022
        //ENDIF
        }
        //Instruction 16023
    //ENDIF
    }
    //Instruction 16024
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 16025
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 16026
    //DIV
    t31 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 16027
    //MAD
    t31 = (-t31) * 0.250000 + t3.y;
    //Instruction 16028
    //MAX
    t31 = max(t31, 0.0);
    //Instruction 16029
    //MUL
    t31 = t31 * _ST_WindGlobal.z;
    //Instruction 16030
    //NE
    tb33 = t31!=0.0;
    //Instruction 16031
    //LOG
    t4.x = log2(t31);
    //Instruction 16032
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 16033
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 16034
    //MOVC
    t31 = (tb33) ? t4.x : t31;
    //Instruction 16035
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 16036
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 16037
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 16038
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 16039
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 16040
    //MUL
    t24.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 16041
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 16042
    //MAD
    t4.xy = t24.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 16043
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 16044
    //MAD
    t33 = t4.y * t4.y + t4.x;
    //Instruction 16045
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 16046
    //MAD
    t33 = _ST_WindGlobal.y * t33 + t4.x;
    //Instruction 16047
    //MUL
    t31 = t31 * t33;
    //Instruction 16048
    //MAD
    t4.xz = t20.xy * vec2(t31) + t3.xz;
    //Instruction 16049
    //MOV
    t4.y = t3.y;
    //Instruction 16050
    //DP3
    t20.x = dot(t4.xyz, t4.xyz);
    //Instruction 16051
    //RSQ
    t20.x = inversesqrt(t20.x);
    //Instruction 16052
    //MUL
    t4.xyz = t20.xxx * t4.xyz;
    //Instruction 16053
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 16054
    //MOVC
    t0.xyz = (bool(tb10)) ? t0.xzw : t3.xyz;
    //Instruction 16055
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 16056
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 16057
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 16058
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 16059
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 16060
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 16061
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 16062
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 16063
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 16064
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 16065
    //MOV
    t2.zw = _World2Object[2].xx;
    //Instruction 16066
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 16067
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 16068
    //MOV
    t3.zw = _World2Object[2].yy;
    //Instruction 16069
    //MUL
    t3 = t3 * in_NORMAL0.yyyy;
    //Instruction 16070
    //MAD
    t2 = t2 * in_NORMAL0.xxxx + t3;
    //Instruction 16071
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 16072
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 16073
    //MOV
    t3.zw = _World2Object[2].zz;
    //Instruction 16074
    //MAD
    t2 = t3 * in_NORMAL0.zzzz + t2;
    //Instruction 16075
    //DP3
    t30 = dot(t2.xyw, t2.xyw);
    //Instruction 16076
    //RSQ
    t30 = inversesqrt(t30);
    //Instruction 16077
    //MUL
    t2 = vec4(t30) * t2;
    //Instruction 16078
    //MUL
    t3.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 16079
    //MAD
    t3.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t3.xyz;
    //Instruction 16080
    //MAD
    t3.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t3.xyz;
    //Instruction 16081
    //DP3
    t30 = dot(t3.xyz, t3.xyz);
    //Instruction 16082
    //RSQ
    t30 = inversesqrt(t30);
    //Instruction 16083
    //MUL
    t3.xyz = vec3(t30) * t3.xyz;
    //Instruction 16084
    //MUL
    t10_7.xyz = t2.wxy * t3.xyz;
    //Instruction 16085
    //MAD
    t10_7.xyz = t2.ywx * t3.yzx + (-t10_7.xyz);
    //Instruction 16086
    //MUL
    t4.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 16087
    //MUL
    t16_5 = t2.ywzx * t2;
    //Instruction 16088
    //DP4
    t16_8.x = dot(unity_SHBr, t16_5);
    //Instruction 16089
    //DP4
    t16_8.y = dot(unity_SHBg, t16_5);
    //Instruction 16090
    //DP4
    t16_8.z = dot(unity_SHBb, t16_5);
    //Instruction 16091
    //MUL
    t16_38 = t2.y * t2.y;
    //Instruction 16092
    //MAD
    t16_38 = t2.x * t2.x + (-t16_38);
    //Instruction 16093
    //MAD
    t16_8.xyz = unity_SHC.xyz * vec3(t16_38) + t16_8.xyz;
    //Instruction 16094
    //ADD
    t5 = (-t0.xxxx) + unity_4LightPosX0;
    //Instruction 16095
    //ADD
    t6 = (-t0.yyyy) + unity_4LightPosY0;
    //Instruction 16096
    //ADD
    t7 = (-t0.zzzz) + unity_4LightPosZ0;
    //Instruction 16097
    //MUL
    t9 = t6 * t6;
    //Instruction 16098
    //MAD
    t9 = t5 * t5 + t9;
    //Instruction 16099
    //MAD
    t9 = t7 * t7 + t9;
    //Instruction 16100
    //MUL
    t6 = t2.yyyy * t6;
    //Instruction 16101
    //MAD
    t5 = t5 * t2.xxxx + t6;
    //Instruction 16102
    //MAD
    t5 = t7 * t2.wwww + t5;
    //Instruction 16103
    //RSQ
    t6 = inversesqrt(t9);
    //Instruction 16104
    //MUL
    t5 = t5 * t6;
    //Instruction 16105
    //MAX
    t5 = max(t5, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 16106
    //MAD
    t6 = t9 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 16107
    //DIV
    t6 = vec4(1.0, 1.0, 1.0, 1.0) / t6;
    //Instruction 16108
    //MUL
    t5 = t5 * t6;
    //Instruction 16109
    //MUL
    t6.xyz = t5.yyy * unity_LightColor[1].xyz;
    //Instruction 16110
    //MAD
    t6.xyz = unity_LightColor[0].xyz * t5.xxx + t6.xyz;
    //Instruction 16111
    //MAD
    t6.xyz = unity_LightColor[2].xyz * t5.zzz + t6.xyz;
    //Instruction 16112
    //MAD
    t6.xyz = unity_LightColor[3].xyz * t5.www + t6.xyz;
    //Instruction 16113
    //ADD
    t6.xyz = t6.xyz + t16_8.xyz;
    //Instruction 16114
    //MOV
    vs_TEXCOORD0.x = t3.z;
    //Instruction 16115
    //MOV
    vs_TEXCOORD0.y = t4.x;
    //Instruction 16116
    //MOV
    vs_TEXCOORD0.z = t2.x;
    //Instruction 16117
    //MOV
    vs_TEXCOORD0.w = t0.x;
    //Instruction 16118
    //MOV
    vs_TEXCOORD1.x = t3.x;
    //Instruction 16119
    //MOV
    vs_TEXCOORD1.y = t4.y;
    //Instruction 16120
    //MOV
    vs_TEXCOORD1.z = t2.y;
    //Instruction 16121
    //MOV
    vs_TEXCOORD1.w = t0.y;
    //Instruction 16122
    //MOV
    vs_TEXCOORD2.x = t3.y;
    //Instruction 16123
    //MOV
    vs_TEXCOORD2.y = t4.z;
    //Instruction 16124
    //MOV
    vs_TEXCOORD2.z = t2.w;
    //Instruction 16125
    //MOV
    vs_TEXCOORD2.w = t0.z;
    //Instruction 16126
    //MOV
    vs_TEXCOORD3.w = _Color.w;
    //Instruction 16127
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 16128
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 16129
    //MOV
    t0.xy = in_TEXCOORD2.zw;
    //Instruction 16130
    //MOV
    t0.z = in_TEXCOORD1.w;
    //Instruction 16131
    //MOV
    vs_TEXCOORD5.xyz = t0.xyz;
    //Instruction 16132
    //MOV
    vs_TEXCOORD6.xyz = t6.xyz;
    //Instruction 16133
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec4 t1;
mediump float t16_1;
lowp vec3 t10_1;
lowp vec3 t10_2;
mediump vec3 t16_3;
lowp vec3 t10_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump float t16_18;
void main()
{
    //Instruction 15872
    //MOV
    t16_0.x = vs_TEXCOORD5.z;
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 15873
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 15874
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD5.xy).xyz;
    //Instruction 15875
    //ADD
    t16_6.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 15876
    //MAD
    t16_0.xyz = t16_0.xxx * t16_6.xyz + t10_2.xyz;
    //Instruction 15877
    //MAX
    t16_18 = max(t16_0.z, t16_0.y);
    //Instruction 15878
    //MAX
    t16_18 = max(t16_18, t16_0.x);
    //Instruction 15879
    //ADD
    t16_3.xyz = (-t16_0.xyz) + _HueVariation.xyz;
    //Instruction 15880
    //MAD
    t16_0.xyz = vs_TEXCOORD4.zzz * t16_3.xyz + t16_0.xyz;
    //Instruction 15881
    //MAX
    t16_3.x = max(t16_0.z, t16_0.y);
    //Instruction 15882
    //MAX
    t16_3.x = max(t16_0.x, t16_3.x);
    //Instruction 15883
    //DIV
    t16_18 = t16_18 / t16_3.x;
    //Instruction 15884
    //MAD
    t16_1 = t16_18 * 0.500000 + 0.500000;
    //Instruction 15885
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_1);
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 15886
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD3.xyz;
    //Instruction 15887
    //MUL
    t16_3.xyz = t16_0.xyz * _LightColor0.xyz;
    //Instruction 15888
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 15889
    //MAD
    t10_4.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 15890
    //DP3
    t1.x = dot(vs_TEXCOORD0.xyz, t10_4.xyz);
    //Instruction 15891
    //DP3
    t1.y = dot(vs_TEXCOORD1.xyz, t10_4.xyz);
    //Instruction 15892
    //DP3
    t1.z = dot(vs_TEXCOORD2.xyz, t10_4.xyz);
    //Instruction 15893
    //MOV
    t1.w = 1.0;
    //Instruction 15894
    //DP4
    t16_5.x = dot(unity_SHAr, t1);
    //Instruction 15895
    //DP4
    t16_5.y = dot(unity_SHAg, t1);
    //Instruction 15896
    //DP4
    t16_5.z = dot(unity_SHAb, t1);
    //Instruction 15897
    //DP3
    t16_18 = dot(t1.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 15898
    //MAX
    t16_18 = max(t16_18, 0.0);
    //Instruction 15899
    //ADD
    t16_5.xyz = t16_5.xyz + vs_TEXCOORD6.xyz;
    //Instruction 15900
    //MUL
    t16_0.xyz = t16_0.xyz * t16_5.xyz;
    //Instruction 15901
    //MAD
    t16_0.xyz = t16_3.xyz * vec3(t16_18) + t16_0.xyz;
    //Instruction 15902
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 15903
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 15904
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec4 tmpvar_8;
  lowp vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  mediump vec3 tmpvar_11;
  tmpvar_10.xy = tmpvar_2.xy;
  tmpvar_9.w = _Color.w;
  tmpvar_9.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].x;
  highp float tmpvar_14;
  tmpvar_14 = _Object2World[3].y;
  tmpvar_12 = clamp (((
    fract(((tmpvar_13 + tmpvar_14) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_10.z = tmpvar_12;
  highp vec3 tmpvar_15;
  tmpvar_15.xy = _glesMultiTexCoord2.zw;
  tmpvar_15.z = _glesMultiTexCoord1.w;
  tmpvar_11 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  FinalPosition_19 = tmpvar_1.xyz;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_19 = tmpvar_23;
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_24;
    vPos_24 = tmpvar_23;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_25;
      vPos_25 = tmpvar_23;
      highp float fTime_26;
      highp float fAdherenceScale_27;
      highp vec3 vWindVector_28;
      vWindVector_28 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_26 = (_ST_WindBranch.x + (tmpvar_13 + tmpvar_14));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.x = (fTime_26 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((fTime_26 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_26 + _glesMultiTexCoord0.w));
      tmpvar_33.w = ((fTime_26 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_29.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_30 = (fOscillation_30 * (1.0 + (vOscillations_29.w * _ST_WindBranchWhip.x)));
      vPos_25 = (tmpvar_23 + ((vWindVector_28 * fOscillation_30) * _ST_WindBranch.y));
      highp vec4 tmpvar_36;
      tmpvar_36.zw = vec2(0.0, 0.0);
      tmpvar_36.x = ((fTime_26 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_36.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_37;
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      tmpvar_37 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      fAdherenceScale_27 = (1.0 - ((tmpvar_37.x * tmpvar_37.y) * (
        (tmpvar_37.x * tmpvar_37.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_27 = (fAdherenceScale_27 + ((vOscillations_29.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_25 = (vPos_25 + ((
        ((vRotatedBranchAnchor_17 - vPos_25) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_27) * _glesMultiTexCoord0.z));
      vPos_24 = vPos_25;
    } else {
      highp vec3 vPos_39;
      vPos_39 = vPos_24;
      highp float fTime_40;
      highp vec3 vWindVector_41;
      vWindVector_41 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_40 = (_ST_WindBranch.x + (tmpvar_13 + tmpvar_14));
      highp vec4 vOscillations_42;
      highp float fOscillation_43;
      fOscillation_43 = 1.0;
      highp float fAmount_44;
      highp float fTarget_45;
      highp vec4 tmpvar_46;
      tmpvar_46.w = 0.0;
      tmpvar_46.x = (fTime_40 + _glesMultiTexCoord0.w);
      tmpvar_46.y = ((fTime_40 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_46.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_40 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      vOscillations_42 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = (vOscillations_42.y * vOscillations_42.z);
      fTarget_45 = 1.0;
      fAmount_44 = tmpvar_48;
      if ((tmpvar_48 < 0.0)) {
        fTarget_45 = -1.0;
        fAmount_44 = -(tmpvar_48);
      };
      fOscillation_43 = (((
        mix (mix (tmpvar_48, fTarget_45, fAmount_44), fTarget_45, fAmount_44)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_42.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_39 = (vPos_24 + ((vWindVector_41 * fOscillation_43) * _ST_WindBranch.y));
      vPos_24 = vPos_39;
    };
    FinalPosition_19 = vPos_24;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_49;
    vPos_49 = FinalPosition_19;
    highp float fMoveAmount_50;
    highp float fAdjust_51;
    highp float fLength_52;
    fLength_52 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_53;
    tmpvar_53 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_51 = tmpvar_53;
    if ((tmpvar_53 != 0.0)) {
      fAdjust_51 = pow (tmpvar_53, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_54;
    tmpvar_54.zw = vec2(0.0, 0.0);
    tmpvar_54.x = (tmpvar_13 + _ST_WindGlobal.x);
    tmpvar_54.y = (tmpvar_14 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_55;
    highp vec4 tmpvar_56;
    tmpvar_56 = abs(((
      fract((tmpvar_54 + 0.5))
     * 2.0) - 1.0));
    tmpvar_55 = (((
      (tmpvar_56 * tmpvar_56)
     * 
      (3.0 - (2.0 * tmpvar_56))
    ) - 0.5) * 2.0);
    fMoveAmount_50 = ((_ST_WindGlobal.y * (tmpvar_55.x + 
      (tmpvar_55.y * tmpvar_55.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_50 = (fMoveAmount_50 * fAdjust_51);
    vPos_49.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * fMoveAmount_50));
    vPos_49 = (normalize(vPos_49) * fLength_52);
    FinalPosition_19 = vPos_49;
  };
  tmpvar_16.xyz = FinalPosition_19;
  tmpvar_6 = tmpvar_9;
  highp vec3 tmpvar_57;
  tmpvar_57 = (_Object2World * tmpvar_16).xyz;
  highp vec4 v_58;
  v_58.x = _World2Object[0].x;
  v_58.y = _World2Object[1].x;
  v_58.z = _World2Object[2].x;
  v_58.w = _World2Object[3].x;
  highp vec4 v_59;
  v_59.x = _World2Object[0].y;
  v_59.y = _World2Object[1].y;
  v_59.z = _World2Object[2].y;
  v_59.w = _World2Object[3].y;
  highp vec4 v_60;
  v_60.x = _World2Object[0].z;
  v_60.y = _World2Object[1].z;
  v_60.z = _World2Object[2].z;
  v_60.w = _World2Object[3].z;
  highp vec3 tmpvar_61;
  tmpvar_61 = normalize(((
    (v_58.xyz * _glesNormal.x)
   + 
    (v_59.xyz * _glesNormal.y)
  ) + (v_60.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_61;
  highp mat3 tmpvar_62;
  tmpvar_62[0] = _Object2World[0].xyz;
  tmpvar_62[1] = _Object2World[1].xyz;
  tmpvar_62[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((tmpvar_62 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_63;
  lowp vec3 tmpvar_64;
  tmpvar_64 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_65;
  tmpvar_65 = (tmpvar_64 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_65;
  highp vec4 tmpvar_66;
  tmpvar_66.x = worldTangent_4.x;
  tmpvar_66.y = worldBinormal_3.x;
  tmpvar_66.z = worldNormal_5.x;
  tmpvar_66.w = tmpvar_57.x;
  highp vec4 tmpvar_67;
  tmpvar_67.x = worldTangent_4.y;
  tmpvar_67.y = worldBinormal_3.y;
  tmpvar_67.z = worldNormal_5.y;
  tmpvar_67.w = tmpvar_57.y;
  highp vec4 tmpvar_68;
  tmpvar_68.x = worldTangent_4.z;
  tmpvar_68.y = worldBinormal_3.z;
  tmpvar_68.z = worldNormal_5.z;
  tmpvar_68.w = tmpvar_57.z;
  lowp vec4 tmpvar_69;
  tmpvar_69.w = 1.0;
  tmpvar_69.xyz = worldNormal_5;
  mediump vec4 normal_70;
  normal_70 = tmpvar_69;
  mediump vec3 x2_71;
  mediump vec4 tmpvar_72;
  tmpvar_72 = (normal_70.xyzz * normal_70.yzzx);
  x2_71.x = dot (unity_SHBr, tmpvar_72);
  x2_71.y = dot (unity_SHBg, tmpvar_72);
  x2_71.z = dot (unity_SHBb, tmpvar_72);
  highp vec3 lightColor0_73;
  lightColor0_73 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_74;
  lightColor1_74 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_75;
  lightColor2_75 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_76;
  lightColor3_76 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_77;
  lightAttenSq_77 = unity_4LightAtten0;
  highp vec3 normal_78;
  normal_78 = worldNormal_5;
  highp vec3 col_79;
  highp vec4 ndotl_80;
  highp vec4 lengthSq_81;
  highp vec4 tmpvar_82;
  tmpvar_82 = (unity_4LightPosX0 - tmpvar_57.x);
  highp vec4 tmpvar_83;
  tmpvar_83 = (unity_4LightPosY0 - tmpvar_57.y);
  highp vec4 tmpvar_84;
  tmpvar_84 = (unity_4LightPosZ0 - tmpvar_57.z);
  lengthSq_81 = (tmpvar_82 * tmpvar_82);
  lengthSq_81 = (lengthSq_81 + (tmpvar_83 * tmpvar_83));
  lengthSq_81 = (lengthSq_81 + (tmpvar_84 * tmpvar_84));
  ndotl_80 = (tmpvar_82 * normal_78.x);
  ndotl_80 = (ndotl_80 + (tmpvar_83 * normal_78.y));
  ndotl_80 = (ndotl_80 + (tmpvar_84 * normal_78.z));
  highp vec4 tmpvar_85;
  tmpvar_85 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_80 * inversesqrt(lengthSq_81)));
  ndotl_80 = tmpvar_85;
  highp vec4 tmpvar_86;
  tmpvar_86 = (tmpvar_85 * (1.0/((1.0 + 
    (lengthSq_81 * lightAttenSq_77)
  ))));
  col_79 = (lightColor0_73 * tmpvar_86.x);
  col_79 = (col_79 + (lightColor1_74 * tmpvar_86.y));
  col_79 = (col_79 + (lightColor2_75 * tmpvar_86.z));
  col_79 = (col_79 + (lightColor3_76 * tmpvar_86.w));
  tmpvar_7 = ((x2_71 + (unity_SHC.xyz * 
    ((normal_70.x * normal_70.x) - (normal_70.y * normal_70.y))
  )) + col_79);
  tmpvar_8 = (unity_World2Shadow[0] * (_Object2World * tmpvar_16));
  gl_Position = (glstate_matrix_mvp * tmpvar_16);
  xlv_TEXCOORD0 = tmpvar_66;
  xlv_TEXCOORD1 = tmpvar_67;
  xlv_TEXCOORD2 = tmpvar_68;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD6 = tmpvar_7;
  xlv_TEXCOORD7 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 blendColor_12;
  mediump vec4 diffuseColor_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_13 = tmpvar_14;
  tmpvar_10 = (diffuseColor_13.w * _Color.w);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  blendColor_12 = tmpvar_15;
  diffuseColor_13.xyz = mix (blendColor_12.xyz, diffuseColor_13.xyz, vec3(clamp (xlv_TEXCOORD5.z, 0.0, 1.0)));
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_13.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_11 = (max (diffuseColor_13.x, max (diffuseColor_13.y, diffuseColor_13.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_13.xyz = clamp ((tmpvar_16 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_13.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7).x > 
    (xlv_TEXCOORD7.z / xlv_TEXCOORD7.w)
  )), _LightShadowData.x);
  tmpvar_18 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD0.xyz, tmpvar_17);
  worldN_4.x = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (xlv_TEXCOORD1.xyz, tmpvar_17);
  worldN_4.y = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (xlv_TEXCOORD2.xyz, tmpvar_17);
  worldN_4.z = tmpvar_22;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_18;
  mediump vec3 normalWorld_23;
  normalWorld_23 = worldN_4;
  mediump vec3 tmpvar_24;
  mediump vec3 tmpvar_25;
  mediump vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = normalWorld_23;
  mediump vec3 x1_27;
  x1_27.x = dot (unity_SHAr, tmpvar_26);
  x1_27.y = dot (unity_SHAg, tmpvar_26);
  x1_27.z = dot (unity_SHAb, tmpvar_26);
  tmpvar_25 = (xlv_TEXCOORD6 + x1_27);
  tmpvar_24 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_24;
  lowp vec4 c_28;
  lowp vec4 c_29;
  lowp float diff_30;
  mediump float tmpvar_31;
  tmpvar_31 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_30 = tmpvar_31;
  c_29.xyz = ((tmpvar_9 * tmpvar_24) * diff_30);
  c_29.w = tmpvar_10;
  c_28.w = c_29.w;
  c_28.xyz = (c_29.xyz + (tmpvar_9 * tmpvar_25));
  c_5.xyz = c_28.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_9.xy = tmpvar_2.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].x;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].y;
  tmpvar_11 = clamp (((
    fract(((tmpvar_12 + tmpvar_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_11;
  highp vec3 tmpvar_14;
  tmpvar_14.xy = _glesMultiTexCoord2.zw;
  tmpvar_14.z = _glesMultiTexCoord1.w;
  tmpvar_10 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  FinalPosition_18 = tmpvar_1.xyz;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_18 = tmpvar_22;
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_23;
    vPos_23 = tmpvar_22;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_24;
      vPos_24 = tmpvar_22;
      highp float fTime_25;
      highp float fAdherenceScale_26;
      highp vec3 vWindVector_27;
      vWindVector_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_25 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_28;
      highp float fOscillation_29;
      fOscillation_29 = 1.0;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.x = (fTime_25 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((fTime_25 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_25 + _glesMultiTexCoord0.w));
      tmpvar_32.w = ((fTime_25 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_28 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_28.y * vOscillations_28.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      fOscillation_29 = (((
        mix (mix (tmpvar_34, fTarget_31, fAmount_30), fTarget_31, fAmount_30)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_28.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_29 = (fOscillation_29 * (1.0 + (vOscillations_28.w * _ST_WindBranchWhip.x)));
      vPos_24 = (tmpvar_22 + ((vWindVector_27 * fOscillation_29) * _ST_WindBranch.y));
      highp vec4 tmpvar_35;
      tmpvar_35.zw = vec2(0.0, 0.0);
      tmpvar_35.x = ((fTime_25 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_35.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_36;
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      tmpvar_36 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      fAdherenceScale_26 = (1.0 - ((tmpvar_36.x * tmpvar_36.y) * (
        (tmpvar_36.x * tmpvar_36.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_26 = (fAdherenceScale_26 + ((vOscillations_28.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_24 = (vPos_24 + ((
        ((vRotatedBranchAnchor_16 - vPos_24) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_26) * _glesMultiTexCoord0.z));
      vPos_23 = vPos_24;
    } else {
      highp vec3 vPos_38;
      vPos_38 = vPos_23;
      highp float fTime_39;
      highp vec3 vWindVector_40;
      vWindVector_40 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_39 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_41;
      highp float fOscillation_42;
      fOscillation_42 = 1.0;
      highp float fAmount_43;
      highp float fTarget_44;
      highp vec4 tmpvar_45;
      tmpvar_45.w = 0.0;
      tmpvar_45.x = (fTime_39 + _glesMultiTexCoord0.w);
      tmpvar_45.y = ((fTime_39 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_45.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_39 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      vOscillations_41 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = (vOscillations_41.y * vOscillations_41.z);
      fTarget_44 = 1.0;
      fAmount_43 = tmpvar_47;
      if ((tmpvar_47 < 0.0)) {
        fTarget_44 = -1.0;
        fAmount_43 = -(tmpvar_47);
      };
      fOscillation_42 = (((
        mix (mix (tmpvar_47, fTarget_44, fAmount_43), fTarget_44, fAmount_43)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_41.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_38 = (vPos_23 + ((vWindVector_40 * fOscillation_42) * _ST_WindBranch.y));
      vPos_23 = vPos_38;
    };
    FinalPosition_18 = vPos_23;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_48;
    vPos_48 = FinalPosition_18;
    highp float fMoveAmount_49;
    highp float fAdjust_50;
    highp float fLength_51;
    fLength_51 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_52;
    tmpvar_52 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_50 = tmpvar_52;
    if ((tmpvar_52 != 0.0)) {
      fAdjust_50 = pow (tmpvar_52, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_53;
    tmpvar_53.zw = vec2(0.0, 0.0);
    tmpvar_53.x = (tmpvar_12 + _ST_WindGlobal.x);
    tmpvar_53.y = (tmpvar_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_54;
    highp vec4 tmpvar_55;
    tmpvar_55 = abs(((
      fract((tmpvar_53 + 0.5))
     * 2.0) - 1.0));
    tmpvar_54 = (((
      (tmpvar_55 * tmpvar_55)
     * 
      (3.0 - (2.0 * tmpvar_55))
    ) - 0.5) * 2.0);
    fMoveAmount_49 = ((_ST_WindGlobal.y * (tmpvar_54.x + 
      (tmpvar_54.y * tmpvar_54.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_49 = (fMoveAmount_49 * fAdjust_50);
    vPos_48.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * fMoveAmount_49));
    vPos_48 = (normalize(vPos_48) * fLength_51);
    FinalPosition_18 = vPos_48;
  };
  tmpvar_15.xyz = FinalPosition_18;
  tmpvar_6 = tmpvar_8;
  highp vec3 tmpvar_56;
  tmpvar_56 = (_Object2World * tmpvar_15).xyz;
  highp vec4 v_57;
  v_57.x = _World2Object[0].x;
  v_57.y = _World2Object[1].x;
  v_57.z = _World2Object[2].x;
  v_57.w = _World2Object[3].x;
  highp vec4 v_58;
  v_58.x = _World2Object[0].y;
  v_58.y = _World2Object[1].y;
  v_58.z = _World2Object[2].y;
  v_58.w = _World2Object[3].y;
  highp vec4 v_59;
  v_59.x = _World2Object[0].z;
  v_59.y = _World2Object[1].z;
  v_59.z = _World2Object[2].z;
  v_59.w = _World2Object[3].z;
  highp vec3 tmpvar_60;
  tmpvar_60 = normalize(((
    (v_57.xyz * _glesNormal.x)
   + 
    (v_58.xyz * _glesNormal.y)
  ) + (v_59.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_60;
  highp mat3 tmpvar_61;
  tmpvar_61[0] = _Object2World[0].xyz;
  tmpvar_61[1] = _Object2World[1].xyz;
  tmpvar_61[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize((tmpvar_61 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_62;
  lowp vec3 tmpvar_63;
  tmpvar_63 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_64;
  tmpvar_64 = (tmpvar_63 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_64;
  highp vec4 tmpvar_65;
  tmpvar_65.x = worldTangent_4.x;
  tmpvar_65.y = worldBinormal_3.x;
  tmpvar_65.z = worldNormal_5.x;
  tmpvar_65.w = tmpvar_56.x;
  highp vec4 tmpvar_66;
  tmpvar_66.x = worldTangent_4.y;
  tmpvar_66.y = worldBinormal_3.y;
  tmpvar_66.z = worldNormal_5.y;
  tmpvar_66.w = tmpvar_56.y;
  highp vec4 tmpvar_67;
  tmpvar_67.x = worldTangent_4.z;
  tmpvar_67.y = worldBinormal_3.z;
  tmpvar_67.z = worldNormal_5.z;
  tmpvar_67.w = tmpvar_56.z;
  lowp vec4 tmpvar_68;
  tmpvar_68.w = 1.0;
  tmpvar_68.xyz = worldNormal_5;
  mediump vec4 normal_69;
  normal_69 = tmpvar_68;
  mediump vec3 x2_70;
  mediump vec4 tmpvar_71;
  tmpvar_71 = (normal_69.xyzz * normal_69.yzzx);
  x2_70.x = dot (unity_SHBr, tmpvar_71);
  x2_70.y = dot (unity_SHBg, tmpvar_71);
  x2_70.z = dot (unity_SHBb, tmpvar_71);
  tmpvar_7 = (unity_World2Shadow[0] * (_Object2World * tmpvar_15));
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_65;
  xlv_TEXCOORD1 = tmpvar_66;
  xlv_TEXCOORD2 = tmpvar_67;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_10;
  xlv_TEXCOORD6 = (x2_70 + (unity_SHC.xyz * (
    (normal_69.x * normal_69.x)
   - 
    (normal_69.y * normal_69.y)
  )));
  xlv_TEXCOORD7 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 blendColor_12;
  mediump vec4 diffuseColor_13;
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_13 = tmpvar_14;
  tmpvar_10 = (diffuseColor_13.w * _Color.w);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  blendColor_12 = tmpvar_15;
  diffuseColor_13.xyz = mix (blendColor_12.xyz, diffuseColor_13.xyz, vec3(clamp (xlv_TEXCOORD5.z, 0.0, 1.0)));
  mediump vec3 tmpvar_16;
  tmpvar_16 = mix (diffuseColor_13.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_11 = (max (diffuseColor_13.x, max (diffuseColor_13.y, diffuseColor_13.z)) / max (tmpvar_16.x, max (tmpvar_16.y, tmpvar_16.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_13.xyz = clamp ((tmpvar_16 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_13.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float shadow_18;
  shadow_18 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD7.xyz) * (1.0 - _LightShadowData.x)));
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD0.xyz, tmpvar_17);
  worldN_4.x = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD1.xyz, tmpvar_17);
  worldN_4.y = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (xlv_TEXCOORD2.xyz, tmpvar_17);
  worldN_4.z = tmpvar_21;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_18;
  mediump vec3 normalWorld_22;
  normalWorld_22 = worldN_4;
  mediump vec3 tmpvar_23;
  mediump vec3 tmpvar_24;
  mediump vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = normalWorld_22;
  mediump vec3 x1_26;
  x1_26.x = dot (unity_SHAr, tmpvar_25);
  x1_26.y = dot (unity_SHAg, tmpvar_25);
  x1_26.z = dot (unity_SHAb, tmpvar_25);
  tmpvar_24 = (xlv_TEXCOORD6 + x1_26);
  tmpvar_23 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_23;
  lowp vec4 c_27;
  lowp vec4 c_28;
  lowp float diff_29;
  mediump float tmpvar_30;
  tmpvar_30 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_29 = tmpvar_30;
  c_28.xyz = ((tmpvar_9 * tmpvar_23) * diff_29);
  c_28.w = tmpvar_10;
  c_27.w = c_28.w;
  c_27.xyz = (c_28.xyz + (tmpvar_9 * tmpvar_24));
  c_5.xyz = c_27.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec4 vs_TEXCOORD7;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec4 t4;
highp vec3 t5;
highp vec4 t6;
mediump vec4 t16_6;
lowp vec3 t10_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp vec2 t18;
highp vec2 t22;
highp vec2 t24;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
highp float t32;
mediump float t16_35;
void main()
{
    //Instruction 16171
    //MUL
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 16172
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 16173
    //ADD
    t9.x = t0.x + _Object2World[3].z;
    //Instruction 16174
    //ADD
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 16175
    //ADD
    t9.y = t18.x + in_NORMAL0.x;
    //Instruction 16176
    //FRC
    t9.xy = fract(t9.xy);
    //Instruction 16177
    //MAD
    t9.x = t9.y * 0.500000 + t9.x;
    //Instruction 16178
    //ADD
    t9.x = t9.x + -0.300000;
    //Instruction 16179
    //MUL
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 16180
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 16181
    //LT
    tb9 = 0.0<t16_2;
    //Instruction 16182
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 16183
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 16184
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 16185
    //DP3
    t18.x = dot(t3.xyz, t3.xyz);
    //Instruction 16186
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 16187
    //MUL
    t18.xy = t18.xx * t3.xz;
    //Instruction 16188
    //AND
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, bvec2(tb9));
    //Instruction 16189
    //ADD
    t3.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 16190
    //MAD
    t3.xyz = unity_LODFade.xxx * t3.xyz + in_POSITION0.xyz;
    //Instruction 16191
    //GE
    tb28 = t16_2>=3.000000;
    //Instruction 16192
    //IF
    if(tb28){
        //Instruction 16193
        //EQ
        tb28 = t16_2==5.000000;
        //Instruction 16194
        //IF
        if(tb28){
            //Instruction 16195
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 16196
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 16197
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 16198
            //DP3
            t28 = dot(t4.xyz, t4.xyz);
            //Instruction 16199
            //RSQ
            t28 = inversesqrt(t28);
            //Instruction 16200
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 16201
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 16202
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 16203
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 16204
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 16205
            //ADD
            t28 = t0.x + _ST_WindBranch.x;
            //Instruction 16206
            //ADD
            t2.x = t28 + in_TEXCOORD0.w;
            //Instruction 16207
            //MAD
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 16208
            //MUL
            t30 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 16209
            //MUL
            t2.z = t30 * 0.500000;
            //Instruction 16210
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 16211
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 16212
            //FRC
            t2 = fract(t2);
            //Instruction 16213
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 16214
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 16215
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 16216
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 16217
            //ADD
            t2 = t2 + t2;
            //Instruction 16218
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 16219
            //LT
            tb30 = t6.w<0.0;
            //Instruction 16220
            //MOV
            t6.y = (-t6.w);
            //Instruction 16221
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 16222
            //MOVC
            t6.xy = (bool(tb30)) ? t6.xy : t6.zw;
            //Instruction 16223
            //MAD
            t30 = (-t2.y) * t2.z + t6.x;
            //Instruction 16224
            //MAD
            t30 = t6.y * t30 + t6.w;
            //Instruction 16225
            //ADD
            t31 = (-t30) + t6.x;
            //Instruction 16226
            //MAD
            t30 = t6.y * t31 + t30;
            //Instruction 16227
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 16228
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 16229
            //ADD
            t32 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 16230
            //MUL
            t32 = t2.x * t32;
            //Instruction 16231
            //MAD
            t30 = t30 * t31 + t32;
            //Instruction 16232
            //MAD
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 16233
            //MUL
            t30 = t30 * t31;
            //Instruction 16234
            //MUL
            t5.xyz = vec3(t30) * t5.xyz;
            //Instruction 16235
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 16236
            //MAD
            t6.x = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 16237
            //MUL
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 16238
            //MAD
            t6.y = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 16239
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 16240
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 16241
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 16242
            //MUL
            t24.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 16243
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 16244
            //MAD
            t6.xy = t24.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 16245
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 16246
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 16247
            //MUL
            t28 = t6.x * t6.y;
            //Instruction 16248
            //MAD
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            //Instruction 16249
            //MUL
            t30 = t2.w * _ST_WindVector.w;
            //Instruction 16250
            //MAD
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            //Instruction 16251
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 16252
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 16253
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 16254
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 16255
        //ELSE
        } else {
            //Instruction 16256
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 16257
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 16258
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 16259
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 16260
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 16261
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 16262
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 16263
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 16264
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 16265
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 16266
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 16267
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 16268
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 16269
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 16270
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 16271
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 16272
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 16273
            //LT
            tb0 = t2.w<0.0;
            //Instruction 16274
            //MOV
            t2.y = (-t2.w);
            //Instruction 16275
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 16276
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 16277
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 16278
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 16279
            //ADD
            t28 = (-t0.x) + t6.x;
            //Instruction 16280
            //MAD
            t0.x = t6.y * t28 + t0.x;
            //Instruction 16281
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 16282
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 16283
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 16284
            //MUL
            t30 = t30 * t5.x;
            //Instruction 16285
            //MAD
            t0.x = t0.x * t28 + t30;
            //Instruction 16286
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 16287
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 16288
        //ENDIF
        }
        //Instruction 16289
    //ENDIF
    }
    //Instruction 16290
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 16291
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 16292
    //DIV
    t28 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 16293
    //MAD
    t28 = (-t28) * 0.250000 + t3.y;
    //Instruction 16294
    //MAX
    t28 = max(t28, 0.0);
    //Instruction 16295
    //MUL
    t28 = t28 * _ST_WindGlobal.z;
    //Instruction 16296
    //NE
    tb30 = t28!=0.0;
    //Instruction 16297
    //LOG
    t4.x = log2(t28);
    //Instruction 16298
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 16299
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 16300
    //MOVC
    t28 = (tb30) ? t4.x : t28;
    //Instruction 16301
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 16302
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 16303
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 16304
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 16305
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 16306
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 16307
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 16308
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 16309
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 16310
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 16311
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 16312
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 16313
    //MUL
    t28 = t28 * t30;
    //Instruction 16314
    //MAD
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    //Instruction 16315
    //MOV
    t4.y = t3.y;
    //Instruction 16316
    //DP3
    t18.x = dot(t4.xyz, t4.xyz);
    //Instruction 16317
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 16318
    //MUL
    t4.xyz = t18.xxx * t4.xyz;
    //Instruction 16319
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 16320
    //MOVC
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    //Instruction 16321
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 16322
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 16323
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 16324
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 16325
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 16326
    //MAD
    t3.xyz = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 16327
    //MAD
    t3.xyz = _Object2World[2].xyz * t0.zzz + t3.xyz;
    //Instruction 16328
    //MAD
    t3.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xyz;
    //Instruction 16329
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 16330
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 16331
    //MOV
    t2.zw = _World2Object[2].xx;
    //Instruction 16332
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 16333
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 16334
    //MOV
    t4.zw = _World2Object[2].yy;
    //Instruction 16335
    //MUL
    t4 = t4 * in_NORMAL0.yyyy;
    //Instruction 16336
    //MAD
    t2 = t2 * in_NORMAL0.xxxx + t4;
    //Instruction 16337
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 16338
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 16339
    //MOV
    t4.zw = _World2Object[2].zz;
    //Instruction 16340
    //MAD
    t2 = t4 * in_NORMAL0.zzzz + t2;
    //Instruction 16341
    //DP3
    t27 = dot(t2.xyw, t2.xyw);
    //Instruction 16342
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 16343
    //MUL
    t2 = vec4(t27) * t2;
    //Instruction 16344
    //MUL
    t4.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 16345
    //MAD
    t4.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t4.xyz;
    //Instruction 16346
    //MAD
    t4.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t4.xy